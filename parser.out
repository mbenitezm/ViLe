Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> main functionloop
Rule 2     main -> MAIN block
Rule 3     functionloop -> function functionloop
Rule 4     functionloop -> <empty>
Rule 5     function -> FUNCTION functiontype ID O_PARENTHESIS parameters C_PARENTHESIS block
Rule 6     functiontype -> VOID
Rule 7     functiontype -> type
Rule 8     type -> BOOL
Rule 9     type -> INT
Rule 10    type -> FLOAT
Rule 11    type -> STRING
Rule 12    block -> O_BRACKET statutesloop functionreturn C_BRACKET
Rule 13    functionreturn -> RETURN expression SEMICOLON
Rule 14    functionreturn -> <empty>
Rule 15    statutesloop -> statute statutesloop
Rule 16    statutesloop -> <empty>
Rule 17    statute -> init
Rule 18    statute -> condition
Rule 19    statute -> writting
Rule 20    statute -> loop
Rule 21    statute -> assignation
Rule 22    statute -> functioncall
Rule 23    assignation -> var EQUALS expression SEMICOLON
Rule 24    writting -> PRINT O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON
Rule 25    writtingloop -> expression optionalwritting
Rule 26    optionalwritting -> COMMA writtingloop
Rule 27    optionalwritting -> <empty>
Rule 28    init -> listinit
Rule 29    init -> normalinit
Rule 30    normalinit -> type var EQUALS expression SEMICOLON
Rule 31    listinit -> LIST type var EQUALS list SEMICOLON
Rule 32    list -> O_S_BRACKET listelements C_S_BRACKET
Rule 33    listelements -> constants optionalconstants
Rule 34    listelements -> <empty>
Rule 35    optionalconstants -> COMMA constants optionalconstants
Rule 36    optionalconstants -> <empty>
Rule 37    condition -> IF O_PARENTHESIS expression C_PARENTHESIS block else
Rule 38    else -> ELSE block
Rule 39    else -> <empty>
Rule 40    expression -> expression2 expressionoptional
Rule 41    expressionoptional -> logicop expression2
Rule 42    expressionoptional -> <empty>
Rule 43    expression2 -> exp expression2optional
Rule 44    expression2optional -> relop exp
Rule 45    expression2optional -> <empty>
Rule 46    logicop -> AND
Rule 47    logicop -> OR
Rule 48    relop -> EQUALITY
Rule 49    relop -> GREATER
Rule 50    relop -> GREATER_EQUAL
Rule 51    relop -> LESS
Rule 52    relop -> LESS_EQUAL
Rule 53    relop -> DIFFERENT
Rule 54    exp -> term exploop
Rule 55    exploop -> addsub exp
Rule 56    exploop -> <empty>
Rule 57    addsub -> SUM
Rule 58    addsub -> MINUS
Rule 59    term -> fact termloop
Rule 60    termloop -> divmult term
Rule 61    termloop -> <empty>
Rule 62    divmult -> MULTIPLY
Rule 63    divmult -> DIVIDE
Rule 64    divmult -> MOD
Rule 65    fact -> varconst
Rule 66    fact -> O_PARENTHESIS expression C_PARENTHESIS
Rule 67    var -> ID listaccess
Rule 68    listaccess -> O_S_BRACKET INTCONST C_S_BRACKET
Rule 69    listaccess -> <empty>
Rule 70    varconst -> varconstfunction
Rule 71    varconst -> constants
Rule 72    varconstfunction -> ID functionorlist
Rule 73    functionorlist -> O_S_BRACKET INTCONST C_S_BRACKET
Rule 74    functionorlist -> O_PARENTHESIS parametersinput C_PARENTHESIS
Rule 75    functionorlist -> <empty>
Rule 76    constants -> INTCONST
Rule 77    constants -> FLOATCONST
Rule 78    constants -> STRINGCONST
Rule 79    constants -> booleanconst
Rule 80    booleanconst -> TRUE
Rule 81    booleanconst -> FALSE
Rule 82    loop -> whileloop
Rule 83    loop -> timesloop
Rule 84    whileloop -> WHILE O_PARENTHESIS expression C_PARENTHESIS block
Rule 85    timesloop -> TIMES O_PARENTHESIS INTCONST C_PARENTHESIS block
Rule 86    functioncall -> ID O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON
Rule 87    parametersinput -> expression parametersinputloop
Rule 88    parametersinput -> <empty>
Rule 89    parametersinputloop -> COMMA expression parametersinputloop
Rule 90    parametersinputloop -> <empty>
Rule 91    parameters -> type ID parametersloop
Rule 92    parameters -> <empty>
Rule 93    parametersloop -> COMMA type ID parametersloop
Rule 94    parametersloop -> <empty>

Terminals, with rules where they appear

AND                  : 46
BOOL                 : 8
COMMA                : 26 35 89 93
C_BRACKET            : 12
C_PARENTHESIS        : 5 24 37 66 74 84 85 86
C_S_BRACKET          : 32 68 73
DIFFERENT            : 53
DIVIDE               : 63
ELSE                 : 38
EQUALITY             : 48
EQUALS               : 23 30 31
FALSE                : 81
FLOAT                : 10
FLOATCONST           : 77
FUNCTION             : 5
GREATER              : 49
GREATER_EQUAL        : 50
ID                   : 5 67 72 86 91 93
IF                   : 37
INT                  : 9
INTCONST             : 68 73 76 85
LESS                 : 51
LESS_EQUAL           : 52
LIST                 : 31
MAIN                 : 2
MINUS                : 58
MOD                  : 64
MULTIPLY             : 62
OR                   : 47
O_BRACKET            : 12
O_PARENTHESIS        : 5 24 37 66 74 84 85 86
O_S_BRACKET          : 32 68 73
PRINT                : 24
RETURN               : 13
SEMICOLON            : 13 23 24 30 31 86
STRING               : 11
STRINGCONST          : 78
SUM                  : 57
TIMES                : 85
TRUE                 : 80
VOID                 : 6
WHILE                : 84
error                : 

Nonterminals, with rules where they appear

addsub               : 55
assignation          : 21
block                : 2 5 37 38 84 85
booleanconst         : 79
condition            : 18
constants            : 33 35 71
divmult              : 60
else                 : 37
exp                  : 43 44 55
exploop              : 54
expression           : 13 23 25 30 37 66 84 87 89
expression2          : 40 41
expression2optional  : 43
expressionoptional   : 40
fact                 : 59
function             : 3
functioncall         : 22
functionloop         : 1 3
functionorlist       : 72
functionreturn       : 12
functiontype         : 5
init                 : 17
list                 : 31
listaccess           : 67
listelements         : 32
listinit             : 28
logicop              : 41
loop                 : 20
main                 : 1
normalinit           : 29
optionalconstants    : 33 35
optionalwritting     : 25
parameters           : 5
parametersinput      : 74 86
parametersinputloop  : 87 89
parametersloop       : 91 93
program              : 0
relop                : 44
statute              : 15
statutesloop         : 12 15
term                 : 54 60
termloop             : 59
timesloop            : 83
type                 : 7 30 31 91 93
var                  : 23 30 31
varconst             : 65
varconstfunction     : 70
whileloop            : 82
writting             : 19
writtingloop         : 24 26

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . main functionloop
    (2) main -> . MAIN block

    MAIN            shift and go to state 3

    main                           shift and go to state 1
    program                        shift and go to state 2

state 1

    (1) program -> main . functionloop
    (3) functionloop -> . function functionloop
    (4) functionloop -> .
    (5) function -> . FUNCTION functiontype ID O_PARENTHESIS parameters C_PARENTHESIS block

    $end            reduce using rule 4 (functionloop -> .)
    FUNCTION        shift and go to state 5

    function                       shift and go to state 4
    functionloop                   shift and go to state 6

state 2

    (0) S' -> program .



state 3

    (2) main -> MAIN . block
    (12) block -> . O_BRACKET statutesloop functionreturn C_BRACKET

    O_BRACKET       shift and go to state 7

    block                          shift and go to state 8

state 4

    (3) functionloop -> function . functionloop
    (3) functionloop -> . function functionloop
    (4) functionloop -> .
    (5) function -> . FUNCTION functiontype ID O_PARENTHESIS parameters C_PARENTHESIS block

    $end            reduce using rule 4 (functionloop -> .)
    FUNCTION        shift and go to state 5

    function                       shift and go to state 4
    functionloop                   shift and go to state 9

state 5

    (5) function -> FUNCTION . functiontype ID O_PARENTHESIS parameters C_PARENTHESIS block
    (6) functiontype -> . VOID
    (7) functiontype -> . type
    (8) type -> . BOOL
    (9) type -> . INT
    (10) type -> . FLOAT
    (11) type -> . STRING

    VOID            shift and go to state 13
    BOOL            shift and go to state 15
    INT             shift and go to state 11
    FLOAT           shift and go to state 14
    STRING          shift and go to state 10

    type                           shift and go to state 12
    functiontype                   shift and go to state 16

state 6

    (1) program -> main functionloop .

    $end            reduce using rule 1 (program -> main functionloop .)


state 7

    (12) block -> O_BRACKET . statutesloop functionreturn C_BRACKET
    (15) statutesloop -> . statute statutesloop
    (16) statutesloop -> .
    (17) statute -> . init
    (18) statute -> . condition
    (19) statute -> . writting
    (20) statute -> . loop
    (21) statute -> . assignation
    (22) statute -> . functioncall
    (28) init -> . listinit
    (29) init -> . normalinit
    (37) condition -> . IF O_PARENTHESIS expression C_PARENTHESIS block else
    (24) writting -> . PRINT O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON
    (82) loop -> . whileloop
    (83) loop -> . timesloop
    (23) assignation -> . var EQUALS expression SEMICOLON
    (86) functioncall -> . ID O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON
    (31) listinit -> . LIST type var EQUALS list SEMICOLON
    (30) normalinit -> . type var EQUALS expression SEMICOLON
    (84) whileloop -> . WHILE O_PARENTHESIS expression C_PARENTHESIS block
    (85) timesloop -> . TIMES O_PARENTHESIS INTCONST C_PARENTHESIS block
    (67) var -> . ID listaccess
    (8) type -> . BOOL
    (9) type -> . INT
    (10) type -> . FLOAT
    (11) type -> . STRING

    RETURN          reduce using rule 16 (statutesloop -> .)
    C_BRACKET       reduce using rule 16 (statutesloop -> .)
    IF              shift and go to state 30
    PRINT           shift and go to state 19
    ID              shift and go to state 28
    LIST            shift and go to state 34
    WHILE           shift and go to state 18
    TIMES           shift and go to state 17
    BOOL            shift and go to state 15
    INT             shift and go to state 11
    FLOAT           shift and go to state 14
    STRING          shift and go to state 10

    whileloop                      shift and go to state 20
    init                           shift and go to state 21
    var                            shift and go to state 22
    type                           shift and go to state 23
    normalinit                     shift and go to state 24
    listinit                       shift and go to state 25
    writting                       shift and go to state 26
    timesloop                      shift and go to state 27
    condition                      shift and go to state 29
    statute                        shift and go to state 31
    assignation                    shift and go to state 32
    statutesloop                   shift and go to state 33
    functioncall                   shift and go to state 35
    loop                           shift and go to state 36

state 8

    (2) main -> MAIN block .

    FUNCTION        reduce using rule 2 (main -> MAIN block .)
    $end            reduce using rule 2 (main -> MAIN block .)


state 9

    (3) functionloop -> function functionloop .

    $end            reduce using rule 3 (functionloop -> function functionloop .)


state 10

    (11) type -> STRING .

    ID              reduce using rule 11 (type -> STRING .)


state 11

    (9) type -> INT .

    ID              reduce using rule 9 (type -> INT .)


state 12

    (7) functiontype -> type .

    ID              reduce using rule 7 (functiontype -> type .)


state 13

    (6) functiontype -> VOID .

    ID              reduce using rule 6 (functiontype -> VOID .)


state 14

    (10) type -> FLOAT .

    ID              reduce using rule 10 (type -> FLOAT .)


state 15

    (8) type -> BOOL .

    ID              reduce using rule 8 (type -> BOOL .)


state 16

    (5) function -> FUNCTION functiontype . ID O_PARENTHESIS parameters C_PARENTHESIS block

    ID              shift and go to state 37


state 17

    (85) timesloop -> TIMES . O_PARENTHESIS INTCONST C_PARENTHESIS block

    O_PARENTHESIS   shift and go to state 38


state 18

    (84) whileloop -> WHILE . O_PARENTHESIS expression C_PARENTHESIS block

    O_PARENTHESIS   shift and go to state 39


state 19

    (24) writting -> PRINT . O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON

    O_PARENTHESIS   shift and go to state 40


state 20

    (82) loop -> whileloop .

    IF              reduce using rule 82 (loop -> whileloop .)
    PRINT           reduce using rule 82 (loop -> whileloop .)
    ID              reduce using rule 82 (loop -> whileloop .)
    LIST            reduce using rule 82 (loop -> whileloop .)
    WHILE           reduce using rule 82 (loop -> whileloop .)
    TIMES           reduce using rule 82 (loop -> whileloop .)
    BOOL            reduce using rule 82 (loop -> whileloop .)
    INT             reduce using rule 82 (loop -> whileloop .)
    FLOAT           reduce using rule 82 (loop -> whileloop .)
    STRING          reduce using rule 82 (loop -> whileloop .)
    RETURN          reduce using rule 82 (loop -> whileloop .)
    C_BRACKET       reduce using rule 82 (loop -> whileloop .)


state 21

    (17) statute -> init .

    IF              reduce using rule 17 (statute -> init .)
    PRINT           reduce using rule 17 (statute -> init .)
    ID              reduce using rule 17 (statute -> init .)
    LIST            reduce using rule 17 (statute -> init .)
    WHILE           reduce using rule 17 (statute -> init .)
    TIMES           reduce using rule 17 (statute -> init .)
    BOOL            reduce using rule 17 (statute -> init .)
    INT             reduce using rule 17 (statute -> init .)
    FLOAT           reduce using rule 17 (statute -> init .)
    STRING          reduce using rule 17 (statute -> init .)
    RETURN          reduce using rule 17 (statute -> init .)
    C_BRACKET       reduce using rule 17 (statute -> init .)


state 22

    (23) assignation -> var . EQUALS expression SEMICOLON

    EQUALS          shift and go to state 41


state 23

    (30) normalinit -> type . var EQUALS expression SEMICOLON
    (67) var -> . ID listaccess

    ID              shift and go to state 43

    var                            shift and go to state 42

state 24

    (29) init -> normalinit .

    IF              reduce using rule 29 (init -> normalinit .)
    PRINT           reduce using rule 29 (init -> normalinit .)
    ID              reduce using rule 29 (init -> normalinit .)
    LIST            reduce using rule 29 (init -> normalinit .)
    WHILE           reduce using rule 29 (init -> normalinit .)
    TIMES           reduce using rule 29 (init -> normalinit .)
    BOOL            reduce using rule 29 (init -> normalinit .)
    INT             reduce using rule 29 (init -> normalinit .)
    FLOAT           reduce using rule 29 (init -> normalinit .)
    STRING          reduce using rule 29 (init -> normalinit .)
    RETURN          reduce using rule 29 (init -> normalinit .)
    C_BRACKET       reduce using rule 29 (init -> normalinit .)


state 25

    (28) init -> listinit .

    IF              reduce using rule 28 (init -> listinit .)
    PRINT           reduce using rule 28 (init -> listinit .)
    ID              reduce using rule 28 (init -> listinit .)
    LIST            reduce using rule 28 (init -> listinit .)
    WHILE           reduce using rule 28 (init -> listinit .)
    TIMES           reduce using rule 28 (init -> listinit .)
    BOOL            reduce using rule 28 (init -> listinit .)
    INT             reduce using rule 28 (init -> listinit .)
    FLOAT           reduce using rule 28 (init -> listinit .)
    STRING          reduce using rule 28 (init -> listinit .)
    RETURN          reduce using rule 28 (init -> listinit .)
    C_BRACKET       reduce using rule 28 (init -> listinit .)


state 26

    (19) statute -> writting .

    IF              reduce using rule 19 (statute -> writting .)
    PRINT           reduce using rule 19 (statute -> writting .)
    ID              reduce using rule 19 (statute -> writting .)
    LIST            reduce using rule 19 (statute -> writting .)
    WHILE           reduce using rule 19 (statute -> writting .)
    TIMES           reduce using rule 19 (statute -> writting .)
    BOOL            reduce using rule 19 (statute -> writting .)
    INT             reduce using rule 19 (statute -> writting .)
    FLOAT           reduce using rule 19 (statute -> writting .)
    STRING          reduce using rule 19 (statute -> writting .)
    RETURN          reduce using rule 19 (statute -> writting .)
    C_BRACKET       reduce using rule 19 (statute -> writting .)


state 27

    (83) loop -> timesloop .

    IF              reduce using rule 83 (loop -> timesloop .)
    PRINT           reduce using rule 83 (loop -> timesloop .)
    ID              reduce using rule 83 (loop -> timesloop .)
    LIST            reduce using rule 83 (loop -> timesloop .)
    WHILE           reduce using rule 83 (loop -> timesloop .)
    TIMES           reduce using rule 83 (loop -> timesloop .)
    BOOL            reduce using rule 83 (loop -> timesloop .)
    INT             reduce using rule 83 (loop -> timesloop .)
    FLOAT           reduce using rule 83 (loop -> timesloop .)
    STRING          reduce using rule 83 (loop -> timesloop .)
    RETURN          reduce using rule 83 (loop -> timesloop .)
    C_BRACKET       reduce using rule 83 (loop -> timesloop .)


state 28

    (86) functioncall -> ID . O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON
    (67) var -> ID . listaccess
    (68) listaccess -> . O_S_BRACKET INTCONST C_S_BRACKET
    (69) listaccess -> .

    O_PARENTHESIS   shift and go to state 46
    O_S_BRACKET     shift and go to state 44
    EQUALS          reduce using rule 69 (listaccess -> .)

    listaccess                     shift and go to state 45

state 29

    (18) statute -> condition .

    IF              reduce using rule 18 (statute -> condition .)
    PRINT           reduce using rule 18 (statute -> condition .)
    ID              reduce using rule 18 (statute -> condition .)
    LIST            reduce using rule 18 (statute -> condition .)
    WHILE           reduce using rule 18 (statute -> condition .)
    TIMES           reduce using rule 18 (statute -> condition .)
    BOOL            reduce using rule 18 (statute -> condition .)
    INT             reduce using rule 18 (statute -> condition .)
    FLOAT           reduce using rule 18 (statute -> condition .)
    STRING          reduce using rule 18 (statute -> condition .)
    RETURN          reduce using rule 18 (statute -> condition .)
    C_BRACKET       reduce using rule 18 (statute -> condition .)


state 30

    (37) condition -> IF . O_PARENTHESIS expression C_PARENTHESIS block else

    O_PARENTHESIS   shift and go to state 47


state 31

    (15) statutesloop -> statute . statutesloop
    (15) statutesloop -> . statute statutesloop
    (16) statutesloop -> .
    (17) statute -> . init
    (18) statute -> . condition
    (19) statute -> . writting
    (20) statute -> . loop
    (21) statute -> . assignation
    (22) statute -> . functioncall
    (28) init -> . listinit
    (29) init -> . normalinit
    (37) condition -> . IF O_PARENTHESIS expression C_PARENTHESIS block else
    (24) writting -> . PRINT O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON
    (82) loop -> . whileloop
    (83) loop -> . timesloop
    (23) assignation -> . var EQUALS expression SEMICOLON
    (86) functioncall -> . ID O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON
    (31) listinit -> . LIST type var EQUALS list SEMICOLON
    (30) normalinit -> . type var EQUALS expression SEMICOLON
    (84) whileloop -> . WHILE O_PARENTHESIS expression C_PARENTHESIS block
    (85) timesloop -> . TIMES O_PARENTHESIS INTCONST C_PARENTHESIS block
    (67) var -> . ID listaccess
    (8) type -> . BOOL
    (9) type -> . INT
    (10) type -> . FLOAT
    (11) type -> . STRING

    RETURN          reduce using rule 16 (statutesloop -> .)
    C_BRACKET       reduce using rule 16 (statutesloop -> .)
    IF              shift and go to state 30
    PRINT           shift and go to state 19
    ID              shift and go to state 28
    LIST            shift and go to state 34
    WHILE           shift and go to state 18
    TIMES           shift and go to state 17
    BOOL            shift and go to state 15
    INT             shift and go to state 11
    FLOAT           shift and go to state 14
    STRING          shift and go to state 10

    whileloop                      shift and go to state 20
    statute                        shift and go to state 31
    assignation                    shift and go to state 32
    listinit                       shift and go to state 25
    statutesloop                   shift and go to state 48
    type                           shift and go to state 23
    timesloop                      shift and go to state 27
    writting                       shift and go to state 26
    init                           shift and go to state 21
    functioncall                   shift and go to state 35
    condition                      shift and go to state 29
    var                            shift and go to state 22
    loop                           shift and go to state 36
    normalinit                     shift and go to state 24

state 32

    (21) statute -> assignation .

    IF              reduce using rule 21 (statute -> assignation .)
    PRINT           reduce using rule 21 (statute -> assignation .)
    ID              reduce using rule 21 (statute -> assignation .)
    LIST            reduce using rule 21 (statute -> assignation .)
    WHILE           reduce using rule 21 (statute -> assignation .)
    TIMES           reduce using rule 21 (statute -> assignation .)
    BOOL            reduce using rule 21 (statute -> assignation .)
    INT             reduce using rule 21 (statute -> assignation .)
    FLOAT           reduce using rule 21 (statute -> assignation .)
    STRING          reduce using rule 21 (statute -> assignation .)
    RETURN          reduce using rule 21 (statute -> assignation .)
    C_BRACKET       reduce using rule 21 (statute -> assignation .)


state 33

    (12) block -> O_BRACKET statutesloop . functionreturn C_BRACKET
    (13) functionreturn -> . RETURN expression SEMICOLON
    (14) functionreturn -> .

    RETURN          shift and go to state 49
    C_BRACKET       reduce using rule 14 (functionreturn -> .)

    functionreturn                 shift and go to state 50

state 34

    (31) listinit -> LIST . type var EQUALS list SEMICOLON
    (8) type -> . BOOL
    (9) type -> . INT
    (10) type -> . FLOAT
    (11) type -> . STRING

    BOOL            shift and go to state 15
    INT             shift and go to state 11
    FLOAT           shift and go to state 14
    STRING          shift and go to state 10

    type                           shift and go to state 51

state 35

    (22) statute -> functioncall .

    IF              reduce using rule 22 (statute -> functioncall .)
    PRINT           reduce using rule 22 (statute -> functioncall .)
    ID              reduce using rule 22 (statute -> functioncall .)
    LIST            reduce using rule 22 (statute -> functioncall .)
    WHILE           reduce using rule 22 (statute -> functioncall .)
    TIMES           reduce using rule 22 (statute -> functioncall .)
    BOOL            reduce using rule 22 (statute -> functioncall .)
    INT             reduce using rule 22 (statute -> functioncall .)
    FLOAT           reduce using rule 22 (statute -> functioncall .)
    STRING          reduce using rule 22 (statute -> functioncall .)
    RETURN          reduce using rule 22 (statute -> functioncall .)
    C_BRACKET       reduce using rule 22 (statute -> functioncall .)


state 36

    (20) statute -> loop .

    IF              reduce using rule 20 (statute -> loop .)
    PRINT           reduce using rule 20 (statute -> loop .)
    ID              reduce using rule 20 (statute -> loop .)
    LIST            reduce using rule 20 (statute -> loop .)
    WHILE           reduce using rule 20 (statute -> loop .)
    TIMES           reduce using rule 20 (statute -> loop .)
    BOOL            reduce using rule 20 (statute -> loop .)
    INT             reduce using rule 20 (statute -> loop .)
    FLOAT           reduce using rule 20 (statute -> loop .)
    STRING          reduce using rule 20 (statute -> loop .)
    RETURN          reduce using rule 20 (statute -> loop .)
    C_BRACKET       reduce using rule 20 (statute -> loop .)


state 37

    (5) function -> FUNCTION functiontype ID . O_PARENTHESIS parameters C_PARENTHESIS block

    O_PARENTHESIS   shift and go to state 52


state 38

    (85) timesloop -> TIMES O_PARENTHESIS . INTCONST C_PARENTHESIS block

    INTCONST        shift and go to state 53


state 39

    (84) whileloop -> WHILE O_PARENTHESIS . expression C_PARENTHESIS block
    (40) expression -> . expression2 expressionoptional
    (43) expression2 -> . exp expression2optional
    (54) exp -> . term exploop
    (59) term -> . fact termloop
    (65) fact -> . varconst
    (66) fact -> . O_PARENTHESIS expression C_PARENTHESIS
    (70) varconst -> . varconstfunction
    (71) varconst -> . constants
    (72) varconstfunction -> . ID functionorlist
    (76) constants -> . INTCONST
    (77) constants -> . FLOATCONST
    (78) constants -> . STRINGCONST
    (79) constants -> . booleanconst
    (80) booleanconst -> . TRUE
    (81) booleanconst -> . FALSE

    O_PARENTHESIS   shift and go to state 55
    ID              shift and go to state 61
    INTCONST        shift and go to state 59
    FLOATCONST      shift and go to state 54
    STRINGCONST     shift and go to state 57
    TRUE            shift and go to state 56
    FALSE           shift and go to state 64

    term                           shift and go to state 63
    booleanconst                   shift and go to state 66
    varconst                       shift and go to state 65
    fact                           shift and go to state 69
    exp                            shift and go to state 67
    varconstfunction               shift and go to state 58
    constants                      shift and go to state 62
    expression2                    shift and go to state 60
    expression                     shift and go to state 68

state 40

    (24) writting -> PRINT O_PARENTHESIS . writtingloop C_PARENTHESIS SEMICOLON
    (25) writtingloop -> . expression optionalwritting
    (40) expression -> . expression2 expressionoptional
    (43) expression2 -> . exp expression2optional
    (54) exp -> . term exploop
    (59) term -> . fact termloop
    (65) fact -> . varconst
    (66) fact -> . O_PARENTHESIS expression C_PARENTHESIS
    (70) varconst -> . varconstfunction
    (71) varconst -> . constants
    (72) varconstfunction -> . ID functionorlist
    (76) constants -> . INTCONST
    (77) constants -> . FLOATCONST
    (78) constants -> . STRINGCONST
    (79) constants -> . booleanconst
    (80) booleanconst -> . TRUE
    (81) booleanconst -> . FALSE

    O_PARENTHESIS   shift and go to state 55
    ID              shift and go to state 61
    INTCONST        shift and go to state 59
    FLOATCONST      shift and go to state 54
    STRINGCONST     shift and go to state 57
    TRUE            shift and go to state 56
    FALSE           shift and go to state 64

    term                           shift and go to state 63
    booleanconst                   shift and go to state 66
    varconst                       shift and go to state 65
    constants                      shift and go to state 62
    exp                            shift and go to state 67
    varconstfunction               shift and go to state 58
    writtingloop                   shift and go to state 70
    expression2                    shift and go to state 60
    expression                     shift and go to state 71
    fact                           shift and go to state 69

state 41

    (23) assignation -> var EQUALS . expression SEMICOLON
    (40) expression -> . expression2 expressionoptional
    (43) expression2 -> . exp expression2optional
    (54) exp -> . term exploop
    (59) term -> . fact termloop
    (65) fact -> . varconst
    (66) fact -> . O_PARENTHESIS expression C_PARENTHESIS
    (70) varconst -> . varconstfunction
    (71) varconst -> . constants
    (72) varconstfunction -> . ID functionorlist
    (76) constants -> . INTCONST
    (77) constants -> . FLOATCONST
    (78) constants -> . STRINGCONST
    (79) constants -> . booleanconst
    (80) booleanconst -> . TRUE
    (81) booleanconst -> . FALSE

    O_PARENTHESIS   shift and go to state 55
    ID              shift and go to state 61
    INTCONST        shift and go to state 59
    FLOATCONST      shift and go to state 54
    STRINGCONST     shift and go to state 57
    TRUE            shift and go to state 56
    FALSE           shift and go to state 64

    term                           shift and go to state 63
    booleanconst                   shift and go to state 66
    varconstfunction               shift and go to state 58
    varconst                       shift and go to state 65
    constants                      shift and go to state 62
    exp                            shift and go to state 67
    expression2                    shift and go to state 60
    expression                     shift and go to state 72
    fact                           shift and go to state 69

state 42

    (30) normalinit -> type var . EQUALS expression SEMICOLON

    EQUALS          shift and go to state 73


state 43

    (67) var -> ID . listaccess
    (68) listaccess -> . O_S_BRACKET INTCONST C_S_BRACKET
    (69) listaccess -> .

    O_S_BRACKET     shift and go to state 44
    EQUALS          reduce using rule 69 (listaccess -> .)

    listaccess                     shift and go to state 45

state 44

    (68) listaccess -> O_S_BRACKET . INTCONST C_S_BRACKET

    INTCONST        shift and go to state 74


state 45

    (67) var -> ID listaccess .

    EQUALS          reduce using rule 67 (var -> ID listaccess .)


state 46

    (86) functioncall -> ID O_PARENTHESIS . parametersinput C_PARENTHESIS SEMICOLON
    (87) parametersinput -> . expression parametersinputloop
    (88) parametersinput -> .
    (40) expression -> . expression2 expressionoptional
    (43) expression2 -> . exp expression2optional
    (54) exp -> . term exploop
    (59) term -> . fact termloop
    (65) fact -> . varconst
    (66) fact -> . O_PARENTHESIS expression C_PARENTHESIS
    (70) varconst -> . varconstfunction
    (71) varconst -> . constants
    (72) varconstfunction -> . ID functionorlist
    (76) constants -> . INTCONST
    (77) constants -> . FLOATCONST
    (78) constants -> . STRINGCONST
    (79) constants -> . booleanconst
    (80) booleanconst -> . TRUE
    (81) booleanconst -> . FALSE

    C_PARENTHESIS   reduce using rule 88 (parametersinput -> .)
    O_PARENTHESIS   shift and go to state 55
    ID              shift and go to state 61
    INTCONST        shift and go to state 59
    FLOATCONST      shift and go to state 54
    STRINGCONST     shift and go to state 57
    TRUE            shift and go to state 56
    FALSE           shift and go to state 64

    term                           shift and go to state 63
    parametersinput                shift and go to state 75
    booleanconst                   shift and go to state 66
    varconst                       shift and go to state 65
    constants                      shift and go to state 62
    exp                            shift and go to state 67
    varconstfunction               shift and go to state 58
    expression2                    shift and go to state 60
    expression                     shift and go to state 76
    fact                           shift and go to state 69

state 47

    (37) condition -> IF O_PARENTHESIS . expression C_PARENTHESIS block else
    (40) expression -> . expression2 expressionoptional
    (43) expression2 -> . exp expression2optional
    (54) exp -> . term exploop
    (59) term -> . fact termloop
    (65) fact -> . varconst
    (66) fact -> . O_PARENTHESIS expression C_PARENTHESIS
    (70) varconst -> . varconstfunction
    (71) varconst -> . constants
    (72) varconstfunction -> . ID functionorlist
    (76) constants -> . INTCONST
    (77) constants -> . FLOATCONST
    (78) constants -> . STRINGCONST
    (79) constants -> . booleanconst
    (80) booleanconst -> . TRUE
    (81) booleanconst -> . FALSE

    O_PARENTHESIS   shift and go to state 55
    ID              shift and go to state 61
    INTCONST        shift and go to state 59
    FLOATCONST      shift and go to state 54
    STRINGCONST     shift and go to state 57
    TRUE            shift and go to state 56
    FALSE           shift and go to state 64

    term                           shift and go to state 63
    booleanconst                   shift and go to state 66
    varconst                       shift and go to state 65
    fact                           shift and go to state 69
    exp                            shift and go to state 67
    varconstfunction               shift and go to state 58
    constants                      shift and go to state 62
    expression2                    shift and go to state 60
    expression                     shift and go to state 77

state 48

    (15) statutesloop -> statute statutesloop .

    RETURN          reduce using rule 15 (statutesloop -> statute statutesloop .)
    C_BRACKET       reduce using rule 15 (statutesloop -> statute statutesloop .)


state 49

    (13) functionreturn -> RETURN . expression SEMICOLON
    (40) expression -> . expression2 expressionoptional
    (43) expression2 -> . exp expression2optional
    (54) exp -> . term exploop
    (59) term -> . fact termloop
    (65) fact -> . varconst
    (66) fact -> . O_PARENTHESIS expression C_PARENTHESIS
    (70) varconst -> . varconstfunction
    (71) varconst -> . constants
    (72) varconstfunction -> . ID functionorlist
    (76) constants -> . INTCONST
    (77) constants -> . FLOATCONST
    (78) constants -> . STRINGCONST
    (79) constants -> . booleanconst
    (80) booleanconst -> . TRUE
    (81) booleanconst -> . FALSE

    O_PARENTHESIS   shift and go to state 55
    ID              shift and go to state 61
    INTCONST        shift and go to state 59
    FLOATCONST      shift and go to state 54
    STRINGCONST     shift and go to state 57
    TRUE            shift and go to state 56
    FALSE           shift and go to state 64

    term                           shift and go to state 63
    booleanconst                   shift and go to state 66
    varconst                       shift and go to state 65
    constants                      shift and go to state 62
    exp                            shift and go to state 67
    varconstfunction               shift and go to state 58
    expression2                    shift and go to state 60
    expression                     shift and go to state 78
    fact                           shift and go to state 69

state 50

    (12) block -> O_BRACKET statutesloop functionreturn . C_BRACKET

    C_BRACKET       shift and go to state 79


state 51

    (31) listinit -> LIST type . var EQUALS list SEMICOLON
    (67) var -> . ID listaccess

    ID              shift and go to state 43

    var                            shift and go to state 80

state 52

    (5) function -> FUNCTION functiontype ID O_PARENTHESIS . parameters C_PARENTHESIS block
    (91) parameters -> . type ID parametersloop
    (92) parameters -> .
    (8) type -> . BOOL
    (9) type -> . INT
    (10) type -> . FLOAT
    (11) type -> . STRING

    C_PARENTHESIS   reduce using rule 92 (parameters -> .)
    BOOL            shift and go to state 15
    INT             shift and go to state 11
    FLOAT           shift and go to state 14
    STRING          shift and go to state 10

    type                           shift and go to state 82
    parameters                     shift and go to state 81

state 53

    (85) timesloop -> TIMES O_PARENTHESIS INTCONST . C_PARENTHESIS block

    C_PARENTHESIS   shift and go to state 83


state 54

    (77) constants -> FLOATCONST .

    MULTIPLY        reduce using rule 77 (constants -> FLOATCONST .)
    DIVIDE          reduce using rule 77 (constants -> FLOATCONST .)
    MOD             reduce using rule 77 (constants -> FLOATCONST .)
    SUM             reduce using rule 77 (constants -> FLOATCONST .)
    MINUS           reduce using rule 77 (constants -> FLOATCONST .)
    EQUALITY        reduce using rule 77 (constants -> FLOATCONST .)
    GREATER         reduce using rule 77 (constants -> FLOATCONST .)
    GREATER_EQUAL   reduce using rule 77 (constants -> FLOATCONST .)
    LESS            reduce using rule 77 (constants -> FLOATCONST .)
    LESS_EQUAL      reduce using rule 77 (constants -> FLOATCONST .)
    DIFFERENT       reduce using rule 77 (constants -> FLOATCONST .)
    AND             reduce using rule 77 (constants -> FLOATCONST .)
    OR              reduce using rule 77 (constants -> FLOATCONST .)
    COMMA           reduce using rule 77 (constants -> FLOATCONST .)
    C_PARENTHESIS   reduce using rule 77 (constants -> FLOATCONST .)
    C_S_BRACKET     reduce using rule 77 (constants -> FLOATCONST .)
    SEMICOLON       reduce using rule 77 (constants -> FLOATCONST .)


state 55

    (66) fact -> O_PARENTHESIS . expression C_PARENTHESIS
    (40) expression -> . expression2 expressionoptional
    (43) expression2 -> . exp expression2optional
    (54) exp -> . term exploop
    (59) term -> . fact termloop
    (65) fact -> . varconst
    (66) fact -> . O_PARENTHESIS expression C_PARENTHESIS
    (70) varconst -> . varconstfunction
    (71) varconst -> . constants
    (72) varconstfunction -> . ID functionorlist
    (76) constants -> . INTCONST
    (77) constants -> . FLOATCONST
    (78) constants -> . STRINGCONST
    (79) constants -> . booleanconst
    (80) booleanconst -> . TRUE
    (81) booleanconst -> . FALSE

    O_PARENTHESIS   shift and go to state 55
    ID              shift and go to state 61
    INTCONST        shift and go to state 59
    FLOATCONST      shift and go to state 54
    STRINGCONST     shift and go to state 57
    TRUE            shift and go to state 56
    FALSE           shift and go to state 64

    term                           shift and go to state 63
    booleanconst                   shift and go to state 66
    varconst                       shift and go to state 65
    constants                      shift and go to state 62
    exp                            shift and go to state 67
    varconstfunction               shift and go to state 58
    expression2                    shift and go to state 60
    expression                     shift and go to state 84
    fact                           shift and go to state 69

state 56

    (80) booleanconst -> TRUE .

    MULTIPLY        reduce using rule 80 (booleanconst -> TRUE .)
    DIVIDE          reduce using rule 80 (booleanconst -> TRUE .)
    MOD             reduce using rule 80 (booleanconst -> TRUE .)
    SUM             reduce using rule 80 (booleanconst -> TRUE .)
    MINUS           reduce using rule 80 (booleanconst -> TRUE .)
    EQUALITY        reduce using rule 80 (booleanconst -> TRUE .)
    GREATER         reduce using rule 80 (booleanconst -> TRUE .)
    GREATER_EQUAL   reduce using rule 80 (booleanconst -> TRUE .)
    LESS            reduce using rule 80 (booleanconst -> TRUE .)
    LESS_EQUAL      reduce using rule 80 (booleanconst -> TRUE .)
    DIFFERENT       reduce using rule 80 (booleanconst -> TRUE .)
    C_PARENTHESIS   reduce using rule 80 (booleanconst -> TRUE .)
    COMMA           reduce using rule 80 (booleanconst -> TRUE .)
    SEMICOLON       reduce using rule 80 (booleanconst -> TRUE .)
    C_S_BRACKET     reduce using rule 80 (booleanconst -> TRUE .)
    AND             reduce using rule 80 (booleanconst -> TRUE .)
    OR              reduce using rule 80 (booleanconst -> TRUE .)


state 57

    (78) constants -> STRINGCONST .

    MULTIPLY        reduce using rule 78 (constants -> STRINGCONST .)
    DIVIDE          reduce using rule 78 (constants -> STRINGCONST .)
    MOD             reduce using rule 78 (constants -> STRINGCONST .)
    SUM             reduce using rule 78 (constants -> STRINGCONST .)
    MINUS           reduce using rule 78 (constants -> STRINGCONST .)
    EQUALITY        reduce using rule 78 (constants -> STRINGCONST .)
    GREATER         reduce using rule 78 (constants -> STRINGCONST .)
    GREATER_EQUAL   reduce using rule 78 (constants -> STRINGCONST .)
    LESS            reduce using rule 78 (constants -> STRINGCONST .)
    LESS_EQUAL      reduce using rule 78 (constants -> STRINGCONST .)
    DIFFERENT       reduce using rule 78 (constants -> STRINGCONST .)
    AND             reduce using rule 78 (constants -> STRINGCONST .)
    OR              reduce using rule 78 (constants -> STRINGCONST .)
    COMMA           reduce using rule 78 (constants -> STRINGCONST .)
    C_PARENTHESIS   reduce using rule 78 (constants -> STRINGCONST .)
    C_S_BRACKET     reduce using rule 78 (constants -> STRINGCONST .)
    SEMICOLON       reduce using rule 78 (constants -> STRINGCONST .)


state 58

    (70) varconst -> varconstfunction .

    MULTIPLY        reduce using rule 70 (varconst -> varconstfunction .)
    DIVIDE          reduce using rule 70 (varconst -> varconstfunction .)
    MOD             reduce using rule 70 (varconst -> varconstfunction .)
    SUM             reduce using rule 70 (varconst -> varconstfunction .)
    MINUS           reduce using rule 70 (varconst -> varconstfunction .)
    EQUALITY        reduce using rule 70 (varconst -> varconstfunction .)
    GREATER         reduce using rule 70 (varconst -> varconstfunction .)
    GREATER_EQUAL   reduce using rule 70 (varconst -> varconstfunction .)
    LESS            reduce using rule 70 (varconst -> varconstfunction .)
    LESS_EQUAL      reduce using rule 70 (varconst -> varconstfunction .)
    DIFFERENT       reduce using rule 70 (varconst -> varconstfunction .)
    AND             reduce using rule 70 (varconst -> varconstfunction .)
    OR              reduce using rule 70 (varconst -> varconstfunction .)
    C_PARENTHESIS   reduce using rule 70 (varconst -> varconstfunction .)
    COMMA           reduce using rule 70 (varconst -> varconstfunction .)
    SEMICOLON       reduce using rule 70 (varconst -> varconstfunction .)


state 59

    (76) constants -> INTCONST .

    MULTIPLY        reduce using rule 76 (constants -> INTCONST .)
    DIVIDE          reduce using rule 76 (constants -> INTCONST .)
    MOD             reduce using rule 76 (constants -> INTCONST .)
    SUM             reduce using rule 76 (constants -> INTCONST .)
    MINUS           reduce using rule 76 (constants -> INTCONST .)
    EQUALITY        reduce using rule 76 (constants -> INTCONST .)
    GREATER         reduce using rule 76 (constants -> INTCONST .)
    GREATER_EQUAL   reduce using rule 76 (constants -> INTCONST .)
    LESS            reduce using rule 76 (constants -> INTCONST .)
    LESS_EQUAL      reduce using rule 76 (constants -> INTCONST .)
    DIFFERENT       reduce using rule 76 (constants -> INTCONST .)
    AND             reduce using rule 76 (constants -> INTCONST .)
    OR              reduce using rule 76 (constants -> INTCONST .)
    COMMA           reduce using rule 76 (constants -> INTCONST .)
    C_PARENTHESIS   reduce using rule 76 (constants -> INTCONST .)
    C_S_BRACKET     reduce using rule 76 (constants -> INTCONST .)
    SEMICOLON       reduce using rule 76 (constants -> INTCONST .)


state 60

    (40) expression -> expression2 . expressionoptional
    (41) expressionoptional -> . logicop expression2
    (42) expressionoptional -> .
    (46) logicop -> . AND
    (47) logicop -> . OR

    C_PARENTHESIS   reduce using rule 42 (expressionoptional -> .)
    COMMA           reduce using rule 42 (expressionoptional -> .)
    SEMICOLON       reduce using rule 42 (expressionoptional -> .)
    AND             shift and go to state 85
    OR              shift and go to state 88

    logicop                        shift and go to state 86
    expressionoptional             shift and go to state 87

state 61

    (72) varconstfunction -> ID . functionorlist
    (73) functionorlist -> . O_S_BRACKET INTCONST C_S_BRACKET
    (74) functionorlist -> . O_PARENTHESIS parametersinput C_PARENTHESIS
    (75) functionorlist -> .

    O_S_BRACKET     shift and go to state 89
    O_PARENTHESIS   shift and go to state 91
    MULTIPLY        reduce using rule 75 (functionorlist -> .)
    DIVIDE          reduce using rule 75 (functionorlist -> .)
    MOD             reduce using rule 75 (functionorlist -> .)
    SUM             reduce using rule 75 (functionorlist -> .)
    MINUS           reduce using rule 75 (functionorlist -> .)
    EQUALITY        reduce using rule 75 (functionorlist -> .)
    GREATER         reduce using rule 75 (functionorlist -> .)
    GREATER_EQUAL   reduce using rule 75 (functionorlist -> .)
    LESS            reduce using rule 75 (functionorlist -> .)
    LESS_EQUAL      reduce using rule 75 (functionorlist -> .)
    DIFFERENT       reduce using rule 75 (functionorlist -> .)
    AND             reduce using rule 75 (functionorlist -> .)
    OR              reduce using rule 75 (functionorlist -> .)
    C_PARENTHESIS   reduce using rule 75 (functionorlist -> .)
    COMMA           reduce using rule 75 (functionorlist -> .)
    SEMICOLON       reduce using rule 75 (functionorlist -> .)

    functionorlist                 shift and go to state 90

state 62

    (71) varconst -> constants .

    MULTIPLY        reduce using rule 71 (varconst -> constants .)
    DIVIDE          reduce using rule 71 (varconst -> constants .)
    MOD             reduce using rule 71 (varconst -> constants .)
    SUM             reduce using rule 71 (varconst -> constants .)
    MINUS           reduce using rule 71 (varconst -> constants .)
    EQUALITY        reduce using rule 71 (varconst -> constants .)
    GREATER         reduce using rule 71 (varconst -> constants .)
    GREATER_EQUAL   reduce using rule 71 (varconst -> constants .)
    LESS            reduce using rule 71 (varconst -> constants .)
    LESS_EQUAL      reduce using rule 71 (varconst -> constants .)
    DIFFERENT       reduce using rule 71 (varconst -> constants .)
    AND             reduce using rule 71 (varconst -> constants .)
    OR              reduce using rule 71 (varconst -> constants .)
    C_PARENTHESIS   reduce using rule 71 (varconst -> constants .)
    COMMA           reduce using rule 71 (varconst -> constants .)
    SEMICOLON       reduce using rule 71 (varconst -> constants .)


state 63

    (54) exp -> term . exploop
    (55) exploop -> . addsub exp
    (56) exploop -> .
    (57) addsub -> . SUM
    (58) addsub -> . MINUS

    EQUALITY        reduce using rule 56 (exploop -> .)
    GREATER         reduce using rule 56 (exploop -> .)
    GREATER_EQUAL   reduce using rule 56 (exploop -> .)
    LESS            reduce using rule 56 (exploop -> .)
    LESS_EQUAL      reduce using rule 56 (exploop -> .)
    DIFFERENT       reduce using rule 56 (exploop -> .)
    AND             reduce using rule 56 (exploop -> .)
    OR              reduce using rule 56 (exploop -> .)
    C_PARENTHESIS   reduce using rule 56 (exploop -> .)
    COMMA           reduce using rule 56 (exploop -> .)
    SEMICOLON       reduce using rule 56 (exploop -> .)
    SUM             shift and go to state 92
    MINUS           shift and go to state 95

    exploop                        shift and go to state 93
    addsub                         shift and go to state 94

state 64

    (81) booleanconst -> FALSE .

    MULTIPLY        reduce using rule 81 (booleanconst -> FALSE .)
    DIVIDE          reduce using rule 81 (booleanconst -> FALSE .)
    MOD             reduce using rule 81 (booleanconst -> FALSE .)
    SUM             reduce using rule 81 (booleanconst -> FALSE .)
    MINUS           reduce using rule 81 (booleanconst -> FALSE .)
    EQUALITY        reduce using rule 81 (booleanconst -> FALSE .)
    GREATER         reduce using rule 81 (booleanconst -> FALSE .)
    GREATER_EQUAL   reduce using rule 81 (booleanconst -> FALSE .)
    LESS            reduce using rule 81 (booleanconst -> FALSE .)
    LESS_EQUAL      reduce using rule 81 (booleanconst -> FALSE .)
    DIFFERENT       reduce using rule 81 (booleanconst -> FALSE .)
    C_PARENTHESIS   reduce using rule 81 (booleanconst -> FALSE .)
    COMMA           reduce using rule 81 (booleanconst -> FALSE .)
    SEMICOLON       reduce using rule 81 (booleanconst -> FALSE .)
    C_S_BRACKET     reduce using rule 81 (booleanconst -> FALSE .)
    AND             reduce using rule 81 (booleanconst -> FALSE .)
    OR              reduce using rule 81 (booleanconst -> FALSE .)


state 65

    (65) fact -> varconst .

    MULTIPLY        reduce using rule 65 (fact -> varconst .)
    DIVIDE          reduce using rule 65 (fact -> varconst .)
    MOD             reduce using rule 65 (fact -> varconst .)
    SUM             reduce using rule 65 (fact -> varconst .)
    MINUS           reduce using rule 65 (fact -> varconst .)
    EQUALITY        reduce using rule 65 (fact -> varconst .)
    GREATER         reduce using rule 65 (fact -> varconst .)
    GREATER_EQUAL   reduce using rule 65 (fact -> varconst .)
    LESS            reduce using rule 65 (fact -> varconst .)
    LESS_EQUAL      reduce using rule 65 (fact -> varconst .)
    DIFFERENT       reduce using rule 65 (fact -> varconst .)
    AND             reduce using rule 65 (fact -> varconst .)
    OR              reduce using rule 65 (fact -> varconst .)
    COMMA           reduce using rule 65 (fact -> varconst .)
    C_PARENTHESIS   reduce using rule 65 (fact -> varconst .)
    SEMICOLON       reduce using rule 65 (fact -> varconst .)


state 66

    (79) constants -> booleanconst .

    MULTIPLY        reduce using rule 79 (constants -> booleanconst .)
    DIVIDE          reduce using rule 79 (constants -> booleanconst .)
    MOD             reduce using rule 79 (constants -> booleanconst .)
    SUM             reduce using rule 79 (constants -> booleanconst .)
    MINUS           reduce using rule 79 (constants -> booleanconst .)
    EQUALITY        reduce using rule 79 (constants -> booleanconst .)
    GREATER         reduce using rule 79 (constants -> booleanconst .)
    GREATER_EQUAL   reduce using rule 79 (constants -> booleanconst .)
    LESS            reduce using rule 79 (constants -> booleanconst .)
    LESS_EQUAL      reduce using rule 79 (constants -> booleanconst .)
    DIFFERENT       reduce using rule 79 (constants -> booleanconst .)
    AND             reduce using rule 79 (constants -> booleanconst .)
    OR              reduce using rule 79 (constants -> booleanconst .)
    COMMA           reduce using rule 79 (constants -> booleanconst .)
    C_PARENTHESIS   reduce using rule 79 (constants -> booleanconst .)
    C_S_BRACKET     reduce using rule 79 (constants -> booleanconst .)
    SEMICOLON       reduce using rule 79 (constants -> booleanconst .)


state 67

    (43) expression2 -> exp . expression2optional
    (44) expression2optional -> . relop exp
    (45) expression2optional -> .
    (48) relop -> . EQUALITY
    (49) relop -> . GREATER
    (50) relop -> . GREATER_EQUAL
    (51) relop -> . LESS
    (52) relop -> . LESS_EQUAL
    (53) relop -> . DIFFERENT

    AND             reduce using rule 45 (expression2optional -> .)
    OR              reduce using rule 45 (expression2optional -> .)
    C_PARENTHESIS   reduce using rule 45 (expression2optional -> .)
    COMMA           reduce using rule 45 (expression2optional -> .)
    SEMICOLON       reduce using rule 45 (expression2optional -> .)
    EQUALITY        shift and go to state 97
    GREATER         shift and go to state 98
    GREATER_EQUAL   shift and go to state 99
    LESS            shift and go to state 100
    LESS_EQUAL      shift and go to state 102
    DIFFERENT       shift and go to state 96

    relop                          shift and go to state 103
    expression2optional            shift and go to state 101

state 68

    (84) whileloop -> WHILE O_PARENTHESIS expression . C_PARENTHESIS block

    C_PARENTHESIS   shift and go to state 104


state 69

    (59) term -> fact . termloop
    (60) termloop -> . divmult term
    (61) termloop -> .
    (62) divmult -> . MULTIPLY
    (63) divmult -> . DIVIDE
    (64) divmult -> . MOD

    SUM             reduce using rule 61 (termloop -> .)
    MINUS           reduce using rule 61 (termloop -> .)
    EQUALITY        reduce using rule 61 (termloop -> .)
    GREATER         reduce using rule 61 (termloop -> .)
    GREATER_EQUAL   reduce using rule 61 (termloop -> .)
    LESS            reduce using rule 61 (termloop -> .)
    LESS_EQUAL      reduce using rule 61 (termloop -> .)
    DIFFERENT       reduce using rule 61 (termloop -> .)
    AND             reduce using rule 61 (termloop -> .)
    OR              reduce using rule 61 (termloop -> .)
    C_PARENTHESIS   reduce using rule 61 (termloop -> .)
    COMMA           reduce using rule 61 (termloop -> .)
    SEMICOLON       reduce using rule 61 (termloop -> .)
    MULTIPLY        shift and go to state 107
    DIVIDE          shift and go to state 105
    MOD             shift and go to state 109

    termloop                       shift and go to state 106
    divmult                        shift and go to state 108

state 70

    (24) writting -> PRINT O_PARENTHESIS writtingloop . C_PARENTHESIS SEMICOLON

    C_PARENTHESIS   shift and go to state 110


state 71

    (25) writtingloop -> expression . optionalwritting
    (26) optionalwritting -> . COMMA writtingloop
    (27) optionalwritting -> .

    COMMA           shift and go to state 112
    C_PARENTHESIS   reduce using rule 27 (optionalwritting -> .)

    optionalwritting               shift and go to state 111

state 72

    (23) assignation -> var EQUALS expression . SEMICOLON

    SEMICOLON       shift and go to state 113


state 73

    (30) normalinit -> type var EQUALS . expression SEMICOLON
    (40) expression -> . expression2 expressionoptional
    (43) expression2 -> . exp expression2optional
    (54) exp -> . term exploop
    (59) term -> . fact termloop
    (65) fact -> . varconst
    (66) fact -> . O_PARENTHESIS expression C_PARENTHESIS
    (70) varconst -> . varconstfunction
    (71) varconst -> . constants
    (72) varconstfunction -> . ID functionorlist
    (76) constants -> . INTCONST
    (77) constants -> . FLOATCONST
    (78) constants -> . STRINGCONST
    (79) constants -> . booleanconst
    (80) booleanconst -> . TRUE
    (81) booleanconst -> . FALSE

    O_PARENTHESIS   shift and go to state 55
    ID              shift and go to state 61
    INTCONST        shift and go to state 59
    FLOATCONST      shift and go to state 54
    STRINGCONST     shift and go to state 57
    TRUE            shift and go to state 56
    FALSE           shift and go to state 64

    term                           shift and go to state 63
    booleanconst                   shift and go to state 66
    varconstfunction               shift and go to state 58
    varconst                       shift and go to state 65
    constants                      shift and go to state 62
    exp                            shift and go to state 67
    expression2                    shift and go to state 60
    expression                     shift and go to state 114
    fact                           shift and go to state 69

state 74

    (68) listaccess -> O_S_BRACKET INTCONST . C_S_BRACKET

    C_S_BRACKET     shift and go to state 115


state 75

    (86) functioncall -> ID O_PARENTHESIS parametersinput . C_PARENTHESIS SEMICOLON

    C_PARENTHESIS   shift and go to state 116


state 76

    (87) parametersinput -> expression . parametersinputloop
    (89) parametersinputloop -> . COMMA expression parametersinputloop
    (90) parametersinputloop -> .

    COMMA           shift and go to state 118
    C_PARENTHESIS   reduce using rule 90 (parametersinputloop -> .)

    parametersinputloop            shift and go to state 117

state 77

    (37) condition -> IF O_PARENTHESIS expression . C_PARENTHESIS block else

    C_PARENTHESIS   shift and go to state 119


state 78

    (13) functionreturn -> RETURN expression . SEMICOLON

    SEMICOLON       shift and go to state 120


state 79

    (12) block -> O_BRACKET statutesloop functionreturn C_BRACKET .

    FUNCTION        reduce using rule 12 (block -> O_BRACKET statutesloop functionreturn C_BRACKET .)
    $end            reduce using rule 12 (block -> O_BRACKET statutesloop functionreturn C_BRACKET .)
    IF              reduce using rule 12 (block -> O_BRACKET statutesloop functionreturn C_BRACKET .)
    PRINT           reduce using rule 12 (block -> O_BRACKET statutesloop functionreturn C_BRACKET .)
    ID              reduce using rule 12 (block -> O_BRACKET statutesloop functionreturn C_BRACKET .)
    LIST            reduce using rule 12 (block -> O_BRACKET statutesloop functionreturn C_BRACKET .)
    WHILE           reduce using rule 12 (block -> O_BRACKET statutesloop functionreturn C_BRACKET .)
    TIMES           reduce using rule 12 (block -> O_BRACKET statutesloop functionreturn C_BRACKET .)
    BOOL            reduce using rule 12 (block -> O_BRACKET statutesloop functionreturn C_BRACKET .)
    INT             reduce using rule 12 (block -> O_BRACKET statutesloop functionreturn C_BRACKET .)
    FLOAT           reduce using rule 12 (block -> O_BRACKET statutesloop functionreturn C_BRACKET .)
    STRING          reduce using rule 12 (block -> O_BRACKET statutesloop functionreturn C_BRACKET .)
    RETURN          reduce using rule 12 (block -> O_BRACKET statutesloop functionreturn C_BRACKET .)
    C_BRACKET       reduce using rule 12 (block -> O_BRACKET statutesloop functionreturn C_BRACKET .)
    ELSE            reduce using rule 12 (block -> O_BRACKET statutesloop functionreturn C_BRACKET .)


state 80

    (31) listinit -> LIST type var . EQUALS list SEMICOLON

    EQUALS          shift and go to state 121


state 81

    (5) function -> FUNCTION functiontype ID O_PARENTHESIS parameters . C_PARENTHESIS block

    C_PARENTHESIS   shift and go to state 122


state 82

    (91) parameters -> type . ID parametersloop

    ID              shift and go to state 123


state 83

    (85) timesloop -> TIMES O_PARENTHESIS INTCONST C_PARENTHESIS . block
    (12) block -> . O_BRACKET statutesloop functionreturn C_BRACKET

    O_BRACKET       shift and go to state 7

    block                          shift and go to state 124

state 84

    (66) fact -> O_PARENTHESIS expression . C_PARENTHESIS

    C_PARENTHESIS   shift and go to state 125


state 85

    (46) logicop -> AND .

    O_PARENTHESIS   reduce using rule 46 (logicop -> AND .)
    ID              reduce using rule 46 (logicop -> AND .)
    INTCONST        reduce using rule 46 (logicop -> AND .)
    FLOATCONST      reduce using rule 46 (logicop -> AND .)
    STRINGCONST     reduce using rule 46 (logicop -> AND .)
    TRUE            reduce using rule 46 (logicop -> AND .)
    FALSE           reduce using rule 46 (logicop -> AND .)


state 86

    (41) expressionoptional -> logicop . expression2
    (43) expression2 -> . exp expression2optional
    (54) exp -> . term exploop
    (59) term -> . fact termloop
    (65) fact -> . varconst
    (66) fact -> . O_PARENTHESIS expression C_PARENTHESIS
    (70) varconst -> . varconstfunction
    (71) varconst -> . constants
    (72) varconstfunction -> . ID functionorlist
    (76) constants -> . INTCONST
    (77) constants -> . FLOATCONST
    (78) constants -> . STRINGCONST
    (79) constants -> . booleanconst
    (80) booleanconst -> . TRUE
    (81) booleanconst -> . FALSE

    O_PARENTHESIS   shift and go to state 55
    ID              shift and go to state 61
    INTCONST        shift and go to state 59
    FLOATCONST      shift and go to state 54
    STRINGCONST     shift and go to state 57
    TRUE            shift and go to state 56
    FALSE           shift and go to state 64

    term                           shift and go to state 63
    booleanconst                   shift and go to state 66
    varconst                       shift and go to state 65
    constants                      shift and go to state 62
    exp                            shift and go to state 67
    varconstfunction               shift and go to state 58
    expression2                    shift and go to state 126
    fact                           shift and go to state 69

state 87

    (40) expression -> expression2 expressionoptional .

    COMMA           reduce using rule 40 (expression -> expression2 expressionoptional .)
    C_PARENTHESIS   reduce using rule 40 (expression -> expression2 expressionoptional .)
    SEMICOLON       reduce using rule 40 (expression -> expression2 expressionoptional .)


state 88

    (47) logicop -> OR .

    O_PARENTHESIS   reduce using rule 47 (logicop -> OR .)
    ID              reduce using rule 47 (logicop -> OR .)
    INTCONST        reduce using rule 47 (logicop -> OR .)
    FLOATCONST      reduce using rule 47 (logicop -> OR .)
    STRINGCONST     reduce using rule 47 (logicop -> OR .)
    TRUE            reduce using rule 47 (logicop -> OR .)
    FALSE           reduce using rule 47 (logicop -> OR .)


state 89

    (73) functionorlist -> O_S_BRACKET . INTCONST C_S_BRACKET

    INTCONST        shift and go to state 127


state 90

    (72) varconstfunction -> ID functionorlist .

    MULTIPLY        reduce using rule 72 (varconstfunction -> ID functionorlist .)
    DIVIDE          reduce using rule 72 (varconstfunction -> ID functionorlist .)
    MOD             reduce using rule 72 (varconstfunction -> ID functionorlist .)
    SUM             reduce using rule 72 (varconstfunction -> ID functionorlist .)
    MINUS           reduce using rule 72 (varconstfunction -> ID functionorlist .)
    AND             reduce using rule 72 (varconstfunction -> ID functionorlist .)
    OR              reduce using rule 72 (varconstfunction -> ID functionorlist .)
    C_PARENTHESIS   reduce using rule 72 (varconstfunction -> ID functionorlist .)
    COMMA           reduce using rule 72 (varconstfunction -> ID functionorlist .)
    SEMICOLON       reduce using rule 72 (varconstfunction -> ID functionorlist .)
    EQUALITY        reduce using rule 72 (varconstfunction -> ID functionorlist .)
    GREATER         reduce using rule 72 (varconstfunction -> ID functionorlist .)
    GREATER_EQUAL   reduce using rule 72 (varconstfunction -> ID functionorlist .)
    LESS            reduce using rule 72 (varconstfunction -> ID functionorlist .)
    LESS_EQUAL      reduce using rule 72 (varconstfunction -> ID functionorlist .)
    DIFFERENT       reduce using rule 72 (varconstfunction -> ID functionorlist .)


state 91

    (74) functionorlist -> O_PARENTHESIS . parametersinput C_PARENTHESIS
    (87) parametersinput -> . expression parametersinputloop
    (88) parametersinput -> .
    (40) expression -> . expression2 expressionoptional
    (43) expression2 -> . exp expression2optional
    (54) exp -> . term exploop
    (59) term -> . fact termloop
    (65) fact -> . varconst
    (66) fact -> . O_PARENTHESIS expression C_PARENTHESIS
    (70) varconst -> . varconstfunction
    (71) varconst -> . constants
    (72) varconstfunction -> . ID functionorlist
    (76) constants -> . INTCONST
    (77) constants -> . FLOATCONST
    (78) constants -> . STRINGCONST
    (79) constants -> . booleanconst
    (80) booleanconst -> . TRUE
    (81) booleanconst -> . FALSE

    C_PARENTHESIS   reduce using rule 88 (parametersinput -> .)
    O_PARENTHESIS   shift and go to state 55
    ID              shift and go to state 61
    INTCONST        shift and go to state 59
    FLOATCONST      shift and go to state 54
    STRINGCONST     shift and go to state 57
    TRUE            shift and go to state 56
    FALSE           shift and go to state 64

    term                           shift and go to state 63
    parametersinput                shift and go to state 128
    booleanconst                   shift and go to state 66
    varconst                       shift and go to state 65
    constants                      shift and go to state 62
    exp                            shift and go to state 67
    varconstfunction               shift and go to state 58
    expression2                    shift and go to state 60
    expression                     shift and go to state 76
    fact                           shift and go to state 69

state 92

    (57) addsub -> SUM .

    O_PARENTHESIS   reduce using rule 57 (addsub -> SUM .)
    ID              reduce using rule 57 (addsub -> SUM .)
    INTCONST        reduce using rule 57 (addsub -> SUM .)
    FLOATCONST      reduce using rule 57 (addsub -> SUM .)
    STRINGCONST     reduce using rule 57 (addsub -> SUM .)
    TRUE            reduce using rule 57 (addsub -> SUM .)
    FALSE           reduce using rule 57 (addsub -> SUM .)


state 93

    (54) exp -> term exploop .

    AND             reduce using rule 54 (exp -> term exploop .)
    OR              reduce using rule 54 (exp -> term exploop .)
    C_PARENTHESIS   reduce using rule 54 (exp -> term exploop .)
    COMMA           reduce using rule 54 (exp -> term exploop .)
    SEMICOLON       reduce using rule 54 (exp -> term exploop .)
    EQUALITY        reduce using rule 54 (exp -> term exploop .)
    GREATER         reduce using rule 54 (exp -> term exploop .)
    GREATER_EQUAL   reduce using rule 54 (exp -> term exploop .)
    LESS            reduce using rule 54 (exp -> term exploop .)
    LESS_EQUAL      reduce using rule 54 (exp -> term exploop .)
    DIFFERENT       reduce using rule 54 (exp -> term exploop .)


state 94

    (55) exploop -> addsub . exp
    (54) exp -> . term exploop
    (59) term -> . fact termloop
    (65) fact -> . varconst
    (66) fact -> . O_PARENTHESIS expression C_PARENTHESIS
    (70) varconst -> . varconstfunction
    (71) varconst -> . constants
    (72) varconstfunction -> . ID functionorlist
    (76) constants -> . INTCONST
    (77) constants -> . FLOATCONST
    (78) constants -> . STRINGCONST
    (79) constants -> . booleanconst
    (80) booleanconst -> . TRUE
    (81) booleanconst -> . FALSE

    O_PARENTHESIS   shift and go to state 55
    ID              shift and go to state 61
    INTCONST        shift and go to state 59
    FLOATCONST      shift and go to state 54
    STRINGCONST     shift and go to state 57
    TRUE            shift and go to state 56
    FALSE           shift and go to state 64

    term                           shift and go to state 63
    booleanconst                   shift and go to state 66
    varconst                       shift and go to state 65
    constants                      shift and go to state 62
    exp                            shift and go to state 129
    varconstfunction               shift and go to state 58
    fact                           shift and go to state 69

state 95

    (58) addsub -> MINUS .

    O_PARENTHESIS   reduce using rule 58 (addsub -> MINUS .)
    ID              reduce using rule 58 (addsub -> MINUS .)
    INTCONST        reduce using rule 58 (addsub -> MINUS .)
    FLOATCONST      reduce using rule 58 (addsub -> MINUS .)
    STRINGCONST     reduce using rule 58 (addsub -> MINUS .)
    TRUE            reduce using rule 58 (addsub -> MINUS .)
    FALSE           reduce using rule 58 (addsub -> MINUS .)


state 96

    (53) relop -> DIFFERENT .

    O_PARENTHESIS   reduce using rule 53 (relop -> DIFFERENT .)
    ID              reduce using rule 53 (relop -> DIFFERENT .)
    INTCONST        reduce using rule 53 (relop -> DIFFERENT .)
    FLOATCONST      reduce using rule 53 (relop -> DIFFERENT .)
    STRINGCONST     reduce using rule 53 (relop -> DIFFERENT .)
    TRUE            reduce using rule 53 (relop -> DIFFERENT .)
    FALSE           reduce using rule 53 (relop -> DIFFERENT .)


state 97

    (48) relop -> EQUALITY .

    O_PARENTHESIS   reduce using rule 48 (relop -> EQUALITY .)
    ID              reduce using rule 48 (relop -> EQUALITY .)
    INTCONST        reduce using rule 48 (relop -> EQUALITY .)
    FLOATCONST      reduce using rule 48 (relop -> EQUALITY .)
    STRINGCONST     reduce using rule 48 (relop -> EQUALITY .)
    TRUE            reduce using rule 48 (relop -> EQUALITY .)
    FALSE           reduce using rule 48 (relop -> EQUALITY .)


state 98

    (49) relop -> GREATER .

    O_PARENTHESIS   reduce using rule 49 (relop -> GREATER .)
    ID              reduce using rule 49 (relop -> GREATER .)
    INTCONST        reduce using rule 49 (relop -> GREATER .)
    FLOATCONST      reduce using rule 49 (relop -> GREATER .)
    STRINGCONST     reduce using rule 49 (relop -> GREATER .)
    TRUE            reduce using rule 49 (relop -> GREATER .)
    FALSE           reduce using rule 49 (relop -> GREATER .)


state 99

    (50) relop -> GREATER_EQUAL .

    O_PARENTHESIS   reduce using rule 50 (relop -> GREATER_EQUAL .)
    ID              reduce using rule 50 (relop -> GREATER_EQUAL .)
    INTCONST        reduce using rule 50 (relop -> GREATER_EQUAL .)
    FLOATCONST      reduce using rule 50 (relop -> GREATER_EQUAL .)
    STRINGCONST     reduce using rule 50 (relop -> GREATER_EQUAL .)
    TRUE            reduce using rule 50 (relop -> GREATER_EQUAL .)
    FALSE           reduce using rule 50 (relop -> GREATER_EQUAL .)


state 100

    (51) relop -> LESS .

    O_PARENTHESIS   reduce using rule 51 (relop -> LESS .)
    ID              reduce using rule 51 (relop -> LESS .)
    INTCONST        reduce using rule 51 (relop -> LESS .)
    FLOATCONST      reduce using rule 51 (relop -> LESS .)
    STRINGCONST     reduce using rule 51 (relop -> LESS .)
    TRUE            reduce using rule 51 (relop -> LESS .)
    FALSE           reduce using rule 51 (relop -> LESS .)


state 101

    (43) expression2 -> exp expression2optional .

    AND             reduce using rule 43 (expression2 -> exp expression2optional .)
    OR              reduce using rule 43 (expression2 -> exp expression2optional .)
    COMMA           reduce using rule 43 (expression2 -> exp expression2optional .)
    C_PARENTHESIS   reduce using rule 43 (expression2 -> exp expression2optional .)
    SEMICOLON       reduce using rule 43 (expression2 -> exp expression2optional .)


state 102

    (52) relop -> LESS_EQUAL .

    O_PARENTHESIS   reduce using rule 52 (relop -> LESS_EQUAL .)
    ID              reduce using rule 52 (relop -> LESS_EQUAL .)
    INTCONST        reduce using rule 52 (relop -> LESS_EQUAL .)
    FLOATCONST      reduce using rule 52 (relop -> LESS_EQUAL .)
    STRINGCONST     reduce using rule 52 (relop -> LESS_EQUAL .)
    TRUE            reduce using rule 52 (relop -> LESS_EQUAL .)
    FALSE           reduce using rule 52 (relop -> LESS_EQUAL .)


state 103

    (44) expression2optional -> relop . exp
    (54) exp -> . term exploop
    (59) term -> . fact termloop
    (65) fact -> . varconst
    (66) fact -> . O_PARENTHESIS expression C_PARENTHESIS
    (70) varconst -> . varconstfunction
    (71) varconst -> . constants
    (72) varconstfunction -> . ID functionorlist
    (76) constants -> . INTCONST
    (77) constants -> . FLOATCONST
    (78) constants -> . STRINGCONST
    (79) constants -> . booleanconst
    (80) booleanconst -> . TRUE
    (81) booleanconst -> . FALSE

    O_PARENTHESIS   shift and go to state 55
    ID              shift and go to state 61
    INTCONST        shift and go to state 59
    FLOATCONST      shift and go to state 54
    STRINGCONST     shift and go to state 57
    TRUE            shift and go to state 56
    FALSE           shift and go to state 64

    term                           shift and go to state 63
    booleanconst                   shift and go to state 66
    varconst                       shift and go to state 65
    constants                      shift and go to state 62
    exp                            shift and go to state 130
    varconstfunction               shift and go to state 58
    fact                           shift and go to state 69

state 104

    (84) whileloop -> WHILE O_PARENTHESIS expression C_PARENTHESIS . block
    (12) block -> . O_BRACKET statutesloop functionreturn C_BRACKET

    O_BRACKET       shift and go to state 7

    block                          shift and go to state 131

state 105

    (63) divmult -> DIVIDE .

    O_PARENTHESIS   reduce using rule 63 (divmult -> DIVIDE .)
    ID              reduce using rule 63 (divmult -> DIVIDE .)
    INTCONST        reduce using rule 63 (divmult -> DIVIDE .)
    FLOATCONST      reduce using rule 63 (divmult -> DIVIDE .)
    STRINGCONST     reduce using rule 63 (divmult -> DIVIDE .)
    TRUE            reduce using rule 63 (divmult -> DIVIDE .)
    FALSE           reduce using rule 63 (divmult -> DIVIDE .)


state 106

    (59) term -> fact termloop .

    SUM             reduce using rule 59 (term -> fact termloop .)
    MINUS           reduce using rule 59 (term -> fact termloop .)
    EQUALITY        reduce using rule 59 (term -> fact termloop .)
    GREATER         reduce using rule 59 (term -> fact termloop .)
    GREATER_EQUAL   reduce using rule 59 (term -> fact termloop .)
    LESS            reduce using rule 59 (term -> fact termloop .)
    LESS_EQUAL      reduce using rule 59 (term -> fact termloop .)
    DIFFERENT       reduce using rule 59 (term -> fact termloop .)
    AND             reduce using rule 59 (term -> fact termloop .)
    OR              reduce using rule 59 (term -> fact termloop .)
    C_PARENTHESIS   reduce using rule 59 (term -> fact termloop .)
    SEMICOLON       reduce using rule 59 (term -> fact termloop .)
    COMMA           reduce using rule 59 (term -> fact termloop .)


state 107

    (62) divmult -> MULTIPLY .

    O_PARENTHESIS   reduce using rule 62 (divmult -> MULTIPLY .)
    ID              reduce using rule 62 (divmult -> MULTIPLY .)
    INTCONST        reduce using rule 62 (divmult -> MULTIPLY .)
    FLOATCONST      reduce using rule 62 (divmult -> MULTIPLY .)
    STRINGCONST     reduce using rule 62 (divmult -> MULTIPLY .)
    TRUE            reduce using rule 62 (divmult -> MULTIPLY .)
    FALSE           reduce using rule 62 (divmult -> MULTIPLY .)


state 108

    (60) termloop -> divmult . term
    (59) term -> . fact termloop
    (65) fact -> . varconst
    (66) fact -> . O_PARENTHESIS expression C_PARENTHESIS
    (70) varconst -> . varconstfunction
    (71) varconst -> . constants
    (72) varconstfunction -> . ID functionorlist
    (76) constants -> . INTCONST
    (77) constants -> . FLOATCONST
    (78) constants -> . STRINGCONST
    (79) constants -> . booleanconst
    (80) booleanconst -> . TRUE
    (81) booleanconst -> . FALSE

    O_PARENTHESIS   shift and go to state 55
    ID              shift and go to state 61
    INTCONST        shift and go to state 59
    FLOATCONST      shift and go to state 54
    STRINGCONST     shift and go to state 57
    TRUE            shift and go to state 56
    FALSE           shift and go to state 64

    term                           shift and go to state 132
    booleanconst                   shift and go to state 66
    varconstfunction               shift and go to state 58
    varconst                       shift and go to state 65
    constants                      shift and go to state 62
    fact                           shift and go to state 69

state 109

    (64) divmult -> MOD .

    O_PARENTHESIS   reduce using rule 64 (divmult -> MOD .)
    ID              reduce using rule 64 (divmult -> MOD .)
    INTCONST        reduce using rule 64 (divmult -> MOD .)
    FLOATCONST      reduce using rule 64 (divmult -> MOD .)
    STRINGCONST     reduce using rule 64 (divmult -> MOD .)
    TRUE            reduce using rule 64 (divmult -> MOD .)
    FALSE           reduce using rule 64 (divmult -> MOD .)


state 110

    (24) writting -> PRINT O_PARENTHESIS writtingloop C_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 133


state 111

    (25) writtingloop -> expression optionalwritting .

    C_PARENTHESIS   reduce using rule 25 (writtingloop -> expression optionalwritting .)


state 112

    (26) optionalwritting -> COMMA . writtingloop
    (25) writtingloop -> . expression optionalwritting
    (40) expression -> . expression2 expressionoptional
    (43) expression2 -> . exp expression2optional
    (54) exp -> . term exploop
    (59) term -> . fact termloop
    (65) fact -> . varconst
    (66) fact -> . O_PARENTHESIS expression C_PARENTHESIS
    (70) varconst -> . varconstfunction
    (71) varconst -> . constants
    (72) varconstfunction -> . ID functionorlist
    (76) constants -> . INTCONST
    (77) constants -> . FLOATCONST
    (78) constants -> . STRINGCONST
    (79) constants -> . booleanconst
    (80) booleanconst -> . TRUE
    (81) booleanconst -> . FALSE

    O_PARENTHESIS   shift and go to state 55
    ID              shift and go to state 61
    INTCONST        shift and go to state 59
    FLOATCONST      shift and go to state 54
    STRINGCONST     shift and go to state 57
    TRUE            shift and go to state 56
    FALSE           shift and go to state 64

    term                           shift and go to state 63
    booleanconst                   shift and go to state 66
    varconst                       shift and go to state 65
    constants                      shift and go to state 62
    exp                            shift and go to state 67
    varconstfunction               shift and go to state 58
    writtingloop                   shift and go to state 134
    expression2                    shift and go to state 60
    expression                     shift and go to state 71
    fact                           shift and go to state 69

state 113

    (23) assignation -> var EQUALS expression SEMICOLON .

    IF              reduce using rule 23 (assignation -> var EQUALS expression SEMICOLON .)
    PRINT           reduce using rule 23 (assignation -> var EQUALS expression SEMICOLON .)
    ID              reduce using rule 23 (assignation -> var EQUALS expression SEMICOLON .)
    LIST            reduce using rule 23 (assignation -> var EQUALS expression SEMICOLON .)
    WHILE           reduce using rule 23 (assignation -> var EQUALS expression SEMICOLON .)
    TIMES           reduce using rule 23 (assignation -> var EQUALS expression SEMICOLON .)
    BOOL            reduce using rule 23 (assignation -> var EQUALS expression SEMICOLON .)
    INT             reduce using rule 23 (assignation -> var EQUALS expression SEMICOLON .)
    FLOAT           reduce using rule 23 (assignation -> var EQUALS expression SEMICOLON .)
    STRING          reduce using rule 23 (assignation -> var EQUALS expression SEMICOLON .)
    RETURN          reduce using rule 23 (assignation -> var EQUALS expression SEMICOLON .)
    C_BRACKET       reduce using rule 23 (assignation -> var EQUALS expression SEMICOLON .)


state 114

    (30) normalinit -> type var EQUALS expression . SEMICOLON

    SEMICOLON       shift and go to state 135


state 115

    (68) listaccess -> O_S_BRACKET INTCONST C_S_BRACKET .

    EQUALS          reduce using rule 68 (listaccess -> O_S_BRACKET INTCONST C_S_BRACKET .)


state 116

    (86) functioncall -> ID O_PARENTHESIS parametersinput C_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 136


state 117

    (87) parametersinput -> expression parametersinputloop .

    C_PARENTHESIS   reduce using rule 87 (parametersinput -> expression parametersinputloop .)


state 118

    (89) parametersinputloop -> COMMA . expression parametersinputloop
    (40) expression -> . expression2 expressionoptional
    (43) expression2 -> . exp expression2optional
    (54) exp -> . term exploop
    (59) term -> . fact termloop
    (65) fact -> . varconst
    (66) fact -> . O_PARENTHESIS expression C_PARENTHESIS
    (70) varconst -> . varconstfunction
    (71) varconst -> . constants
    (72) varconstfunction -> . ID functionorlist
    (76) constants -> . INTCONST
    (77) constants -> . FLOATCONST
    (78) constants -> . STRINGCONST
    (79) constants -> . booleanconst
    (80) booleanconst -> . TRUE
    (81) booleanconst -> . FALSE

    O_PARENTHESIS   shift and go to state 55
    ID              shift and go to state 61
    INTCONST        shift and go to state 59
    FLOATCONST      shift and go to state 54
    STRINGCONST     shift and go to state 57
    TRUE            shift and go to state 56
    FALSE           shift and go to state 64

    term                           shift and go to state 63
    booleanconst                   shift and go to state 66
    varconst                       shift and go to state 65
    constants                      shift and go to state 62
    exp                            shift and go to state 67
    varconstfunction               shift and go to state 58
    expression2                    shift and go to state 60
    expression                     shift and go to state 137
    fact                           shift and go to state 69

state 119

    (37) condition -> IF O_PARENTHESIS expression C_PARENTHESIS . block else
    (12) block -> . O_BRACKET statutesloop functionreturn C_BRACKET

    O_BRACKET       shift and go to state 7

    block                          shift and go to state 138

state 120

    (13) functionreturn -> RETURN expression SEMICOLON .

    C_BRACKET       reduce using rule 13 (functionreturn -> RETURN expression SEMICOLON .)


state 121

    (31) listinit -> LIST type var EQUALS . list SEMICOLON
    (32) list -> . O_S_BRACKET listelements C_S_BRACKET

    O_S_BRACKET     shift and go to state 140

    list                           shift and go to state 139

state 122

    (5) function -> FUNCTION functiontype ID O_PARENTHESIS parameters C_PARENTHESIS . block
    (12) block -> . O_BRACKET statutesloop functionreturn C_BRACKET

    O_BRACKET       shift and go to state 7

    block                          shift and go to state 141

state 123

    (91) parameters -> type ID . parametersloop
    (93) parametersloop -> . COMMA type ID parametersloop
    (94) parametersloop -> .

    COMMA           shift and go to state 143
    C_PARENTHESIS   reduce using rule 94 (parametersloop -> .)

    parametersloop                 shift and go to state 142

state 124

    (85) timesloop -> TIMES O_PARENTHESIS INTCONST C_PARENTHESIS block .

    IF              reduce using rule 85 (timesloop -> TIMES O_PARENTHESIS INTCONST C_PARENTHESIS block .)
    PRINT           reduce using rule 85 (timesloop -> TIMES O_PARENTHESIS INTCONST C_PARENTHESIS block .)
    ID              reduce using rule 85 (timesloop -> TIMES O_PARENTHESIS INTCONST C_PARENTHESIS block .)
    LIST            reduce using rule 85 (timesloop -> TIMES O_PARENTHESIS INTCONST C_PARENTHESIS block .)
    WHILE           reduce using rule 85 (timesloop -> TIMES O_PARENTHESIS INTCONST C_PARENTHESIS block .)
    TIMES           reduce using rule 85 (timesloop -> TIMES O_PARENTHESIS INTCONST C_PARENTHESIS block .)
    BOOL            reduce using rule 85 (timesloop -> TIMES O_PARENTHESIS INTCONST C_PARENTHESIS block .)
    INT             reduce using rule 85 (timesloop -> TIMES O_PARENTHESIS INTCONST C_PARENTHESIS block .)
    FLOAT           reduce using rule 85 (timesloop -> TIMES O_PARENTHESIS INTCONST C_PARENTHESIS block .)
    STRING          reduce using rule 85 (timesloop -> TIMES O_PARENTHESIS INTCONST C_PARENTHESIS block .)
    RETURN          reduce using rule 85 (timesloop -> TIMES O_PARENTHESIS INTCONST C_PARENTHESIS block .)
    C_BRACKET       reduce using rule 85 (timesloop -> TIMES O_PARENTHESIS INTCONST C_PARENTHESIS block .)


state 125

    (66) fact -> O_PARENTHESIS expression C_PARENTHESIS .

    MULTIPLY        reduce using rule 66 (fact -> O_PARENTHESIS expression C_PARENTHESIS .)
    DIVIDE          reduce using rule 66 (fact -> O_PARENTHESIS expression C_PARENTHESIS .)
    MOD             reduce using rule 66 (fact -> O_PARENTHESIS expression C_PARENTHESIS .)
    SUM             reduce using rule 66 (fact -> O_PARENTHESIS expression C_PARENTHESIS .)
    MINUS           reduce using rule 66 (fact -> O_PARENTHESIS expression C_PARENTHESIS .)
    EQUALITY        reduce using rule 66 (fact -> O_PARENTHESIS expression C_PARENTHESIS .)
    GREATER         reduce using rule 66 (fact -> O_PARENTHESIS expression C_PARENTHESIS .)
    GREATER_EQUAL   reduce using rule 66 (fact -> O_PARENTHESIS expression C_PARENTHESIS .)
    LESS            reduce using rule 66 (fact -> O_PARENTHESIS expression C_PARENTHESIS .)
    LESS_EQUAL      reduce using rule 66 (fact -> O_PARENTHESIS expression C_PARENTHESIS .)
    DIFFERENT       reduce using rule 66 (fact -> O_PARENTHESIS expression C_PARENTHESIS .)
    AND             reduce using rule 66 (fact -> O_PARENTHESIS expression C_PARENTHESIS .)
    OR              reduce using rule 66 (fact -> O_PARENTHESIS expression C_PARENTHESIS .)
    COMMA           reduce using rule 66 (fact -> O_PARENTHESIS expression C_PARENTHESIS .)
    C_PARENTHESIS   reduce using rule 66 (fact -> O_PARENTHESIS expression C_PARENTHESIS .)
    SEMICOLON       reduce using rule 66 (fact -> O_PARENTHESIS expression C_PARENTHESIS .)


state 126

    (41) expressionoptional -> logicop expression2 .

    C_PARENTHESIS   reduce using rule 41 (expressionoptional -> logicop expression2 .)
    COMMA           reduce using rule 41 (expressionoptional -> logicop expression2 .)
    SEMICOLON       reduce using rule 41 (expressionoptional -> logicop expression2 .)


state 127

    (73) functionorlist -> O_S_BRACKET INTCONST . C_S_BRACKET

    C_S_BRACKET     shift and go to state 144


state 128

    (74) functionorlist -> O_PARENTHESIS parametersinput . C_PARENTHESIS

    C_PARENTHESIS   shift and go to state 145


state 129

    (55) exploop -> addsub exp .

    EQUALITY        reduce using rule 55 (exploop -> addsub exp .)
    GREATER         reduce using rule 55 (exploop -> addsub exp .)
    GREATER_EQUAL   reduce using rule 55 (exploop -> addsub exp .)
    LESS            reduce using rule 55 (exploop -> addsub exp .)
    LESS_EQUAL      reduce using rule 55 (exploop -> addsub exp .)
    DIFFERENT       reduce using rule 55 (exploop -> addsub exp .)
    AND             reduce using rule 55 (exploop -> addsub exp .)
    OR              reduce using rule 55 (exploop -> addsub exp .)
    C_PARENTHESIS   reduce using rule 55 (exploop -> addsub exp .)
    COMMA           reduce using rule 55 (exploop -> addsub exp .)
    SEMICOLON       reduce using rule 55 (exploop -> addsub exp .)


state 130

    (44) expression2optional -> relop exp .

    AND             reduce using rule 44 (expression2optional -> relop exp .)
    OR              reduce using rule 44 (expression2optional -> relop exp .)
    C_PARENTHESIS   reduce using rule 44 (expression2optional -> relop exp .)
    COMMA           reduce using rule 44 (expression2optional -> relop exp .)
    SEMICOLON       reduce using rule 44 (expression2optional -> relop exp .)


state 131

    (84) whileloop -> WHILE O_PARENTHESIS expression C_PARENTHESIS block .

    IF              reduce using rule 84 (whileloop -> WHILE O_PARENTHESIS expression C_PARENTHESIS block .)
    PRINT           reduce using rule 84 (whileloop -> WHILE O_PARENTHESIS expression C_PARENTHESIS block .)
    ID              reduce using rule 84 (whileloop -> WHILE O_PARENTHESIS expression C_PARENTHESIS block .)
    LIST            reduce using rule 84 (whileloop -> WHILE O_PARENTHESIS expression C_PARENTHESIS block .)
    WHILE           reduce using rule 84 (whileloop -> WHILE O_PARENTHESIS expression C_PARENTHESIS block .)
    TIMES           reduce using rule 84 (whileloop -> WHILE O_PARENTHESIS expression C_PARENTHESIS block .)
    BOOL            reduce using rule 84 (whileloop -> WHILE O_PARENTHESIS expression C_PARENTHESIS block .)
    INT             reduce using rule 84 (whileloop -> WHILE O_PARENTHESIS expression C_PARENTHESIS block .)
    FLOAT           reduce using rule 84 (whileloop -> WHILE O_PARENTHESIS expression C_PARENTHESIS block .)
    STRING          reduce using rule 84 (whileloop -> WHILE O_PARENTHESIS expression C_PARENTHESIS block .)
    RETURN          reduce using rule 84 (whileloop -> WHILE O_PARENTHESIS expression C_PARENTHESIS block .)
    C_BRACKET       reduce using rule 84 (whileloop -> WHILE O_PARENTHESIS expression C_PARENTHESIS block .)


state 132

    (60) termloop -> divmult term .

    SUM             reduce using rule 60 (termloop -> divmult term .)
    MINUS           reduce using rule 60 (termloop -> divmult term .)
    EQUALITY        reduce using rule 60 (termloop -> divmult term .)
    GREATER         reduce using rule 60 (termloop -> divmult term .)
    GREATER_EQUAL   reduce using rule 60 (termloop -> divmult term .)
    LESS            reduce using rule 60 (termloop -> divmult term .)
    LESS_EQUAL      reduce using rule 60 (termloop -> divmult term .)
    DIFFERENT       reduce using rule 60 (termloop -> divmult term .)
    AND             reduce using rule 60 (termloop -> divmult term .)
    OR              reduce using rule 60 (termloop -> divmult term .)
    C_PARENTHESIS   reduce using rule 60 (termloop -> divmult term .)
    COMMA           reduce using rule 60 (termloop -> divmult term .)
    SEMICOLON       reduce using rule 60 (termloop -> divmult term .)


state 133

    (24) writting -> PRINT O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON .

    IF              reduce using rule 24 (writting -> PRINT O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON .)
    PRINT           reduce using rule 24 (writting -> PRINT O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON .)
    ID              reduce using rule 24 (writting -> PRINT O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON .)
    LIST            reduce using rule 24 (writting -> PRINT O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON .)
    WHILE           reduce using rule 24 (writting -> PRINT O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON .)
    TIMES           reduce using rule 24 (writting -> PRINT O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON .)
    BOOL            reduce using rule 24 (writting -> PRINT O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON .)
    INT             reduce using rule 24 (writting -> PRINT O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON .)
    FLOAT           reduce using rule 24 (writting -> PRINT O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON .)
    STRING          reduce using rule 24 (writting -> PRINT O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON .)
    RETURN          reduce using rule 24 (writting -> PRINT O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON .)
    C_BRACKET       reduce using rule 24 (writting -> PRINT O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON .)


state 134

    (26) optionalwritting -> COMMA writtingloop .

    C_PARENTHESIS   reduce using rule 26 (optionalwritting -> COMMA writtingloop .)


state 135

    (30) normalinit -> type var EQUALS expression SEMICOLON .

    IF              reduce using rule 30 (normalinit -> type var EQUALS expression SEMICOLON .)
    PRINT           reduce using rule 30 (normalinit -> type var EQUALS expression SEMICOLON .)
    ID              reduce using rule 30 (normalinit -> type var EQUALS expression SEMICOLON .)
    LIST            reduce using rule 30 (normalinit -> type var EQUALS expression SEMICOLON .)
    WHILE           reduce using rule 30 (normalinit -> type var EQUALS expression SEMICOLON .)
    TIMES           reduce using rule 30 (normalinit -> type var EQUALS expression SEMICOLON .)
    BOOL            reduce using rule 30 (normalinit -> type var EQUALS expression SEMICOLON .)
    INT             reduce using rule 30 (normalinit -> type var EQUALS expression SEMICOLON .)
    FLOAT           reduce using rule 30 (normalinit -> type var EQUALS expression SEMICOLON .)
    STRING          reduce using rule 30 (normalinit -> type var EQUALS expression SEMICOLON .)
    RETURN          reduce using rule 30 (normalinit -> type var EQUALS expression SEMICOLON .)
    C_BRACKET       reduce using rule 30 (normalinit -> type var EQUALS expression SEMICOLON .)


state 136

    (86) functioncall -> ID O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON .

    IF              reduce using rule 86 (functioncall -> ID O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON .)
    PRINT           reduce using rule 86 (functioncall -> ID O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON .)
    ID              reduce using rule 86 (functioncall -> ID O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON .)
    LIST            reduce using rule 86 (functioncall -> ID O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON .)
    WHILE           reduce using rule 86 (functioncall -> ID O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON .)
    TIMES           reduce using rule 86 (functioncall -> ID O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON .)
    BOOL            reduce using rule 86 (functioncall -> ID O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON .)
    INT             reduce using rule 86 (functioncall -> ID O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON .)
    FLOAT           reduce using rule 86 (functioncall -> ID O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON .)
    STRING          reduce using rule 86 (functioncall -> ID O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON .)
    RETURN          reduce using rule 86 (functioncall -> ID O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON .)
    C_BRACKET       reduce using rule 86 (functioncall -> ID O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON .)


state 137

    (89) parametersinputloop -> COMMA expression . parametersinputloop
    (89) parametersinputloop -> . COMMA expression parametersinputloop
    (90) parametersinputloop -> .

    COMMA           shift and go to state 118
    C_PARENTHESIS   reduce using rule 90 (parametersinputloop -> .)

    parametersinputloop            shift and go to state 146

state 138

    (37) condition -> IF O_PARENTHESIS expression C_PARENTHESIS block . else
    (38) else -> . ELSE block
    (39) else -> .

    ELSE            shift and go to state 147
    IF              reduce using rule 39 (else -> .)
    PRINT           reduce using rule 39 (else -> .)
    ID              reduce using rule 39 (else -> .)
    LIST            reduce using rule 39 (else -> .)
    WHILE           reduce using rule 39 (else -> .)
    TIMES           reduce using rule 39 (else -> .)
    BOOL            reduce using rule 39 (else -> .)
    INT             reduce using rule 39 (else -> .)
    FLOAT           reduce using rule 39 (else -> .)
    STRING          reduce using rule 39 (else -> .)
    RETURN          reduce using rule 39 (else -> .)
    C_BRACKET       reduce using rule 39 (else -> .)

    else                           shift and go to state 148

state 139

    (31) listinit -> LIST type var EQUALS list . SEMICOLON

    SEMICOLON       shift and go to state 149


state 140

    (32) list -> O_S_BRACKET . listelements C_S_BRACKET
    (33) listelements -> . constants optionalconstants
    (34) listelements -> .
    (76) constants -> . INTCONST
    (77) constants -> . FLOATCONST
    (78) constants -> . STRINGCONST
    (79) constants -> . booleanconst
    (80) booleanconst -> . TRUE
    (81) booleanconst -> . FALSE

    C_S_BRACKET     reduce using rule 34 (listelements -> .)
    INTCONST        shift and go to state 59
    FLOATCONST      shift and go to state 54
    STRINGCONST     shift and go to state 57
    TRUE            shift and go to state 56
    FALSE           shift and go to state 64

    booleanconst                   shift and go to state 66
    constants                      shift and go to state 151
    listelements                   shift and go to state 150

state 141

    (5) function -> FUNCTION functiontype ID O_PARENTHESIS parameters C_PARENTHESIS block .

    FUNCTION        reduce using rule 5 (function -> FUNCTION functiontype ID O_PARENTHESIS parameters C_PARENTHESIS block .)
    $end            reduce using rule 5 (function -> FUNCTION functiontype ID O_PARENTHESIS parameters C_PARENTHESIS block .)


state 142

    (91) parameters -> type ID parametersloop .

    C_PARENTHESIS   reduce using rule 91 (parameters -> type ID parametersloop .)


state 143

    (93) parametersloop -> COMMA . type ID parametersloop
    (8) type -> . BOOL
    (9) type -> . INT
    (10) type -> . FLOAT
    (11) type -> . STRING

    BOOL            shift and go to state 15
    INT             shift and go to state 11
    FLOAT           shift and go to state 14
    STRING          shift and go to state 10

    type                           shift and go to state 152

state 144

    (73) functionorlist -> O_S_BRACKET INTCONST C_S_BRACKET .

    MULTIPLY        reduce using rule 73 (functionorlist -> O_S_BRACKET INTCONST C_S_BRACKET .)
    DIVIDE          reduce using rule 73 (functionorlist -> O_S_BRACKET INTCONST C_S_BRACKET .)
    MOD             reduce using rule 73 (functionorlist -> O_S_BRACKET INTCONST C_S_BRACKET .)
    SUM             reduce using rule 73 (functionorlist -> O_S_BRACKET INTCONST C_S_BRACKET .)
    MINUS           reduce using rule 73 (functionorlist -> O_S_BRACKET INTCONST C_S_BRACKET .)
    EQUALITY        reduce using rule 73 (functionorlist -> O_S_BRACKET INTCONST C_S_BRACKET .)
    GREATER         reduce using rule 73 (functionorlist -> O_S_BRACKET INTCONST C_S_BRACKET .)
    GREATER_EQUAL   reduce using rule 73 (functionorlist -> O_S_BRACKET INTCONST C_S_BRACKET .)
    LESS            reduce using rule 73 (functionorlist -> O_S_BRACKET INTCONST C_S_BRACKET .)
    LESS_EQUAL      reduce using rule 73 (functionorlist -> O_S_BRACKET INTCONST C_S_BRACKET .)
    DIFFERENT       reduce using rule 73 (functionorlist -> O_S_BRACKET INTCONST C_S_BRACKET .)
    AND             reduce using rule 73 (functionorlist -> O_S_BRACKET INTCONST C_S_BRACKET .)
    OR              reduce using rule 73 (functionorlist -> O_S_BRACKET INTCONST C_S_BRACKET .)
    C_PARENTHESIS   reduce using rule 73 (functionorlist -> O_S_BRACKET INTCONST C_S_BRACKET .)
    COMMA           reduce using rule 73 (functionorlist -> O_S_BRACKET INTCONST C_S_BRACKET .)
    SEMICOLON       reduce using rule 73 (functionorlist -> O_S_BRACKET INTCONST C_S_BRACKET .)


state 145

    (74) functionorlist -> O_PARENTHESIS parametersinput C_PARENTHESIS .

    MULTIPLY        reduce using rule 74 (functionorlist -> O_PARENTHESIS parametersinput C_PARENTHESIS .)
    DIVIDE          reduce using rule 74 (functionorlist -> O_PARENTHESIS parametersinput C_PARENTHESIS .)
    MOD             reduce using rule 74 (functionorlist -> O_PARENTHESIS parametersinput C_PARENTHESIS .)
    SUM             reduce using rule 74 (functionorlist -> O_PARENTHESIS parametersinput C_PARENTHESIS .)
    MINUS           reduce using rule 74 (functionorlist -> O_PARENTHESIS parametersinput C_PARENTHESIS .)
    EQUALITY        reduce using rule 74 (functionorlist -> O_PARENTHESIS parametersinput C_PARENTHESIS .)
    GREATER         reduce using rule 74 (functionorlist -> O_PARENTHESIS parametersinput C_PARENTHESIS .)
    GREATER_EQUAL   reduce using rule 74 (functionorlist -> O_PARENTHESIS parametersinput C_PARENTHESIS .)
    LESS            reduce using rule 74 (functionorlist -> O_PARENTHESIS parametersinput C_PARENTHESIS .)
    LESS_EQUAL      reduce using rule 74 (functionorlist -> O_PARENTHESIS parametersinput C_PARENTHESIS .)
    DIFFERENT       reduce using rule 74 (functionorlist -> O_PARENTHESIS parametersinput C_PARENTHESIS .)
    AND             reduce using rule 74 (functionorlist -> O_PARENTHESIS parametersinput C_PARENTHESIS .)
    OR              reduce using rule 74 (functionorlist -> O_PARENTHESIS parametersinput C_PARENTHESIS .)
    C_PARENTHESIS   reduce using rule 74 (functionorlist -> O_PARENTHESIS parametersinput C_PARENTHESIS .)
    COMMA           reduce using rule 74 (functionorlist -> O_PARENTHESIS parametersinput C_PARENTHESIS .)
    SEMICOLON       reduce using rule 74 (functionorlist -> O_PARENTHESIS parametersinput C_PARENTHESIS .)


state 146

    (89) parametersinputloop -> COMMA expression parametersinputloop .

    C_PARENTHESIS   reduce using rule 89 (parametersinputloop -> COMMA expression parametersinputloop .)


state 147

    (38) else -> ELSE . block
    (12) block -> . O_BRACKET statutesloop functionreturn C_BRACKET

    O_BRACKET       shift and go to state 7

    block                          shift and go to state 153

state 148

    (37) condition -> IF O_PARENTHESIS expression C_PARENTHESIS block else .

    IF              reduce using rule 37 (condition -> IF O_PARENTHESIS expression C_PARENTHESIS block else .)
    PRINT           reduce using rule 37 (condition -> IF O_PARENTHESIS expression C_PARENTHESIS block else .)
    ID              reduce using rule 37 (condition -> IF O_PARENTHESIS expression C_PARENTHESIS block else .)
    LIST            reduce using rule 37 (condition -> IF O_PARENTHESIS expression C_PARENTHESIS block else .)
    WHILE           reduce using rule 37 (condition -> IF O_PARENTHESIS expression C_PARENTHESIS block else .)
    TIMES           reduce using rule 37 (condition -> IF O_PARENTHESIS expression C_PARENTHESIS block else .)
    BOOL            reduce using rule 37 (condition -> IF O_PARENTHESIS expression C_PARENTHESIS block else .)
    INT             reduce using rule 37 (condition -> IF O_PARENTHESIS expression C_PARENTHESIS block else .)
    FLOAT           reduce using rule 37 (condition -> IF O_PARENTHESIS expression C_PARENTHESIS block else .)
    STRING          reduce using rule 37 (condition -> IF O_PARENTHESIS expression C_PARENTHESIS block else .)
    RETURN          reduce using rule 37 (condition -> IF O_PARENTHESIS expression C_PARENTHESIS block else .)
    C_BRACKET       reduce using rule 37 (condition -> IF O_PARENTHESIS expression C_PARENTHESIS block else .)


state 149

    (31) listinit -> LIST type var EQUALS list SEMICOLON .

    IF              reduce using rule 31 (listinit -> LIST type var EQUALS list SEMICOLON .)
    PRINT           reduce using rule 31 (listinit -> LIST type var EQUALS list SEMICOLON .)
    ID              reduce using rule 31 (listinit -> LIST type var EQUALS list SEMICOLON .)
    LIST            reduce using rule 31 (listinit -> LIST type var EQUALS list SEMICOLON .)
    WHILE           reduce using rule 31 (listinit -> LIST type var EQUALS list SEMICOLON .)
    TIMES           reduce using rule 31 (listinit -> LIST type var EQUALS list SEMICOLON .)
    BOOL            reduce using rule 31 (listinit -> LIST type var EQUALS list SEMICOLON .)
    INT             reduce using rule 31 (listinit -> LIST type var EQUALS list SEMICOLON .)
    FLOAT           reduce using rule 31 (listinit -> LIST type var EQUALS list SEMICOLON .)
    STRING          reduce using rule 31 (listinit -> LIST type var EQUALS list SEMICOLON .)
    RETURN          reduce using rule 31 (listinit -> LIST type var EQUALS list SEMICOLON .)
    C_BRACKET       reduce using rule 31 (listinit -> LIST type var EQUALS list SEMICOLON .)


state 150

    (32) list -> O_S_BRACKET listelements . C_S_BRACKET

    C_S_BRACKET     shift and go to state 154


state 151

    (33) listelements -> constants . optionalconstants
    (35) optionalconstants -> . COMMA constants optionalconstants
    (36) optionalconstants -> .

    COMMA           shift and go to state 156
    C_S_BRACKET     reduce using rule 36 (optionalconstants -> .)

    optionalconstants              shift and go to state 155

state 152

    (93) parametersloop -> COMMA type . ID parametersloop

    ID              shift and go to state 157


state 153

    (38) else -> ELSE block .

    IF              reduce using rule 38 (else -> ELSE block .)
    PRINT           reduce using rule 38 (else -> ELSE block .)
    ID              reduce using rule 38 (else -> ELSE block .)
    LIST            reduce using rule 38 (else -> ELSE block .)
    WHILE           reduce using rule 38 (else -> ELSE block .)
    TIMES           reduce using rule 38 (else -> ELSE block .)
    BOOL            reduce using rule 38 (else -> ELSE block .)
    INT             reduce using rule 38 (else -> ELSE block .)
    FLOAT           reduce using rule 38 (else -> ELSE block .)
    STRING          reduce using rule 38 (else -> ELSE block .)
    RETURN          reduce using rule 38 (else -> ELSE block .)
    C_BRACKET       reduce using rule 38 (else -> ELSE block .)


state 154

    (32) list -> O_S_BRACKET listelements C_S_BRACKET .

    SEMICOLON       reduce using rule 32 (list -> O_S_BRACKET listelements C_S_BRACKET .)


state 155

    (33) listelements -> constants optionalconstants .

    C_S_BRACKET     reduce using rule 33 (listelements -> constants optionalconstants .)


state 156

    (35) optionalconstants -> COMMA . constants optionalconstants
    (76) constants -> . INTCONST
    (77) constants -> . FLOATCONST
    (78) constants -> . STRINGCONST
    (79) constants -> . booleanconst
    (80) booleanconst -> . TRUE
    (81) booleanconst -> . FALSE

    INTCONST        shift and go to state 59
    FLOATCONST      shift and go to state 54
    STRINGCONST     shift and go to state 57
    TRUE            shift and go to state 56
    FALSE           shift and go to state 64

    booleanconst                   shift and go to state 66
    constants                      shift and go to state 158

state 157

    (93) parametersloop -> COMMA type ID . parametersloop
    (93) parametersloop -> . COMMA type ID parametersloop
    (94) parametersloop -> .

    COMMA           shift and go to state 143
    C_PARENTHESIS   reduce using rule 94 (parametersloop -> .)

    parametersloop                 shift and go to state 159

state 158

    (35) optionalconstants -> COMMA constants . optionalconstants
    (35) optionalconstants -> . COMMA constants optionalconstants
    (36) optionalconstants -> .

    COMMA           shift and go to state 156
    C_S_BRACKET     reduce using rule 36 (optionalconstants -> .)

    optionalconstants              shift and go to state 160

state 159

    (93) parametersloop -> COMMA type ID parametersloop .

    C_PARENTHESIS   reduce using rule 93 (parametersloop -> COMMA type ID parametersloop .)


state 160

    (35) optionalconstants -> COMMA constants optionalconstants .

    C_S_BRACKET     reduce using rule 35 (optionalconstants -> COMMA constants optionalconstants .)

