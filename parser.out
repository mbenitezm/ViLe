Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> main functionloop
Rule 2     main -> MAIN block
Rule 3     functionloop -> function functionloop
Rule 4     functionloop -> <empty>
Rule 5     function -> FUNCTION functiontype ID O_PARENTHESIS parameters C_PARENTHESIS block
Rule 6     functiontype -> VOID
Rule 7     functiontype -> BOOL
Rule 8     functiontype -> INT
Rule 9     functiontype -> FLOAT
Rule 10    functiontype -> STRING
Rule 11    type -> BOOL
Rule 12    type -> INT
Rule 13    type -> FLOAT
Rule 14    type -> STRING
Rule 15    block -> O_BRACKET statutesloop functionreturn C_BRACKET
Rule 16    functionreturn -> RETURN expression SEMICOLON
Rule 17    functionreturn -> <empty>
Rule 18    statutesloop -> statute statutesloop
Rule 19    statutesloop -> <empty>
Rule 20    statute -> init
Rule 21    statute -> condition
Rule 22    statute -> writting
Rule 23    statute -> loop
Rule 24    statute -> assignation
Rule 25    statute -> functioncall
Rule 26    assignation -> var_assign EQUALS expression SEMICOLON
Rule 27    writting -> PRINT O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON
Rule 28    writtingloop -> expression optionalwritting
Rule 29    optionalwritting -> COMMA writtingloop
Rule 30    optionalwritting -> <empty>
Rule 31    init -> listinit
Rule 32    init -> normalinit
Rule 33    normalinit -> type var EQUALS expression SEMICOLON
Rule 34    listinit -> LIST type var EQUALS list SEMICOLON
Rule 35    list -> O_S_BRACKET listelements C_S_BRACKET
Rule 36    listelements -> constants optionalconstants
Rule 37    listelements -> <empty>
Rule 38    optionalconstants -> COMMA constants optionalconstants
Rule 39    optionalconstants -> <empty>
Rule 40    condition -> IF O_PARENTHESIS expression C_PARENTHESIS block else
Rule 41    else -> ELSE block
Rule 42    else -> <empty>
Rule 43    expression -> expression2 expressionoptional
Rule 44    expressionoptional -> logicop expression2
Rule 45    expressionoptional -> <empty>
Rule 46    expression2 -> exp expression2optional
Rule 47    expression2optional -> relop exp
Rule 48    expression2optional -> <empty>
Rule 49    logicop -> AND
Rule 50    logicop -> OR
Rule 51    relop -> EQUALITY
Rule 52    relop -> GREATER
Rule 53    relop -> GREATER_EQUAL
Rule 54    relop -> LESS
Rule 55    relop -> LESS_EQUAL
Rule 56    relop -> DIFFERENT
Rule 57    exp -> term exploop
Rule 58    exploop -> addsub exp
Rule 59    exploop -> <empty>
Rule 60    addsub -> SUM
Rule 61    addsub -> MINUS
Rule 62    term -> fact termloop
Rule 63    termloop -> divmult term
Rule 64    termloop -> <empty>
Rule 65    divmult -> MULTIPLY
Rule 66    divmult -> DIVIDE
Rule 67    divmult -> MOD
Rule 68    fact -> varconst
Rule 69    fact -> O_PARENTHESIS expression C_PARENTHESIS
Rule 70    var_assign -> ID listaccess
Rule 71    var -> ID listaccess
Rule 72    listaccess -> O_S_BRACKET INTCONST C_S_BRACKET
Rule 73    listaccess -> <empty>
Rule 74    varconst -> varconstfunction
Rule 75    varconst -> constants
Rule 76    varconstfunction -> ID functionorlist
Rule 77    functionorlist -> O_S_BRACKET INTCONST C_S_BRACKET
Rule 78    functionorlist -> O_PARENTHESIS parametersinput C_PARENTHESIS
Rule 79    functionorlist -> <empty>
Rule 80    constants -> INTCONST
Rule 81    constants -> FLOATCONST
Rule 82    constants -> STRINGCONST
Rule 83    constants -> booleanconst
Rule 84    booleanconst -> TRUE
Rule 85    booleanconst -> FALSE
Rule 86    loop -> whileloop
Rule 87    loop -> timesloop
Rule 88    whileloop -> WHILE O_PARENTHESIS expression C_PARENTHESIS block
Rule 89    timesloop -> TIMES O_PARENTHESIS INTCONST C_PARENTHESIS block
Rule 90    functioncall -> ID O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON
Rule 91    parametersinput -> expression parametersinputloop
Rule 92    parametersinput -> <empty>
Rule 93    parametersinputloop -> COMMA expression parametersinputloop
Rule 94    parametersinputloop -> <empty>
Rule 95    parameters -> parameterinit parametersloop
Rule 96    parameters -> <empty>
Rule 97    parameterinit -> typpe ID
Rule 98    parametersloop -> COMMA parameterinit parametersloop
Rule 99    parametersloop -> <empty>

Terminals, with rules where they appear

AND                  : 49
BOOL                 : 7 11
COMMA                : 29 38 93 98
C_BRACKET            : 15
C_PARENTHESIS        : 5 27 40 69 78 88 89 90
C_S_BRACKET          : 35 72 77
DIFFERENT            : 56
DIVIDE               : 66
ELSE                 : 41
EQUALITY             : 51
EQUALS               : 26 33 34
FALSE                : 85
FLOAT                : 9 13
FLOATCONST           : 81
FUNCTION             : 5
GREATER              : 52
GREATER_EQUAL        : 53
ID                   : 5 70 71 76 90 97
IF                   : 40
INT                  : 8 12
INTCONST             : 72 77 80 89
LESS                 : 54
LESS_EQUAL           : 55
LIST                 : 34
MAIN                 : 2
MINUS                : 61
MOD                  : 67
MULTIPLY             : 65
OR                   : 50
O_BRACKET            : 15
O_PARENTHESIS        : 5 27 40 69 78 88 89 90
O_S_BRACKET          : 35 72 77
PRINT                : 27
RETURN               : 16
SEMICOLON            : 16 26 27 33 34 90
STRING               : 10 14
STRINGCONST          : 82
SUM                  : 60
TIMES                : 89
TRUE                 : 84
VOID                 : 6
WHILE                : 88
error                : 

Nonterminals, with rules where they appear

addsub               : 58
assignation          : 24
block                : 2 5 40 41 88 89
booleanconst         : 83
condition            : 21
constants            : 36 38 75
divmult              : 63
else                 : 40
exp                  : 46 47 58
exploop              : 57
expression           : 16 26 28 33 40 69 88 91 93
expression2          : 43 44
expression2optional  : 46
expressionoptional   : 43
fact                 : 62
function             : 3
functioncall         : 25
functionloop         : 1 3
functionorlist       : 76
functionreturn       : 15
functiontype         : 5
init                 : 20
list                 : 34
listaccess           : 70 71
listelements         : 35
listinit             : 31
logicop              : 44
loop                 : 23
main                 : 1
normalinit           : 32
optionalconstants    : 36 38
optionalwritting     : 28
parameter_init       : 95
parameterinit        : 98
parameters           : 5
parametersinput      : 78 90
parametersinputloop  : 91 93
parametersloop       : 95 98
program              : 0
relop                : 47
statute              : 18
statutesloop         : 15 18
term                 : 57 63
termloop             : 62
timesloop            : 87
type                 : 33 34 97
var                  : 33 34
var_assign           : 26
varconst             : 68
varconstfunction     : 74
whileloop            : 86
writting             : 22
writtingloop         : 27 29

ate 0

    (0) S' -> . program
    (1) program -> . main functionloop
    (2) main -> . MAIN block

    MAIN            shift and go to state 3

    main                           shift and go to state 1
    program                        shift and go to state 2

state 1

    (1) program -> main . functionloop
    (3) functionloop -> . function functionloop
    (4) functionloop -> .
    (5) function -> . FUNCTION functiontype ID O_PARENTHESIS parameters C_PARENTHESIS block

    $end            reduce using rule 4 (functionloop -> .)
    FUNCTION        shift and go to state 5

    function                       shift and go to state 4
    functionloop                   shift and go to state 6

state 2

    (0) S' -> program .



state 3

    (2) main -> MAIN . block
    (15) block -> . O_BRACKET statutesloop functionreturn C_BRACKET

    O_BRACKET       shift and go to state 7

    block                          shift and go to state 8

state 4

    (3) functionloop -> function . functionloop
    (3) functionloop -> . function functionloop
    (4) functionloop -> .
    (5) function -> . FUNCTION functiontype ID O_PARENTHESIS parameters C_PARENTHESIS block

    $end            reduce using rule 4 (functionloop -> .)
    FUNCTION        shift and go to state 5

    function                       shift and go to state 4
    functionloop                   shift and go to state 9

state 5

    (5) function -> FUNCTION . functiontype ID O_PARENTHESIS parameters C_PARENTHESIS block
    (6) functiontype -> . VOID
    (7) functiontype -> . BOOL
    (8) functiontype -> . INT
    (9) functiontype -> . FLOAT
    (10) functiontype -> . STRING

    VOID            shift and go to state 12
    BOOL            shift and go to state 14
    INT             shift and go to state 11
    FLOAT           shift and go to state 13
    STRING          shift and go to state 10

    functiontype                   shift and go to state 15

state 6

    (1) program -> main functionloop .

    $end            reduce using rule 1 (program -> main functionloop .)


state 7

    (15) block -> O_BRACKET . statutesloop functionreturn C_BRACKET
    (18) statutesloop -> . statute statutesloop
    (19) statutesloop -> .
    (20) statute -> . init
    (21) statute -> . condition
    (22) statute -> . writting
    (23) statute -> . loop
    (24) statute -> . assignation
    (25) statute -> . functioncall
    (31) init -> . listinit
    (32) init -> . normalinit
    (40) condition -> . IF O_PARENTHESIS expression C_PARENTHESIS block else
    (27) writting -> . PRINT O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON
    (86) loop -> . whileloop
    (87) loop -> . timesloop
    (26) assignation -> . var_assign EQUALS expression SEMICOLON
    (90) functioncall -> . ID O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON
    (34) listinit -> . LIST type var EQUALS list SEMICOLON
    (33) normalinit -> . type var EQUALS expression SEMICOLON
    (88) whileloop -> . WHILE O_PARENTHESIS expression C_PARENTHESIS block
    (89) timesloop -> . TIMES O_PARENTHESIS INTCONST C_PARENTHESIS block
    (70) var_assign -> . ID listaccess
    (11) type -> . BOOL
    (12) type -> . INT
    (13) type -> . FLOAT
    (14) type -> . STRING

    RETURN          reduce using rule 19 (statutesloop -> .)
    C_BRACKET       reduce using rule 19 (statutesloop -> .)
    IF              shift and go to state 31
    PRINT           shift and go to state 18
    ID              shift and go to state 29
    LIST            shift and go to state 37
    WHILE           shift and go to state 17
    TIMES           shift and go to state 16
    BOOL            shift and go to state 21
    INT             shift and go to state 35
    FLOAT           shift and go to state 36
    STRING          shift and go to state 25

    whileloop                      shift and go to state 19
    init                           shift and go to state 20
    var_assign                     shift and go to state 22
    type                           shift and go to state 23
    normalinit                     shift and go to state 24
    listinit                       shift and go to state 26
    writting                       shift and go to state 27
    timesloop                      shift and go to state 28
    condition                      shift and go to state 30
    statute                        shift and go to state 32
    assignation                    shift and go to state 33
    statutesloop                   shift and go to state 34
    functioncall                   shift and go to state 38
    loop                           shift and go to state 39

state 8

    (2) main -> MAIN block .

    FUNCTION        reduce using rule 2 (main -> MAIN block .)
    $end            reduce using rule 2 (main -> MAIN block .)


state 9

    (3) functionloop -> function functionloop .

    $end            reduce using rule 3 (functionloop -> function functionloop .)


state 10

    (10) functiontype -> STRING .

    ID              reduce using rule 10 (functiontype -> STRING .)


state 11

    (8) functiontype -> INT .

    ID              reduce using rule 8 (functiontype -> INT .)


state 12

    (6) functiontype -> VOID .

    ID              reduce using rule 6 (functiontype -> VOID .)


state 13

    (9) functiontype -> FLOAT .

    ID              reduce using rule 9 (functiontype -> FLOAT .)


state 14

    (7) functiontype -> BOOL .

    ID              reduce using rule 7 (functiontype -> BOOL .)


state 15

    (5) function -> FUNCTION functiontype . ID O_PARENTHESIS parameters C_PARENTHESIS block

    ID              shift and go to state 40


state 16

    (89) timesloop -> TIMES . O_PARENTHESIS INTCONST C_PARENTHESIS block

    O_PARENTHESIS   shift and go to state 41


state 17

    (88) whileloop -> WHILE . O_PARENTHESIS expression C_PARENTHESIS block

    O_PARENTHESIS   shift and go to state 42


state 18

    (27) writting -> PRINT . O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON

    O_PARENTHESIS   shift and go to state 43


state 19

    (86) loop -> whileloop .

    IF              reduce using rule 86 (loop -> whileloop .)
    PRINT           reduce using rule 86 (loop -> whileloop .)
    ID              reduce using rule 86 (loop -> whileloop .)
    LIST            reduce using rule 86 (loop -> whileloop .)
    WHILE           reduce using rule 86 (loop -> whileloop .)
    TIMES           reduce using rule 86 (loop -> whileloop .)
    BOOL            reduce using rule 86 (loop -> whileloop .)
    INT             reduce using rule 86 (loop -> whileloop .)
    FLOAT           reduce using rule 86 (loop -> whileloop .)
    STRING          reduce using rule 86 (loop -> whileloop .)
    RETURN          reduce using rule 86 (loop -> whileloop .)
    C_BRACKET       reduce using rule 86 (loop -> whileloop .)


state 20

    (20) statute -> init .

    IF              reduce using rule 20 (statute -> init .)
    PRINT           reduce using rule 20 (statute -> init .)
    ID              reduce using rule 20 (statute -> init .)
    LIST            reduce using rule 20 (statute -> init .)
    WHILE           reduce using rule 20 (statute -> init .)
    TIMES           reduce using rule 20 (statute -> init .)
    BOOL            reduce using rule 20 (statute -> init .)
    INT             reduce using rule 20 (statute -> init .)
    FLOAT           reduce using rule 20 (statute -> init .)
    STRING          reduce using rule 20 (statute -> init .)
    RETURN          reduce using rule 20 (statute -> init .)
    C_BRACKET       reduce using rule 20 (statute -> init .)


state 21

    (11) type -> BOOL .

    ID              reduce using rule 11 (type -> BOOL .)


state 22

    (26) assignation -> var_assign . EQUALS expression SEMICOLON

    EQUALS          shift and go to state 44


state 23

    (33) normalinit -> type . var EQUALS expression SEMICOLON
    (71) var -> . ID listaccess

    ID              shift and go to state 46

    var                            shift and go to state 45

state 24

    (32) init -> normalinit .

    IF              reduce using rule 32 (init -> normalinit .)
    PRINT           reduce using rule 32 (init -> normalinit .)
    ID              reduce using rule 32 (init -> normalinit .)
    LIST            reduce using rule 32 (init -> normalinit .)
    WHILE           reduce using rule 32 (init -> normalinit .)
    TIMES           reduce using rule 32 (init -> normalinit .)
    BOOL            reduce using rule 32 (init -> normalinit .)
    INT             reduce using rule 32 (init -> normalinit .)
    FLOAT           reduce using rule 32 (init -> normalinit .)
    STRING          reduce using rule 32 (init -> normalinit .)
    RETURN          reduce using rule 32 (init -> normalinit .)
    C_BRACKET       reduce using rule 32 (init -> normalinit .)


state 25

    (14) type -> STRING .

    ID              reduce using rule 14 (type -> STRING .)


state 26

    (31) init -> listinit .

    IF              reduce using rule 31 (init -> listinit .)
    PRINT           reduce using rule 31 (init -> listinit .)
    ID              reduce using rule 31 (init -> listinit .)
    LIST            reduce using rule 31 (init -> listinit .)
    WHILE           reduce using rule 31 (init -> listinit .)
    TIMES           reduce using rule 31 (init -> listinit .)
    BOOL            reduce using rule 31 (init -> listinit .)
    INT             reduce using rule 31 (init -> listinit .)
    FLOAT           reduce using rule 31 (init -> listinit .)
    STRING          reduce using rule 31 (init -> listinit .)
    RETURN          reduce using rule 31 (init -> listinit .)
    C_BRACKET       reduce using rule 31 (init -> listinit .)


state 27

    (22) statute -> writting .

    IF              reduce using rule 22 (statute -> writting .)
    PRINT           reduce using rule 22 (statute -> writting .)
    ID              reduce using rule 22 (statute -> writting .)
    LIST            reduce using rule 22 (statute -> writting .)
    WHILE           reduce using rule 22 (statute -> writting .)
    TIMES           reduce using rule 22 (statute -> writting .)
    BOOL            reduce using rule 22 (statute -> writting .)
    INT             reduce using rule 22 (statute -> writting .)
    FLOAT           reduce using rule 22 (statute -> writting .)
    STRING          reduce using rule 22 (statute -> writting .)
    RETURN          reduce using rule 22 (statute -> writting .)
    C_BRACKET       reduce using rule 22 (statute -> writting .)


state 28

    (87) loop -> timesloop .

    IF              reduce using rule 87 (loop -> timesloop .)
    PRINT           reduce using rule 87 (loop -> timesloop .)
    ID              reduce using rule 87 (loop -> timesloop .)
    LIST            reduce using rule 87 (loop -> timesloop .)
    WHILE           reduce using rule 87 (loop -> timesloop .)
    TIMES           reduce using rule 87 (loop -> timesloop .)
    BOOL            reduce using rule 87 (loop -> timesloop .)
    INT             reduce using rule 87 (loop -> timesloop .)
    FLOAT           reduce using rule 87 (loop -> timesloop .)
    STRING          reduce using rule 87 (loop -> timesloop .)
    RETURN          reduce using rule 87 (loop -> timesloop .)
    C_BRACKET       reduce using rule 87 (loop -> timesloop .)


state 29

    (90) functioncall -> ID . O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON
    (70) var_assign -> ID . listaccess
    (72) listaccess -> . O_S_BRACKET INTCONST C_S_BRACKET
    (73) listaccess -> .

    O_PARENTHESIS   shift and go to state 49
    O_S_BRACKET     shift and go to state 47
    EQUALS          reduce using rule 73 (listaccess -> .)

    listaccess                     shift and go to state 48

state 30

    (21) statute -> condition .

    IF              reduce using rule 21 (statute -> condition .)
    PRINT           reduce using rule 21 (statute -> condition .)
    ID              reduce using rule 21 (statute -> condition .)
    LIST            reduce using rule 21 (statute -> condition .)
    WHILE           reduce using rule 21 (statute -> condition .)
    TIMES           reduce using rule 21 (statute -> condition .)
    BOOL            reduce using rule 21 (statute -> condition .)
    INT             reduce using rule 21 (statute -> condition .)
    FLOAT           reduce using rule 21 (statute -> condition .)
    STRING          reduce using rule 21 (statute -> condition .)
    RETURN          reduce using rule 21 (statute -> condition .)
    C_BRACKET       reduce using rule 21 (statute -> condition .)


state 31

    (40) condition -> IF . O_PARENTHESIS expression C_PARENTHESIS block else

    O_PARENTHESIS   shift and go to state 50


state 32

    (18) statutesloop -> statute . statutesloop
    (18) statutesloop -> . statute statutesloop
    (19) statutesloop -> .
    (20) statute -> . init
    (21) statute -> . condition
    (22) statute -> . writting
    (23) statute -> . loop
    (24) statute -> . assignation
    (25) statute -> . functioncall
    (31) init -> . listinit
    (32) init -> . normalinit
    (40) condition -> . IF O_PARENTHESIS expression C_PARENTHESIS block else
    (27) writting -> . PRINT O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON
    (86) loop -> . whileloop
    (87) loop -> . timesloop
    (26) assignation -> . var_assign EQUALS expression SEMICOLON
    (90) functioncall -> . ID O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON
    (34) listinit -> . LIST type var EQUALS list SEMICOLON
    (33) normalinit -> . type var EQUALS expression SEMICOLON
    (88) whileloop -> . WHILE O_PARENTHESIS expression C_PARENTHESIS block
    (89) timesloop -> . TIMES O_PARENTHESIS INTCONST C_PARENTHESIS block
    (70) var_assign -> . ID listaccess
    (11) type -> . BOOL
    (12) type -> . INT
    (13) type -> . FLOAT
    (14) type -> . STRING

    RETURN          reduce using rule 19 (statutesloop -> .)
    C_BRACKET       reduce using rule 19 (statutesloop -> .)
    IF              shift and go to state 31
    PRINT           shift and go to state 18
    ID              shift and go to state 29
    LIST            shift and go to state 37
    WHILE           shift and go to state 17
    TIMES           shift and go to state 16
    BOOL            shift and go to state 21
    INT             shift and go to state 35
    FLOAT           shift and go to state 36
    STRING          shift and go to state 25

    whileloop                      shift and go to state 19
    init                           shift and go to state 20
    var_assign                     shift and go to state 22
    type                           shift and go to state 23
    normalinit                     shift and go to state 24
    listinit                       shift and go to state 26
    writting                       shift and go to state 27
    timesloop                      shift and go to state 28
    condition                      shift and go to state 30
    statute                        shift and go to state 32
    assignation                    shift and go to state 33
    statutesloop                   shift and go to state 51
    functioncall                   shift and go to state 38
    loop                           shift and go to state 39

state 33

    (24) statute -> assignation .

    IF              reduce using rule 24 (statute -> assignation .)
    PRINT           reduce using rule 24 (statute -> assignation .)
    ID              reduce using rule 24 (statute -> assignation .)
    LIST            reduce using rule 24 (statute -> assignation .)
    WHILE           reduce using rule 24 (statute -> assignation .)
    TIMES           reduce using rule 24 (statute -> assignation .)
    BOOL            reduce using rule 24 (statute -> assignation .)
    INT             reduce using rule 24 (statute -> assignation .)
    FLOAT           reduce using rule 24 (statute -> assignation .)
    STRING          reduce using rule 24 (statute -> assignation .)
    RETURN          reduce using rule 24 (statute -> assignation .)
    C_BRACKET       reduce using rule 24 (statute -> assignation .)


state 34

    (15) block -> O_BRACKET statutesloop . functionreturn C_BRACKET
    (16) functionreturn -> . RETURN expression SEMICOLON
    (17) functionreturn -> .

    RETURN          shift and go to state 52
    C_BRACKET       reduce using rule 17 (functionreturn -> .)

    functionreturn                 shift and go to state 53

state 35

    (12) type -> INT .

    ID              reduce using rule 12 (type -> INT .)


state 36

    (13) type -> FLOAT .

    ID              reduce using rule 13 (type -> FLOAT .)


state 37

    (34) listinit -> LIST . type var EQUALS list SEMICOLON
    (11) type -> . BOOL
    (12) type -> . INT
    (13) type -> . FLOAT
    (14) type -> . STRING

    BOOL            shift and go to state 21
    INT             shift and go to state 35
    FLOAT           shift and go to state 36
    STRING          shift and go to state 25

    type                           shift and go to state 54

state 38

    (25) statute -> functioncall .

    IF              reduce using rule 25 (statute -> functioncall .)
    PRINT           reduce using rule 25 (statute -> functioncall .)
    ID              reduce using rule 25 (statute -> functioncall .)
    LIST            reduce using rule 25 (statute -> functioncall .)
    WHILE           reduce using rule 25 (statute -> functioncall .)
    TIMES           reduce using rule 25 (statute -> functioncall .)
    BOOL            reduce using rule 25 (statute -> functioncall .)
    INT             reduce using rule 25 (statute -> functioncall .)
    FLOAT           reduce using rule 25 (statute -> functioncall .)
    STRING          reduce using rule 25 (statute -> functioncall .)
    RETURN          reduce using rule 25 (statute -> functioncall .)
    C_BRACKET       reduce using rule 25 (statute -> functioncall .)


state 39

    (23) statute -> loop .

    IF              reduce using rule 23 (statute -> loop .)
    PRINT           reduce using rule 23 (statute -> loop .)
    ID              reduce using rule 23 (statute -> loop .)
    LIST            reduce using rule 23 (statute -> loop .)
    WHILE           reduce using rule 23 (statute -> loop .)
    TIMES           reduce using rule 23 (statute -> loop .)
    BOOL            reduce using rule 23 (statute -> loop .)
    INT             reduce using rule 23 (statute -> loop .)
    FLOAT           reduce using rule 23 (statute -> loop .)
    STRING          reduce using rule 23 (statute -> loop .)
    RETURN          reduce using rule 23 (statute -> loop .)
    C_BRACKET       reduce using rule 23 (statute -> loop .)


state 40

    (5) function -> FUNCTION functiontype ID . O_PARENTHESIS parameters C_PARENTHESIS block

    O_PARENTHESIS   shift and go to state 55


state 41

    (89) timesloop -> TIMES O_PARENTHESIS . INTCONST C_PARENTHESIS block

    INTCONST        shift and go to state 56


state 42

    (88) whileloop -> WHILE O_PARENTHESIS . expression C_PARENTHESIS block
    (43) expression -> . expression2 expressionoptional
    (46) expression2 -> . exp expression2optional
    (57) exp -> . term exploop
    (62) term -> . fact termloop
    (68) fact -> . varconst
    (69) fact -> . O_PARENTHESIS expression C_PARENTHESIS
    (74) varconst -> . varconstfunction
    (75) varconst -> . constants
    (76) varconstfunction -> . ID functionorlist
    (80) constants -> . INTCONST
    (81) constants -> . FLOATCONST
    (82) constants -> . STRINGCONST
    (83) constants -> . booleanconst
    (84) booleanconst -> . TRUE
    (85) booleanconst -> . FALSE

    O_PARENTHESIS   shift and go to state 58
    ID              shift and go to state 64
    INTCONST        shift and go to state 62
    FLOATCONST      shift and go to state 57
    STRINGCONST     shift and go to state 60
    TRUE            shift and go to state 59
    FALSE           shift and go to state 67

    term                           shift and go to state 66
    booleanconst                   shift and go to state 69
    varconst                       shift and go to state 68
    fact                           shift and go to state 72
    exp                            shift and go to state 70
    varconstfunction               shift and go to state 61
    constants                      shift and go to state 65
    expression2                    shift and go to state 63
    expression                     shift and go to state 71

state 43

    (27) writting -> PRINT O_PARENTHESIS . writtingloop C_PARENTHESIS SEMICOLON
    (28) writtingloop -> . expression optionalwritting
    (43) expression -> . expression2 expressionoptional
    (46) expression2 -> . exp expression2optional
    (57) exp -> . term exploop
    (62) term -> . fact termloop
    (68) fact -> . varconst
    (69) fact -> . O_PARENTHESIS expression C_PARENTHESIS
    (74) varconst -> . varconstfunction
    (75) varconst -> . constants
    (76) varconstfunction -> . ID functionorlist
    (80) constants -> . INTCONST
    (81) constants -> . FLOATCONST
    (82) constants -> . STRINGCONST
    (83) constants -> . booleanconst
    (84) booleanconst -> . TRUE
    (85) booleanconst -> . FALSE

    O_PARENTHESIS   shift and go to state 58
    ID              shift and go to state 64
    INTCONST        shift and go to state 62
    FLOATCONST      shift and go to state 57
    STRINGCONST     shift and go to state 60
    TRUE            shift and go to state 59
    FALSE           shift and go to state 67

    term                           shift and go to state 66
    booleanconst                   shift and go to state 69
    varconst                       shift and go to state 68
    constants                      shift and go to state 65
    exp                            shift and go to state 70
    varconstfunction               shift and go to state 61
    writtingloop                   shift and go to state 73
    expression2                    shift and go to state 63
    expression                     shift and go to state 74
    fact                           shift and go to state 72

state 44

    (26) assignation -> var_assign EQUALS . expression SEMICOLON
    (43) expression -> . expression2 expressionoptional
    (46) expression2 -> . exp expression2optional
    (57) exp -> . term exploop
    (62) term -> . fact termloop
    (68) fact -> . varconst
    (69) fact -> . O_PARENTHESIS expression C_PARENTHESIS
    (74) varconst -> . varconstfunction
    (75) varconst -> . constants
    (76) varconstfunction -> . ID functionorlist
    (80) constants -> . INTCONST
    (81) constants -> . FLOATCONST
    (82) constants -> . STRINGCONST
    (83) constants -> . booleanconst
    (84) booleanconst -> . TRUE
    (85) booleanconst -> . FALSE

    O_PARENTHESIS   shift and go to state 58
    ID              shift and go to state 64
    INTCONST        shift and go to state 62
    FLOATCONST      shift and go to state 57
    STRINGCONST     shift and go to state 60
    TRUE            shift and go to state 59
    FALSE           shift and go to state 67

    term                           shift and go to state 66
    booleanconst                   shift and go to state 69
    varconst                       shift and go to state 68
    constants                      shift and go to state 65
    exp                            shift and go to state 70
    varconstfunction               shift and go to state 61
    expression2                    shift and go to state 63
    expression                     shift and go to state 75
    fact                           shift and go to state 72

state 45

    (33) normalinit -> type var . EQUALS expression SEMICOLON

    EQUALS          shift and go to state 76


state 46

    (71) var -> ID . listaccess
    (72) listaccess -> . O_S_BRACKET INTCONST C_S_BRACKET
    (73) listaccess -> .

    O_S_BRACKET     shift and go to state 47
    EQUALS          reduce using rule 73 (listaccess -> .)

    listaccess                     shift and go to state 77

state 47

    (72) listaccess -> O_S_BRACKET . INTCONST C_S_BRACKET

    INTCONST        shift and go to state 78


state 48

    (70) var_assign -> ID listaccess .

    EQUALS          reduce using rule 70 (var_assign -> ID listaccess .)


state 49

    (90) functioncall -> ID O_PARENTHESIS . parametersinput C_PARENTHESIS SEMICOLON
    (91) parametersinput -> . expression parametersinputloop
    (92) parametersinput -> .
    (43) expression -> . expression2 expressionoptional
    (46) expression2 -> . exp expression2optional
    (57) exp -> . term exploop
    (62) term -> . fact termloop
    (68) fact -> . varconst
    (69) fact -> . O_PARENTHESIS expression C_PARENTHESIS
    (74) varconst -> . varconstfunction
    (75) varconst -> . constants
    (76) varconstfunction -> . ID functionorlist
    (80) constants -> . INTCONST
    (81) constants -> . FLOATCONST
    (82) constants -> . STRINGCONST
    (83) constants -> . booleanconst
    (84) booleanconst -> . TRUE
    (85) booleanconst -> . FALSE

    C_PARENTHESIS   reduce using rule 92 (parametersinput -> .)
    O_PARENTHESIS   shift and go to state 58
    ID              shift and go to state 64
    INTCONST        shift and go to state 62
    FLOATCONST      shift and go to state 57
    STRINGCONST     shift and go to state 60
    TRUE            shift and go to state 59
    FALSE           shift and go to state 67

    term                           shift and go to state 66
    parametersinput                shift and go to state 79
    booleanconst                   shift and go to state 69
    varconst                       shift and go to state 68
    constants                      shift and go to state 65
    exp                            shift and go to state 70
    varconstfunction               shift and go to state 61
    expression2                    shift and go to state 63
    expression                     shift and go to state 80
    fact                           shift and go to state 72

state 50

    (40) condition -> IF O_PARENTHESIS . expression C_PARENTHESIS block else
    (43) expression -> . expression2 expressionoptional
    (46) expression2 -> . exp expression2optional
    (57) exp -> . term exploop
    (62) term -> . fact termloop
    (68) fact -> . varconst
    (69) fact -> . O_PARENTHESIS expression C_PARENTHESIS
    (74) varconst -> . varconstfunction
    (75) varconst -> . constants
    (76) varconstfunction -> . ID functionorlist
    (80) constants -> . INTCONST
    (81) constants -> . FLOATCONST
    (82) constants -> . STRINGCONST
    (83) constants -> . booleanconst
    (84) booleanconst -> . TRUE
    (85) booleanconst -> . FALSE

    O_PARENTHESIS   shift and go to state 58
    ID              shift and go to state 64
    INTCONST        shift and go to state 62
    FLOATCONST      shift and go to state 57
    STRINGCONST     shift and go to state 60
    TRUE            shift and go to state 59
    FALSE           shift and go to state 67

    term                           shift and go to state 66
    booleanconst                   shift and go to state 69
    varconst                       shift and go to state 68
    fact                           shift and go to state 72
    exp                            shift and go to state 70
    varconstfunction               shift and go to state 61
    constants                      shift and go to state 65
    expression2                    shift and go to state 63
    expression                     shift and go to state 81

state 51

    (18) statutesloop -> statute statutesloop .

    RETURN          reduce using rule 18 (statutesloop -> statute statutesloop .)
    C_BRACKET       reduce using rule 18 (statutesloop -> statute statutesloop .)


state 52

    (16) functionreturn -> RETURN . expression SEMICOLON
    (43) expression -> . expression2 expressionoptional
    (46) expression2 -> . exp expression2optional
    (57) exp -> . term exploop
    (62) term -> . fact termloop
    (68) fact -> . varconst
    (69) fact -> . O_PARENTHESIS expression C_PARENTHESIS
    (74) varconst -> . varconstfunction
    (75) varconst -> . constants
    (76) varconstfunction -> . ID functionorlist
    (80) constants -> . INTCONST
    (81) constants -> . FLOATCONST
    (82) constants -> . STRINGCONST
    (83) constants -> . booleanconst
    (84) booleanconst -> . TRUE
    (85) booleanconst -> . FALSE

    O_PARENTHESIS   shift and go to state 58
    ID              shift and go to state 64
    INTCONST        shift and go to state 62
    FLOATCONST      shift and go to state 57
    STRINGCONST     shift and go to state 60
    TRUE            shift and go to state 59
    FALSE           shift and go to state 67

    term                           shift and go to state 66
    booleanconst                   shift and go to state 69
    varconst                       shift and go to state 68
    constants                      shift and go to state 65
    exp                            shift and go to state 70
    varconstfunction               shift and go to state 61
    expression2                    shift and go to state 63
    expression                     shift and go to state 82
    fact                           shift and go to state 72

state 53

    (15) block -> O_BRACKET statutesloop functionreturn . C_BRACKET

    C_BRACKET       shift and go to state 83


state 54

    (34) listinit -> LIST type . var EQUALS list SEMICOLON
    (71) var -> . ID listaccess

    ID              shift and go to state 46

    var                            shift and go to state 84

state 55

    (5) function -> FUNCTION functiontype ID O_PARENTHESIS . parameters C_PARENTHESIS block
    (95) parameters -> . parameterinit parametersloop
    (96) parameters -> .
    (97) parameterinit -> . type ID
    (11) type -> . BOOL
    (12) type -> . INT
    (13) type -> . FLOAT
    (14) type -> . STRING

    C_PARENTHESIS   reduce using rule 96 (parameters -> .)
    BOOL            shift and go to state 21
    INT             shift and go to state 35
    FLOAT           shift and go to state 36
    STRING          shift and go to state 25

    parameters                     shift and go to state 85
    type                           shift and go to state 86
    parameterinit                  shift and go to state 87

state 56

    (89) timesloop -> TIMES O_PARENTHESIS INTCONST . C_PARENTHESIS block

    C_PARENTHESIS   shift and go to state 88


state 57

    (81) constants -> FLOATCONST .

    MULTIPLY        reduce using rule 81 (constants -> FLOATCONST .)
    DIVIDE          reduce using rule 81 (constants -> FLOATCONST .)
    MOD             reduce using rule 81 (constants -> FLOATCONST .)
    SUM             reduce using rule 81 (constants -> FLOATCONST .)
    MINUS           reduce using rule 81 (constants -> FLOATCONST .)
    EQUALITY        reduce using rule 81 (constants -> FLOATCONST .)
    GREATER         reduce using rule 81 (constants -> FLOATCONST .)
    GREATER_EQUAL   reduce using rule 81 (constants -> FLOATCONST .)
    LESS            reduce using rule 81 (constants -> FLOATCONST .)
    LESS_EQUAL      reduce using rule 81 (constants -> FLOATCONST .)
    DIFFERENT       reduce using rule 81 (constants -> FLOATCONST .)
    AND             reduce using rule 81 (constants -> FLOATCONST .)
    OR              reduce using rule 81 (constants -> FLOATCONST .)
    C_PARENTHESIS   reduce using rule 81 (constants -> FLOATCONST .)
    COMMA           reduce using rule 81 (constants -> FLOATCONST .)
    SEMICOLON       reduce using rule 81 (constants -> FLOATCONST .)
    C_S_BRACKET     reduce using rule 81 (constants -> FLOATCONST .)


state 58

    (69) fact -> O_PARENTHESIS . expression C_PARENTHESIS
    (43) expression -> . expression2 expressionoptional
    (46) expression2 -> . exp expression2optional
    (57) exp -> . term exploop
    (62) term -> . fact termloop
    (68) fact -> . varconst
    (69) fact -> . O_PARENTHESIS expression C_PARENTHESIS
    (74) varconst -> . varconstfunction
    (75) varconst -> . constants
    (76) varconstfunction -> . ID functionorlist
    (80) constants -> . INTCONST
    (81) constants -> . FLOATCONST
    (82) constants -> . STRINGCONST
    (83) constants -> . booleanconst
    (84) booleanconst -> . TRUE
    (85) booleanconst -> . FALSE

    O_PARENTHESIS   shift and go to state 58
    ID              shift and go to state 64
    INTCONST        shift and go to state 62
    FLOATCONST      shift and go to state 57
    STRINGCONST     shift and go to state 60
    TRUE            shift and go to state 59
    FALSE           shift and go to state 67

    term                           shift and go to state 66
    booleanconst                   shift and go to state 69
    varconst                       shift and go to state 68
    constants                      shift and go to state 65
    exp                            shift and go to state 70
    varconstfunction               shift and go to state 61
    expression2                    shift and go to state 63
    expression                     shift and go to state 89
    fact                           shift and go to state 72

state 59

    (84) booleanconst -> TRUE .

    MULTIPLY        reduce using rule 84 (booleanconst -> TRUE .)
    DIVIDE          reduce using rule 84 (booleanconst -> TRUE .)
    MOD             reduce using rule 84 (booleanconst -> TRUE .)
    SUM             reduce using rule 84 (booleanconst -> TRUE .)
    MINUS           reduce using rule 84 (booleanconst -> TRUE .)
    EQUALITY        reduce using rule 84 (booleanconst -> TRUE .)
    GREATER         reduce using rule 84 (booleanconst -> TRUE .)
    GREATER_EQUAL   reduce using rule 84 (booleanconst -> TRUE .)
    LESS            reduce using rule 84 (booleanconst -> TRUE .)
    LESS_EQUAL      reduce using rule 84 (booleanconst -> TRUE .)
    DIFFERENT       reduce using rule 84 (booleanconst -> TRUE .)
    AND             reduce using rule 84 (booleanconst -> TRUE .)
    OR              reduce using rule 84 (booleanconst -> TRUE .)
    C_PARENTHESIS   reduce using rule 84 (booleanconst -> TRUE .)
    COMMA           reduce using rule 84 (booleanconst -> TRUE .)
    SEMICOLON       reduce using rule 84 (booleanconst -> TRUE .)
    C_S_BRACKET     reduce using rule 84 (booleanconst -> TRUE .)


state 60

    (82) constants -> STRINGCONST .

    MULTIPLY        reduce using rule 82 (constants -> STRINGCONST .)
    DIVIDE          reduce using rule 82 (constants -> STRINGCONST .)
    MOD             reduce using rule 82 (constants -> STRINGCONST .)
    SUM             reduce using rule 82 (constants -> STRINGCONST .)
    MINUS           reduce using rule 82 (constants -> STRINGCONST .)
    EQUALITY        reduce using rule 82 (constants -> STRINGCONST .)
    GREATER         reduce using rule 82 (constants -> STRINGCONST .)
    GREATER_EQUAL   reduce using rule 82 (constants -> STRINGCONST .)
    LESS            reduce using rule 82 (constants -> STRINGCONST .)
    LESS_EQUAL      reduce using rule 82 (constants -> STRINGCONST .)
    DIFFERENT       reduce using rule 82 (constants -> STRINGCONST .)
    AND             reduce using rule 82 (constants -> STRINGCONST .)
    OR              reduce using rule 82 (constants -> STRINGCONST .)
    C_PARENTHESIS   reduce using rule 82 (constants -> STRINGCONST .)
    COMMA           reduce using rule 82 (constants -> STRINGCONST .)
    SEMICOLON       reduce using rule 82 (constants -> STRINGCONST .)
    C_S_BRACKET     reduce using rule 82 (constants -> STRINGCONST .)


state 61

    (74) varconst -> varconstfunction .

    MULTIPLY        reduce using rule 74 (varconst -> varconstfunction .)
    DIVIDE          reduce using rule 74 (varconst -> varconstfunction .)
    MOD             reduce using rule 74 (varconst -> varconstfunction .)
    SUM             reduce using rule 74 (varconst -> varconstfunction .)
    MINUS           reduce using rule 74 (varconst -> varconstfunction .)
    EQUALITY        reduce using rule 74 (varconst -> varconstfunction .)
    GREATER         reduce using rule 74 (varconst -> varconstfunction .)
    GREATER_EQUAL   reduce using rule 74 (varconst -> varconstfunction .)
    LESS            reduce using rule 74 (varconst -> varconstfunction .)
    LESS_EQUAL      reduce using rule 74 (varconst -> varconstfunction .)
    DIFFERENT       reduce using rule 74 (varconst -> varconstfunction .)
    AND             reduce using rule 74 (varconst -> varconstfunction .)
    OR              reduce using rule 74 (varconst -> varconstfunction .)
    C_PARENTHESIS   reduce using rule 74 (varconst -> varconstfunction .)
    COMMA           reduce using rule 74 (varconst -> varconstfunction .)
    SEMICOLON       reduce using rule 74 (varconst -> varconstfunction .)


state 62

    (80) constants -> INTCONST .

    MULTIPLY        reduce using rule 80 (constants -> INTCONST .)
    DIVIDE          reduce using rule 80 (constants -> INTCONST .)
    MOD             reduce using rule 80 (constants -> INTCONST .)
    SUM             reduce using rule 80 (constants -> INTCONST .)
    MINUS           reduce using rule 80 (constants -> INTCONST .)
    EQUALITY        reduce using rule 80 (constants -> INTCONST .)
    GREATER         reduce using rule 80 (constants -> INTCONST .)
    GREATER_EQUAL   reduce using rule 80 (constants -> INTCONST .)
    LESS            reduce using rule 80 (constants -> INTCONST .)
    LESS_EQUAL      reduce using rule 80 (constants -> INTCONST .)
    DIFFERENT       reduce using rule 80 (constants -> INTCONST .)
    AND             reduce using rule 80 (constants -> INTCONST .)
    OR              reduce using rule 80 (constants -> INTCONST .)
    C_PARENTHESIS   reduce using rule 80 (constants -> INTCONST .)
    COMMA           reduce using rule 80 (constants -> INTCONST .)
    SEMICOLON       reduce using rule 80 (constants -> INTCONST .)
    C_S_BRACKET     reduce using rule 80 (constants -> INTCONST .)


state 63

    (43) expression -> expression2 . expressionoptional
    (44) expressionoptional -> . logicop expression2
    (45) expressionoptional -> .
    (49) logicop -> . AND
    (50) logicop -> . OR

    C_PARENTHESIS   reduce using rule 45 (expressionoptional -> .)
    COMMA           reduce using rule 45 (expressionoptional -> .)
    SEMICOLON       reduce using rule 45 (expressionoptional -> .)
    AND             shift and go to state 90
    OR              shift and go to state 93

    logicop                        shift and go to state 91
    expressionoptional             shift and go to state 92

state 64

    (76) varconstfunction -> ID . functionorlist
    (77) functionorlist -> . O_S_BRACKET INTCONST C_S_BRACKET
    (78) functionorlist -> . O_PARENTHESIS parametersinput C_PARENTHESIS
    (79) functionorlist -> .

    O_S_BRACKET     shift and go to state 94
    O_PARENTHESIS   shift and go to state 96
    MULTIPLY        reduce using rule 79 (functionorlist -> .)
    DIVIDE          reduce using rule 79 (functionorlist -> .)
    MOD             reduce using rule 79 (functionorlist -> .)
    SUM             reduce using rule 79 (functionorlist -> .)
    MINUS           reduce using rule 79 (functionorlist -> .)
    EQUALITY        reduce using rule 79 (functionorlist -> .)
    GREATER         reduce using rule 79 (functionorlist -> .)
    GREATER_EQUAL   reduce using rule 79 (functionorlist -> .)
    LESS            reduce using rule 79 (functionorlist -> .)
    LESS_EQUAL      reduce using rule 79 (functionorlist -> .)
    DIFFERENT       reduce using rule 79 (functionorlist -> .)
    AND             reduce using rule 79 (functionorlist -> .)
    OR              reduce using rule 79 (functionorlist -> .)
    C_PARENTHESIS   reduce using rule 79 (functionorlist -> .)
    COMMA           reduce using rule 79 (functionorlist -> .)
    SEMICOLON       reduce using rule 79 (functionorlist -> .)

    functionorlist                 shift and go to state 95

state 65

    (75) varconst -> constants .

    MULTIPLY        reduce using rule 75 (varconst -> constants .)
    DIVIDE          reduce using rule 75 (varconst -> constants .)
    MOD             reduce using rule 75 (varconst -> constants .)
    SUM             reduce using rule 75 (varconst -> constants .)
    MINUS           reduce using rule 75 (varconst -> constants .)
    EQUALITY        reduce using rule 75 (varconst -> constants .)
    GREATER         reduce using rule 75 (varconst -> constants .)
    GREATER_EQUAL   reduce using rule 75 (varconst -> constants .)
    LESS            reduce using rule 75 (varconst -> constants .)
    LESS_EQUAL      reduce using rule 75 (varconst -> constants .)
    DIFFERENT       reduce using rule 75 (varconst -> constants .)
    AND             reduce using rule 75 (varconst -> constants .)
    OR              reduce using rule 75 (varconst -> constants .)
    C_PARENTHESIS   reduce using rule 75 (varconst -> constants .)
    COMMA           reduce using rule 75 (varconst -> constants .)
    SEMICOLON       reduce using rule 75 (varconst -> constants .)


state 66

    (57) exp -> term . exploop
    (58) exploop -> . addsub exp
    (59) exploop -> .
    (60) addsub -> . SUM
    (61) addsub -> . MINUS

    EQUALITY        reduce using rule 59 (exploop -> .)
    GREATER         reduce using rule 59 (exploop -> .)
    GREATER_EQUAL   reduce using rule 59 (exploop -> .)
    LESS            reduce using rule 59 (exploop -> .)
    LESS_EQUAL      reduce using rule 59 (exploop -> .)
    DIFFERENT       reduce using rule 59 (exploop -> .)
    AND             reduce using rule 59 (exploop -> .)
    OR              reduce using rule 59 (exploop -> .)
    C_PARENTHESIS   reduce using rule 59 (exploop -> .)
    COMMA           reduce using rule 59 (exploop -> .)
    SEMICOLON       reduce using rule 59 (exploop -> .)
    SUM             shift and go to state 97
    MINUS           shift and go to state 100

    exploop                        shift and go to state 98
    addsub                         shift and go to state 99

state 67

    (85) booleanconst -> FALSE .

    MULTIPLY        reduce using rule 85 (booleanconst -> FALSE .)
    DIVIDE          reduce using rule 85 (booleanconst -> FALSE .)
    MOD             reduce using rule 85 (booleanconst -> FALSE .)
    SUM             reduce using rule 85 (booleanconst -> FALSE .)
    MINUS           reduce using rule 85 (booleanconst -> FALSE .)
    EQUALITY        reduce using rule 85 (booleanconst -> FALSE .)
    GREATER         reduce using rule 85 (booleanconst -> FALSE .)
    GREATER_EQUAL   reduce using rule 85 (booleanconst -> FALSE .)
    LESS            reduce using rule 85 (booleanconst -> FALSE .)
    LESS_EQUAL      reduce using rule 85 (booleanconst -> FALSE .)
    DIFFERENT       reduce using rule 85 (booleanconst -> FALSE .)
    AND             reduce using rule 85 (booleanconst -> FALSE .)
    OR              reduce using rule 85 (booleanconst -> FALSE .)
    C_PARENTHESIS   reduce using rule 85 (booleanconst -> FALSE .)
    COMMA           reduce using rule 85 (booleanconst -> FALSE .)
    SEMICOLON       reduce using rule 85 (booleanconst -> FALSE .)
    C_S_BRACKET     reduce using rule 85 (booleanconst -> FALSE .)


state 68

    (68) fact -> varconst .

    MULTIPLY        reduce using rule 68 (fact -> varconst .)
    DIVIDE          reduce using rule 68 (fact -> varconst .)
    MOD             reduce using rule 68 (fact -> varconst .)
    SUM             reduce using rule 68 (fact -> varconst .)
    MINUS           reduce using rule 68 (fact -> varconst .)
    EQUALITY        reduce using rule 68 (fact -> varconst .)
    GREATER         reduce using rule 68 (fact -> varconst .)
    GREATER_EQUAL   reduce using rule 68 (fact -> varconst .)
    LESS            reduce using rule 68 (fact -> varconst .)
    LESS_EQUAL      reduce using rule 68 (fact -> varconst .)
    DIFFERENT       reduce using rule 68 (fact -> varconst .)
    AND             reduce using rule 68 (fact -> varconst .)
    OR              reduce using rule 68 (fact -> varconst .)
    SEMICOLON       reduce using rule 68 (fact -> varconst .)
    C_PARENTHESIS   reduce using rule 68 (fact -> varconst .)
    COMMA           reduce using rule 68 (fact -> varconst .)


state 69

    (83) constants -> booleanconst .

    MULTIPLY        reduce using rule 83 (constants -> booleanconst .)
    DIVIDE          reduce using rule 83 (constants -> booleanconst .)
    MOD             reduce using rule 83 (constants -> booleanconst .)
    SUM             reduce using rule 83 (constants -> booleanconst .)
    MINUS           reduce using rule 83 (constants -> booleanconst .)
    EQUALITY        reduce using rule 83 (constants -> booleanconst .)
    GREATER         reduce using rule 83 (constants -> booleanconst .)
    GREATER_EQUAL   reduce using rule 83 (constants -> booleanconst .)
    LESS            reduce using rule 83 (constants -> booleanconst .)
    LESS_EQUAL      reduce using rule 83 (constants -> booleanconst .)
    DIFFERENT       reduce using rule 83 (constants -> booleanconst .)
    AND             reduce using rule 83 (constants -> booleanconst .)
    OR              reduce using rule 83 (constants -> booleanconst .)
    C_PARENTHESIS   reduce using rule 83 (constants -> booleanconst .)
    COMMA           reduce using rule 83 (constants -> booleanconst .)
    SEMICOLON       reduce using rule 83 (constants -> booleanconst .)
    C_S_BRACKET     reduce using rule 83 (constants -> booleanconst .)


state 70

    (46) expression2 -> exp . expression2optional
    (47) expression2optional -> . relop exp
    (48) expression2optional -> .
    (51) relop -> . EQUALITY
    (52) relop -> . GREATER
    (53) relop -> . GREATER_EQUAL
    (54) relop -> . LESS
    (55) relop -> . LESS_EQUAL
    (56) relop -> . DIFFERENT

    AND             reduce using rule 48 (expression2optional -> .)
    OR              reduce using rule 48 (expression2optional -> .)
    C_PARENTHESIS   reduce using rule 48 (expression2optional -> .)
    COMMA           reduce using rule 48 (expression2optional -> .)
    SEMICOLON       reduce using rule 48 (expression2optional -> .)
    EQUALITY        shift and go to state 102
    GREATER         shift and go to state 103
    GREATER_EQUAL   shift and go to state 104
    LESS            shift and go to state 105
    LESS_EQUAL      shift and go to state 107
    DIFFERENT       shift and go to state 101

    relop                          shift and go to state 108
    expression2optional            shift and go to state 106

state 71

    (88) whileloop -> WHILE O_PARENTHESIS expression . C_PARENTHESIS block

    C_PARENTHESIS   shift and go to state 109


state 72

    (62) term -> fact . termloop
    (63) termloop -> . divmult term
    (64) termloop -> .
    (65) divmult -> . MULTIPLY
    (66) divmult -> . DIVIDE
    (67) divmult -> . MOD

    SUM             reduce using rule 64 (termloop -> .)
    MINUS           reduce using rule 64 (termloop -> .)
    EQUALITY        reduce using rule 64 (termloop -> .)
    GREATER         reduce using rule 64 (termloop -> .)
    GREATER_EQUAL   reduce using rule 64 (termloop -> .)
    LESS            reduce using rule 64 (termloop -> .)
    LESS_EQUAL      reduce using rule 64 (termloop -> .)
    DIFFERENT       reduce using rule 64 (termloop -> .)
    AND             reduce using rule 64 (termloop -> .)
    OR              reduce using rule 64 (termloop -> .)
    C_PARENTHESIS   reduce using rule 64 (termloop -> .)
    COMMA           reduce using rule 64 (termloop -> .)
    SEMICOLON       reduce using rule 64 (termloop -> .)
    MULTIPLY        shift and go to state 112
    DIVIDE          shift and go to state 110
    MOD             shift and go to state 114

    termloop                       shift and go to state 111
    divmult                        shift and go to state 113

state 73

    (27) writting -> PRINT O_PARENTHESIS writtingloop . C_PARENTHESIS SEMICOLON

    C_PARENTHESIS   shift and go to state 115


state 74

    (28) writtingloop -> expression . optionalwritting
    (29) optionalwritting -> . COMMA writtingloop
    (30) optionalwritting -> .

    COMMA           shift and go to state 117
    C_PARENTHESIS   reduce using rule 30 (optionalwritting -> .)

    optionalwritting               shift and go to state 116

state 75

    (26) assignation -> var_assign EQUALS expression . SEMICOLON

    SEMICOLON       shift and go to state 118


state 76

    (33) normalinit -> type var EQUALS . expression SEMICOLON
    (43) expression -> . expression2 expressionoptional
    (46) expression2 -> . exp expression2optional
    (57) exp -> . term exploop
    (62) term -> . fact termloop
    (68) fact -> . varconst
    (69) fact -> . O_PARENTHESIS expression C_PARENTHESIS
    (74) varconst -> . varconstfunction
    (75) varconst -> . constants
    (76) varconstfunction -> . ID functionorlist
    (80) constants -> . INTCONST
    (81) constants -> . FLOATCONST
    (82) constants -> . STRINGCONST
    (83) constants -> . booleanconst
    (84) booleanconst -> . TRUE
    (85) booleanconst -> . FALSE

    O_PARENTHESIS   shift and go to state 58
    ID              shift and go to state 64
    INTCONST        shift and go to state 62
    FLOATCONST      shift and go to state 57
    STRINGCONST     shift and go to state 60
    TRUE            shift and go to state 59
    FALSE           shift and go to state 67

    term                           shift and go to state 66
    booleanconst                   shift and go to state 69
    varconstfunction               shift and go to state 61
    varconst                       shift and go to state 68
    constants                      shift and go to state 65
    exp                            shift and go to state 70
    expression2                    shift and go to state 63
    expression                     shift and go to state 119
    fact                           shift and go to state 72

state 77

    (71) var -> ID listaccess .

    EQUALS          reduce using rule 71 (var -> ID listaccess .)


state 78

    (72) listaccess -> O_S_BRACKET INTCONST . C_S_BRACKET

    C_S_BRACKET     shift and go to state 120


state 79

    (90) functioncall -> ID O_PARENTHESIS parametersinput . C_PARENTHESIS SEMICOLON

    C_PARENTHESIS   shift and go to state 121


state 80

    (91) parametersinput -> expression . parametersinputloop
    (93) parametersinputloop -> . COMMA expression parametersinputloop
    (94) parametersinputloop -> .

    COMMA           shift and go to state 123
    C_PARENTHESIS   reduce using rule 94 (parametersinputloop -> .)

    parametersinputloop            shift and go to state 122

state 81

    (40) condition -> IF O_PARENTHESIS expression . C_PARENTHESIS block else

    C_PARENTHESIS   shift and go to state 124


state 82

    (16) functionreturn -> RETURN expression . SEMICOLON

    SEMICOLON       shift and go to state 125


state 83

    (15) block -> O_BRACKET statutesloop functionreturn C_BRACKET .

    FUNCTION        reduce using rule 15 (block -> O_BRACKET statutesloop functionreturn C_BRACKET .)
    $end            reduce using rule 15 (block -> O_BRACKET statutesloop functionreturn C_BRACKET .)
    ELSE            reduce using rule 15 (block -> O_BRACKET statutesloop functionreturn C_BRACKET .)
    IF              reduce using rule 15 (block -> O_BRACKET statutesloop functionreturn C_BRACKET .)
    PRINT           reduce using rule 15 (block -> O_BRACKET statutesloop functionreturn C_BRACKET .)
    ID              reduce using rule 15 (block -> O_BRACKET statutesloop functionreturn C_BRACKET .)
    LIST            reduce using rule 15 (block -> O_BRACKET statutesloop functionreturn C_BRACKET .)
    WHILE           reduce using rule 15 (block -> O_BRACKET statutesloop functionreturn C_BRACKET .)
    TIMES           reduce using rule 15 (block -> O_BRACKET statutesloop functionreturn C_BRACKET .)
    BOOL            reduce using rule 15 (block -> O_BRACKET statutesloop functionreturn C_BRACKET .)
    INT             reduce using rule 15 (block -> O_BRACKET statutesloop functionreturn C_BRACKET .)
    FLOAT           reduce using rule 15 (block -> O_BRACKET statutesloop functionreturn C_BRACKET .)
    STRING          reduce using rule 15 (block -> O_BRACKET statutesloop functionreturn C_BRACKET .)
    RETURN          reduce using rule 15 (block -> O_BRACKET statutesloop functionreturn C_BRACKET .)
    C_BRACKET       reduce using rule 15 (block -> O_BRACKET statutesloop functionreturn C_BRACKET .)


state 84

    (34) listinit -> LIST type var . EQUALS list SEMICOLON

    EQUALS          shift and go to state 126


state 85

    (5) function -> FUNCTION functiontype ID O_PARENTHESIS parameters . C_PARENTHESIS block

    C_PARENTHESIS   shift and go to state 127


state 86

    (97) parameterinit -> type . ID

    ID              shift and go to state 128


state 87

    (95) parameters -> parameterinit . parametersloop
    (98) parametersloop -> . COMMA parameterinit parametersloop
    (99) parametersloop -> .

    COMMA           shift and go to state 130
    C_PARENTHESIS   reduce using rule 99 (parametersloop -> .)

    parametersloop                 shift and go to state 129

state 88

    (89) timesloop -> TIMES O_PARENTHESIS INTCONST C_PARENTHESIS . block
    (15) block -> . O_BRACKET statutesloop functionreturn C_BRACKET

    O_BRACKET       shift and go to state 7

    block                          shift and go to state 131

state 89

    (69) fact -> O_PARENTHESIS expression . C_PARENTHESIS

    C_PARENTHESIS   shift and go to state 132


state 90

    (49) logicop -> AND .

    O_PARENTHESIS   reduce using rule 49 (logicop -> AND .)
    ID              reduce using rule 49 (logicop -> AND .)
    INTCONST        reduce using rule 49 (logicop -> AND .)
    FLOATCONST      reduce using rule 49 (logicop -> AND .)
    STRINGCONST     reduce using rule 49 (logicop -> AND .)
    TRUE            reduce using rule 49 (logicop -> AND .)
    FALSE           reduce using rule 49 (logicop -> AND .)


state 91

    (44) expressionoptional -> logicop . expression2
    (46) expression2 -> . exp expression2optional
    (57) exp -> . term exploop
    (62) term -> . fact termloop
    (68) fact -> . varconst
    (69) fact -> . O_PARENTHESIS expression C_PARENTHESIS
    (74) varconst -> . varconstfunction
    (75) varconst -> . constants
    (76) varconstfunction -> . ID functionorlist
    (80) constants -> . INTCONST
    (81) constants -> . FLOATCONST
    (82) constants -> . STRINGCONST
    (83) constants -> . booleanconst
    (84) booleanconst -> . TRUE
    (85) booleanconst -> . FALSE

    O_PARENTHESIS   shift and go to state 58
    ID              shift and go to state 64
    INTCONST        shift and go to state 62
    FLOATCONST      shift and go to state 57
    STRINGCONST     shift and go to state 60
    TRUE            shift and go to state 59
    FALSE           shift and go to state 67

    term                           shift and go to state 66
    booleanconst                   shift and go to state 69
    varconst                       shift and go to state 68
    constants                      shift and go to state 65
    exp                            shift and go to state 70
    varconstfunction               shift and go to state 61
    expression2                    shift and go to state 133
    fact                           shift and go to state 72

state 92

    (43) expression -> expression2 expressionoptional .

    C_PARENTHESIS   reduce using rule 43 (expression -> expression2 expressionoptional .)
    COMMA           reduce using rule 43 (expression -> expression2 expressionoptional .)
    SEMICOLON       reduce using rule 43 (expression -> expression2 expressionoptional .)


state 93

    (50) logicop -> OR .

    O_PARENTHESIS   reduce using rule 50 (logicop -> OR .)
    ID              reduce using rule 50 (logicop -> OR .)
    INTCONST        reduce using rule 50 (logicop -> OR .)
    FLOATCONST      reduce using rule 50 (logicop -> OR .)
    STRINGCONST     reduce using rule 50 (logicop -> OR .)
    TRUE            reduce using rule 50 (logicop -> OR .)
    FALSE           reduce using rule 50 (logicop -> OR .)


state 94

    (77) functionorlist -> O_S_BRACKET . INTCONST C_S_BRACKET

    INTCONST        shift and go to state 134


state 95

    (76) varconstfunction -> ID functionorlist .

    MULTIPLY        reduce using rule 76 (varconstfunction -> ID functionorlist .)
    DIVIDE          reduce using rule 76 (varconstfunction -> ID functionorlist .)
    MOD             reduce using rule 76 (varconstfunction -> ID functionorlist .)
    SUM             reduce using rule 76 (varconstfunction -> ID functionorlist .)
    MINUS           reduce using rule 76 (varconstfunction -> ID functionorlist .)
    EQUALITY        reduce using rule 76 (varconstfunction -> ID functionorlist .)
    GREATER         reduce using rule 76 (varconstfunction -> ID functionorlist .)
    GREATER_EQUAL   reduce using rule 76 (varconstfunction -> ID functionorlist .)
    LESS            reduce using rule 76 (varconstfunction -> ID functionorlist .)
    LESS_EQUAL      reduce using rule 76 (varconstfunction -> ID functionorlist .)
    DIFFERENT       reduce using rule 76 (varconstfunction -> ID functionorlist .)
    AND             reduce using rule 76 (varconstfunction -> ID functionorlist .)
    OR              reduce using rule 76 (varconstfunction -> ID functionorlist .)
    COMMA           reduce using rule 76 (varconstfunction -> ID functionorlist .)
    C_PARENTHESIS   reduce using rule 76 (varconstfunction -> ID functionorlist .)
    SEMICOLON       reduce using rule 76 (varconstfunction -> ID functionorlist .)


state 96

    (78) functionorlist -> O_PARENTHESIS . parametersinput C_PARENTHESIS
    (91) parametersinput -> . expression parametersinputloop
    (92) parametersinput -> .
    (43) expression -> . expression2 expressionoptional
    (46) expression2 -> . exp expression2optional
    (57) exp -> . term exploop
    (62) term -> . fact termloop
    (68) fact -> . varconst
    (69) fact -> . O_PARENTHESIS expression C_PARENTHESIS
    (74) varconst -> . varconstfunction
    (75) varconst -> . constants
    (76) varconstfunction -> . ID functionorlist
    (80) constants -> . INTCONST
    (81) constants -> . FLOATCONST
    (82) constants -> . STRINGCONST
    (83) constants -> . booleanconst
    (84) booleanconst -> . TRUE
    (85) booleanconst -> . FALSE

    C_PARENTHESIS   reduce using rule 92 (parametersinput -> .)
    O_PARENTHESIS   shift and go to state 58
    ID              shift and go to state 64
    INTCONST        shift and go to state 62
    FLOATCONST      shift and go to state 57
    STRINGCONST     shift and go to state 60
    TRUE            shift and go to state 59
    FALSE           shift and go to state 67

    term                           shift and go to state 66
    parametersinput                shift and go to state 135
    booleanconst                   shift and go to state 69
    varconst                       shift and go to state 68
    constants                      shift and go to state 65
    exp                            shift and go to state 70
    varconstfunction               shift and go to state 61
    expression2                    shift and go to state 63
    expression                     shift and go to state 80
    fact                           shift and go to state 72

state 97

    (60) addsub -> SUM .

    O_PARENTHESIS   reduce using rule 60 (addsub -> SUM .)
    ID              reduce using rule 60 (addsub -> SUM .)
    INTCONST        reduce using rule 60 (addsub -> SUM .)
    FLOATCONST      reduce using rule 60 (addsub -> SUM .)
    STRINGCONST     reduce using rule 60 (addsub -> SUM .)
    TRUE            reduce using rule 60 (addsub -> SUM .)
    FALSE           reduce using rule 60 (addsub -> SUM .)


state 98

    (57) exp -> term exploop .

    EQUALITY        reduce using rule 57 (exp -> term exploop .)
    GREATER         reduce using rule 57 (exp -> term exploop .)
    GREATER_EQUAL   reduce using rule 57 (exp -> term exploop .)
    LESS            reduce using rule 57 (exp -> term exploop .)
    LESS_EQUAL      reduce using rule 57 (exp -> term exploop .)
    DIFFERENT       reduce using rule 57 (exp -> term exploop .)
    AND             reduce using rule 57 (exp -> term exploop .)
    OR              reduce using rule 57 (exp -> term exploop .)
    SEMICOLON       reduce using rule 57 (exp -> term exploop .)
    C_PARENTHESIS   reduce using rule 57 (exp -> term exploop .)
    COMMA           reduce using rule 57 (exp -> term exploop .)


state 99

    (58) exploop -> addsub . exp
    (57) exp -> . term exploop
    (62) term -> . fact termloop
    (68) fact -> . varconst
    (69) fact -> . O_PARENTHESIS expression C_PARENTHESIS
    (74) varconst -> . varconstfunction
    (75) varconst -> . constants
    (76) varconstfunction -> . ID functionorlist
    (80) constants -> . INTCONST
    (81) constants -> . FLOATCONST
    (82) constants -> . STRINGCONST
    (83) constants -> . booleanconst
    (84) booleanconst -> . TRUE
    (85) booleanconst -> . FALSE

    O_PARENTHESIS   shift and go to state 58
    ID              shift and go to state 64
    INTCONST        shift and go to state 62
    FLOATCONST      shift and go to state 57
    STRINGCONST     shift and go to state 60
    TRUE            shift and go to state 59
    FALSE           shift and go to state 67

    term                           shift and go to state 66
    booleanconst                   shift and go to state 69
    varconst                       shift and go to state 68
    constants                      shift and go to state 65
    exp                            shift and go to state 136
    varconstfunction               shift and go to state 61
    fact                           shift and go to state 72

state 100

    (61) addsub -> MINUS .

    O_PARENTHESIS   reduce using rule 61 (addsub -> MINUS .)
    ID              reduce using rule 61 (addsub -> MINUS .)
    INTCONST        reduce using rule 61 (addsub -> MINUS .)
    FLOATCONST      reduce using rule 61 (addsub -> MINUS .)
    STRINGCONST     reduce using rule 61 (addsub -> MINUS .)
    TRUE            reduce using rule 61 (addsub -> MINUS .)
    FALSE           reduce using rule 61 (addsub -> MINUS .)


state 101

    (56) relop -> DIFFERENT .

    O_PARENTHESIS   reduce using rule 56 (relop -> DIFFERENT .)
    ID              reduce using rule 56 (relop -> DIFFERENT .)
    INTCONST        reduce using rule 56 (relop -> DIFFERENT .)
    FLOATCONST      reduce using rule 56 (relop -> DIFFERENT .)
    STRINGCONST     reduce using rule 56 (relop -> DIFFERENT .)
    TRUE            reduce using rule 56 (relop -> DIFFERENT .)
    FALSE           reduce using rule 56 (relop -> DIFFERENT .)


state 102

    (51) relop -> EQUALITY .

    O_PARENTHESIS   reduce using rule 51 (relop -> EQUALITY .)
    ID              reduce using rule 51 (relop -> EQUALITY .)
    INTCONST        reduce using rule 51 (relop -> EQUALITY .)
    FLOATCONST      reduce using rule 51 (relop -> EQUALITY .)
    STRINGCONST     reduce using rule 51 (relop -> EQUALITY .)
    TRUE            reduce using rule 51 (relop -> EQUALITY .)
    FALSE           reduce using rule 51 (relop -> EQUALITY .)


state 103

    (52) relop -> GREATER .

    O_PARENTHESIS   reduce using rule 52 (relop -> GREATER .)
    ID              reduce using rule 52 (relop -> GREATER .)
    INTCONST        reduce using rule 52 (relop -> GREATER .)
    FLOATCONST      reduce using rule 52 (relop -> GREATER .)
    STRINGCONST     reduce using rule 52 (relop -> GREATER .)
    TRUE            reduce using rule 52 (relop -> GREATER .)
    FALSE           reduce using rule 52 (relop -> GREATER .)


state 104

    (53) relop -> GREATER_EQUAL .

    O_PARENTHESIS   reduce using rule 53 (relop -> GREATER_EQUAL .)
    ID              reduce using rule 53 (relop -> GREATER_EQUAL .)
    INTCONST        reduce using rule 53 (relop -> GREATER_EQUAL .)
    FLOATCONST      reduce using rule 53 (relop -> GREATER_EQUAL .)
    STRINGCONST     reduce using rule 53 (relop -> GREATER_EQUAL .)
    TRUE            reduce using rule 53 (relop -> GREATER_EQUAL .)
    FALSE           reduce using rule 53 (relop -> GREATER_EQUAL .)


state 105

    (54) relop -> LESS .

    O_PARENTHESIS   reduce using rule 54 (relop -> LESS .)
    ID              reduce using rule 54 (relop -> LESS .)
    INTCONST        reduce using rule 54 (relop -> LESS .)
    FLOATCONST      reduce using rule 54 (relop -> LESS .)
    STRINGCONST     reduce using rule 54 (relop -> LESS .)
    TRUE            reduce using rule 54 (relop -> LESS .)
    FALSE           reduce using rule 54 (relop -> LESS .)


state 106

    (46) expression2 -> exp expression2optional .

    AND             reduce using rule 46 (expression2 -> exp expression2optional .)
    OR              reduce using rule 46 (expression2 -> exp expression2optional .)
    SEMICOLON       reduce using rule 46 (expression2 -> exp expression2optional .)
    COMMA           reduce using rule 46 (expression2 -> exp expression2optional .)
    C_PARENTHESIS   reduce using rule 46 (expression2 -> exp expression2optional .)


state 107

    (55) relop -> LESS_EQUAL .

    O_PARENTHESIS   reduce using rule 55 (relop -> LESS_EQUAL .)
    ID              reduce using rule 55 (relop -> LESS_EQUAL .)
    INTCONST        reduce using rule 55 (relop -> LESS_EQUAL .)
    FLOATCONST      reduce using rule 55 (relop -> LESS_EQUAL .)
    STRINGCONST     reduce using rule 55 (relop -> LESS_EQUAL .)
    TRUE            reduce using rule 55 (relop -> LESS_EQUAL .)
    FALSE           reduce using rule 55 (relop -> LESS_EQUAL .)


state 108

    (47) expression2optional -> relop . exp
    (57) exp -> . term exploop
    (62) term -> . fact termloop
    (68) fact -> . varconst
    (69) fact -> . O_PARENTHESIS expression C_PARENTHESIS
    (74) varconst -> . varconstfunction
    (75) varconst -> . constants
    (76) varconstfunction -> . ID functionorlist
    (80) constants -> . INTCONST
    (81) constants -> . FLOATCONST
    (82) constants -> . STRINGCONST
    (83) constants -> . booleanconst
    (84) booleanconst -> . TRUE
    (85) booleanconst -> . FALSE

    O_PARENTHESIS   shift and go to state 58
    ID              shift and go to state 64
    INTCONST        shift and go to state 62
    FLOATCONST      shift and go to state 57
    STRINGCONST     shift and go to state 60
    TRUE            shift and go to state 59
    FALSE           shift and go to state 67

    term                           shift and go to state 66
    booleanconst                   shift and go to state 69
    varconst                       shift and go to state 68
    constants                      shift and go to state 65
    exp                            shift and go to state 137
    varconstfunction               shift and go to state 61
    fact                           shift and go to state 72

state 109

    (88) whileloop -> WHILE O_PARENTHESIS expression C_PARENTHESIS . block
    (15) block -> . O_BRACKET statutesloop functionreturn C_BRACKET

    O_BRACKET       shift and go to state 7

    block                          shift and go to state 138

state 110

    (66) divmult -> DIVIDE .

    O_PARENTHESIS   reduce using rule 66 (divmult -> DIVIDE .)
    ID              reduce using rule 66 (divmult -> DIVIDE .)
    INTCONST        reduce using rule 66 (divmult -> DIVIDE .)
    FLOATCONST      reduce using rule 66 (divmult -> DIVIDE .)
    STRINGCONST     reduce using rule 66 (divmult -> DIVIDE .)
    TRUE            reduce using rule 66 (divmult -> DIVIDE .)
    FALSE           reduce using rule 66 (divmult -> DIVIDE .)


state 111

    (62) term -> fact termloop .

    SUM             reduce using rule 62 (term -> fact termloop .)
    MINUS           reduce using rule 62 (term -> fact termloop .)
    EQUALITY        reduce using rule 62 (term -> fact termloop .)
    GREATER         reduce using rule 62 (term -> fact termloop .)
    GREATER_EQUAL   reduce using rule 62 (term -> fact termloop .)
    LESS            reduce using rule 62 (term -> fact termloop .)
    LESS_EQUAL      reduce using rule 62 (term -> fact termloop .)
    DIFFERENT       reduce using rule 62 (term -> fact termloop .)
    AND             reduce using rule 62 (term -> fact termloop .)
    OR              reduce using rule 62 (term -> fact termloop .)
    C_PARENTHESIS   reduce using rule 62 (term -> fact termloop .)
    SEMICOLON       reduce using rule 62 (term -> fact termloop .)
    COMMA           reduce using rule 62 (term -> fact termloop .)


state 112

    (65) divmult -> MULTIPLY .

    O_PARENTHESIS   reduce using rule 65 (divmult -> MULTIPLY .)
    ID              reduce using rule 65 (divmult -> MULTIPLY .)
    INTCONST        reduce using rule 65 (divmult -> MULTIPLY .)
    FLOATCONST      reduce using rule 65 (divmult -> MULTIPLY .)
    STRINGCONST     reduce using rule 65 (divmult -> MULTIPLY .)
    TRUE            reduce using rule 65 (divmult -> MULTIPLY .)
    FALSE           reduce using rule 65 (divmult -> MULTIPLY .)


state 113

    (63) termloop -> divmult . term
    (62) term -> . fact termloop
    (68) fact -> . varconst
    (69) fact -> . O_PARENTHESIS expression C_PARENTHESIS
    (74) varconst -> . varconstfunction
    (75) varconst -> . constants
    (76) varconstfunction -> . ID functionorlist
    (80) constants -> . INTCONST
    (81) constants -> . FLOATCONST
    (82) constants -> . STRINGCONST
    (83) constants -> . booleanconst
    (84) booleanconst -> . TRUE
    (85) booleanconst -> . FALSE

    O_PARENTHESIS   shift and go to state 58
    ID              shift and go to state 64
    INTCONST        shift and go to state 62
    FLOATCONST      shift and go to state 57
    STRINGCONST     shift and go to state 60
    TRUE            shift and go to state 59
    FALSE           shift and go to state 67

    term                           shift and go to state 139
    booleanconst                   shift and go to state 69
    varconstfunction               shift and go to state 61
    varconst                       shift and go to state 68
    constants                      shift and go to state 65
    fact                           shift and go to state 72

state 114

    (67) divmult -> MOD .

    O_PARENTHESIS   reduce using rule 67 (divmult -> MOD .)
    ID              reduce using rule 67 (divmult -> MOD .)
    INTCONST        reduce using rule 67 (divmult -> MOD .)
    FLOATCONST      reduce using rule 67 (divmult -> MOD .)
    STRINGCONST     reduce using rule 67 (divmult -> MOD .)
    TRUE            reduce using rule 67 (divmult -> MOD .)
    FALSE           reduce using rule 67 (divmult -> MOD .)


state 115

    (27) writting -> PRINT O_PARENTHESIS writtingloop C_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 140


state 116

    (28) writtingloop -> expression optionalwritting .

    C_PARENTHESIS   reduce using rule 28 (writtingloop -> expression optionalwritting .)


state 117

    (29) optionalwritting -> COMMA . writtingloop
    (28) writtingloop -> . expression optionalwritting
    (43) expression -> . expression2 expressionoptional
    (46) expression2 -> . exp expression2optional
    (57) exp -> . term exploop
    (62) term -> . fact termloop
    (68) fact -> . varconst
    (69) fact -> . O_PARENTHESIS expression C_PARENTHESIS
    (74) varconst -> . varconstfunction
    (75) varconst -> . constants
    (76) varconstfunction -> . ID functionorlist
    (80) constants -> . INTCONST
    (81) constants -> . FLOATCONST
    (82) constants -> . STRINGCONST
    (83) constants -> . booleanconst
    (84) booleanconst -> . TRUE
    (85) booleanconst -> . FALSE

    O_PARENTHESIS   shift and go to state 58
    ID              shift and go to state 64
    INTCONST        shift and go to state 62
    FLOATCONST      shift and go to state 57
    STRINGCONST     shift and go to state 60
    TRUE            shift and go to state 59
    FALSE           shift and go to state 67

    term                           shift and go to state 66
    booleanconst                   shift and go to state 69
    varconst                       shift and go to state 68
    constants                      shift and go to state 65
    exp                            shift and go to state 70
    varconstfunction               shift and go to state 61
    writtingloop                   shift and go to state 141
    expression2                    shift and go to state 63
    expression                     shift and go to state 74
    fact                           shift and go to state 72

state 118

    (26) assignation -> var_assign EQUALS expression SEMICOLON .

    IF              reduce using rule 26 (assignation -> var_assign EQUALS expression SEMICOLON .)
    PRINT           reduce using rule 26 (assignation -> var_assign EQUALS expression SEMICOLON .)
    ID              reduce using rule 26 (assignation -> var_assign EQUALS expression SEMICOLON .)
    LIST            reduce using rule 26 (assignation -> var_assign EQUALS expression SEMICOLON .)
    WHILE           reduce using rule 26 (assignation -> var_assign EQUALS expression SEMICOLON .)
    TIMES           reduce using rule 26 (assignation -> var_assign EQUALS expression SEMICOLON .)
    BOOL            reduce using rule 26 (assignation -> var_assign EQUALS expression SEMICOLON .)
    INT             reduce using rule 26 (assignation -> var_assign EQUALS expression SEMICOLON .)
    FLOAT           reduce using rule 26 (assignation -> var_assign EQUALS expression SEMICOLON .)
    STRING          reduce using rule 26 (assignation -> var_assign EQUALS expression SEMICOLON .)
    RETURN          reduce using rule 26 (assignation -> var_assign EQUALS expression SEMICOLON .)
    C_BRACKET       reduce using rule 26 (assignation -> var_assign EQUALS expression SEMICOLON .)


state 119

    (33) normalinit -> type var EQUALS expression . SEMICOLON

    SEMICOLON       shift and go to state 142


state 120

    (72) listaccess -> O_S_BRACKET INTCONST C_S_BRACKET .

    EQUALS          reduce using rule 72 (listaccess -> O_S_BRACKET INTCONST C_S_BRACKET .)


state 121

    (90) functioncall -> ID O_PARENTHESIS parametersinput C_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 143


state 122

    (91) parametersinput -> expression parametersinputloop .

    C_PARENTHESIS   reduce using rule 91 (parametersinput -> expression parametersinputloop .)


state 123

    (93) parametersinputloop -> COMMA . expression parametersinputloop
    (43) expression -> . expression2 expressionoptional
    (46) expression2 -> . exp expression2optional
    (57) exp -> . term exploop
    (62) term -> . fact termloop
    (68) fact -> . varconst
    (69) fact -> . O_PARENTHESIS expression C_PARENTHESIS
    (74) varconst -> . varconstfunction
    (75) varconst -> . constants
    (76) varconstfunction -> . ID functionorlist
    (80) constants -> . INTCONST
    (81) constants -> . FLOATCONST
    (82) constants -> . STRINGCONST
    (83) constants -> . booleanconst
    (84) booleanconst -> . TRUE
    (85) booleanconst -> . FALSE

    O_PARENTHESIS   shift and go to state 58
    ID              shift and go to state 64
    INTCONST        shift and go to state 62
    FLOATCONST      shift and go to state 57
    STRINGCONST     shift and go to state 60
    TRUE            shift and go to state 59
    FALSE           shift and go to state 67

    term                           shift and go to state 66
    booleanconst                   shift and go to state 69
    varconst                       shift and go to state 68
    constants                      shift and go to state 65
    exp                            shift and go to state 70
    varconstfunction               shift and go to state 61
    expression2                    shift and go to state 63
    expression                     shift and go to state 144
    fact                           shift and go to state 72

state 124

    (40) condition -> IF O_PARENTHESIS expression C_PARENTHESIS . block else
    (15) block -> . O_BRACKET statutesloop functionreturn C_BRACKET

    O_BRACKET       shift and go to state 7

    block                          shift and go to state 145

state 125

    (16) functionreturn -> RETURN expression SEMICOLON .

    C_BRACKET       reduce using rule 16 (functionreturn -> RETURN expression SEMICOLON .)


state 126

    (34) listinit -> LIST type var EQUALS . list SEMICOLON
    (35) list -> . O_S_BRACKET listelements C_S_BRACKET

    O_S_BRACKET     shift and go to state 147

    list                           shift and go to state 146

state 127

    (5) function -> FUNCTION functiontype ID O_PARENTHESIS parameters C_PARENTHESIS . block
    (15) block -> . O_BRACKET statutesloop functionreturn C_BRACKET

    O_BRACKET       shift and go to state 7

    block                          shift and go to state 148

state 128

    (97) parameterinit -> type ID .

    COMMA           reduce using rule 97 (parameterinit -> type ID .)
    C_PARENTHESIS   reduce using rule 97 (parameterinit -> type ID .)


state 129

    (95) parameters -> parameterinit parametersloop .

    C_PARENTHESIS   reduce using rule 95 (parameters -> parameterinit parametersloop .)


state 130

    (98) parametersloop -> COMMA . parameterinit parametersloop
    (97) parameterinit -> . type ID
    (11) type -> . BOOL
    (12) type -> . INT
    (13) type -> . FLOAT
    (14) type -> . STRING

    BOOL            shift and go to state 21
    INT             shift and go to state 35
    FLOAT           shift and go to state 36
    STRING          shift and go to state 25

    type                           shift and go to state 86
    parameterinit                  shift and go to state 149

state 131

    (89) timesloop -> TIMES O_PARENTHESIS INTCONST C_PARENTHESIS block .

    IF              reduce using rule 89 (timesloop -> TIMES O_PARENTHESIS INTCONST C_PARENTHESIS block .)
    PRINT           reduce using rule 89 (timesloop -> TIMES O_PARENTHESIS INTCONST C_PARENTHESIS block .)
    ID              reduce using rule 89 (timesloop -> TIMES O_PARENTHESIS INTCONST C_PARENTHESIS block .)
    LIST            reduce using rule 89 (timesloop -> TIMES O_PARENTHESIS INTCONST C_PARENTHESIS block .)
    WHILE           reduce using rule 89 (timesloop -> TIMES O_PARENTHESIS INTCONST C_PARENTHESIS block .)
    TIMES           reduce using rule 89 (timesloop -> TIMES O_PARENTHESIS INTCONST C_PARENTHESIS block .)
    BOOL            reduce using rule 89 (timesloop -> TIMES O_PARENTHESIS INTCONST C_PARENTHESIS block .)
    INT             reduce using rule 89 (timesloop -> TIMES O_PARENTHESIS INTCONST C_PARENTHESIS block .)
    FLOAT           reduce using rule 89 (timesloop -> TIMES O_PARENTHESIS INTCONST C_PARENTHESIS block .)
    STRING          reduce using rule 89 (timesloop -> TIMES O_PARENTHESIS INTCONST C_PARENTHESIS block .)
    RETURN          reduce using rule 89 (timesloop -> TIMES O_PARENTHESIS INTCONST C_PARENTHESIS block .)
    C_BRACKET       reduce using rule 89 (timesloop -> TIMES O_PARENTHESIS INTCONST C_PARENTHESIS block .)


state 132

    (69) fact -> O_PARENTHESIS expression C_PARENTHESIS .

    MULTIPLY        reduce using rule 69 (fact -> O_PARENTHESIS expression C_PARENTHESIS .)
    DIVIDE          reduce using rule 69 (fact -> O_PARENTHESIS expression C_PARENTHESIS .)
    MOD             reduce using rule 69 (fact -> O_PARENTHESIS expression C_PARENTHESIS .)
    SUM             reduce using rule 69 (fact -> O_PARENTHESIS expression C_PARENTHESIS .)
    MINUS           reduce using rule 69 (fact -> O_PARENTHESIS expression C_PARENTHESIS .)
    EQUALITY        reduce using rule 69 (fact -> O_PARENTHESIS expression C_PARENTHESIS .)
    GREATER         reduce using rule 69 (fact -> O_PARENTHESIS expression C_PARENTHESIS .)
    GREATER_EQUAL   reduce using rule 69 (fact -> O_PARENTHESIS expression C_PARENTHESIS .)
    LESS            reduce using rule 69 (fact -> O_PARENTHESIS expression C_PARENTHESIS .)
    LESS_EQUAL      reduce using rule 69 (fact -> O_PARENTHESIS expression C_PARENTHESIS .)
    DIFFERENT       reduce using rule 69 (fact -> O_PARENTHESIS expression C_PARENTHESIS .)
    AND             reduce using rule 69 (fact -> O_PARENTHESIS expression C_PARENTHESIS .)
    OR              reduce using rule 69 (fact -> O_PARENTHESIS expression C_PARENTHESIS .)
    SEMICOLON       reduce using rule 69 (fact -> O_PARENTHESIS expression C_PARENTHESIS .)
    C_PARENTHESIS   reduce using rule 69 (fact -> O_PARENTHESIS expression C_PARENTHESIS .)
    COMMA           reduce using rule 69 (fact -> O_PARENTHESIS expression C_PARENTHESIS .)


state 133

    (44) expressionoptional -> logicop expression2 .

    C_PARENTHESIS   reduce using rule 44 (expressionoptional -> logicop expression2 .)
    COMMA           reduce using rule 44 (expressionoptional -> logicop expression2 .)
    SEMICOLON       reduce using rule 44 (expressionoptional -> logicop expression2 .)


state 134

    (77) functionorlist -> O_S_BRACKET INTCONST . C_S_BRACKET

    C_S_BRACKET     shift and go to state 150


state 135

    (78) functionorlist -> O_PARENTHESIS parametersinput . C_PARENTHESIS

    C_PARENTHESIS   shift and go to state 151


state 136

    (58) exploop -> addsub exp .

    EQUALITY        reduce using rule 58 (exploop -> addsub exp .)
    GREATER         reduce using rule 58 (exploop -> addsub exp .)
    GREATER_EQUAL   reduce using rule 58 (exploop -> addsub exp .)
    LESS            reduce using rule 58 (exploop -> addsub exp .)
    LESS_EQUAL      reduce using rule 58 (exploop -> addsub exp .)
    DIFFERENT       reduce using rule 58 (exploop -> addsub exp .)
    AND             reduce using rule 58 (exploop -> addsub exp .)
    OR              reduce using rule 58 (exploop -> addsub exp .)
    C_PARENTHESIS   reduce using rule 58 (exploop -> addsub exp .)
    COMMA           reduce using rule 58 (exploop -> addsub exp .)
    SEMICOLON       reduce using rule 58 (exploop -> addsub exp .)


state 137

    (47) expression2optional -> relop exp .

    AND             reduce using rule 47 (expression2optional -> relop exp .)
    OR              reduce using rule 47 (expression2optional -> relop exp .)
    C_PARENTHESIS   reduce using rule 47 (expression2optional -> relop exp .)
    COMMA           reduce using rule 47 (expression2optional -> relop exp .)
    SEMICOLON       reduce using rule 47 (expression2optional -> relop exp .)


state 138

    (88) whileloop -> WHILE O_PARENTHESIS expression C_PARENTHESIS block .

    IF              reduce using rule 88 (whileloop -> WHILE O_PARENTHESIS expression C_PARENTHESIS block .)
    PRINT           reduce using rule 88 (whileloop -> WHILE O_PARENTHESIS expression C_PARENTHESIS block .)
    ID              reduce using rule 88 (whileloop -> WHILE O_PARENTHESIS expression C_PARENTHESIS block .)
    LIST            reduce using rule 88 (whileloop -> WHILE O_PARENTHESIS expression C_PARENTHESIS block .)
    WHILE           reduce using rule 88 (whileloop -> WHILE O_PARENTHESIS expression C_PARENTHESIS block .)
    TIMES           reduce using rule 88 (whileloop -> WHILE O_PARENTHESIS expression C_PARENTHESIS block .)
    BOOL            reduce using rule 88 (whileloop -> WHILE O_PARENTHESIS expression C_PARENTHESIS block .)
    INT             reduce using rule 88 (whileloop -> WHILE O_PARENTHESIS expression C_PARENTHESIS block .)
    FLOAT           reduce using rule 88 (whileloop -> WHILE O_PARENTHESIS expression C_PARENTHESIS block .)
    STRING          reduce using rule 88 (whileloop -> WHILE O_PARENTHESIS expression C_PARENTHESIS block .)
    RETURN          reduce using rule 88 (whileloop -> WHILE O_PARENTHESIS expression C_PARENTHESIS block .)
    C_BRACKET       reduce using rule 88 (whileloop -> WHILE O_PARENTHESIS expression C_PARENTHESIS block .)


state 139

    (63) termloop -> divmult term .

    SUM             reduce using rule 63 (termloop -> divmult term .)
    MINUS           reduce using rule 63 (termloop -> divmult term .)
    EQUALITY        reduce using rule 63 (termloop -> divmult term .)
    GREATER         reduce using rule 63 (termloop -> divmult term .)
    GREATER_EQUAL   reduce using rule 63 (termloop -> divmult term .)
    LESS            reduce using rule 63 (termloop -> divmult term .)
    LESS_EQUAL      reduce using rule 63 (termloop -> divmult term .)
    DIFFERENT       reduce using rule 63 (termloop -> divmult term .)
    AND             reduce using rule 63 (termloop -> divmult term .)
    OR              reduce using rule 63 (termloop -> divmult term .)
    C_PARENTHESIS   reduce using rule 63 (termloop -> divmult term .)
    COMMA           reduce using rule 63 (termloop -> divmult term .)
    SEMICOLON       reduce using rule 63 (termloop -> divmult term .)


state 140

    (27) writting -> PRINT O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON .

    IF              reduce using rule 27 (writting -> PRINT O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON .)
    PRINT           reduce using rule 27 (writting -> PRINT O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON .)
    ID              reduce using rule 27 (writting -> PRINT O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON .)
    LIST            reduce using rule 27 (writting -> PRINT O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON .)
    WHILE           reduce using rule 27 (writting -> PRINT O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON .)
    TIMES           reduce using rule 27 (writting -> PRINT O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON .)
    BOOL            reduce using rule 27 (writting -> PRINT O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON .)
    INT             reduce using rule 27 (writting -> PRINT O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON .)
    FLOAT           reduce using rule 27 (writting -> PRINT O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON .)
    STRING          reduce using rule 27 (writting -> PRINT O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON .)
    RETURN          reduce using rule 27 (writting -> PRINT O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON .)
    C_BRACKET       reduce using rule 27 (writting -> PRINT O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON .)


state 141

    (29) optionalwritting -> COMMA writtingloop .

    C_PARENTHESIS   reduce using rule 29 (optionalwritting -> COMMA writtingloop .)


state 142

    (33) normalinit -> type var EQUALS expression SEMICOLON .

    IF              reduce using rule 33 (normalinit -> type var EQUALS expression SEMICOLON .)
    PRINT           reduce using rule 33 (normalinit -> type var EQUALS expression SEMICOLON .)
    ID              reduce using rule 33 (normalinit -> type var EQUALS expression SEMICOLON .)
    LIST            reduce using rule 33 (normalinit -> type var EQUALS expression SEMICOLON .)
    WHILE           reduce using rule 33 (normalinit -> type var EQUALS expression SEMICOLON .)
    TIMES           reduce using rule 33 (normalinit -> type var EQUALS expression SEMICOLON .)
    BOOL            reduce using rule 33 (normalinit -> type var EQUALS expression SEMICOLON .)
    INT             reduce using rule 33 (normalinit -> type var EQUALS expression SEMICOLON .)
    FLOAT           reduce using rule 33 (normalinit -> type var EQUALS expression SEMICOLON .)
    STRING          reduce using rule 33 (normalinit -> type var EQUALS expression SEMICOLON .)
    RETURN          reduce using rule 33 (normalinit -> type var EQUALS expression SEMICOLON .)
    C_BRACKET       reduce using rule 33 (normalinit -> type var EQUALS expression SEMICOLON .)


state 143

    (90) functioncall -> ID O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON .

    IF              reduce using rule 90 (functioncall -> ID O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON .)
    PRINT           reduce using rule 90 (functioncall -> ID O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON .)
    ID              reduce using rule 90 (functioncall -> ID O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON .)
    LIST            reduce using rule 90 (functioncall -> ID O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON .)
    WHILE           reduce using rule 90 (functioncall -> ID O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON .)
    TIMES           reduce using rule 90 (functioncall -> ID O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON .)
    BOOL            reduce using rule 90 (functioncall -> ID O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON .)
    INT             reduce using rule 90 (functioncall -> ID O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON .)
    FLOAT           reduce using rule 90 (functioncall -> ID O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON .)
    STRING          reduce using rule 90 (functioncall -> ID O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON .)
    RETURN          reduce using rule 90 (functioncall -> ID O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON .)
    C_BRACKET       reduce using rule 90 (functioncall -> ID O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON .)


state 144

    (93) parametersinputloop -> COMMA expression . parametersinputloop
    (93) parametersinputloop -> . COMMA expression parametersinputloop
    (94) parametersinputloop -> .

    COMMA           shift and go to state 123
    C_PARENTHESIS   reduce using rule 94 (parametersinputloop -> .)

    parametersinputloop            shift and go to state 152

state 145

    (40) condition -> IF O_PARENTHESIS expression C_PARENTHESIS block . else
    (41) else -> . ELSE block
    (42) else -> .

    ELSE            shift and go to state 153
    IF              reduce using rule 42 (else -> .)
    PRINT           reduce using rule 42 (else -> .)
    ID              reduce using rule 42 (else -> .)
    LIST            reduce using rule 42 (else -> .)
    WHILE           reduce using rule 42 (else -> .)
    TIMES           reduce using rule 42 (else -> .)
    BOOL            reduce using rule 42 (else -> .)
    INT             reduce using rule 42 (else -> .)
    FLOAT           reduce using rule 42 (else -> .)
    STRING          reduce using rule 42 (else -> .)
    RETURN          reduce using rule 42 (else -> .)
    C_BRACKET       reduce using rule 42 (else -> .)

    else                           shift and go to state 154

state 146

    (34) listinit -> LIST type var EQUALS list . SEMICOLON

    SEMICOLON       shift and go to state 155


state 147

    (35) list -> O_S_BRACKET . listelements C_S_BRACKET
    (36) listelements -> . constants optionalconstants
    (37) listelements -> .
    (80) constants -> . INTCONST
    (81) constants -> . FLOATCONST
    (82) constants -> . STRINGCONST
    (83) constants -> . booleanconst
    (84) booleanconst -> . TRUE
    (85) booleanconst -> . FALSE

    C_S_BRACKET     reduce using rule 37 (listelements -> .)
    INTCONST        shift and go to state 62
    FLOATCONST      shift and go to state 57
    STRINGCONST     shift and go to state 60
    TRUE            shift and go to state 59
    FALSE           shift and go to state 67

    booleanconst                   shift and go to state 69
    constants                      shift and go to state 157
    listelements                   shift and go to state 156

state 148

    (5) function -> FUNCTION functiontype ID O_PARENTHESIS parameters C_PARENTHESIS block .

    FUNCTION        reduce using rule 5 (function -> FUNCTION functiontype ID O_PARENTHESIS parameters C_PARENTHESIS block .)
    $end            reduce using rule 5 (function -> FUNCTION functiontype ID O_PARENTHESIS parameters C_PARENTHESIS block .)


state 149

    (98) parametersloop -> COMMA parameterinit . parametersloop
    (98) parametersloop -> . COMMA parameterinit parametersloop
    (99) parametersloop -> .

    COMMA           shift and go to state 130
    C_PARENTHESIS   reduce using rule 99 (parametersloop -> .)

    parametersloop                 shift and go to state 158

state 150

    (77) functionorlist -> O_S_BRACKET INTCONST C_S_BRACKET .

    MULTIPLY        reduce using rule 77 (functionorlist -> O_S_BRACKET INTCONST C_S_BRACKET .)
    DIVIDE          reduce using rule 77 (functionorlist -> O_S_BRACKET INTCONST C_S_BRACKET .)
    MOD             reduce using rule 77 (functionorlist -> O_S_BRACKET INTCONST C_S_BRACKET .)
    SUM             reduce using rule 77 (functionorlist -> O_S_BRACKET INTCONST C_S_BRACKET .)
    MINUS           reduce using rule 77 (functionorlist -> O_S_BRACKET INTCONST C_S_BRACKET .)
    EQUALITY        reduce using rule 77 (functionorlist -> O_S_BRACKET INTCONST C_S_BRACKET .)
    GREATER         reduce using rule 77 (functionorlist -> O_S_BRACKET INTCONST C_S_BRACKET .)
    GREATER_EQUAL   reduce using rule 77 (functionorlist -> O_S_BRACKET INTCONST C_S_BRACKET .)
    LESS            reduce using rule 77 (functionorlist -> O_S_BRACKET INTCONST C_S_BRACKET .)
    LESS_EQUAL      reduce using rule 77 (functionorlist -> O_S_BRACKET INTCONST C_S_BRACKET .)
    DIFFERENT       reduce using rule 77 (functionorlist -> O_S_BRACKET INTCONST C_S_BRACKET .)
    AND             reduce using rule 77 (functionorlist -> O_S_BRACKET INTCONST C_S_BRACKET .)
    OR              reduce using rule 77 (functionorlist -> O_S_BRACKET INTCONST C_S_BRACKET .)
    C_PARENTHESIS   reduce using rule 77 (functionorlist -> O_S_BRACKET INTCONST C_S_BRACKET .)
    COMMA           reduce using rule 77 (functionorlist -> O_S_BRACKET INTCONST C_S_BRACKET .)
    SEMICOLON       reduce using rule 77 (functionorlist -> O_S_BRACKET INTCONST C_S_BRACKET .)


state 151

    (78) functionorlist -> O_PARENTHESIS parametersinput C_PARENTHESIS .

    MULTIPLY        reduce using rule 78 (functionorlist -> O_PARENTHESIS parametersinput C_PARENTHESIS .)
    DIVIDE          reduce using rule 78 (functionorlist -> O_PARENTHESIS parametersinput C_PARENTHESIS .)
    MOD             reduce using rule 78 (functionorlist -> O_PARENTHESIS parametersinput C_PARENTHESIS .)
    SUM             reduce using rule 78 (functionorlist -> O_PARENTHESIS parametersinput C_PARENTHESIS .)
    MINUS           reduce using rule 78 (functionorlist -> O_PARENTHESIS parametersinput C_PARENTHESIS .)
    EQUALITY        reduce using rule 78 (functionorlist -> O_PARENTHESIS parametersinput C_PARENTHESIS .)
    GREATER         reduce using rule 78 (functionorlist -> O_PARENTHESIS parametersinput C_PARENTHESIS .)
    GREATER_EQUAL   reduce using rule 78 (functionorlist -> O_PARENTHESIS parametersinput C_PARENTHESIS .)
    LESS            reduce using rule 78 (functionorlist -> O_PARENTHESIS parametersinput C_PARENTHESIS .)
    LESS_EQUAL      reduce using rule 78 (functionorlist -> O_PARENTHESIS parametersinput C_PARENTHESIS .)
    DIFFERENT       reduce using rule 78 (functionorlist -> O_PARENTHESIS parametersinput C_PARENTHESIS .)
    AND             reduce using rule 78 (functionorlist -> O_PARENTHESIS parametersinput C_PARENTHESIS .)
    OR              reduce using rule 78 (functionorlist -> O_PARENTHESIS parametersinput C_PARENTHESIS .)
    C_PARENTHESIS   reduce using rule 78 (functionorlist -> O_PARENTHESIS parametersinput C_PARENTHESIS .)
    COMMA           reduce using rule 78 (functionorlist -> O_PARENTHESIS parametersinput C_PARENTHESIS .)
    SEMICOLON       reduce using rule 78 (functionorlist -> O_PARENTHESIS parametersinput C_PARENTHESIS .)


state 152

    (93) parametersinputloop -> COMMA expression parametersinputloop .

    C_PARENTHESIS   reduce using rule 93 (parametersinputloop -> COMMA expression parametersinputloop .)


state 153

    (41) else -> ELSE . block
    (15) block -> . O_BRACKET statutesloop functionreturn C_BRACKET

    O_BRACKET       shift and go to state 7

    block                          shift and go to state 159

state 154

    (40) condition -> IF O_PARENTHESIS expression C_PARENTHESIS block else .

    IF              reduce using rule 40 (condition -> IF O_PARENTHESIS expression C_PARENTHESIS block else .)
    PRINT           reduce using rule 40 (condition -> IF O_PARENTHESIS expression C_PARENTHESIS block else .)
    ID              reduce using rule 40 (condition -> IF O_PARENTHESIS expression C_PARENTHESIS block else .)
    LIST            reduce using rule 40 (condition -> IF O_PARENTHESIS expression C_PARENTHESIS block else .)
    WHILE           reduce using rule 40 (condition -> IF O_PARENTHESIS expression C_PARENTHESIS block else .)
    TIMES           reduce using rule 40 (condition -> IF O_PARENTHESIS expression C_PARENTHESIS block else .)
    BOOL            reduce using rule 40 (condition -> IF O_PARENTHESIS expression C_PARENTHESIS block else .)
    INT             reduce using rule 40 (condition -> IF O_PARENTHESIS expression C_PARENTHESIS block else .)
    FLOAT           reduce using rule 40 (condition -> IF O_PARENTHESIS expression C_PARENTHESIS block else .)
    STRING          reduce using rule 40 (condition -> IF O_PARENTHESIS expression C_PARENTHESIS block else .)
    RETURN          reduce using rule 40 (condition -> IF O_PARENTHESIS expression C_PARENTHESIS block else .)
    C_BRACKET       reduce using rule 40 (condition -> IF O_PARENTHESIS expression C_PARENTHESIS block else .)


state 155

    (34) listinit -> LIST type var EQUALS list SEMICOLON .

    IF              reduce using rule 34 (listinit -> LIST type var EQUALS list SEMICOLON .)
    PRINT           reduce using rule 34 (listinit -> LIST type var EQUALS list SEMICOLON .)
    ID              reduce using rule 34 (listinit -> LIST type var EQUALS list SEMICOLON .)
    LIST            reduce using rule 34 (listinit -> LIST type var EQUALS list SEMICOLON .)
    WHILE           reduce using rule 34 (listinit -> LIST type var EQUALS list SEMICOLON .)
    TIMES           reduce using rule 34 (listinit -> LIST type var EQUALS list SEMICOLON .)
    BOOL            reduce using rule 34 (listinit -> LIST type var EQUALS list SEMICOLON .)
    INT             reduce using rule 34 (listinit -> LIST type var EQUALS list SEMICOLON .)
    FLOAT           reduce using rule 34 (listinit -> LIST type var EQUALS list SEMICOLON .)
    STRING          reduce using rule 34 (listinit -> LIST type var EQUALS list SEMICOLON .)
    RETURN          reduce using rule 34 (listinit -> LIST type var EQUALS list SEMICOLON .)
    C_BRACKET       reduce using rule 34 (listinit -> LIST type var EQUALS list SEMICOLON .)


state 156

    (35) list -> O_S_BRACKET listelements . C_S_BRACKET

    C_S_BRACKET     shift and go to state 160


state 157

    (36) listelements -> constants . optionalconstants
    (38) optionalconstants -> . COMMA constants optionalconstants
    (39) optionalconstants -> .

    COMMA           shift and go to state 162
    C_S_BRACKET     reduce using rule 39 (optionalconstants -> .)

    optionalconstants              shift and go to state 161

state 158

    (98) parametersloop -> COMMA parameterinit parametersloop .

    C_PARENTHESIS   reduce using rule 98 (parametersloop -> COMMA parameterinit parametersloop .)


state 159

    (41) else -> ELSE block .

    IF              reduce using rule 41 (else -> ELSE block .)
    PRINT           reduce using rule 41 (else -> ELSE block .)
    ID              reduce using rule 41 (else -> ELSE block .)
    LIST            reduce using rule 41 (else -> ELSE block .)
    WHILE           reduce using rule 41 (else -> ELSE block .)
    TIMES           reduce using rule 41 (else -> ELSE block .)
    BOOL            reduce using rule 41 (else -> ELSE block .)
    INT             reduce using rule 41 (else -> ELSE block .)
    FLOAT           reduce using rule 41 (else -> ELSE block .)
    STRING          reduce using rule 41 (else -> ELSE block .)
    RETURN          reduce using rule 41 (else -> ELSE block .)
    C_BRACKET       reduce using rule 41 (else -> ELSE block .)


state 160

    (35) list -> O_S_BRACKET listelements C_S_BRACKET .

    SEMICOLON       reduce using rule 35 (list -> O_S_BRACKET listelements C_S_BRACKET .)


state 161

    (36) listelements -> constants optionalconstants .

    C_S_BRACKET     reduce using rule 36 (listelements -> constants optionalconstants .)


state 162

    (38) optionalconstants -> COMMA . constants optionalconstants
    (80) constants -> . INTCONST
    (81) constants -> . FLOATCONST
    (82) constants -> . STRINGCONST
    (83) constants -> . booleanconst
    (84) booleanconst -> . TRUE
    (85) booleanconst -> . FALSE

    INTCONST        shift and go to state 62
    FLOATCONST      shift and go to state 57
    STRINGCONST     shift and go to state 60
    TRUE            shift and go to state 59
    FALSE           shift and go to state 67

    booleanconst                   shift and go to state 69
    constants                      shift and go to state 163

state 163

    (38) optionalconstants -> COMMA constants . optionalconstants
    (38) optionalconstants -> . COMMA constants optionalconstants
    (39) optionalconstants -> .

    COMMA           shift and go to state 162
    C_S_BRACKET     reduce using rule 39 (optionalconstants -> .)

    optionalconstants              shift and go to state 164

state 164

    (38) optionalconstants -> COMMA constants optionalconstants .

    C_S_BRACKET     reduce using rule 38 (optionalconstants -> COMMA constants optionalconstants .)

