Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> generate_main_goto functionloop fill_main_goto main
Rule 2     generate_main_goto -> <empty>
Rule 3     fill_main_goto -> <empty>
Rule 4     main -> MAIN start_main block
Rule 5     start_main -> <empty>
Rule 6     functionloop -> function functionloop
Rule 7     functionloop -> <empty>
Rule 8     function -> FUNCTION function_head function_end
Rule 9     add_function_init_to_dict -> <empty>
Rule 10    function_head -> VOID add_function_type_to_options function_def
Rule 11    function_head -> BOOL add_function_type_to_options function_with_return_def
Rule 12    function_head -> INT add_function_type_to_options function_with_return_def
Rule 13    function_head -> FLOAT add_function_type_to_options function_with_return_def
Rule 14    function_head -> STRING add_function_type_to_options function_with_return_def
Rule 15    add_function_type_to_options -> <empty>
Rule 16    function_with_return_def -> ID add_function_id_to_options add_function_to_global_variables check_current_quadruple O_PARENTHESIS parameters C_PARENTHESIS add_function_init_to_dict functionblock
Rule 17    add_function_to_global_variables -> <empty>
Rule 18    function_def -> ID add_function_id_to_options check_current_quadruple O_PARENTHESIS parameters C_PARENTHESIS add_function_init_to_dict block
Rule 19    check_current_quadruple -> <empty>
Rule 20    add_function_id_to_options -> <empty>
Rule 21    type -> BOOL
Rule 22    type -> INT
Rule 23    type -> FLOAT
Rule 24    type -> STRING
Rule 25    parametertype -> BOOL
Rule 26    parametertype -> INT
Rule 27    parametertype -> FLOAT
Rule 28    parametertype -> STRING
Rule 29    block -> O_BRACKET statutesloop C_BRACKET
Rule 30    functionblock -> O_BRACKET functionstatutesloop C_BRACKET
Rule 31    functionreturn -> RETURN add_function_var_to_stack O_BRACKET expression C_BRACKET SEMICOLON
Rule 32    functionreturn -> RETURN add_function_var_to_stack expression SEMICOLON
Rule 33    add_function_var_to_stack -> <empty>
Rule 34    function_end -> <empty>
Rule 35    statutesloop -> statute statutesloop
Rule 36    statutesloop -> <empty>
Rule 37    functionstatutesloop -> functionstatute functionstatutesloop
Rule 38    functionstatutesloop -> functionreturn
Rule 39    functionstatutesloop -> <empty>
Rule 40    statute -> init
Rule 41    statute -> condition
Rule 42    statute -> writting
Rule 43    statute -> loop
Rule 44    statute -> assignation
Rule 45    statute -> functioncall
Rule 46    functionstatute -> init
Rule 47    functionstatute -> functioncondition
Rule 48    functionstatute -> writting
Rule 49    functionstatute -> functionloops
Rule 50    functionstatute -> assignation
Rule 51    functionstatute -> functioncall
Rule 52    assignation -> var_assign EQUALS add_equals expression equals_quadruple SEMICOLON
Rule 53    writting -> PRINT O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON
Rule 54    start_printing -> <empty>
Rule 55    print_quadruple -> <empty>
Rule 56    writtingloop -> start_printing expression print_quadruple optionalwritting
Rule 57    optionalwritting -> COMMA writtingloop
Rule 58    optionalwritting -> <empty>
Rule 59    init -> listinit
Rule 60    init -> normalinit
Rule 61    normalinit -> type var EQUALS add_equals expression equals_quadruple SEMICOLON
Rule 62    equals_quadruple -> <empty>
Rule 63    add_equals -> <empty>
Rule 64    listinit -> LIST type var EQUALS list SEMICOLON
Rule 65    list -> O_S_BRACKET listelements C_S_BRACKET
Rule 66    listelements -> constants optionalconstants
Rule 67    listelements -> <empty>
Rule 68    optionalconstants -> COMMA constants optionalconstants
Rule 69    optionalconstants -> <empty>
Rule 70    condition -> IF O_PARENTHESIS expression C_PARENTHESIS start_condition block else end_condition
Rule 71    functioncondition -> IF O_PARENTHESIS expression C_PARENTHESIS start_condition functionblock functionelse end_condition
Rule 72    else -> ELSE else_condition block
Rule 73    else -> <empty>
Rule 74    functionelse -> ELSE else_condition functionblock
Rule 75    functionelse -> <empty>
Rule 76    start_condition -> <empty>
Rule 77    else_condition -> <empty>
Rule 78    end_condition -> <empty>
Rule 79    expression -> expression2 expressionoptional
Rule 80    expressionoptional -> logicop expression2 logic_op_quadruple
Rule 81    expressionoptional -> <empty>
Rule 82    expression2 -> exp expression2optional
Rule 83    expression2optional -> relop exp relop_quadruple
Rule 84    expression2optional -> <empty>
Rule 85    logicop -> AND
Rule 86    logicop -> OR
Rule 87    logic_op_quadruple -> <empty>
Rule 88    relop -> EQUALITY
Rule 89    relop -> GREATER
Rule 90    relop -> GREATER_EQUAL
Rule 91    relop -> LESS
Rule 92    relop -> LESS_EQUAL
Rule 93    relop -> DIFFERENT
Rule 94    relop_quadruple -> <empty>
Rule 95    exp -> term exp_quadruple exploop
Rule 96    exp_quadruple -> <empty>
Rule 97    exploop -> addsub exp
Rule 98    exploop -> <empty>
Rule 99    addsub -> SUM
Rule 100   addsub -> MINUS
Rule 101   term -> fact term_quadruple termloop
Rule 102   term_quadruple -> <empty>
Rule 103   termloop -> divmult term
Rule 104   termloop -> <empty>
Rule 105   divmult -> MULTIPLY
Rule 106   divmult -> DIVIDE
Rule 107   divmult -> MOD
Rule 108   fact -> varconst
Rule 109   fact -> O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis
Rule 110   add_o_parenthesis -> <empty>
Rule 111   add_c_parenthesis -> <empty>
Rule 112   var_assign -> ID add_to_stack listaccess
Rule 113   var -> ID listaccess
Rule 114   listaccess -> O_S_BRACKET INTCONST C_S_BRACKET
Rule 115   listaccess -> <empty>
Rule 116   varconst -> varconstfunction
Rule 117   varconst -> constants
Rule 118   varconstfunction -> ID functionorlist
Rule 119   add_to_stack -> <empty>
Rule 120   functionorlist -> O_S_BRACKET INTCONST C_S_BRACKET
Rule 121   functionorlist -> check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS generate_gosub
Rule 122   functionorlist -> add_to_stack
Rule 123   constants -> INTCONST add_int_constant_to_dict
Rule 124   constants -> FLOATCONST add_float_constant_to_dict
Rule 125   constants -> STRINGCONST add_string_constant_to_dict
Rule 126   constants -> booleanconst
Rule 127   booleanconst -> TRUE add_bool_constant_to_dict
Rule 128   booleanconst -> FALSE add_bool_constant_to_dict
Rule 129   add_int_constant_to_dict -> <empty>
Rule 130   add_float_constant_to_dict -> <empty>
Rule 131   add_string_constant_to_dict -> <empty>
Rule 132   add_bool_constant_to_dict -> <empty>
Rule 133   loop -> whileloop
Rule 134   loop -> timesloop
Rule 135   functionloops -> functionwhileloop
Rule 136   functionloops -> functiontimesloop
Rule 137   whileloop -> WHILE start_while O_PARENTHESIS expression C_PARENTHESIS condition_while block end_while
Rule 138   functionwhileloop -> WHILE start_while O_PARENTHESIS expression C_PARENTHESIS condition_while functionblock end_while
Rule 139   start_while -> <empty>
Rule 140   condition_while -> <empty>
Rule 141   end_while -> <empty>
Rule 142   timesloop -> TIMES O_PARENTHESIS expression C_PARENTHESIS start_times block end_times
Rule 143   functiontimesloop -> TIMES O_PARENTHESIS expression C_PARENTHESIS start_times functionblock end_times
Rule 144   start_times -> <empty>
Rule 145   end_times -> <empty>
Rule 146   functioncall -> ID check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON generate_gosub
Rule 147   check_function_exists -> <empty>
Rule 148   generate_gosub -> <empty>
Rule 149   parametersinput -> expression push_type_to_function_options generate_parameter_quadruple parametersinputloop check_params_order
Rule 150   parametersinput -> <empty>
Rule 151   parametersinputloop -> COMMA expression push_type_to_function_options generate_parameter_quadruple parametersinputloop
Rule 152   parametersinputloop -> <empty>
Rule 153   push_type_to_function_options -> <empty>
Rule 154   check_params_order -> <empty>
Rule 155   generate_parameter_quadruple -> <empty>
Rule 156   parameters -> parameterinit parametersloop
Rule 157   parameters -> <empty>
Rule 158   parameterinit -> parametertype ID
Rule 159   parametersloop -> COMMA parameterinit parametersloop
Rule 160   parametersloop -> <empty>

Terminals, with rules where they appear

AND                  : 85
BOOL                 : 11 21 25
COMMA                : 57 68 151 159
C_BRACKET            : 29 30 31
C_PARENTHESIS        : 16 18 53 70 71 109 121 137 138 142 143 146
C_S_BRACKET          : 65 114 120
DIFFERENT            : 93
DIVIDE               : 106
ELSE                 : 72 74
EQUALITY             : 88
EQUALS               : 52 61 64
FALSE                : 128
FLOAT                : 13 23 27
FLOATCONST           : 124
FUNCTION             : 8
GREATER              : 89
GREATER_EQUAL        : 90
ID                   : 16 18 112 113 118 146 158
IF                   : 70 71
INT                  : 12 22 26
INTCONST             : 114 120 123
LESS                 : 91
LESS_EQUAL           : 92
LIST                 : 64
MAIN                 : 4
MINUS                : 100
MOD                  : 107
MULTIPLY             : 105
OR                   : 86
O_BRACKET            : 29 30 31
O_PARENTHESIS        : 16 18 53 70 71 109 121 137 138 142 143 146
O_S_BRACKET          : 65 114 120
PRINT                : 53
RETURN               : 31 32
SEMICOLON            : 31 32 52 53 61 64 146
STRING               : 14 24 28
STRINGCONST          : 125
SUM                  : 99
TIMES                : 142 143
TRUE                 : 127
VOID                 : 10
WHILE                : 137 138
error                : 

Nonterminals, with rules where they appear

add_bool_constant_to_dict : 127 128
add_c_parenthesis    : 109
add_equals           : 52 61
add_float_constant_to_dict : 124
add_function_id_to_options : 16 18
add_function_init_to_dict : 16 18
add_function_to_global_variables : 16
add_function_type_to_options : 10 11 12 13 14
add_function_var_to_stack : 31 32
add_int_constant_to_dict : 123
add_o_parenthesis    : 109
add_string_constant_to_dict : 125
add_to_stack         : 112 122
addsub               : 97
assignation          : 44 50
block                : 4 18 70 72 137 142
booleanconst         : 126
check_current_quadruple : 16 18
check_function_exists : 121 146
check_params_order   : 149
condition            : 41
condition_while      : 137 138
constants            : 66 68 117
divmult              : 103
else                 : 70
else_condition       : 72 74
end_condition        : 70 71
end_times            : 142 143
end_while            : 137 138
equals_quadruple     : 52 61
exp                  : 82 83 97
exp_quadruple        : 95
exploop              : 95
expression           : 31 32 52 56 61 70 71 109 137 138 142 143 149 151
expression2          : 79 80
expression2optional  : 82
expressionoptional   : 79
fact                 : 101
fill_main_goto       : 1
function             : 6
function_def         : 10
function_end         : 8
function_head        : 8
function_with_return_def : 11 12 13 14
functionblock        : 16 71 74 138 143
functioncall         : 45 51
functioncondition    : 47
functionelse         : 71
functionloop         : 1 6
functionloops        : 49
functionorlist       : 118
functionreturn       : 38
functionstatute      : 37
functionstatutesloop : 30 37
functiontimesloop    : 136
functionwhileloop    : 135
generate_gosub       : 121 146
generate_main_goto   : 1
generate_parameter_quadruple : 149 151
init                 : 40 46
list                 : 64
listaccess           : 112 113
listelements         : 65
listinit             : 59
logic_op_quadruple   : 80
logicop              : 80
loop                 : 43
main                 : 1
normalinit           : 60
optionalconstants    : 66 68
optionalwritting     : 56
parameterinit        : 156 159
parameters           : 16 18
parametersinput      : 121 146
parametersinputloop  : 149 151
parametersloop       : 156 159
parametertype        : 158
print_quadruple      : 56
program              : 0
push_type_to_function_options : 149 151
relop                : 83
relop_quadruple      : 83
start_condition      : 70 71
start_main           : 4
start_printing       : 56
start_times          : 142 143
start_while          : 137 138
statute              : 35
statutesloop         : 29 35
term                 : 95 103
term_quadruple       : 101
termloop             : 101
timesloop            : 134
type                 : 61 64
var                  : 61 64
var_assign           : 52
varconst             : 108
varconstfunction     : 116
whileloop            : 133
writting             : 42 48
writtingloop         : 53 57

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . generate_main_goto functionloop fill_main_goto main
    (2) generate_main_goto -> .

    FUNCTION        reduce using rule 2 (generate_main_goto -> .)
    MAIN            reduce using rule 2 (generate_main_goto -> .)

    program                        shift and go to state 1
    generate_main_goto             shift and go to state 2

state 1

    (0) S' -> program .



state 2

    (1) program -> generate_main_goto . functionloop fill_main_goto main
    (6) functionloop -> . function functionloop
    (7) functionloop -> .
    (8) function -> . FUNCTION function_head function_end

    MAIN            reduce using rule 7 (functionloop -> .)
    FUNCTION        shift and go to state 4

    function                       shift and go to state 3
    functionloop                   shift and go to state 5

state 3

    (6) functionloop -> function . functionloop
    (6) functionloop -> . function functionloop
    (7) functionloop -> .
    (8) function -> . FUNCTION function_head function_end

    MAIN            reduce using rule 7 (functionloop -> .)
    FUNCTION        shift and go to state 4

    function                       shift and go to state 3
    functionloop                   shift and go to state 6

state 4

    (8) function -> FUNCTION . function_head function_end
    (10) function_head -> . VOID add_function_type_to_options function_def
    (11) function_head -> . BOOL add_function_type_to_options function_with_return_def
    (12) function_head -> . INT add_function_type_to_options function_with_return_def
    (13) function_head -> . FLOAT add_function_type_to_options function_with_return_def
    (14) function_head -> . STRING add_function_type_to_options function_with_return_def

    VOID            shift and go to state 8
    BOOL            shift and go to state 11
    INT             shift and go to state 12
    FLOAT           shift and go to state 9
    STRING          shift and go to state 7

    function_head                  shift and go to state 10

state 5

    (1) program -> generate_main_goto functionloop . fill_main_goto main
    (3) fill_main_goto -> .

    MAIN            reduce using rule 3 (fill_main_goto -> .)

    fill_main_goto                 shift and go to state 13

state 6

    (6) functionloop -> function functionloop .

    MAIN            reduce using rule 6 (functionloop -> function functionloop .)


state 7

    (14) function_head -> STRING . add_function_type_to_options function_with_return_def
    (15) add_function_type_to_options -> .

    ID              reduce using rule 15 (add_function_type_to_options -> .)

    add_function_type_to_options   shift and go to state 14

state 8

    (10) function_head -> VOID . add_function_type_to_options function_def
    (15) add_function_type_to_options -> .

    ID              reduce using rule 15 (add_function_type_to_options -> .)

    add_function_type_to_options   shift and go to state 15

state 9

    (13) function_head -> FLOAT . add_function_type_to_options function_with_return_def
    (15) add_function_type_to_options -> .

    ID              reduce using rule 15 (add_function_type_to_options -> .)

    add_function_type_to_options   shift and go to state 16

state 10

    (8) function -> FUNCTION function_head . function_end
    (34) function_end -> .

    FUNCTION        reduce using rule 34 (function_end -> .)
    MAIN            reduce using rule 34 (function_end -> .)

    function_end                   shift and go to state 17

state 11

    (11) function_head -> BOOL . add_function_type_to_options function_with_return_def
    (15) add_function_type_to_options -> .

    ID              reduce using rule 15 (add_function_type_to_options -> .)

    add_function_type_to_options   shift and go to state 18

state 12

    (12) function_head -> INT . add_function_type_to_options function_with_return_def
    (15) add_function_type_to_options -> .

    ID              reduce using rule 15 (add_function_type_to_options -> .)

    add_function_type_to_options   shift and go to state 19

state 13

    (1) program -> generate_main_goto functionloop fill_main_goto . main
    (4) main -> . MAIN start_main block

    MAIN            shift and go to state 20

    main                           shift and go to state 21

state 14

    (14) function_head -> STRING add_function_type_to_options . function_with_return_def
    (16) function_with_return_def -> . ID add_function_id_to_options add_function_to_global_variables check_current_quadruple O_PARENTHESIS parameters C_PARENTHESIS add_function_init_to_dict functionblock

    ID              shift and go to state 23

    function_with_return_def       shift and go to state 22

state 15

    (10) function_head -> VOID add_function_type_to_options . function_def
    (18) function_def -> . ID add_function_id_to_options check_current_quadruple O_PARENTHESIS parameters C_PARENTHESIS add_function_init_to_dict block

    ID              shift and go to state 25

    function_def                   shift and go to state 24

state 16

    (13) function_head -> FLOAT add_function_type_to_options . function_with_return_def
    (16) function_with_return_def -> . ID add_function_id_to_options add_function_to_global_variables check_current_quadruple O_PARENTHESIS parameters C_PARENTHESIS add_function_init_to_dict functionblock

    ID              shift and go to state 23

    function_with_return_def       shift and go to state 26

state 17

    (8) function -> FUNCTION function_head function_end .

    FUNCTION        reduce using rule 8 (function -> FUNCTION function_head function_end .)
    MAIN            reduce using rule 8 (function -> FUNCTION function_head function_end .)


state 18

    (11) function_head -> BOOL add_function_type_to_options . function_with_return_def
    (16) function_with_return_def -> . ID add_function_id_to_options add_function_to_global_variables check_current_quadruple O_PARENTHESIS parameters C_PARENTHESIS add_function_init_to_dict functionblock

    ID              shift and go to state 23

    function_with_return_def       shift and go to state 27

state 19

    (12) function_head -> INT add_function_type_to_options . function_with_return_def
    (16) function_with_return_def -> . ID add_function_id_to_options add_function_to_global_variables check_current_quadruple O_PARENTHESIS parameters C_PARENTHESIS add_function_init_to_dict functionblock

    ID              shift and go to state 23

    function_with_return_def       shift and go to state 28

state 20

    (4) main -> MAIN . start_main block
    (5) start_main -> .

    O_BRACKET       reduce using rule 5 (start_main -> .)

    start_main                     shift and go to state 29

state 21

    (1) program -> generate_main_goto functionloop fill_main_goto main .

    $end            reduce using rule 1 (program -> generate_main_goto functionloop fill_main_goto main .)


state 22

    (14) function_head -> STRING add_function_type_to_options function_with_return_def .

    FUNCTION        reduce using rule 14 (function_head -> STRING add_function_type_to_options function_with_return_def .)
    MAIN            reduce using rule 14 (function_head -> STRING add_function_type_to_options function_with_return_def .)


state 23

    (16) function_with_return_def -> ID . add_function_id_to_options add_function_to_global_variables check_current_quadruple O_PARENTHESIS parameters C_PARENTHESIS add_function_init_to_dict functionblock
    (20) add_function_id_to_options -> .

    O_PARENTHESIS   reduce using rule 20 (add_function_id_to_options -> .)

    add_function_id_to_options     shift and go to state 30

state 24

    (10) function_head -> VOID add_function_type_to_options function_def .

    FUNCTION        reduce using rule 10 (function_head -> VOID add_function_type_to_options function_def .)
    MAIN            reduce using rule 10 (function_head -> VOID add_function_type_to_options function_def .)


state 25

    (18) function_def -> ID . add_function_id_to_options check_current_quadruple O_PARENTHESIS parameters C_PARENTHESIS add_function_init_to_dict block
    (20) add_function_id_to_options -> .

    O_PARENTHESIS   reduce using rule 20 (add_function_id_to_options -> .)

    add_function_id_to_options     shift and go to state 31

state 26

    (13) function_head -> FLOAT add_function_type_to_options function_with_return_def .

    FUNCTION        reduce using rule 13 (function_head -> FLOAT add_function_type_to_options function_with_return_def .)
    MAIN            reduce using rule 13 (function_head -> FLOAT add_function_type_to_options function_with_return_def .)


state 27

    (11) function_head -> BOOL add_function_type_to_options function_with_return_def .

    FUNCTION        reduce using rule 11 (function_head -> BOOL add_function_type_to_options function_with_return_def .)
    MAIN            reduce using rule 11 (function_head -> BOOL add_function_type_to_options function_with_return_def .)


state 28

    (12) function_head -> INT add_function_type_to_options function_with_return_def .

    FUNCTION        reduce using rule 12 (function_head -> INT add_function_type_to_options function_with_return_def .)
    MAIN            reduce using rule 12 (function_head -> INT add_function_type_to_options function_with_return_def .)


state 29

    (4) main -> MAIN start_main . block
    (29) block -> . O_BRACKET statutesloop C_BRACKET

    O_BRACKET       shift and go to state 32

    block                          shift and go to state 33

state 30

    (16) function_with_return_def -> ID add_function_id_to_options . add_function_to_global_variables check_current_quadruple O_PARENTHESIS parameters C_PARENTHESIS add_function_init_to_dict functionblock
    (17) add_function_to_global_variables -> .

    O_PARENTHESIS   reduce using rule 17 (add_function_to_global_variables -> .)

    add_function_to_global_variables shift and go to state 34

state 31

    (18) function_def -> ID add_function_id_to_options . check_current_quadruple O_PARENTHESIS parameters C_PARENTHESIS add_function_init_to_dict block
    (19) check_current_quadruple -> .

    O_PARENTHESIS   reduce using rule 19 (check_current_quadruple -> .)

    check_current_quadruple        shift and go to state 35

state 32

    (29) block -> O_BRACKET . statutesloop C_BRACKET
    (35) statutesloop -> . statute statutesloop
    (36) statutesloop -> .
    (40) statute -> . init
    (41) statute -> . condition
    (42) statute -> . writting
    (43) statute -> . loop
    (44) statute -> . assignation
    (45) statute -> . functioncall
    (59) init -> . listinit
    (60) init -> . normalinit
    (70) condition -> . IF O_PARENTHESIS expression C_PARENTHESIS start_condition block else end_condition
    (53) writting -> . PRINT O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON
    (133) loop -> . whileloop
    (134) loop -> . timesloop
    (52) assignation -> . var_assign EQUALS add_equals expression equals_quadruple SEMICOLON
    (146) functioncall -> . ID check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON generate_gosub
    (64) listinit -> . LIST type var EQUALS list SEMICOLON
    (61) normalinit -> . type var EQUALS add_equals expression equals_quadruple SEMICOLON
    (137) whileloop -> . WHILE start_while O_PARENTHESIS expression C_PARENTHESIS condition_while block end_while
    (142) timesloop -> . TIMES O_PARENTHESIS expression C_PARENTHESIS start_times block end_times
    (112) var_assign -> . ID add_to_stack listaccess
    (21) type -> . BOOL
    (22) type -> . INT
    (23) type -> . FLOAT
    (24) type -> . STRING

    C_BRACKET       reduce using rule 36 (statutesloop -> .)
    IF              shift and go to state 51
    PRINT           shift and go to state 38
    ID              shift and go to state 49
    LIST            shift and go to state 57
    WHILE           shift and go to state 37
    TIMES           shift and go to state 36
    BOOL            shift and go to state 41
    INT             shift and go to state 55
    FLOAT           shift and go to state 56
    STRING          shift and go to state 45

    whileloop                      shift and go to state 39
    init                           shift and go to state 40
    var_assign                     shift and go to state 42
    type                           shift and go to state 43
    normalinit                     shift and go to state 44
    listinit                       shift and go to state 46
    writting                       shift and go to state 47
    timesloop                      shift and go to state 48
    condition                      shift and go to state 50
    statute                        shift and go to state 52
    assignation                    shift and go to state 53
    statutesloop                   shift and go to state 54
    functioncall                   shift and go to state 58
    loop                           shift and go to state 59

state 33

    (4) main -> MAIN start_main block .

    $end            reduce using rule 4 (main -> MAIN start_main block .)


state 34

    (16) function_with_return_def -> ID add_function_id_to_options add_function_to_global_variables . check_current_quadruple O_PARENTHESIS parameters C_PARENTHESIS add_function_init_to_dict functionblock
    (19) check_current_quadruple -> .

    O_PARENTHESIS   reduce using rule 19 (check_current_quadruple -> .)

    check_current_quadruple        shift and go to state 60

state 35

    (18) function_def -> ID add_function_id_to_options check_current_quadruple . O_PARENTHESIS parameters C_PARENTHESIS add_function_init_to_dict block

    O_PARENTHESIS   shift and go to state 61


state 36

    (142) timesloop -> TIMES . O_PARENTHESIS expression C_PARENTHESIS start_times block end_times

    O_PARENTHESIS   shift and go to state 62


state 37

    (137) whileloop -> WHILE . start_while O_PARENTHESIS expression C_PARENTHESIS condition_while block end_while
    (139) start_while -> .

    O_PARENTHESIS   reduce using rule 139 (start_while -> .)

    start_while                    shift and go to state 63

state 38

    (53) writting -> PRINT . O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON

    O_PARENTHESIS   shift and go to state 64


state 39

    (133) loop -> whileloop .

    IF              reduce using rule 133 (loop -> whileloop .)
    PRINT           reduce using rule 133 (loop -> whileloop .)
    ID              reduce using rule 133 (loop -> whileloop .)
    LIST            reduce using rule 133 (loop -> whileloop .)
    WHILE           reduce using rule 133 (loop -> whileloop .)
    TIMES           reduce using rule 133 (loop -> whileloop .)
    BOOL            reduce using rule 133 (loop -> whileloop .)
    INT             reduce using rule 133 (loop -> whileloop .)
    FLOAT           reduce using rule 133 (loop -> whileloop .)
    STRING          reduce using rule 133 (loop -> whileloop .)
    C_BRACKET       reduce using rule 133 (loop -> whileloop .)


state 40

    (40) statute -> init .

    IF              reduce using rule 40 (statute -> init .)
    PRINT           reduce using rule 40 (statute -> init .)
    ID              reduce using rule 40 (statute -> init .)
    LIST            reduce using rule 40 (statute -> init .)
    WHILE           reduce using rule 40 (statute -> init .)
    TIMES           reduce using rule 40 (statute -> init .)
    BOOL            reduce using rule 40 (statute -> init .)
    INT             reduce using rule 40 (statute -> init .)
    FLOAT           reduce using rule 40 (statute -> init .)
    STRING          reduce using rule 40 (statute -> init .)
    C_BRACKET       reduce using rule 40 (statute -> init .)


state 41

    (21) type -> BOOL .

    ID              reduce using rule 21 (type -> BOOL .)


state 42

    (52) assignation -> var_assign . EQUALS add_equals expression equals_quadruple SEMICOLON

    EQUALS          shift and go to state 65


state 43

    (61) normalinit -> type . var EQUALS add_equals expression equals_quadruple SEMICOLON
    (113) var -> . ID listaccess

    ID              shift and go to state 67

    var                            shift and go to state 66

state 44

    (60) init -> normalinit .

    RETURN          reduce using rule 60 (init -> normalinit .)
    IF              reduce using rule 60 (init -> normalinit .)
    PRINT           reduce using rule 60 (init -> normalinit .)
    ID              reduce using rule 60 (init -> normalinit .)
    LIST            reduce using rule 60 (init -> normalinit .)
    WHILE           reduce using rule 60 (init -> normalinit .)
    TIMES           reduce using rule 60 (init -> normalinit .)
    BOOL            reduce using rule 60 (init -> normalinit .)
    INT             reduce using rule 60 (init -> normalinit .)
    FLOAT           reduce using rule 60 (init -> normalinit .)
    STRING          reduce using rule 60 (init -> normalinit .)
    C_BRACKET       reduce using rule 60 (init -> normalinit .)


state 45

    (24) type -> STRING .

    ID              reduce using rule 24 (type -> STRING .)


state 46

    (59) init -> listinit .

    RETURN          reduce using rule 59 (init -> listinit .)
    IF              reduce using rule 59 (init -> listinit .)
    PRINT           reduce using rule 59 (init -> listinit .)
    ID              reduce using rule 59 (init -> listinit .)
    LIST            reduce using rule 59 (init -> listinit .)
    WHILE           reduce using rule 59 (init -> listinit .)
    TIMES           reduce using rule 59 (init -> listinit .)
    BOOL            reduce using rule 59 (init -> listinit .)
    INT             reduce using rule 59 (init -> listinit .)
    FLOAT           reduce using rule 59 (init -> listinit .)
    STRING          reduce using rule 59 (init -> listinit .)
    C_BRACKET       reduce using rule 59 (init -> listinit .)


state 47

    (42) statute -> writting .

    IF              reduce using rule 42 (statute -> writting .)
    PRINT           reduce using rule 42 (statute -> writting .)
    ID              reduce using rule 42 (statute -> writting .)
    LIST            reduce using rule 42 (statute -> writting .)
    WHILE           reduce using rule 42 (statute -> writting .)
    TIMES           reduce using rule 42 (statute -> writting .)
    BOOL            reduce using rule 42 (statute -> writting .)
    INT             reduce using rule 42 (statute -> writting .)
    FLOAT           reduce using rule 42 (statute -> writting .)
    STRING          reduce using rule 42 (statute -> writting .)
    C_BRACKET       reduce using rule 42 (statute -> writting .)


state 48

    (134) loop -> timesloop .

    IF              reduce using rule 134 (loop -> timesloop .)
    PRINT           reduce using rule 134 (loop -> timesloop .)
    ID              reduce using rule 134 (loop -> timesloop .)
    LIST            reduce using rule 134 (loop -> timesloop .)
    WHILE           reduce using rule 134 (loop -> timesloop .)
    TIMES           reduce using rule 134 (loop -> timesloop .)
    BOOL            reduce using rule 134 (loop -> timesloop .)
    INT             reduce using rule 134 (loop -> timesloop .)
    FLOAT           reduce using rule 134 (loop -> timesloop .)
    STRING          reduce using rule 134 (loop -> timesloop .)
    C_BRACKET       reduce using rule 134 (loop -> timesloop .)


state 49

    (146) functioncall -> ID . check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON generate_gosub
    (112) var_assign -> ID . add_to_stack listaccess
    (147) check_function_exists -> .
    (119) add_to_stack -> .

    O_PARENTHESIS   reduce using rule 147 (check_function_exists -> .)
    O_S_BRACKET     reduce using rule 119 (add_to_stack -> .)
    EQUALS          reduce using rule 119 (add_to_stack -> .)

    check_function_exists          shift and go to state 68
    add_to_stack                   shift and go to state 69

state 50

    (41) statute -> condition .

    IF              reduce using rule 41 (statute -> condition .)
    PRINT           reduce using rule 41 (statute -> condition .)
    ID              reduce using rule 41 (statute -> condition .)
    LIST            reduce using rule 41 (statute -> condition .)
    WHILE           reduce using rule 41 (statute -> condition .)
    TIMES           reduce using rule 41 (statute -> condition .)
    BOOL            reduce using rule 41 (statute -> condition .)
    INT             reduce using rule 41 (statute -> condition .)
    FLOAT           reduce using rule 41 (statute -> condition .)
    STRING          reduce using rule 41 (statute -> condition .)
    C_BRACKET       reduce using rule 41 (statute -> condition .)


state 51

    (70) condition -> IF . O_PARENTHESIS expression C_PARENTHESIS start_condition block else end_condition

    O_PARENTHESIS   shift and go to state 70


state 52

    (35) statutesloop -> statute . statutesloop
    (35) statutesloop -> . statute statutesloop
    (36) statutesloop -> .
    (40) statute -> . init
    (41) statute -> . condition
    (42) statute -> . writting
    (43) statute -> . loop
    (44) statute -> . assignation
    (45) statute -> . functioncall
    (59) init -> . listinit
    (60) init -> . normalinit
    (70) condition -> . IF O_PARENTHESIS expression C_PARENTHESIS start_condition block else end_condition
    (53) writting -> . PRINT O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON
    (133) loop -> . whileloop
    (134) loop -> . timesloop
    (52) assignation -> . var_assign EQUALS add_equals expression equals_quadruple SEMICOLON
    (146) functioncall -> . ID check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON generate_gosub
    (64) listinit -> . LIST type var EQUALS list SEMICOLON
    (61) normalinit -> . type var EQUALS add_equals expression equals_quadruple SEMICOLON
    (137) whileloop -> . WHILE start_while O_PARENTHESIS expression C_PARENTHESIS condition_while block end_while
    (142) timesloop -> . TIMES O_PARENTHESIS expression C_PARENTHESIS start_times block end_times
    (112) var_assign -> . ID add_to_stack listaccess
    (21) type -> . BOOL
    (22) type -> . INT
    (23) type -> . FLOAT
    (24) type -> . STRING

    C_BRACKET       reduce using rule 36 (statutesloop -> .)
    IF              shift and go to state 51
    PRINT           shift and go to state 38
    ID              shift and go to state 49
    LIST            shift and go to state 57
    WHILE           shift and go to state 37
    TIMES           shift and go to state 36
    BOOL            shift and go to state 41
    INT             shift and go to state 55
    FLOAT           shift and go to state 56
    STRING          shift and go to state 45

    whileloop                      shift and go to state 39
    init                           shift and go to state 40
    var_assign                     shift and go to state 42
    type                           shift and go to state 43
    normalinit                     shift and go to state 44
    listinit                       shift and go to state 46
    writting                       shift and go to state 47
    timesloop                      shift and go to state 48
    condition                      shift and go to state 50
    statute                        shift and go to state 52
    assignation                    shift and go to state 53
    statutesloop                   shift and go to state 71
    functioncall                   shift and go to state 58
    loop                           shift and go to state 59

state 53

    (44) statute -> assignation .

    IF              reduce using rule 44 (statute -> assignation .)
    PRINT           reduce using rule 44 (statute -> assignation .)
    ID              reduce using rule 44 (statute -> assignation .)
    LIST            reduce using rule 44 (statute -> assignation .)
    WHILE           reduce using rule 44 (statute -> assignation .)
    TIMES           reduce using rule 44 (statute -> assignation .)
    BOOL            reduce using rule 44 (statute -> assignation .)
    INT             reduce using rule 44 (statute -> assignation .)
    FLOAT           reduce using rule 44 (statute -> assignation .)
    STRING          reduce using rule 44 (statute -> assignation .)
    C_BRACKET       reduce using rule 44 (statute -> assignation .)


state 54

    (29) block -> O_BRACKET statutesloop . C_BRACKET

    C_BRACKET       shift and go to state 72


state 55

    (22) type -> INT .

    ID              reduce using rule 22 (type -> INT .)


state 56

    (23) type -> FLOAT .

    ID              reduce using rule 23 (type -> FLOAT .)


state 57

    (64) listinit -> LIST . type var EQUALS list SEMICOLON
    (21) type -> . BOOL
    (22) type -> . INT
    (23) type -> . FLOAT
    (24) type -> . STRING

    BOOL            shift and go to state 41
    INT             shift and go to state 55
    FLOAT           shift and go to state 56
    STRING          shift and go to state 45

    type                           shift and go to state 73

state 58

    (45) statute -> functioncall .

    IF              reduce using rule 45 (statute -> functioncall .)
    PRINT           reduce using rule 45 (statute -> functioncall .)
    ID              reduce using rule 45 (statute -> functioncall .)
    LIST            reduce using rule 45 (statute -> functioncall .)
    WHILE           reduce using rule 45 (statute -> functioncall .)
    TIMES           reduce using rule 45 (statute -> functioncall .)
    BOOL            reduce using rule 45 (statute -> functioncall .)
    INT             reduce using rule 45 (statute -> functioncall .)
    FLOAT           reduce using rule 45 (statute -> functioncall .)
    STRING          reduce using rule 45 (statute -> functioncall .)
    C_BRACKET       reduce using rule 45 (statute -> functioncall .)


state 59

    (43) statute -> loop .

    IF              reduce using rule 43 (statute -> loop .)
    PRINT           reduce using rule 43 (statute -> loop .)
    ID              reduce using rule 43 (statute -> loop .)
    LIST            reduce using rule 43 (statute -> loop .)
    WHILE           reduce using rule 43 (statute -> loop .)
    TIMES           reduce using rule 43 (statute -> loop .)
    BOOL            reduce using rule 43 (statute -> loop .)
    INT             reduce using rule 43 (statute -> loop .)
    FLOAT           reduce using rule 43 (statute -> loop .)
    STRING          reduce using rule 43 (statute -> loop .)
    C_BRACKET       reduce using rule 43 (statute -> loop .)


state 60

    (16) function_with_return_def -> ID add_function_id_to_options add_function_to_global_variables check_current_quadruple . O_PARENTHESIS parameters C_PARENTHESIS add_function_init_to_dict functionblock

    O_PARENTHESIS   shift and go to state 74


state 61

    (18) function_def -> ID add_function_id_to_options check_current_quadruple O_PARENTHESIS . parameters C_PARENTHESIS add_function_init_to_dict block
    (156) parameters -> . parameterinit parametersloop
    (157) parameters -> .
    (158) parameterinit -> . parametertype ID
    (25) parametertype -> . BOOL
    (26) parametertype -> . INT
    (27) parametertype -> . FLOAT
    (28) parametertype -> . STRING

    C_PARENTHESIS   reduce using rule 157 (parameters -> .)
    BOOL            shift and go to state 80
    INT             shift and go to state 79
    FLOAT           shift and go to state 76
    STRING          shift and go to state 77

    parametertype                  shift and go to state 75
    parameters                     shift and go to state 78
    parameterinit                  shift and go to state 81

state 62

    (142) timesloop -> TIMES O_PARENTHESIS . expression C_PARENTHESIS start_times block end_times
    (79) expression -> . expression2 expressionoptional
    (82) expression2 -> . exp expression2optional
    (95) exp -> . term exp_quadruple exploop
    (101) term -> . fact term_quadruple termloop
    (108) fact -> . varconst
    (109) fact -> . O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis
    (116) varconst -> . varconstfunction
    (117) varconst -> . constants
    (118) varconstfunction -> . ID functionorlist
    (123) constants -> . INTCONST add_int_constant_to_dict
    (124) constants -> . FLOATCONST add_float_constant_to_dict
    (125) constants -> . STRINGCONST add_string_constant_to_dict
    (126) constants -> . booleanconst
    (127) booleanconst -> . TRUE add_bool_constant_to_dict
    (128) booleanconst -> . FALSE add_bool_constant_to_dict

    O_PARENTHESIS   shift and go to state 83
    ID              shift and go to state 90
    INTCONST        shift and go to state 88
    FLOATCONST      shift and go to state 82
    STRINGCONST     shift and go to state 85
    TRUE            shift and go to state 84
    FALSE           shift and go to state 93

    varconstfunction               shift and go to state 86
    exp                            shift and go to state 87
    expression2                    shift and go to state 89
    constants                      shift and go to state 91
    term                           shift and go to state 92
    varconst                       shift and go to state 94
    booleanconst                   shift and go to state 95
    expression                     shift and go to state 96
    fact                           shift and go to state 97

state 63

    (137) whileloop -> WHILE start_while . O_PARENTHESIS expression C_PARENTHESIS condition_while block end_while

    O_PARENTHESIS   shift and go to state 98


state 64

    (53) writting -> PRINT O_PARENTHESIS . writtingloop C_PARENTHESIS SEMICOLON
    (56) writtingloop -> . start_printing expression print_quadruple optionalwritting
    (54) start_printing -> .

    O_PARENTHESIS   reduce using rule 54 (start_printing -> .)
    ID              reduce using rule 54 (start_printing -> .)
    INTCONST        reduce using rule 54 (start_printing -> .)
    FLOATCONST      reduce using rule 54 (start_printing -> .)
    STRINGCONST     reduce using rule 54 (start_printing -> .)
    TRUE            reduce using rule 54 (start_printing -> .)
    FALSE           reduce using rule 54 (start_printing -> .)

    writtingloop                   shift and go to state 100
    start_printing                 shift and go to state 99

state 65

    (52) assignation -> var_assign EQUALS . add_equals expression equals_quadruple SEMICOLON
    (63) add_equals -> .

    O_PARENTHESIS   reduce using rule 63 (add_equals -> .)
    ID              reduce using rule 63 (add_equals -> .)
    INTCONST        reduce using rule 63 (add_equals -> .)
    FLOATCONST      reduce using rule 63 (add_equals -> .)
    STRINGCONST     reduce using rule 63 (add_equals -> .)
    TRUE            reduce using rule 63 (add_equals -> .)
    FALSE           reduce using rule 63 (add_equals -> .)

    add_equals                     shift and go to state 101

state 66

    (61) normalinit -> type var . EQUALS add_equals expression equals_quadruple SEMICOLON

    EQUALS          shift and go to state 102


state 67

    (113) var -> ID . listaccess
    (114) listaccess -> . O_S_BRACKET INTCONST C_S_BRACKET
    (115) listaccess -> .

    O_S_BRACKET     shift and go to state 104
    EQUALS          reduce using rule 115 (listaccess -> .)

    listaccess                     shift and go to state 103

state 68

    (146) functioncall -> ID check_function_exists . O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON generate_gosub

    O_PARENTHESIS   shift and go to state 105


state 69

    (112) var_assign -> ID add_to_stack . listaccess
    (114) listaccess -> . O_S_BRACKET INTCONST C_S_BRACKET
    (115) listaccess -> .

    O_S_BRACKET     shift and go to state 104
    EQUALS          reduce using rule 115 (listaccess -> .)

    listaccess                     shift and go to state 106

state 70

    (70) condition -> IF O_PARENTHESIS . expression C_PARENTHESIS start_condition block else end_condition
    (79) expression -> . expression2 expressionoptional
    (82) expression2 -> . exp expression2optional
    (95) exp -> . term exp_quadruple exploop
    (101) term -> . fact term_quadruple termloop
    (108) fact -> . varconst
    (109) fact -> . O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis
    (116) varconst -> . varconstfunction
    (117) varconst -> . constants
    (118) varconstfunction -> . ID functionorlist
    (123) constants -> . INTCONST add_int_constant_to_dict
    (124) constants -> . FLOATCONST add_float_constant_to_dict
    (125) constants -> . STRINGCONST add_string_constant_to_dict
    (126) constants -> . booleanconst
    (127) booleanconst -> . TRUE add_bool_constant_to_dict
    (128) booleanconst -> . FALSE add_bool_constant_to_dict

    O_PARENTHESIS   shift and go to state 83
    ID              shift and go to state 90
    INTCONST        shift and go to state 88
    FLOATCONST      shift and go to state 82
    STRINGCONST     shift and go to state 85
    TRUE            shift and go to state 84
    FALSE           shift and go to state 93

    varconstfunction               shift and go to state 86
    exp                            shift and go to state 87
    expression2                    shift and go to state 89
    constants                      shift and go to state 91
    term                           shift and go to state 92
    varconst                       shift and go to state 94
    booleanconst                   shift and go to state 95
    expression                     shift and go to state 107
    fact                           shift and go to state 97

state 71

    (35) statutesloop -> statute statutesloop .

    C_BRACKET       reduce using rule 35 (statutesloop -> statute statutesloop .)


state 72

    (29) block -> O_BRACKET statutesloop C_BRACKET .

    ELSE            reduce using rule 29 (block -> O_BRACKET statutesloop C_BRACKET .)
    IF              reduce using rule 29 (block -> O_BRACKET statutesloop C_BRACKET .)
    PRINT           reduce using rule 29 (block -> O_BRACKET statutesloop C_BRACKET .)
    ID              reduce using rule 29 (block -> O_BRACKET statutesloop C_BRACKET .)
    LIST            reduce using rule 29 (block -> O_BRACKET statutesloop C_BRACKET .)
    WHILE           reduce using rule 29 (block -> O_BRACKET statutesloop C_BRACKET .)
    TIMES           reduce using rule 29 (block -> O_BRACKET statutesloop C_BRACKET .)
    BOOL            reduce using rule 29 (block -> O_BRACKET statutesloop C_BRACKET .)
    INT             reduce using rule 29 (block -> O_BRACKET statutesloop C_BRACKET .)
    FLOAT           reduce using rule 29 (block -> O_BRACKET statutesloop C_BRACKET .)
    STRING          reduce using rule 29 (block -> O_BRACKET statutesloop C_BRACKET .)
    C_BRACKET       reduce using rule 29 (block -> O_BRACKET statutesloop C_BRACKET .)
    $end            reduce using rule 29 (block -> O_BRACKET statutesloop C_BRACKET .)
    FUNCTION        reduce using rule 29 (block -> O_BRACKET statutesloop C_BRACKET .)
    MAIN            reduce using rule 29 (block -> O_BRACKET statutesloop C_BRACKET .)


state 73

    (64) listinit -> LIST type . var EQUALS list SEMICOLON
    (113) var -> . ID listaccess

    ID              shift and go to state 67

    var                            shift and go to state 108

state 74

    (16) function_with_return_def -> ID add_function_id_to_options add_function_to_global_variables check_current_quadruple O_PARENTHESIS . parameters C_PARENTHESIS add_function_init_to_dict functionblock
    (156) parameters -> . parameterinit parametersloop
    (157) parameters -> .
    (158) parameterinit -> . parametertype ID
    (25) parametertype -> . BOOL
    (26) parametertype -> . INT
    (27) parametertype -> . FLOAT
    (28) parametertype -> . STRING

    C_PARENTHESIS   reduce using rule 157 (parameters -> .)
    BOOL            shift and go to state 80
    INT             shift and go to state 79
    FLOAT           shift and go to state 76
    STRING          shift and go to state 77

    parametertype                  shift and go to state 75
    parameters                     shift and go to state 109
    parameterinit                  shift and go to state 81

state 75

    (158) parameterinit -> parametertype . ID

    ID              shift and go to state 110


state 76

    (27) parametertype -> FLOAT .

    ID              reduce using rule 27 (parametertype -> FLOAT .)


state 77

    (28) parametertype -> STRING .

    ID              reduce using rule 28 (parametertype -> STRING .)


state 78

    (18) function_def -> ID add_function_id_to_options check_current_quadruple O_PARENTHESIS parameters . C_PARENTHESIS add_function_init_to_dict block

    C_PARENTHESIS   shift and go to state 111


state 79

    (26) parametertype -> INT .

    ID              reduce using rule 26 (parametertype -> INT .)


state 80

    (25) parametertype -> BOOL .

    ID              reduce using rule 25 (parametertype -> BOOL .)


state 81

    (156) parameters -> parameterinit . parametersloop
    (159) parametersloop -> . COMMA parameterinit parametersloop
    (160) parametersloop -> .

    COMMA           shift and go to state 113
    C_PARENTHESIS   reduce using rule 160 (parametersloop -> .)

    parametersloop                 shift and go to state 112

state 82

    (124) constants -> FLOATCONST . add_float_constant_to_dict
    (130) add_float_constant_to_dict -> .

    MULTIPLY        reduce using rule 130 (add_float_constant_to_dict -> .)
    DIVIDE          reduce using rule 130 (add_float_constant_to_dict -> .)
    MOD             reduce using rule 130 (add_float_constant_to_dict -> .)
    SUM             reduce using rule 130 (add_float_constant_to_dict -> .)
    MINUS           reduce using rule 130 (add_float_constant_to_dict -> .)
    EQUALITY        reduce using rule 130 (add_float_constant_to_dict -> .)
    GREATER         reduce using rule 130 (add_float_constant_to_dict -> .)
    GREATER_EQUAL   reduce using rule 130 (add_float_constant_to_dict -> .)
    LESS            reduce using rule 130 (add_float_constant_to_dict -> .)
    LESS_EQUAL      reduce using rule 130 (add_float_constant_to_dict -> .)
    DIFFERENT       reduce using rule 130 (add_float_constant_to_dict -> .)
    AND             reduce using rule 130 (add_float_constant_to_dict -> .)
    OR              reduce using rule 130 (add_float_constant_to_dict -> .)
    C_PARENTHESIS   reduce using rule 130 (add_float_constant_to_dict -> .)
    COMMA           reduce using rule 130 (add_float_constant_to_dict -> .)
    SEMICOLON       reduce using rule 130 (add_float_constant_to_dict -> .)
    C_BRACKET       reduce using rule 130 (add_float_constant_to_dict -> .)
    C_S_BRACKET     reduce using rule 130 (add_float_constant_to_dict -> .)

    add_float_constant_to_dict     shift and go to state 114

state 83

    (109) fact -> O_PARENTHESIS . add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis
    (110) add_o_parenthesis -> .

    O_PARENTHESIS   reduce using rule 110 (add_o_parenthesis -> .)
    ID              reduce using rule 110 (add_o_parenthesis -> .)
    INTCONST        reduce using rule 110 (add_o_parenthesis -> .)
    FLOATCONST      reduce using rule 110 (add_o_parenthesis -> .)
    STRINGCONST     reduce using rule 110 (add_o_parenthesis -> .)
    TRUE            reduce using rule 110 (add_o_parenthesis -> .)
    FALSE           reduce using rule 110 (add_o_parenthesis -> .)

    add_o_parenthesis              shift and go to state 115

state 84

    (127) booleanconst -> TRUE . add_bool_constant_to_dict
    (132) add_bool_constant_to_dict -> .

    MULTIPLY        reduce using rule 132 (add_bool_constant_to_dict -> .)
    DIVIDE          reduce using rule 132 (add_bool_constant_to_dict -> .)
    MOD             reduce using rule 132 (add_bool_constant_to_dict -> .)
    SUM             reduce using rule 132 (add_bool_constant_to_dict -> .)
    MINUS           reduce using rule 132 (add_bool_constant_to_dict -> .)
    EQUALITY        reduce using rule 132 (add_bool_constant_to_dict -> .)
    GREATER         reduce using rule 132 (add_bool_constant_to_dict -> .)
    GREATER_EQUAL   reduce using rule 132 (add_bool_constant_to_dict -> .)
    LESS            reduce using rule 132 (add_bool_constant_to_dict -> .)
    LESS_EQUAL      reduce using rule 132 (add_bool_constant_to_dict -> .)
    DIFFERENT       reduce using rule 132 (add_bool_constant_to_dict -> .)
    AND             reduce using rule 132 (add_bool_constant_to_dict -> .)
    OR              reduce using rule 132 (add_bool_constant_to_dict -> .)
    C_PARENTHESIS   reduce using rule 132 (add_bool_constant_to_dict -> .)
    COMMA           reduce using rule 132 (add_bool_constant_to_dict -> .)
    SEMICOLON       reduce using rule 132 (add_bool_constant_to_dict -> .)
    C_BRACKET       reduce using rule 132 (add_bool_constant_to_dict -> .)
    C_S_BRACKET     reduce using rule 132 (add_bool_constant_to_dict -> .)

    add_bool_constant_to_dict      shift and go to state 116

state 85

    (125) constants -> STRINGCONST . add_string_constant_to_dict
    (131) add_string_constant_to_dict -> .

    MULTIPLY        reduce using rule 131 (add_string_constant_to_dict -> .)
    DIVIDE          reduce using rule 131 (add_string_constant_to_dict -> .)
    MOD             reduce using rule 131 (add_string_constant_to_dict -> .)
    SUM             reduce using rule 131 (add_string_constant_to_dict -> .)
    MINUS           reduce using rule 131 (add_string_constant_to_dict -> .)
    EQUALITY        reduce using rule 131 (add_string_constant_to_dict -> .)
    GREATER         reduce using rule 131 (add_string_constant_to_dict -> .)
    GREATER_EQUAL   reduce using rule 131 (add_string_constant_to_dict -> .)
    LESS            reduce using rule 131 (add_string_constant_to_dict -> .)
    LESS_EQUAL      reduce using rule 131 (add_string_constant_to_dict -> .)
    DIFFERENT       reduce using rule 131 (add_string_constant_to_dict -> .)
    AND             reduce using rule 131 (add_string_constant_to_dict -> .)
    OR              reduce using rule 131 (add_string_constant_to_dict -> .)
    C_PARENTHESIS   reduce using rule 131 (add_string_constant_to_dict -> .)
    COMMA           reduce using rule 131 (add_string_constant_to_dict -> .)
    SEMICOLON       reduce using rule 131 (add_string_constant_to_dict -> .)
    C_BRACKET       reduce using rule 131 (add_string_constant_to_dict -> .)
    C_S_BRACKET     reduce using rule 131 (add_string_constant_to_dict -> .)

    add_string_constant_to_dict    shift and go to state 117

state 86

    (116) varconst -> varconstfunction .

    MULTIPLY        reduce using rule 116 (varconst -> varconstfunction .)
    DIVIDE          reduce using rule 116 (varconst -> varconstfunction .)
    MOD             reduce using rule 116 (varconst -> varconstfunction .)
    SUM             reduce using rule 116 (varconst -> varconstfunction .)
    MINUS           reduce using rule 116 (varconst -> varconstfunction .)
    EQUALITY        reduce using rule 116 (varconst -> varconstfunction .)
    GREATER         reduce using rule 116 (varconst -> varconstfunction .)
    GREATER_EQUAL   reduce using rule 116 (varconst -> varconstfunction .)
    LESS            reduce using rule 116 (varconst -> varconstfunction .)
    LESS_EQUAL      reduce using rule 116 (varconst -> varconstfunction .)
    DIFFERENT       reduce using rule 116 (varconst -> varconstfunction .)
    C_PARENTHESIS   reduce using rule 116 (varconst -> varconstfunction .)
    COMMA           reduce using rule 116 (varconst -> varconstfunction .)
    SEMICOLON       reduce using rule 116 (varconst -> varconstfunction .)
    C_BRACKET       reduce using rule 116 (varconst -> varconstfunction .)
    AND             reduce using rule 116 (varconst -> varconstfunction .)
    OR              reduce using rule 116 (varconst -> varconstfunction .)


state 87

    (82) expression2 -> exp . expression2optional
    (83) expression2optional -> . relop exp relop_quadruple
    (84) expression2optional -> .
    (88) relop -> . EQUALITY
    (89) relop -> . GREATER
    (90) relop -> . GREATER_EQUAL
    (91) relop -> . LESS
    (92) relop -> . LESS_EQUAL
    (93) relop -> . DIFFERENT

    AND             reduce using rule 84 (expression2optional -> .)
    OR              reduce using rule 84 (expression2optional -> .)
    C_PARENTHESIS   reduce using rule 84 (expression2optional -> .)
    COMMA           reduce using rule 84 (expression2optional -> .)
    SEMICOLON       reduce using rule 84 (expression2optional -> .)
    C_BRACKET       reduce using rule 84 (expression2optional -> .)
    EQUALITY        shift and go to state 119
    GREATER         shift and go to state 120
    GREATER_EQUAL   shift and go to state 121
    LESS            shift and go to state 122
    LESS_EQUAL      shift and go to state 124
    DIFFERENT       shift and go to state 118

    relop                          shift and go to state 125
    expression2optional            shift and go to state 123

state 88

    (123) constants -> INTCONST . add_int_constant_to_dict
    (129) add_int_constant_to_dict -> .

    MULTIPLY        reduce using rule 129 (add_int_constant_to_dict -> .)
    DIVIDE          reduce using rule 129 (add_int_constant_to_dict -> .)
    MOD             reduce using rule 129 (add_int_constant_to_dict -> .)
    SUM             reduce using rule 129 (add_int_constant_to_dict -> .)
    MINUS           reduce using rule 129 (add_int_constant_to_dict -> .)
    EQUALITY        reduce using rule 129 (add_int_constant_to_dict -> .)
    GREATER         reduce using rule 129 (add_int_constant_to_dict -> .)
    GREATER_EQUAL   reduce using rule 129 (add_int_constant_to_dict -> .)
    LESS            reduce using rule 129 (add_int_constant_to_dict -> .)
    LESS_EQUAL      reduce using rule 129 (add_int_constant_to_dict -> .)
    DIFFERENT       reduce using rule 129 (add_int_constant_to_dict -> .)
    AND             reduce using rule 129 (add_int_constant_to_dict -> .)
    OR              reduce using rule 129 (add_int_constant_to_dict -> .)
    C_PARENTHESIS   reduce using rule 129 (add_int_constant_to_dict -> .)
    COMMA           reduce using rule 129 (add_int_constant_to_dict -> .)
    SEMICOLON       reduce using rule 129 (add_int_constant_to_dict -> .)
    C_BRACKET       reduce using rule 129 (add_int_constant_to_dict -> .)
    C_S_BRACKET     reduce using rule 129 (add_int_constant_to_dict -> .)

    add_int_constant_to_dict       shift and go to state 126

state 89

    (79) expression -> expression2 . expressionoptional
    (80) expressionoptional -> . logicop expression2 logic_op_quadruple
    (81) expressionoptional -> .
    (85) logicop -> . AND
    (86) logicop -> . OR

    C_PARENTHESIS   reduce using rule 81 (expressionoptional -> .)
    COMMA           reduce using rule 81 (expressionoptional -> .)
    SEMICOLON       reduce using rule 81 (expressionoptional -> .)
    C_BRACKET       reduce using rule 81 (expressionoptional -> .)
    AND             shift and go to state 127
    OR              shift and go to state 130

    logicop                        shift and go to state 129
    expressionoptional             shift and go to state 128

state 90

    (118) varconstfunction -> ID . functionorlist
    (120) functionorlist -> . O_S_BRACKET INTCONST C_S_BRACKET
    (121) functionorlist -> . check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS generate_gosub
    (122) functionorlist -> . add_to_stack
    (147) check_function_exists -> .
    (119) add_to_stack -> .

    O_S_BRACKET     shift and go to state 133
    O_PARENTHESIS   reduce using rule 147 (check_function_exists -> .)
    MULTIPLY        reduce using rule 119 (add_to_stack -> .)
    DIVIDE          reduce using rule 119 (add_to_stack -> .)
    MOD             reduce using rule 119 (add_to_stack -> .)
    SUM             reduce using rule 119 (add_to_stack -> .)
    MINUS           reduce using rule 119 (add_to_stack -> .)
    EQUALITY        reduce using rule 119 (add_to_stack -> .)
    GREATER         reduce using rule 119 (add_to_stack -> .)
    GREATER_EQUAL   reduce using rule 119 (add_to_stack -> .)
    LESS            reduce using rule 119 (add_to_stack -> .)
    LESS_EQUAL      reduce using rule 119 (add_to_stack -> .)
    DIFFERENT       reduce using rule 119 (add_to_stack -> .)
    AND             reduce using rule 119 (add_to_stack -> .)
    OR              reduce using rule 119 (add_to_stack -> .)
    C_PARENTHESIS   reduce using rule 119 (add_to_stack -> .)
    COMMA           reduce using rule 119 (add_to_stack -> .)
    SEMICOLON       reduce using rule 119 (add_to_stack -> .)
    C_BRACKET       reduce using rule 119 (add_to_stack -> .)

    check_function_exists          shift and go to state 131
    functionorlist                 shift and go to state 134
    add_to_stack                   shift and go to state 132

state 91

    (117) varconst -> constants .

    MULTIPLY        reduce using rule 117 (varconst -> constants .)
    DIVIDE          reduce using rule 117 (varconst -> constants .)
    MOD             reduce using rule 117 (varconst -> constants .)
    SUM             reduce using rule 117 (varconst -> constants .)
    MINUS           reduce using rule 117 (varconst -> constants .)
    EQUALITY        reduce using rule 117 (varconst -> constants .)
    GREATER         reduce using rule 117 (varconst -> constants .)
    GREATER_EQUAL   reduce using rule 117 (varconst -> constants .)
    LESS            reduce using rule 117 (varconst -> constants .)
    LESS_EQUAL      reduce using rule 117 (varconst -> constants .)
    DIFFERENT       reduce using rule 117 (varconst -> constants .)
    C_PARENTHESIS   reduce using rule 117 (varconst -> constants .)
    COMMA           reduce using rule 117 (varconst -> constants .)
    SEMICOLON       reduce using rule 117 (varconst -> constants .)
    C_BRACKET       reduce using rule 117 (varconst -> constants .)
    AND             reduce using rule 117 (varconst -> constants .)
    OR              reduce using rule 117 (varconst -> constants .)


state 92

    (95) exp -> term . exp_quadruple exploop
    (96) exp_quadruple -> .

    SUM             reduce using rule 96 (exp_quadruple -> .)
    MINUS           reduce using rule 96 (exp_quadruple -> .)
    EQUALITY        reduce using rule 96 (exp_quadruple -> .)
    GREATER         reduce using rule 96 (exp_quadruple -> .)
    GREATER_EQUAL   reduce using rule 96 (exp_quadruple -> .)
    LESS            reduce using rule 96 (exp_quadruple -> .)
    LESS_EQUAL      reduce using rule 96 (exp_quadruple -> .)
    DIFFERENT       reduce using rule 96 (exp_quadruple -> .)
    AND             reduce using rule 96 (exp_quadruple -> .)
    OR              reduce using rule 96 (exp_quadruple -> .)
    C_PARENTHESIS   reduce using rule 96 (exp_quadruple -> .)
    COMMA           reduce using rule 96 (exp_quadruple -> .)
    SEMICOLON       reduce using rule 96 (exp_quadruple -> .)
    C_BRACKET       reduce using rule 96 (exp_quadruple -> .)

    exp_quadruple                  shift and go to state 135

state 93

    (128) booleanconst -> FALSE . add_bool_constant_to_dict
    (132) add_bool_constant_to_dict -> .

    MULTIPLY        reduce using rule 132 (add_bool_constant_to_dict -> .)
    DIVIDE          reduce using rule 132 (add_bool_constant_to_dict -> .)
    MOD             reduce using rule 132 (add_bool_constant_to_dict -> .)
    SUM             reduce using rule 132 (add_bool_constant_to_dict -> .)
    MINUS           reduce using rule 132 (add_bool_constant_to_dict -> .)
    EQUALITY        reduce using rule 132 (add_bool_constant_to_dict -> .)
    GREATER         reduce using rule 132 (add_bool_constant_to_dict -> .)
    GREATER_EQUAL   reduce using rule 132 (add_bool_constant_to_dict -> .)
    LESS            reduce using rule 132 (add_bool_constant_to_dict -> .)
    LESS_EQUAL      reduce using rule 132 (add_bool_constant_to_dict -> .)
    DIFFERENT       reduce using rule 132 (add_bool_constant_to_dict -> .)
    AND             reduce using rule 132 (add_bool_constant_to_dict -> .)
    OR              reduce using rule 132 (add_bool_constant_to_dict -> .)
    C_PARENTHESIS   reduce using rule 132 (add_bool_constant_to_dict -> .)
    COMMA           reduce using rule 132 (add_bool_constant_to_dict -> .)
    SEMICOLON       reduce using rule 132 (add_bool_constant_to_dict -> .)
    C_BRACKET       reduce using rule 132 (add_bool_constant_to_dict -> .)
    C_S_BRACKET     reduce using rule 132 (add_bool_constant_to_dict -> .)

    add_bool_constant_to_dict      shift and go to state 136

state 94

    (108) fact -> varconst .

    MULTIPLY        reduce using rule 108 (fact -> varconst .)
    DIVIDE          reduce using rule 108 (fact -> varconst .)
    MOD             reduce using rule 108 (fact -> varconst .)
    SUM             reduce using rule 108 (fact -> varconst .)
    MINUS           reduce using rule 108 (fact -> varconst .)
    EQUALITY        reduce using rule 108 (fact -> varconst .)
    GREATER         reduce using rule 108 (fact -> varconst .)
    GREATER_EQUAL   reduce using rule 108 (fact -> varconst .)
    LESS            reduce using rule 108 (fact -> varconst .)
    LESS_EQUAL      reduce using rule 108 (fact -> varconst .)
    DIFFERENT       reduce using rule 108 (fact -> varconst .)
    AND             reduce using rule 108 (fact -> varconst .)
    OR              reduce using rule 108 (fact -> varconst .)
    C_PARENTHESIS   reduce using rule 108 (fact -> varconst .)
    COMMA           reduce using rule 108 (fact -> varconst .)
    SEMICOLON       reduce using rule 108 (fact -> varconst .)
    C_BRACKET       reduce using rule 108 (fact -> varconst .)


state 95

    (126) constants -> booleanconst .

    MULTIPLY        reduce using rule 126 (constants -> booleanconst .)
    DIVIDE          reduce using rule 126 (constants -> booleanconst .)
    MOD             reduce using rule 126 (constants -> booleanconst .)
    SUM             reduce using rule 126 (constants -> booleanconst .)
    MINUS           reduce using rule 126 (constants -> booleanconst .)
    EQUALITY        reduce using rule 126 (constants -> booleanconst .)
    GREATER         reduce using rule 126 (constants -> booleanconst .)
    GREATER_EQUAL   reduce using rule 126 (constants -> booleanconst .)
    LESS            reduce using rule 126 (constants -> booleanconst .)
    LESS_EQUAL      reduce using rule 126 (constants -> booleanconst .)
    DIFFERENT       reduce using rule 126 (constants -> booleanconst .)
    AND             reduce using rule 126 (constants -> booleanconst .)
    OR              reduce using rule 126 (constants -> booleanconst .)
    COMMA           reduce using rule 126 (constants -> booleanconst .)
    C_PARENTHESIS   reduce using rule 126 (constants -> booleanconst .)
    C_S_BRACKET     reduce using rule 126 (constants -> booleanconst .)
    C_BRACKET       reduce using rule 126 (constants -> booleanconst .)
    SEMICOLON       reduce using rule 126 (constants -> booleanconst .)


state 96

    (142) timesloop -> TIMES O_PARENTHESIS expression . C_PARENTHESIS start_times block end_times

    C_PARENTHESIS   shift and go to state 137


state 97

    (101) term -> fact . term_quadruple termloop
    (102) term_quadruple -> .

    MULTIPLY        reduce using rule 102 (term_quadruple -> .)
    DIVIDE          reduce using rule 102 (term_quadruple -> .)
    MOD             reduce using rule 102 (term_quadruple -> .)
    SUM             reduce using rule 102 (term_quadruple -> .)
    MINUS           reduce using rule 102 (term_quadruple -> .)
    EQUALITY        reduce using rule 102 (term_quadruple -> .)
    GREATER         reduce using rule 102 (term_quadruple -> .)
    GREATER_EQUAL   reduce using rule 102 (term_quadruple -> .)
    LESS            reduce using rule 102 (term_quadruple -> .)
    LESS_EQUAL      reduce using rule 102 (term_quadruple -> .)
    DIFFERENT       reduce using rule 102 (term_quadruple -> .)
    AND             reduce using rule 102 (term_quadruple -> .)
    OR              reduce using rule 102 (term_quadruple -> .)
    C_PARENTHESIS   reduce using rule 102 (term_quadruple -> .)
    COMMA           reduce using rule 102 (term_quadruple -> .)
    SEMICOLON       reduce using rule 102 (term_quadruple -> .)
    C_BRACKET       reduce using rule 102 (term_quadruple -> .)

    term_quadruple                 shift and go to state 138

state 98

    (137) whileloop -> WHILE start_while O_PARENTHESIS . expression C_PARENTHESIS condition_while block end_while
    (79) expression -> . expression2 expressionoptional
    (82) expression2 -> . exp expression2optional
    (95) exp -> . term exp_quadruple exploop
    (101) term -> . fact term_quadruple termloop
    (108) fact -> . varconst
    (109) fact -> . O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis
    (116) varconst -> . varconstfunction
    (117) varconst -> . constants
    (118) varconstfunction -> . ID functionorlist
    (123) constants -> . INTCONST add_int_constant_to_dict
    (124) constants -> . FLOATCONST add_float_constant_to_dict
    (125) constants -> . STRINGCONST add_string_constant_to_dict
    (126) constants -> . booleanconst
    (127) booleanconst -> . TRUE add_bool_constant_to_dict
    (128) booleanconst -> . FALSE add_bool_constant_to_dict

    O_PARENTHESIS   shift and go to state 83
    ID              shift and go to state 90
    INTCONST        shift and go to state 88
    FLOATCONST      shift and go to state 82
    STRINGCONST     shift and go to state 85
    TRUE            shift and go to state 84
    FALSE           shift and go to state 93

    varconstfunction               shift and go to state 86
    exp                            shift and go to state 87
    expression2                    shift and go to state 89
    constants                      shift and go to state 91
    term                           shift and go to state 92
    varconst                       shift and go to state 94
    booleanconst                   shift and go to state 95
    expression                     shift and go to state 139
    fact                           shift and go to state 97

state 99

    (56) writtingloop -> start_printing . expression print_quadruple optionalwritting
    (79) expression -> . expression2 expressionoptional
    (82) expression2 -> . exp expression2optional
    (95) exp -> . term exp_quadruple exploop
    (101) term -> . fact term_quadruple termloop
    (108) fact -> . varconst
    (109) fact -> . O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis
    (116) varconst -> . varconstfunction
    (117) varconst -> . constants
    (118) varconstfunction -> . ID functionorlist
    (123) constants -> . INTCONST add_int_constant_to_dict
    (124) constants -> . FLOATCONST add_float_constant_to_dict
    (125) constants -> . STRINGCONST add_string_constant_to_dict
    (126) constants -> . booleanconst
    (127) booleanconst -> . TRUE add_bool_constant_to_dict
    (128) booleanconst -> . FALSE add_bool_constant_to_dict

    O_PARENTHESIS   shift and go to state 83
    ID              shift and go to state 90
    INTCONST        shift and go to state 88
    FLOATCONST      shift and go to state 82
    STRINGCONST     shift and go to state 85
    TRUE            shift and go to state 84
    FALSE           shift and go to state 93

    varconstfunction               shift and go to state 86
    exp                            shift and go to state 87
    expression2                    shift and go to state 89
    constants                      shift and go to state 91
    term                           shift and go to state 92
    varconst                       shift and go to state 94
    booleanconst                   shift and go to state 95
    expression                     shift and go to state 140
    fact                           shift and go to state 97

state 100

    (53) writting -> PRINT O_PARENTHESIS writtingloop . C_PARENTHESIS SEMICOLON

    C_PARENTHESIS   shift and go to state 141


state 101

    (52) assignation -> var_assign EQUALS add_equals . expression equals_quadruple SEMICOLON
    (79) expression -> . expression2 expressionoptional
    (82) expression2 -> . exp expression2optional
    (95) exp -> . term exp_quadruple exploop
    (101) term -> . fact term_quadruple termloop
    (108) fact -> . varconst
    (109) fact -> . O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis
    (116) varconst -> . varconstfunction
    (117) varconst -> . constants
    (118) varconstfunction -> . ID functionorlist
    (123) constants -> . INTCONST add_int_constant_to_dict
    (124) constants -> . FLOATCONST add_float_constant_to_dict
    (125) constants -> . STRINGCONST add_string_constant_to_dict
    (126) constants -> . booleanconst
    (127) booleanconst -> . TRUE add_bool_constant_to_dict
    (128) booleanconst -> . FALSE add_bool_constant_to_dict

    O_PARENTHESIS   shift and go to state 83
    ID              shift and go to state 90
    INTCONST        shift and go to state 88
    FLOATCONST      shift and go to state 82
    STRINGCONST     shift and go to state 85
    TRUE            shift and go to state 84
    FALSE           shift and go to state 93

    varconstfunction               shift and go to state 86
    expression2                    shift and go to state 89
    constants                      shift and go to state 91
    term                           shift and go to state 92
    varconst                       shift and go to state 94
    exp                            shift and go to state 87
    booleanconst                   shift and go to state 95
    expression                     shift and go to state 142
    fact                           shift and go to state 97

state 102

    (61) normalinit -> type var EQUALS . add_equals expression equals_quadruple SEMICOLON
    (63) add_equals -> .

    O_PARENTHESIS   reduce using rule 63 (add_equals -> .)
    ID              reduce using rule 63 (add_equals -> .)
    INTCONST        reduce using rule 63 (add_equals -> .)
    FLOATCONST      reduce using rule 63 (add_equals -> .)
    STRINGCONST     reduce using rule 63 (add_equals -> .)
    TRUE            reduce using rule 63 (add_equals -> .)
    FALSE           reduce using rule 63 (add_equals -> .)

    add_equals                     shift and go to state 143

state 103

    (113) var -> ID listaccess .

    EQUALS          reduce using rule 113 (var -> ID listaccess .)


state 104

    (114) listaccess -> O_S_BRACKET . INTCONST C_S_BRACKET

    INTCONST        shift and go to state 144


state 105

    (146) functioncall -> ID check_function_exists O_PARENTHESIS . parametersinput C_PARENTHESIS SEMICOLON generate_gosub
    (149) parametersinput -> . expression push_type_to_function_options generate_parameter_quadruple parametersinputloop check_params_order
    (150) parametersinput -> .
    (79) expression -> . expression2 expressionoptional
    (82) expression2 -> . exp expression2optional
    (95) exp -> . term exp_quadruple exploop
    (101) term -> . fact term_quadruple termloop
    (108) fact -> . varconst
    (109) fact -> . O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis
    (116) varconst -> . varconstfunction
    (117) varconst -> . constants
    (118) varconstfunction -> . ID functionorlist
    (123) constants -> . INTCONST add_int_constant_to_dict
    (124) constants -> . FLOATCONST add_float_constant_to_dict
    (125) constants -> . STRINGCONST add_string_constant_to_dict
    (126) constants -> . booleanconst
    (127) booleanconst -> . TRUE add_bool_constant_to_dict
    (128) booleanconst -> . FALSE add_bool_constant_to_dict

    C_PARENTHESIS   reduce using rule 150 (parametersinput -> .)
    O_PARENTHESIS   shift and go to state 83
    ID              shift and go to state 90
    INTCONST        shift and go to state 88
    FLOATCONST      shift and go to state 82
    STRINGCONST     shift and go to state 85
    TRUE            shift and go to state 84
    FALSE           shift and go to state 93

    varconstfunction               shift and go to state 86
    exp                            shift and go to state 87
    parametersinput                shift and go to state 145
    expression2                    shift and go to state 89
    constants                      shift and go to state 91
    term                           shift and go to state 92
    varconst                       shift and go to state 94
    booleanconst                   shift and go to state 95
    expression                     shift and go to state 146
    fact                           shift and go to state 97

state 106

    (112) var_assign -> ID add_to_stack listaccess .

    EQUALS          reduce using rule 112 (var_assign -> ID add_to_stack listaccess .)


state 107

    (70) condition -> IF O_PARENTHESIS expression . C_PARENTHESIS start_condition block else end_condition

    C_PARENTHESIS   shift and go to state 147


state 108

    (64) listinit -> LIST type var . EQUALS list SEMICOLON

    EQUALS          shift and go to state 148


state 109

    (16) function_with_return_def -> ID add_function_id_to_options add_function_to_global_variables check_current_quadruple O_PARENTHESIS parameters . C_PARENTHESIS add_function_init_to_dict functionblock

    C_PARENTHESIS   shift and go to state 149


state 110

    (158) parameterinit -> parametertype ID .

    COMMA           reduce using rule 158 (parameterinit -> parametertype ID .)
    C_PARENTHESIS   reduce using rule 158 (parameterinit -> parametertype ID .)


state 111

    (18) function_def -> ID add_function_id_to_options check_current_quadruple O_PARENTHESIS parameters C_PARENTHESIS . add_function_init_to_dict block
    (9) add_function_init_to_dict -> .

    O_BRACKET       reduce using rule 9 (add_function_init_to_dict -> .)

    add_function_init_to_dict      shift and go to state 150

state 112

    (156) parameters -> parameterinit parametersloop .

    C_PARENTHESIS   reduce using rule 156 (parameters -> parameterinit parametersloop .)


state 113

    (159) parametersloop -> COMMA . parameterinit parametersloop
    (158) parameterinit -> . parametertype ID
    (25) parametertype -> . BOOL
    (26) parametertype -> . INT
    (27) parametertype -> . FLOAT
    (28) parametertype -> . STRING

    BOOL            shift and go to state 80
    INT             shift and go to state 79
    FLOAT           shift and go to state 76
    STRING          shift and go to state 77

    parametertype                  shift and go to state 75
    parameterinit                  shift and go to state 151

state 114

    (124) constants -> FLOATCONST add_float_constant_to_dict .

    MULTIPLY        reduce using rule 124 (constants -> FLOATCONST add_float_constant_to_dict .)
    DIVIDE          reduce using rule 124 (constants -> FLOATCONST add_float_constant_to_dict .)
    MOD             reduce using rule 124 (constants -> FLOATCONST add_float_constant_to_dict .)
    SUM             reduce using rule 124 (constants -> FLOATCONST add_float_constant_to_dict .)
    MINUS           reduce using rule 124 (constants -> FLOATCONST add_float_constant_to_dict .)
    EQUALITY        reduce using rule 124 (constants -> FLOATCONST add_float_constant_to_dict .)
    GREATER         reduce using rule 124 (constants -> FLOATCONST add_float_constant_to_dict .)
    GREATER_EQUAL   reduce using rule 124 (constants -> FLOATCONST add_float_constant_to_dict .)
    LESS            reduce using rule 124 (constants -> FLOATCONST add_float_constant_to_dict .)
    LESS_EQUAL      reduce using rule 124 (constants -> FLOATCONST add_float_constant_to_dict .)
    DIFFERENT       reduce using rule 124 (constants -> FLOATCONST add_float_constant_to_dict .)
    AND             reduce using rule 124 (constants -> FLOATCONST add_float_constant_to_dict .)
    OR              reduce using rule 124 (constants -> FLOATCONST add_float_constant_to_dict .)
    COMMA           reduce using rule 124 (constants -> FLOATCONST add_float_constant_to_dict .)
    C_PARENTHESIS   reduce using rule 124 (constants -> FLOATCONST add_float_constant_to_dict .)
    C_S_BRACKET     reduce using rule 124 (constants -> FLOATCONST add_float_constant_to_dict .)
    C_BRACKET       reduce using rule 124 (constants -> FLOATCONST add_float_constant_to_dict .)
    SEMICOLON       reduce using rule 124 (constants -> FLOATCONST add_float_constant_to_dict .)


state 115

    (109) fact -> O_PARENTHESIS add_o_parenthesis . expression C_PARENTHESIS add_c_parenthesis
    (79) expression -> . expression2 expressionoptional
    (82) expression2 -> . exp expression2optional
    (95) exp -> . term exp_quadruple exploop
    (101) term -> . fact term_quadruple termloop
    (108) fact -> . varconst
    (109) fact -> . O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis
    (116) varconst -> . varconstfunction
    (117) varconst -> . constants
    (118) varconstfunction -> . ID functionorlist
    (123) constants -> . INTCONST add_int_constant_to_dict
    (124) constants -> . FLOATCONST add_float_constant_to_dict
    (125) constants -> . STRINGCONST add_string_constant_to_dict
    (126) constants -> . booleanconst
    (127) booleanconst -> . TRUE add_bool_constant_to_dict
    (128) booleanconst -> . FALSE add_bool_constant_to_dict

    O_PARENTHESIS   shift and go to state 83
    ID              shift and go to state 90
    INTCONST        shift and go to state 88
    FLOATCONST      shift and go to state 82
    STRINGCONST     shift and go to state 85
    TRUE            shift and go to state 84
    FALSE           shift and go to state 93

    varconstfunction               shift and go to state 86
    exp                            shift and go to state 87
    expression2                    shift and go to state 89
    constants                      shift and go to state 91
    term                           shift and go to state 92
    varconst                       shift and go to state 94
    booleanconst                   shift and go to state 95
    expression                     shift and go to state 152
    fact                           shift and go to state 97

state 116

    (127) booleanconst -> TRUE add_bool_constant_to_dict .

    MULTIPLY        reduce using rule 127 (booleanconst -> TRUE add_bool_constant_to_dict .)
    DIVIDE          reduce using rule 127 (booleanconst -> TRUE add_bool_constant_to_dict .)
    MOD             reduce using rule 127 (booleanconst -> TRUE add_bool_constant_to_dict .)
    SUM             reduce using rule 127 (booleanconst -> TRUE add_bool_constant_to_dict .)
    MINUS           reduce using rule 127 (booleanconst -> TRUE add_bool_constant_to_dict .)
    EQUALITY        reduce using rule 127 (booleanconst -> TRUE add_bool_constant_to_dict .)
    GREATER         reduce using rule 127 (booleanconst -> TRUE add_bool_constant_to_dict .)
    GREATER_EQUAL   reduce using rule 127 (booleanconst -> TRUE add_bool_constant_to_dict .)
    LESS            reduce using rule 127 (booleanconst -> TRUE add_bool_constant_to_dict .)
    LESS_EQUAL      reduce using rule 127 (booleanconst -> TRUE add_bool_constant_to_dict .)
    DIFFERENT       reduce using rule 127 (booleanconst -> TRUE add_bool_constant_to_dict .)
    AND             reduce using rule 127 (booleanconst -> TRUE add_bool_constant_to_dict .)
    OR              reduce using rule 127 (booleanconst -> TRUE add_bool_constant_to_dict .)
    SEMICOLON       reduce using rule 127 (booleanconst -> TRUE add_bool_constant_to_dict .)
    C_PARENTHESIS   reduce using rule 127 (booleanconst -> TRUE add_bool_constant_to_dict .)
    COMMA           reduce using rule 127 (booleanconst -> TRUE add_bool_constant_to_dict .)
    C_BRACKET       reduce using rule 127 (booleanconst -> TRUE add_bool_constant_to_dict .)
    C_S_BRACKET     reduce using rule 127 (booleanconst -> TRUE add_bool_constant_to_dict .)


state 117

    (125) constants -> STRINGCONST add_string_constant_to_dict .

    MULTIPLY        reduce using rule 125 (constants -> STRINGCONST add_string_constant_to_dict .)
    DIVIDE          reduce using rule 125 (constants -> STRINGCONST add_string_constant_to_dict .)
    MOD             reduce using rule 125 (constants -> STRINGCONST add_string_constant_to_dict .)
    SUM             reduce using rule 125 (constants -> STRINGCONST add_string_constant_to_dict .)
    MINUS           reduce using rule 125 (constants -> STRINGCONST add_string_constant_to_dict .)
    EQUALITY        reduce using rule 125 (constants -> STRINGCONST add_string_constant_to_dict .)
    GREATER         reduce using rule 125 (constants -> STRINGCONST add_string_constant_to_dict .)
    GREATER_EQUAL   reduce using rule 125 (constants -> STRINGCONST add_string_constant_to_dict .)
    LESS            reduce using rule 125 (constants -> STRINGCONST add_string_constant_to_dict .)
    LESS_EQUAL      reduce using rule 125 (constants -> STRINGCONST add_string_constant_to_dict .)
    DIFFERENT       reduce using rule 125 (constants -> STRINGCONST add_string_constant_to_dict .)
    AND             reduce using rule 125 (constants -> STRINGCONST add_string_constant_to_dict .)
    OR              reduce using rule 125 (constants -> STRINGCONST add_string_constant_to_dict .)
    COMMA           reduce using rule 125 (constants -> STRINGCONST add_string_constant_to_dict .)
    C_PARENTHESIS   reduce using rule 125 (constants -> STRINGCONST add_string_constant_to_dict .)
    C_S_BRACKET     reduce using rule 125 (constants -> STRINGCONST add_string_constant_to_dict .)
    C_BRACKET       reduce using rule 125 (constants -> STRINGCONST add_string_constant_to_dict .)
    SEMICOLON       reduce using rule 125 (constants -> STRINGCONST add_string_constant_to_dict .)


state 118

    (93) relop -> DIFFERENT .

    O_PARENTHESIS   reduce using rule 93 (relop -> DIFFERENT .)
    ID              reduce using rule 93 (relop -> DIFFERENT .)
    INTCONST        reduce using rule 93 (relop -> DIFFERENT .)
    FLOATCONST      reduce using rule 93 (relop -> DIFFERENT .)
    STRINGCONST     reduce using rule 93 (relop -> DIFFERENT .)
    TRUE            reduce using rule 93 (relop -> DIFFERENT .)
    FALSE           reduce using rule 93 (relop -> DIFFERENT .)


state 119

    (88) relop -> EQUALITY .

    O_PARENTHESIS   reduce using rule 88 (relop -> EQUALITY .)
    ID              reduce using rule 88 (relop -> EQUALITY .)
    INTCONST        reduce using rule 88 (relop -> EQUALITY .)
    FLOATCONST      reduce using rule 88 (relop -> EQUALITY .)
    STRINGCONST     reduce using rule 88 (relop -> EQUALITY .)
    TRUE            reduce using rule 88 (relop -> EQUALITY .)
    FALSE           reduce using rule 88 (relop -> EQUALITY .)


state 120

    (89) relop -> GREATER .

    O_PARENTHESIS   reduce using rule 89 (relop -> GREATER .)
    ID              reduce using rule 89 (relop -> GREATER .)
    INTCONST        reduce using rule 89 (relop -> GREATER .)
    FLOATCONST      reduce using rule 89 (relop -> GREATER .)
    STRINGCONST     reduce using rule 89 (relop -> GREATER .)
    TRUE            reduce using rule 89 (relop -> GREATER .)
    FALSE           reduce using rule 89 (relop -> GREATER .)


state 121

    (90) relop -> GREATER_EQUAL .

    O_PARENTHESIS   reduce using rule 90 (relop -> GREATER_EQUAL .)
    ID              reduce using rule 90 (relop -> GREATER_EQUAL .)
    INTCONST        reduce using rule 90 (relop -> GREATER_EQUAL .)
    FLOATCONST      reduce using rule 90 (relop -> GREATER_EQUAL .)
    STRINGCONST     reduce using rule 90 (relop -> GREATER_EQUAL .)
    TRUE            reduce using rule 90 (relop -> GREATER_EQUAL .)
    FALSE           reduce using rule 90 (relop -> GREATER_EQUAL .)


state 122

    (91) relop -> LESS .

    O_PARENTHESIS   reduce using rule 91 (relop -> LESS .)
    ID              reduce using rule 91 (relop -> LESS .)
    INTCONST        reduce using rule 91 (relop -> LESS .)
    FLOATCONST      reduce using rule 91 (relop -> LESS .)
    STRINGCONST     reduce using rule 91 (relop -> LESS .)
    TRUE            reduce using rule 91 (relop -> LESS .)
    FALSE           reduce using rule 91 (relop -> LESS .)


state 123

    (82) expression2 -> exp expression2optional .

    AND             reduce using rule 82 (expression2 -> exp expression2optional .)
    OR              reduce using rule 82 (expression2 -> exp expression2optional .)
    SEMICOLON       reduce using rule 82 (expression2 -> exp expression2optional .)
    C_PARENTHESIS   reduce using rule 82 (expression2 -> exp expression2optional .)
    COMMA           reduce using rule 82 (expression2 -> exp expression2optional .)
    C_BRACKET       reduce using rule 82 (expression2 -> exp expression2optional .)


state 124

    (92) relop -> LESS_EQUAL .

    O_PARENTHESIS   reduce using rule 92 (relop -> LESS_EQUAL .)
    ID              reduce using rule 92 (relop -> LESS_EQUAL .)
    INTCONST        reduce using rule 92 (relop -> LESS_EQUAL .)
    FLOATCONST      reduce using rule 92 (relop -> LESS_EQUAL .)
    STRINGCONST     reduce using rule 92 (relop -> LESS_EQUAL .)
    TRUE            reduce using rule 92 (relop -> LESS_EQUAL .)
    FALSE           reduce using rule 92 (relop -> LESS_EQUAL .)


state 125

    (83) expression2optional -> relop . exp relop_quadruple
    (95) exp -> . term exp_quadruple exploop
    (101) term -> . fact term_quadruple termloop
    (108) fact -> . varconst
    (109) fact -> . O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis
    (116) varconst -> . varconstfunction
    (117) varconst -> . constants
    (118) varconstfunction -> . ID functionorlist
    (123) constants -> . INTCONST add_int_constant_to_dict
    (124) constants -> . FLOATCONST add_float_constant_to_dict
    (125) constants -> . STRINGCONST add_string_constant_to_dict
    (126) constants -> . booleanconst
    (127) booleanconst -> . TRUE add_bool_constant_to_dict
    (128) booleanconst -> . FALSE add_bool_constant_to_dict

    O_PARENTHESIS   shift and go to state 83
    ID              shift and go to state 90
    INTCONST        shift and go to state 88
    FLOATCONST      shift and go to state 82
    STRINGCONST     shift and go to state 85
    TRUE            shift and go to state 84
    FALSE           shift and go to state 93

    term                           shift and go to state 92
    varconst                       shift and go to state 94
    constants                      shift and go to state 91
    exp                            shift and go to state 153
    booleanconst                   shift and go to state 95
    varconstfunction               shift and go to state 86
    fact                           shift and go to state 97

state 126

    (123) constants -> INTCONST add_int_constant_to_dict .

    MULTIPLY        reduce using rule 123 (constants -> INTCONST add_int_constant_to_dict .)
    DIVIDE          reduce using rule 123 (constants -> INTCONST add_int_constant_to_dict .)
    MOD             reduce using rule 123 (constants -> INTCONST add_int_constant_to_dict .)
    SUM             reduce using rule 123 (constants -> INTCONST add_int_constant_to_dict .)
    MINUS           reduce using rule 123 (constants -> INTCONST add_int_constant_to_dict .)
    EQUALITY        reduce using rule 123 (constants -> INTCONST add_int_constant_to_dict .)
    GREATER         reduce using rule 123 (constants -> INTCONST add_int_constant_to_dict .)
    GREATER_EQUAL   reduce using rule 123 (constants -> INTCONST add_int_constant_to_dict .)
    LESS            reduce using rule 123 (constants -> INTCONST add_int_constant_to_dict .)
    LESS_EQUAL      reduce using rule 123 (constants -> INTCONST add_int_constant_to_dict .)
    DIFFERENT       reduce using rule 123 (constants -> INTCONST add_int_constant_to_dict .)
    AND             reduce using rule 123 (constants -> INTCONST add_int_constant_to_dict .)
    OR              reduce using rule 123 (constants -> INTCONST add_int_constant_to_dict .)
    COMMA           reduce using rule 123 (constants -> INTCONST add_int_constant_to_dict .)
    C_PARENTHESIS   reduce using rule 123 (constants -> INTCONST add_int_constant_to_dict .)
    C_S_BRACKET     reduce using rule 123 (constants -> INTCONST add_int_constant_to_dict .)
    C_BRACKET       reduce using rule 123 (constants -> INTCONST add_int_constant_to_dict .)
    SEMICOLON       reduce using rule 123 (constants -> INTCONST add_int_constant_to_dict .)


state 127

    (85) logicop -> AND .

    O_PARENTHESIS   reduce using rule 85 (logicop -> AND .)
    ID              reduce using rule 85 (logicop -> AND .)
    INTCONST        reduce using rule 85 (logicop -> AND .)
    FLOATCONST      reduce using rule 85 (logicop -> AND .)
    STRINGCONST     reduce using rule 85 (logicop -> AND .)
    TRUE            reduce using rule 85 (logicop -> AND .)
    FALSE           reduce using rule 85 (logicop -> AND .)


state 128

    (79) expression -> expression2 expressionoptional .

    C_PARENTHESIS   reduce using rule 79 (expression -> expression2 expressionoptional .)
    COMMA           reduce using rule 79 (expression -> expression2 expressionoptional .)
    SEMICOLON       reduce using rule 79 (expression -> expression2 expressionoptional .)
    C_BRACKET       reduce using rule 79 (expression -> expression2 expressionoptional .)


state 129

    (80) expressionoptional -> logicop . expression2 logic_op_quadruple
    (82) expression2 -> . exp expression2optional
    (95) exp -> . term exp_quadruple exploop
    (101) term -> . fact term_quadruple termloop
    (108) fact -> . varconst
    (109) fact -> . O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis
    (116) varconst -> . varconstfunction
    (117) varconst -> . constants
    (118) varconstfunction -> . ID functionorlist
    (123) constants -> . INTCONST add_int_constant_to_dict
    (124) constants -> . FLOATCONST add_float_constant_to_dict
    (125) constants -> . STRINGCONST add_string_constant_to_dict
    (126) constants -> . booleanconst
    (127) booleanconst -> . TRUE add_bool_constant_to_dict
    (128) booleanconst -> . FALSE add_bool_constant_to_dict

    O_PARENTHESIS   shift and go to state 83
    ID              shift and go to state 90
    INTCONST        shift and go to state 88
    FLOATCONST      shift and go to state 82
    STRINGCONST     shift and go to state 85
    TRUE            shift and go to state 84
    FALSE           shift and go to state 93

    varconstfunction               shift and go to state 86
    exp                            shift and go to state 87
    expression2                    shift and go to state 154
    constants                      shift and go to state 91
    term                           shift and go to state 92
    varconst                       shift and go to state 94
    booleanconst                   shift and go to state 95
    fact                           shift and go to state 97

state 130

    (86) logicop -> OR .

    O_PARENTHESIS   reduce using rule 86 (logicop -> OR .)
    ID              reduce using rule 86 (logicop -> OR .)
    INTCONST        reduce using rule 86 (logicop -> OR .)
    FLOATCONST      reduce using rule 86 (logicop -> OR .)
    STRINGCONST     reduce using rule 86 (logicop -> OR .)
    TRUE            reduce using rule 86 (logicop -> OR .)
    FALSE           reduce using rule 86 (logicop -> OR .)


state 131

    (121) functionorlist -> check_function_exists . O_PARENTHESIS parametersinput C_PARENTHESIS generate_gosub

    O_PARENTHESIS   shift and go to state 155


state 132

    (122) functionorlist -> add_to_stack .

    MULTIPLY        reduce using rule 122 (functionorlist -> add_to_stack .)
    DIVIDE          reduce using rule 122 (functionorlist -> add_to_stack .)
    MOD             reduce using rule 122 (functionorlist -> add_to_stack .)
    SUM             reduce using rule 122 (functionorlist -> add_to_stack .)
    MINUS           reduce using rule 122 (functionorlist -> add_to_stack .)
    EQUALITY        reduce using rule 122 (functionorlist -> add_to_stack .)
    GREATER         reduce using rule 122 (functionorlist -> add_to_stack .)
    GREATER_EQUAL   reduce using rule 122 (functionorlist -> add_to_stack .)
    LESS            reduce using rule 122 (functionorlist -> add_to_stack .)
    LESS_EQUAL      reduce using rule 122 (functionorlist -> add_to_stack .)
    DIFFERENT       reduce using rule 122 (functionorlist -> add_to_stack .)
    AND             reduce using rule 122 (functionorlist -> add_to_stack .)
    OR              reduce using rule 122 (functionorlist -> add_to_stack .)
    C_PARENTHESIS   reduce using rule 122 (functionorlist -> add_to_stack .)
    COMMA           reduce using rule 122 (functionorlist -> add_to_stack .)
    SEMICOLON       reduce using rule 122 (functionorlist -> add_to_stack .)
    C_BRACKET       reduce using rule 122 (functionorlist -> add_to_stack .)


state 133

    (120) functionorlist -> O_S_BRACKET . INTCONST C_S_BRACKET

    INTCONST        shift and go to state 156


state 134

    (118) varconstfunction -> ID functionorlist .

    MULTIPLY        reduce using rule 118 (varconstfunction -> ID functionorlist .)
    DIVIDE          reduce using rule 118 (varconstfunction -> ID functionorlist .)
    MOD             reduce using rule 118 (varconstfunction -> ID functionorlist .)
    SUM             reduce using rule 118 (varconstfunction -> ID functionorlist .)
    MINUS           reduce using rule 118 (varconstfunction -> ID functionorlist .)
    EQUALITY        reduce using rule 118 (varconstfunction -> ID functionorlist .)
    GREATER         reduce using rule 118 (varconstfunction -> ID functionorlist .)
    GREATER_EQUAL   reduce using rule 118 (varconstfunction -> ID functionorlist .)
    LESS            reduce using rule 118 (varconstfunction -> ID functionorlist .)
    LESS_EQUAL      reduce using rule 118 (varconstfunction -> ID functionorlist .)
    DIFFERENT       reduce using rule 118 (varconstfunction -> ID functionorlist .)
    AND             reduce using rule 118 (varconstfunction -> ID functionorlist .)
    OR              reduce using rule 118 (varconstfunction -> ID functionorlist .)
    C_PARENTHESIS   reduce using rule 118 (varconstfunction -> ID functionorlist .)
    COMMA           reduce using rule 118 (varconstfunction -> ID functionorlist .)
    SEMICOLON       reduce using rule 118 (varconstfunction -> ID functionorlist .)
    C_BRACKET       reduce using rule 118 (varconstfunction -> ID functionorlist .)


state 135

    (95) exp -> term exp_quadruple . exploop
    (97) exploop -> . addsub exp
    (98) exploop -> .
    (99) addsub -> . SUM
    (100) addsub -> . MINUS

    EQUALITY        reduce using rule 98 (exploop -> .)
    GREATER         reduce using rule 98 (exploop -> .)
    GREATER_EQUAL   reduce using rule 98 (exploop -> .)
    LESS            reduce using rule 98 (exploop -> .)
    LESS_EQUAL      reduce using rule 98 (exploop -> .)
    DIFFERENT       reduce using rule 98 (exploop -> .)
    AND             reduce using rule 98 (exploop -> .)
    OR              reduce using rule 98 (exploop -> .)
    C_PARENTHESIS   reduce using rule 98 (exploop -> .)
    COMMA           reduce using rule 98 (exploop -> .)
    SEMICOLON       reduce using rule 98 (exploop -> .)
    C_BRACKET       reduce using rule 98 (exploop -> .)
    SUM             shift and go to state 157
    MINUS           shift and go to state 158

    exploop                        shift and go to state 159
    addsub                         shift and go to state 160

state 136

    (128) booleanconst -> FALSE add_bool_constant_to_dict .

    MULTIPLY        reduce using rule 128 (booleanconst -> FALSE add_bool_constant_to_dict .)
    DIVIDE          reduce using rule 128 (booleanconst -> FALSE add_bool_constant_to_dict .)
    MOD             reduce using rule 128 (booleanconst -> FALSE add_bool_constant_to_dict .)
    SUM             reduce using rule 128 (booleanconst -> FALSE add_bool_constant_to_dict .)
    MINUS           reduce using rule 128 (booleanconst -> FALSE add_bool_constant_to_dict .)
    EQUALITY        reduce using rule 128 (booleanconst -> FALSE add_bool_constant_to_dict .)
    GREATER         reduce using rule 128 (booleanconst -> FALSE add_bool_constant_to_dict .)
    GREATER_EQUAL   reduce using rule 128 (booleanconst -> FALSE add_bool_constant_to_dict .)
    LESS            reduce using rule 128 (booleanconst -> FALSE add_bool_constant_to_dict .)
    LESS_EQUAL      reduce using rule 128 (booleanconst -> FALSE add_bool_constant_to_dict .)
    DIFFERENT       reduce using rule 128 (booleanconst -> FALSE add_bool_constant_to_dict .)
    AND             reduce using rule 128 (booleanconst -> FALSE add_bool_constant_to_dict .)
    OR              reduce using rule 128 (booleanconst -> FALSE add_bool_constant_to_dict .)
    SEMICOLON       reduce using rule 128 (booleanconst -> FALSE add_bool_constant_to_dict .)
    C_PARENTHESIS   reduce using rule 128 (booleanconst -> FALSE add_bool_constant_to_dict .)
    COMMA           reduce using rule 128 (booleanconst -> FALSE add_bool_constant_to_dict .)
    C_BRACKET       reduce using rule 128 (booleanconst -> FALSE add_bool_constant_to_dict .)
    C_S_BRACKET     reduce using rule 128 (booleanconst -> FALSE add_bool_constant_to_dict .)


state 137

    (142) timesloop -> TIMES O_PARENTHESIS expression C_PARENTHESIS . start_times block end_times
    (144) start_times -> .

    O_BRACKET       reduce using rule 144 (start_times -> .)

    start_times                    shift and go to state 161

state 138

    (101) term -> fact term_quadruple . termloop
    (103) termloop -> . divmult term
    (104) termloop -> .
    (105) divmult -> . MULTIPLY
    (106) divmult -> . DIVIDE
    (107) divmult -> . MOD

    SUM             reduce using rule 104 (termloop -> .)
    MINUS           reduce using rule 104 (termloop -> .)
    EQUALITY        reduce using rule 104 (termloop -> .)
    GREATER         reduce using rule 104 (termloop -> .)
    GREATER_EQUAL   reduce using rule 104 (termloop -> .)
    LESS            reduce using rule 104 (termloop -> .)
    LESS_EQUAL      reduce using rule 104 (termloop -> .)
    DIFFERENT       reduce using rule 104 (termloop -> .)
    AND             reduce using rule 104 (termloop -> .)
    OR              reduce using rule 104 (termloop -> .)
    C_PARENTHESIS   reduce using rule 104 (termloop -> .)
    COMMA           reduce using rule 104 (termloop -> .)
    SEMICOLON       reduce using rule 104 (termloop -> .)
    C_BRACKET       reduce using rule 104 (termloop -> .)
    MULTIPLY        shift and go to state 164
    DIVIDE          shift and go to state 162
    MOD             shift and go to state 166

    termloop                       shift and go to state 163
    divmult                        shift and go to state 165

state 139

    (137) whileloop -> WHILE start_while O_PARENTHESIS expression . C_PARENTHESIS condition_while block end_while

    C_PARENTHESIS   shift and go to state 167


state 140

    (56) writtingloop -> start_printing expression . print_quadruple optionalwritting
    (55) print_quadruple -> .

    COMMA           reduce using rule 55 (print_quadruple -> .)
    C_PARENTHESIS   reduce using rule 55 (print_quadruple -> .)

    print_quadruple                shift and go to state 168

state 141

    (53) writting -> PRINT O_PARENTHESIS writtingloop C_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 169


state 142

    (52) assignation -> var_assign EQUALS add_equals expression . equals_quadruple SEMICOLON
    (62) equals_quadruple -> .

    SEMICOLON       reduce using rule 62 (equals_quadruple -> .)

    equals_quadruple               shift and go to state 170

state 143

    (61) normalinit -> type var EQUALS add_equals . expression equals_quadruple SEMICOLON
    (79) expression -> . expression2 expressionoptional
    (82) expression2 -> . exp expression2optional
    (95) exp -> . term exp_quadruple exploop
    (101) term -> . fact term_quadruple termloop
    (108) fact -> . varconst
    (109) fact -> . O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis
    (116) varconst -> . varconstfunction
    (117) varconst -> . constants
    (118) varconstfunction -> . ID functionorlist
    (123) constants -> . INTCONST add_int_constant_to_dict
    (124) constants -> . FLOATCONST add_float_constant_to_dict
    (125) constants -> . STRINGCONST add_string_constant_to_dict
    (126) constants -> . booleanconst
    (127) booleanconst -> . TRUE add_bool_constant_to_dict
    (128) booleanconst -> . FALSE add_bool_constant_to_dict

    O_PARENTHESIS   shift and go to state 83
    ID              shift and go to state 90
    INTCONST        shift and go to state 88
    FLOATCONST      shift and go to state 82
    STRINGCONST     shift and go to state 85
    TRUE            shift and go to state 84
    FALSE           shift and go to state 93

    varconstfunction               shift and go to state 86
    expression2                    shift and go to state 89
    constants                      shift and go to state 91
    term                           shift and go to state 92
    varconst                       shift and go to state 94
    exp                            shift and go to state 87
    booleanconst                   shift and go to state 95
    expression                     shift and go to state 171
    fact                           shift and go to state 97

state 144

    (114) listaccess -> O_S_BRACKET INTCONST . C_S_BRACKET

    C_S_BRACKET     shift and go to state 172


state 145

    (146) functioncall -> ID check_function_exists O_PARENTHESIS parametersinput . C_PARENTHESIS SEMICOLON generate_gosub

    C_PARENTHESIS   shift and go to state 173


state 146

    (149) parametersinput -> expression . push_type_to_function_options generate_parameter_quadruple parametersinputloop check_params_order
    (153) push_type_to_function_options -> .

    COMMA           reduce using rule 153 (push_type_to_function_options -> .)
    C_PARENTHESIS   reduce using rule 153 (push_type_to_function_options -> .)

    push_type_to_function_options  shift and go to state 174

state 147

    (70) condition -> IF O_PARENTHESIS expression C_PARENTHESIS . start_condition block else end_condition
    (76) start_condition -> .

    O_BRACKET       reduce using rule 76 (start_condition -> .)

    start_condition                shift and go to state 175

state 148

    (64) listinit -> LIST type var EQUALS . list SEMICOLON
    (65) list -> . O_S_BRACKET listelements C_S_BRACKET

    O_S_BRACKET     shift and go to state 177

    list                           shift and go to state 176

state 149

    (16) function_with_return_def -> ID add_function_id_to_options add_function_to_global_variables check_current_quadruple O_PARENTHESIS parameters C_PARENTHESIS . add_function_init_to_dict functionblock
    (9) add_function_init_to_dict -> .

    O_BRACKET       reduce using rule 9 (add_function_init_to_dict -> .)

    add_function_init_to_dict      shift and go to state 178

state 150

    (18) function_def -> ID add_function_id_to_options check_current_quadruple O_PARENTHESIS parameters C_PARENTHESIS add_function_init_to_dict . block
    (29) block -> . O_BRACKET statutesloop C_BRACKET

    O_BRACKET       shift and go to state 32

    block                          shift and go to state 179

state 151

    (159) parametersloop -> COMMA parameterinit . parametersloop
    (159) parametersloop -> . COMMA parameterinit parametersloop
    (160) parametersloop -> .

    COMMA           shift and go to state 113
    C_PARENTHESIS   reduce using rule 160 (parametersloop -> .)

    parametersloop                 shift and go to state 180

state 152

    (109) fact -> O_PARENTHESIS add_o_parenthesis expression . C_PARENTHESIS add_c_parenthesis

    C_PARENTHESIS   shift and go to state 181


state 153

    (83) expression2optional -> relop exp . relop_quadruple
    (94) relop_quadruple -> .

    AND             reduce using rule 94 (relop_quadruple -> .)
    OR              reduce using rule 94 (relop_quadruple -> .)
    C_PARENTHESIS   reduce using rule 94 (relop_quadruple -> .)
    COMMA           reduce using rule 94 (relop_quadruple -> .)
    SEMICOLON       reduce using rule 94 (relop_quadruple -> .)
    C_BRACKET       reduce using rule 94 (relop_quadruple -> .)

    relop_quadruple                shift and go to state 182

state 154

    (80) expressionoptional -> logicop expression2 . logic_op_quadruple
    (87) logic_op_quadruple -> .

    C_PARENTHESIS   reduce using rule 87 (logic_op_quadruple -> .)
    COMMA           reduce using rule 87 (logic_op_quadruple -> .)
    SEMICOLON       reduce using rule 87 (logic_op_quadruple -> .)
    C_BRACKET       reduce using rule 87 (logic_op_quadruple -> .)

    logic_op_quadruple             shift and go to state 183

state 155

    (121) functionorlist -> check_function_exists O_PARENTHESIS . parametersinput C_PARENTHESIS generate_gosub
    (149) parametersinput -> . expression push_type_to_function_options generate_parameter_quadruple parametersinputloop check_params_order
    (150) parametersinput -> .
    (79) expression -> . expression2 expressionoptional
    (82) expression2 -> . exp expression2optional
    (95) exp -> . term exp_quadruple exploop
    (101) term -> . fact term_quadruple termloop
    (108) fact -> . varconst
    (109) fact -> . O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis
    (116) varconst -> . varconstfunction
    (117) varconst -> . constants
    (118) varconstfunction -> . ID functionorlist
    (123) constants -> . INTCONST add_int_constant_to_dict
    (124) constants -> . FLOATCONST add_float_constant_to_dict
    (125) constants -> . STRINGCONST add_string_constant_to_dict
    (126) constants -> . booleanconst
    (127) booleanconst -> . TRUE add_bool_constant_to_dict
    (128) booleanconst -> . FALSE add_bool_constant_to_dict

    C_PARENTHESIS   reduce using rule 150 (parametersinput -> .)
    O_PARENTHESIS   shift and go to state 83
    ID              shift and go to state 90
    INTCONST        shift and go to state 88
    FLOATCONST      shift and go to state 82
    STRINGCONST     shift and go to state 85
    TRUE            shift and go to state 84
    FALSE           shift and go to state 93

    varconstfunction               shift and go to state 86
    exp                            shift and go to state 87
    parametersinput                shift and go to state 184
    expression2                    shift and go to state 89
    constants                      shift and go to state 91
    term                           shift and go to state 92
    varconst                       shift and go to state 94
    booleanconst                   shift and go to state 95
    expression                     shift and go to state 146
    fact                           shift and go to state 97

state 156

    (120) functionorlist -> O_S_BRACKET INTCONST . C_S_BRACKET

    C_S_BRACKET     shift and go to state 185


state 157

    (99) addsub -> SUM .

    O_PARENTHESIS   reduce using rule 99 (addsub -> SUM .)
    ID              reduce using rule 99 (addsub -> SUM .)
    INTCONST        reduce using rule 99 (addsub -> SUM .)
    FLOATCONST      reduce using rule 99 (addsub -> SUM .)
    STRINGCONST     reduce using rule 99 (addsub -> SUM .)
    TRUE            reduce using rule 99 (addsub -> SUM .)
    FALSE           reduce using rule 99 (addsub -> SUM .)


state 158

    (100) addsub -> MINUS .

    O_PARENTHESIS   reduce using rule 100 (addsub -> MINUS .)
    ID              reduce using rule 100 (addsub -> MINUS .)
    INTCONST        reduce using rule 100 (addsub -> MINUS .)
    FLOATCONST      reduce using rule 100 (addsub -> MINUS .)
    STRINGCONST     reduce using rule 100 (addsub -> MINUS .)
    TRUE            reduce using rule 100 (addsub -> MINUS .)
    FALSE           reduce using rule 100 (addsub -> MINUS .)


state 159

    (95) exp -> term exp_quadruple exploop .

    AND             reduce using rule 95 (exp -> term exp_quadruple exploop .)
    OR              reduce using rule 95 (exp -> term exp_quadruple exploop .)
    C_PARENTHESIS   reduce using rule 95 (exp -> term exp_quadruple exploop .)
    COMMA           reduce using rule 95 (exp -> term exp_quadruple exploop .)
    SEMICOLON       reduce using rule 95 (exp -> term exp_quadruple exploop .)
    C_BRACKET       reduce using rule 95 (exp -> term exp_quadruple exploop .)
    EQUALITY        reduce using rule 95 (exp -> term exp_quadruple exploop .)
    GREATER         reduce using rule 95 (exp -> term exp_quadruple exploop .)
    GREATER_EQUAL   reduce using rule 95 (exp -> term exp_quadruple exploop .)
    LESS            reduce using rule 95 (exp -> term exp_quadruple exploop .)
    LESS_EQUAL      reduce using rule 95 (exp -> term exp_quadruple exploop .)
    DIFFERENT       reduce using rule 95 (exp -> term exp_quadruple exploop .)


state 160

    (97) exploop -> addsub . exp
    (95) exp -> . term exp_quadruple exploop
    (101) term -> . fact term_quadruple termloop
    (108) fact -> . varconst
    (109) fact -> . O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis
    (116) varconst -> . varconstfunction
    (117) varconst -> . constants
    (118) varconstfunction -> . ID functionorlist
    (123) constants -> . INTCONST add_int_constant_to_dict
    (124) constants -> . FLOATCONST add_float_constant_to_dict
    (125) constants -> . STRINGCONST add_string_constant_to_dict
    (126) constants -> . booleanconst
    (127) booleanconst -> . TRUE add_bool_constant_to_dict
    (128) booleanconst -> . FALSE add_bool_constant_to_dict

    O_PARENTHESIS   shift and go to state 83
    ID              shift and go to state 90
    INTCONST        shift and go to state 88
    FLOATCONST      shift and go to state 82
    STRINGCONST     shift and go to state 85
    TRUE            shift and go to state 84
    FALSE           shift and go to state 93

    term                           shift and go to state 92
    varconst                       shift and go to state 94
    constants                      shift and go to state 91
    exp                            shift and go to state 186
    booleanconst                   shift and go to state 95
    varconstfunction               shift and go to state 86
    fact                           shift and go to state 97

state 161

    (142) timesloop -> TIMES O_PARENTHESIS expression C_PARENTHESIS start_times . block end_times
    (29) block -> . O_BRACKET statutesloop C_BRACKET

    O_BRACKET       shift and go to state 32

    block                          shift and go to state 187

state 162

    (106) divmult -> DIVIDE .

    O_PARENTHESIS   reduce using rule 106 (divmult -> DIVIDE .)
    ID              reduce using rule 106 (divmult -> DIVIDE .)
    INTCONST        reduce using rule 106 (divmult -> DIVIDE .)
    FLOATCONST      reduce using rule 106 (divmult -> DIVIDE .)
    STRINGCONST     reduce using rule 106 (divmult -> DIVIDE .)
    TRUE            reduce using rule 106 (divmult -> DIVIDE .)
    FALSE           reduce using rule 106 (divmult -> DIVIDE .)


state 163

    (101) term -> fact term_quadruple termloop .

    SUM             reduce using rule 101 (term -> fact term_quadruple termloop .)
    MINUS           reduce using rule 101 (term -> fact term_quadruple termloop .)
    EQUALITY        reduce using rule 101 (term -> fact term_quadruple termloop .)
    GREATER         reduce using rule 101 (term -> fact term_quadruple termloop .)
    GREATER_EQUAL   reduce using rule 101 (term -> fact term_quadruple termloop .)
    LESS            reduce using rule 101 (term -> fact term_quadruple termloop .)
    LESS_EQUAL      reduce using rule 101 (term -> fact term_quadruple termloop .)
    DIFFERENT       reduce using rule 101 (term -> fact term_quadruple termloop .)
    AND             reduce using rule 101 (term -> fact term_quadruple termloop .)
    OR              reduce using rule 101 (term -> fact term_quadruple termloop .)
    COMMA           reduce using rule 101 (term -> fact term_quadruple termloop .)
    C_PARENTHESIS   reduce using rule 101 (term -> fact term_quadruple termloop .)
    SEMICOLON       reduce using rule 101 (term -> fact term_quadruple termloop .)
    C_BRACKET       reduce using rule 101 (term -> fact term_quadruple termloop .)


state 164

    (105) divmult -> MULTIPLY .

    O_PARENTHESIS   reduce using rule 105 (divmult -> MULTIPLY .)
    ID              reduce using rule 105 (divmult -> MULTIPLY .)
    INTCONST        reduce using rule 105 (divmult -> MULTIPLY .)
    FLOATCONST      reduce using rule 105 (divmult -> MULTIPLY .)
    STRINGCONST     reduce using rule 105 (divmult -> MULTIPLY .)
    TRUE            reduce using rule 105 (divmult -> MULTIPLY .)
    FALSE           reduce using rule 105 (divmult -> MULTIPLY .)


state 165

    (103) termloop -> divmult . term
    (101) term -> . fact term_quadruple termloop
    (108) fact -> . varconst
    (109) fact -> . O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis
    (116) varconst -> . varconstfunction
    (117) varconst -> . constants
    (118) varconstfunction -> . ID functionorlist
    (123) constants -> . INTCONST add_int_constant_to_dict
    (124) constants -> . FLOATCONST add_float_constant_to_dict
    (125) constants -> . STRINGCONST add_string_constant_to_dict
    (126) constants -> . booleanconst
    (127) booleanconst -> . TRUE add_bool_constant_to_dict
    (128) booleanconst -> . FALSE add_bool_constant_to_dict

    O_PARENTHESIS   shift and go to state 83
    ID              shift and go to state 90
    INTCONST        shift and go to state 88
    FLOATCONST      shift and go to state 82
    STRINGCONST     shift and go to state 85
    TRUE            shift and go to state 84
    FALSE           shift and go to state 93

    term                           shift and go to state 188
    varconstfunction               shift and go to state 86
    varconst                       shift and go to state 94
    constants                      shift and go to state 91
    booleanconst                   shift and go to state 95
    fact                           shift and go to state 97

state 166

    (107) divmult -> MOD .

    O_PARENTHESIS   reduce using rule 107 (divmult -> MOD .)
    ID              reduce using rule 107 (divmult -> MOD .)
    INTCONST        reduce using rule 107 (divmult -> MOD .)
    FLOATCONST      reduce using rule 107 (divmult -> MOD .)
    STRINGCONST     reduce using rule 107 (divmult -> MOD .)
    TRUE            reduce using rule 107 (divmult -> MOD .)
    FALSE           reduce using rule 107 (divmult -> MOD .)


state 167

    (137) whileloop -> WHILE start_while O_PARENTHESIS expression C_PARENTHESIS . condition_while block end_while
    (140) condition_while -> .

    O_BRACKET       reduce using rule 140 (condition_while -> .)

    condition_while                shift and go to state 189

state 168

    (56) writtingloop -> start_printing expression print_quadruple . optionalwritting
    (57) optionalwritting -> . COMMA writtingloop
    (58) optionalwritting -> .

    COMMA           shift and go to state 191
    C_PARENTHESIS   reduce using rule 58 (optionalwritting -> .)

    optionalwritting               shift and go to state 190

state 169

    (53) writting -> PRINT O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON .

    IF              reduce using rule 53 (writting -> PRINT O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON .)
    PRINT           reduce using rule 53 (writting -> PRINT O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON .)
    ID              reduce using rule 53 (writting -> PRINT O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON .)
    LIST            reduce using rule 53 (writting -> PRINT O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON .)
    WHILE           reduce using rule 53 (writting -> PRINT O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON .)
    TIMES           reduce using rule 53 (writting -> PRINT O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON .)
    BOOL            reduce using rule 53 (writting -> PRINT O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON .)
    INT             reduce using rule 53 (writting -> PRINT O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON .)
    FLOAT           reduce using rule 53 (writting -> PRINT O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON .)
    STRING          reduce using rule 53 (writting -> PRINT O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON .)
    C_BRACKET       reduce using rule 53 (writting -> PRINT O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON .)
    RETURN          reduce using rule 53 (writting -> PRINT O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON .)


state 170

    (52) assignation -> var_assign EQUALS add_equals expression equals_quadruple . SEMICOLON

    SEMICOLON       shift and go to state 192


state 171

    (61) normalinit -> type var EQUALS add_equals expression . equals_quadruple SEMICOLON
    (62) equals_quadruple -> .

    SEMICOLON       reduce using rule 62 (equals_quadruple -> .)

    equals_quadruple               shift and go to state 193

state 172

    (114) listaccess -> O_S_BRACKET INTCONST C_S_BRACKET .

    EQUALS          reduce using rule 114 (listaccess -> O_S_BRACKET INTCONST C_S_BRACKET .)


state 173

    (146) functioncall -> ID check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS . SEMICOLON generate_gosub

    SEMICOLON       shift and go to state 194


state 174

    (149) parametersinput -> expression push_type_to_function_options . generate_parameter_quadruple parametersinputloop check_params_order
    (155) generate_parameter_quadruple -> .

    COMMA           reduce using rule 155 (generate_parameter_quadruple -> .)
    C_PARENTHESIS   reduce using rule 155 (generate_parameter_quadruple -> .)

    generate_parameter_quadruple   shift and go to state 195

state 175

    (70) condition -> IF O_PARENTHESIS expression C_PARENTHESIS start_condition . block else end_condition
    (29) block -> . O_BRACKET statutesloop C_BRACKET

    O_BRACKET       shift and go to state 32

    block                          shift and go to state 196

state 176

    (64) listinit -> LIST type var EQUALS list . SEMICOLON

    SEMICOLON       shift and go to state 197


state 177

    (65) list -> O_S_BRACKET . listelements C_S_BRACKET
    (66) listelements -> . constants optionalconstants
    (67) listelements -> .
    (123) constants -> . INTCONST add_int_constant_to_dict
    (124) constants -> . FLOATCONST add_float_constant_to_dict
    (125) constants -> . STRINGCONST add_string_constant_to_dict
    (126) constants -> . booleanconst
    (127) booleanconst -> . TRUE add_bool_constant_to_dict
    (128) booleanconst -> . FALSE add_bool_constant_to_dict

    C_S_BRACKET     reduce using rule 67 (listelements -> .)
    INTCONST        shift and go to state 88
    FLOATCONST      shift and go to state 82
    STRINGCONST     shift and go to state 85
    TRUE            shift and go to state 84
    FALSE           shift and go to state 93

    listelements                   shift and go to state 198
    booleanconst                   shift and go to state 95
    constants                      shift and go to state 199

state 178

    (16) function_with_return_def -> ID add_function_id_to_options add_function_to_global_variables check_current_quadruple O_PARENTHESIS parameters C_PARENTHESIS add_function_init_to_dict . functionblock
    (30) functionblock -> . O_BRACKET functionstatutesloop C_BRACKET

    O_BRACKET       shift and go to state 200

    functionblock                  shift and go to state 201

state 179

    (18) function_def -> ID add_function_id_to_options check_current_quadruple O_PARENTHESIS parameters C_PARENTHESIS add_function_init_to_dict block .

    FUNCTION        reduce using rule 18 (function_def -> ID add_function_id_to_options check_current_quadruple O_PARENTHESIS parameters C_PARENTHESIS add_function_init_to_dict block .)
    MAIN            reduce using rule 18 (function_def -> ID add_function_id_to_options check_current_quadruple O_PARENTHESIS parameters C_PARENTHESIS add_function_init_to_dict block .)


state 180

    (159) parametersloop -> COMMA parameterinit parametersloop .

    C_PARENTHESIS   reduce using rule 159 (parametersloop -> COMMA parameterinit parametersloop .)


state 181

    (109) fact -> O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS . add_c_parenthesis
    (111) add_c_parenthesis -> .

    MULTIPLY        reduce using rule 111 (add_c_parenthesis -> .)
    DIVIDE          reduce using rule 111 (add_c_parenthesis -> .)
    MOD             reduce using rule 111 (add_c_parenthesis -> .)
    SUM             reduce using rule 111 (add_c_parenthesis -> .)
    MINUS           reduce using rule 111 (add_c_parenthesis -> .)
    EQUALITY        reduce using rule 111 (add_c_parenthesis -> .)
    GREATER         reduce using rule 111 (add_c_parenthesis -> .)
    GREATER_EQUAL   reduce using rule 111 (add_c_parenthesis -> .)
    LESS            reduce using rule 111 (add_c_parenthesis -> .)
    LESS_EQUAL      reduce using rule 111 (add_c_parenthesis -> .)
    DIFFERENT       reduce using rule 111 (add_c_parenthesis -> .)
    AND             reduce using rule 111 (add_c_parenthesis -> .)
    OR              reduce using rule 111 (add_c_parenthesis -> .)
    C_PARENTHESIS   reduce using rule 111 (add_c_parenthesis -> .)
    COMMA           reduce using rule 111 (add_c_parenthesis -> .)
    SEMICOLON       reduce using rule 111 (add_c_parenthesis -> .)
    C_BRACKET       reduce using rule 111 (add_c_parenthesis -> .)

    add_c_parenthesis              shift and go to state 202

state 182

    (83) expression2optional -> relop exp relop_quadruple .

    AND             reduce using rule 83 (expression2optional -> relop exp relop_quadruple .)
    OR              reduce using rule 83 (expression2optional -> relop exp relop_quadruple .)
    C_PARENTHESIS   reduce using rule 83 (expression2optional -> relop exp relop_quadruple .)
    COMMA           reduce using rule 83 (expression2optional -> relop exp relop_quadruple .)
    SEMICOLON       reduce using rule 83 (expression2optional -> relop exp relop_quadruple .)
    C_BRACKET       reduce using rule 83 (expression2optional -> relop exp relop_quadruple .)


state 183

    (80) expressionoptional -> logicop expression2 logic_op_quadruple .

    C_PARENTHESIS   reduce using rule 80 (expressionoptional -> logicop expression2 logic_op_quadruple .)
    COMMA           reduce using rule 80 (expressionoptional -> logicop expression2 logic_op_quadruple .)
    SEMICOLON       reduce using rule 80 (expressionoptional -> logicop expression2 logic_op_quadruple .)
    C_BRACKET       reduce using rule 80 (expressionoptional -> logicop expression2 logic_op_quadruple .)


state 184

    (121) functionorlist -> check_function_exists O_PARENTHESIS parametersinput . C_PARENTHESIS generate_gosub

    C_PARENTHESIS   shift and go to state 203


state 185

    (120) functionorlist -> O_S_BRACKET INTCONST C_S_BRACKET .

    MULTIPLY        reduce using rule 120 (functionorlist -> O_S_BRACKET INTCONST C_S_BRACKET .)
    DIVIDE          reduce using rule 120 (functionorlist -> O_S_BRACKET INTCONST C_S_BRACKET .)
    MOD             reduce using rule 120 (functionorlist -> O_S_BRACKET INTCONST C_S_BRACKET .)
    SUM             reduce using rule 120 (functionorlist -> O_S_BRACKET INTCONST C_S_BRACKET .)
    MINUS           reduce using rule 120 (functionorlist -> O_S_BRACKET INTCONST C_S_BRACKET .)
    EQUALITY        reduce using rule 120 (functionorlist -> O_S_BRACKET INTCONST C_S_BRACKET .)
    GREATER         reduce using rule 120 (functionorlist -> O_S_BRACKET INTCONST C_S_BRACKET .)
    GREATER_EQUAL   reduce using rule 120 (functionorlist -> O_S_BRACKET INTCONST C_S_BRACKET .)
    LESS            reduce using rule 120 (functionorlist -> O_S_BRACKET INTCONST C_S_BRACKET .)
    LESS_EQUAL      reduce using rule 120 (functionorlist -> O_S_BRACKET INTCONST C_S_BRACKET .)
    DIFFERENT       reduce using rule 120 (functionorlist -> O_S_BRACKET INTCONST C_S_BRACKET .)
    AND             reduce using rule 120 (functionorlist -> O_S_BRACKET INTCONST C_S_BRACKET .)
    OR              reduce using rule 120 (functionorlist -> O_S_BRACKET INTCONST C_S_BRACKET .)
    C_PARENTHESIS   reduce using rule 120 (functionorlist -> O_S_BRACKET INTCONST C_S_BRACKET .)
    COMMA           reduce using rule 120 (functionorlist -> O_S_BRACKET INTCONST C_S_BRACKET .)
    SEMICOLON       reduce using rule 120 (functionorlist -> O_S_BRACKET INTCONST C_S_BRACKET .)
    C_BRACKET       reduce using rule 120 (functionorlist -> O_S_BRACKET INTCONST C_S_BRACKET .)


state 186

    (97) exploop -> addsub exp .

    EQUALITY        reduce using rule 97 (exploop -> addsub exp .)
    GREATER         reduce using rule 97 (exploop -> addsub exp .)
    GREATER_EQUAL   reduce using rule 97 (exploop -> addsub exp .)
    LESS            reduce using rule 97 (exploop -> addsub exp .)
    LESS_EQUAL      reduce using rule 97 (exploop -> addsub exp .)
    DIFFERENT       reduce using rule 97 (exploop -> addsub exp .)
    AND             reduce using rule 97 (exploop -> addsub exp .)
    OR              reduce using rule 97 (exploop -> addsub exp .)
    C_PARENTHESIS   reduce using rule 97 (exploop -> addsub exp .)
    COMMA           reduce using rule 97 (exploop -> addsub exp .)
    SEMICOLON       reduce using rule 97 (exploop -> addsub exp .)
    C_BRACKET       reduce using rule 97 (exploop -> addsub exp .)


state 187

    (142) timesloop -> TIMES O_PARENTHESIS expression C_PARENTHESIS start_times block . end_times
    (145) end_times -> .

    IF              reduce using rule 145 (end_times -> .)
    PRINT           reduce using rule 145 (end_times -> .)
    ID              reduce using rule 145 (end_times -> .)
    LIST            reduce using rule 145 (end_times -> .)
    WHILE           reduce using rule 145 (end_times -> .)
    TIMES           reduce using rule 145 (end_times -> .)
    BOOL            reduce using rule 145 (end_times -> .)
    INT             reduce using rule 145 (end_times -> .)
    FLOAT           reduce using rule 145 (end_times -> .)
    STRING          reduce using rule 145 (end_times -> .)
    C_BRACKET       reduce using rule 145 (end_times -> .)

    end_times                      shift and go to state 204

state 188

    (103) termloop -> divmult term .

    SUM             reduce using rule 103 (termloop -> divmult term .)
    MINUS           reduce using rule 103 (termloop -> divmult term .)
    EQUALITY        reduce using rule 103 (termloop -> divmult term .)
    GREATER         reduce using rule 103 (termloop -> divmult term .)
    GREATER_EQUAL   reduce using rule 103 (termloop -> divmult term .)
    LESS            reduce using rule 103 (termloop -> divmult term .)
    LESS_EQUAL      reduce using rule 103 (termloop -> divmult term .)
    DIFFERENT       reduce using rule 103 (termloop -> divmult term .)
    AND             reduce using rule 103 (termloop -> divmult term .)
    OR              reduce using rule 103 (termloop -> divmult term .)
    C_PARENTHESIS   reduce using rule 103 (termloop -> divmult term .)
    COMMA           reduce using rule 103 (termloop -> divmult term .)
    SEMICOLON       reduce using rule 103 (termloop -> divmult term .)
    C_BRACKET       reduce using rule 103 (termloop -> divmult term .)


state 189

    (137) whileloop -> WHILE start_while O_PARENTHESIS expression C_PARENTHESIS condition_while . block end_while
    (29) block -> . O_BRACKET statutesloop C_BRACKET

    O_BRACKET       shift and go to state 32

    block                          shift and go to state 205

state 190

    (56) writtingloop -> start_printing expression print_quadruple optionalwritting .

    C_PARENTHESIS   reduce using rule 56 (writtingloop -> start_printing expression print_quadruple optionalwritting .)


state 191

    (57) optionalwritting -> COMMA . writtingloop
    (56) writtingloop -> . start_printing expression print_quadruple optionalwritting
    (54) start_printing -> .

    O_PARENTHESIS   reduce using rule 54 (start_printing -> .)
    ID              reduce using rule 54 (start_printing -> .)
    INTCONST        reduce using rule 54 (start_printing -> .)
    FLOATCONST      reduce using rule 54 (start_printing -> .)
    STRINGCONST     reduce using rule 54 (start_printing -> .)
    TRUE            reduce using rule 54 (start_printing -> .)
    FALSE           reduce using rule 54 (start_printing -> .)

    writtingloop                   shift and go to state 206
    start_printing                 shift and go to state 99

state 192

    (52) assignation -> var_assign EQUALS add_equals expression equals_quadruple SEMICOLON .

    RETURN          reduce using rule 52 (assignation -> var_assign EQUALS add_equals expression equals_quadruple SEMICOLON .)
    IF              reduce using rule 52 (assignation -> var_assign EQUALS add_equals expression equals_quadruple SEMICOLON .)
    PRINT           reduce using rule 52 (assignation -> var_assign EQUALS add_equals expression equals_quadruple SEMICOLON .)
    ID              reduce using rule 52 (assignation -> var_assign EQUALS add_equals expression equals_quadruple SEMICOLON .)
    LIST            reduce using rule 52 (assignation -> var_assign EQUALS add_equals expression equals_quadruple SEMICOLON .)
    WHILE           reduce using rule 52 (assignation -> var_assign EQUALS add_equals expression equals_quadruple SEMICOLON .)
    TIMES           reduce using rule 52 (assignation -> var_assign EQUALS add_equals expression equals_quadruple SEMICOLON .)
    BOOL            reduce using rule 52 (assignation -> var_assign EQUALS add_equals expression equals_quadruple SEMICOLON .)
    INT             reduce using rule 52 (assignation -> var_assign EQUALS add_equals expression equals_quadruple SEMICOLON .)
    FLOAT           reduce using rule 52 (assignation -> var_assign EQUALS add_equals expression equals_quadruple SEMICOLON .)
    STRING          reduce using rule 52 (assignation -> var_assign EQUALS add_equals expression equals_quadruple SEMICOLON .)
    C_BRACKET       reduce using rule 52 (assignation -> var_assign EQUALS add_equals expression equals_quadruple SEMICOLON .)


state 193

    (61) normalinit -> type var EQUALS add_equals expression equals_quadruple . SEMICOLON

    SEMICOLON       shift and go to state 207


state 194

    (146) functioncall -> ID check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON . generate_gosub
    (148) generate_gosub -> .

    IF              reduce using rule 148 (generate_gosub -> .)
    PRINT           reduce using rule 148 (generate_gosub -> .)
    ID              reduce using rule 148 (generate_gosub -> .)
    LIST            reduce using rule 148 (generate_gosub -> .)
    WHILE           reduce using rule 148 (generate_gosub -> .)
    TIMES           reduce using rule 148 (generate_gosub -> .)
    BOOL            reduce using rule 148 (generate_gosub -> .)
    INT             reduce using rule 148 (generate_gosub -> .)
    FLOAT           reduce using rule 148 (generate_gosub -> .)
    STRING          reduce using rule 148 (generate_gosub -> .)
    C_BRACKET       reduce using rule 148 (generate_gosub -> .)
    RETURN          reduce using rule 148 (generate_gosub -> .)

    generate_gosub                 shift and go to state 208

state 195

    (149) parametersinput -> expression push_type_to_function_options generate_parameter_quadruple . parametersinputloop check_params_order
    (151) parametersinputloop -> . COMMA expression push_type_to_function_options generate_parameter_quadruple parametersinputloop
    (152) parametersinputloop -> .

    COMMA           shift and go to state 210
    C_PARENTHESIS   reduce using rule 152 (parametersinputloop -> .)

    parametersinputloop            shift and go to state 209

state 196

    (70) condition -> IF O_PARENTHESIS expression C_PARENTHESIS start_condition block . else end_condition
    (72) else -> . ELSE else_condition block
    (73) else -> .

    ELSE            shift and go to state 211
    IF              reduce using rule 73 (else -> .)
    PRINT           reduce using rule 73 (else -> .)
    ID              reduce using rule 73 (else -> .)
    LIST            reduce using rule 73 (else -> .)
    WHILE           reduce using rule 73 (else -> .)
    TIMES           reduce using rule 73 (else -> .)
    BOOL            reduce using rule 73 (else -> .)
    INT             reduce using rule 73 (else -> .)
    FLOAT           reduce using rule 73 (else -> .)
    STRING          reduce using rule 73 (else -> .)
    C_BRACKET       reduce using rule 73 (else -> .)

    else                           shift and go to state 212

state 197

    (64) listinit -> LIST type var EQUALS list SEMICOLON .

    RETURN          reduce using rule 64 (listinit -> LIST type var EQUALS list SEMICOLON .)
    IF              reduce using rule 64 (listinit -> LIST type var EQUALS list SEMICOLON .)
    PRINT           reduce using rule 64 (listinit -> LIST type var EQUALS list SEMICOLON .)
    ID              reduce using rule 64 (listinit -> LIST type var EQUALS list SEMICOLON .)
    LIST            reduce using rule 64 (listinit -> LIST type var EQUALS list SEMICOLON .)
    WHILE           reduce using rule 64 (listinit -> LIST type var EQUALS list SEMICOLON .)
    TIMES           reduce using rule 64 (listinit -> LIST type var EQUALS list SEMICOLON .)
    BOOL            reduce using rule 64 (listinit -> LIST type var EQUALS list SEMICOLON .)
    INT             reduce using rule 64 (listinit -> LIST type var EQUALS list SEMICOLON .)
    FLOAT           reduce using rule 64 (listinit -> LIST type var EQUALS list SEMICOLON .)
    STRING          reduce using rule 64 (listinit -> LIST type var EQUALS list SEMICOLON .)
    C_BRACKET       reduce using rule 64 (listinit -> LIST type var EQUALS list SEMICOLON .)


state 198

    (65) list -> O_S_BRACKET listelements . C_S_BRACKET

    C_S_BRACKET     shift and go to state 213


state 199

    (66) listelements -> constants . optionalconstants
    (68) optionalconstants -> . COMMA constants optionalconstants
    (69) optionalconstants -> .

    COMMA           shift and go to state 215
    C_S_BRACKET     reduce using rule 69 (optionalconstants -> .)

    optionalconstants              shift and go to state 214

state 200

    (30) functionblock -> O_BRACKET . functionstatutesloop C_BRACKET
    (37) functionstatutesloop -> . functionstatute functionstatutesloop
    (38) functionstatutesloop -> . functionreturn
    (39) functionstatutesloop -> .
    (46) functionstatute -> . init
    (47) functionstatute -> . functioncondition
    (48) functionstatute -> . writting
    (49) functionstatute -> . functionloops
    (50) functionstatute -> . assignation
    (51) functionstatute -> . functioncall
    (31) functionreturn -> . RETURN add_function_var_to_stack O_BRACKET expression C_BRACKET SEMICOLON
    (32) functionreturn -> . RETURN add_function_var_to_stack expression SEMICOLON
    (59) init -> . listinit
    (60) init -> . normalinit
    (71) functioncondition -> . IF O_PARENTHESIS expression C_PARENTHESIS start_condition functionblock functionelse end_condition
    (53) writting -> . PRINT O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON
    (135) functionloops -> . functionwhileloop
    (136) functionloops -> . functiontimesloop
    (52) assignation -> . var_assign EQUALS add_equals expression equals_quadruple SEMICOLON
    (146) functioncall -> . ID check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON generate_gosub
    (64) listinit -> . LIST type var EQUALS list SEMICOLON
    (61) normalinit -> . type var EQUALS add_equals expression equals_quadruple SEMICOLON
    (138) functionwhileloop -> . WHILE start_while O_PARENTHESIS expression C_PARENTHESIS condition_while functionblock end_while
    (143) functiontimesloop -> . TIMES O_PARENTHESIS expression C_PARENTHESIS start_times functionblock end_times
    (112) var_assign -> . ID add_to_stack listaccess
    (21) type -> . BOOL
    (22) type -> . INT
    (23) type -> . FLOAT
    (24) type -> . STRING

    C_BRACKET       reduce using rule 39 (functionstatutesloop -> .)
    RETURN          shift and go to state 217
    IF              shift and go to state 228
    PRINT           shift and go to state 38
    ID              shift and go to state 49
    LIST            shift and go to state 57
    WHILE           shift and go to state 219
    TIMES           shift and go to state 216
    BOOL            shift and go to state 41
    INT             shift and go to state 55
    FLOAT           shift and go to state 56
    STRING          shift and go to state 45

    functionstatute                shift and go to state 218
    functiontimesloop              shift and go to state 220
    functionstatutesloop           shift and go to state 221
    functionwhileloop              shift and go to state 222
    init                           shift and go to state 223
    var_assign                     shift and go to state 42
    type                           shift and go to state 43
    listinit                       shift and go to state 46
    functionloops                  shift and go to state 224
    writting                       shift and go to state 225
    functionreturn                 shift and go to state 226
    functioncondition              shift and go to state 227
    assignation                    shift and go to state 229
    functioncall                   shift and go to state 230
    normalinit                     shift and go to state 44

state 201

    (16) function_with_return_def -> ID add_function_id_to_options add_function_to_global_variables check_current_quadruple O_PARENTHESIS parameters C_PARENTHESIS add_function_init_to_dict functionblock .

    FUNCTION        reduce using rule 16 (function_with_return_def -> ID add_function_id_to_options add_function_to_global_variables check_current_quadruple O_PARENTHESIS parameters C_PARENTHESIS add_function_init_to_dict functionblock .)
    MAIN            reduce using rule 16 (function_with_return_def -> ID add_function_id_to_options add_function_to_global_variables check_current_quadruple O_PARENTHESIS parameters C_PARENTHESIS add_function_init_to_dict functionblock .)


state 202

    (109) fact -> O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis .

    MULTIPLY        reduce using rule 109 (fact -> O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis .)
    DIVIDE          reduce using rule 109 (fact -> O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis .)
    MOD             reduce using rule 109 (fact -> O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis .)
    SUM             reduce using rule 109 (fact -> O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis .)
    MINUS           reduce using rule 109 (fact -> O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis .)
    EQUALITY        reduce using rule 109 (fact -> O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis .)
    GREATER         reduce using rule 109 (fact -> O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis .)
    GREATER_EQUAL   reduce using rule 109 (fact -> O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis .)
    LESS            reduce using rule 109 (fact -> O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis .)
    LESS_EQUAL      reduce using rule 109 (fact -> O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis .)
    DIFFERENT       reduce using rule 109 (fact -> O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis .)
    AND             reduce using rule 109 (fact -> O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis .)
    OR              reduce using rule 109 (fact -> O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis .)
    C_PARENTHESIS   reduce using rule 109 (fact -> O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis .)
    COMMA           reduce using rule 109 (fact -> O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis .)
    SEMICOLON       reduce using rule 109 (fact -> O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis .)
    C_BRACKET       reduce using rule 109 (fact -> O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis .)


state 203

    (121) functionorlist -> check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS . generate_gosub
    (148) generate_gosub -> .

    MULTIPLY        reduce using rule 148 (generate_gosub -> .)
    DIVIDE          reduce using rule 148 (generate_gosub -> .)
    MOD             reduce using rule 148 (generate_gosub -> .)
    SUM             reduce using rule 148 (generate_gosub -> .)
    MINUS           reduce using rule 148 (generate_gosub -> .)
    EQUALITY        reduce using rule 148 (generate_gosub -> .)
    GREATER         reduce using rule 148 (generate_gosub -> .)
    GREATER_EQUAL   reduce using rule 148 (generate_gosub -> .)
    LESS            reduce using rule 148 (generate_gosub -> .)
    LESS_EQUAL      reduce using rule 148 (generate_gosub -> .)
    DIFFERENT       reduce using rule 148 (generate_gosub -> .)
    AND             reduce using rule 148 (generate_gosub -> .)
    OR              reduce using rule 148 (generate_gosub -> .)
    C_PARENTHESIS   reduce using rule 148 (generate_gosub -> .)
    COMMA           reduce using rule 148 (generate_gosub -> .)
    SEMICOLON       reduce using rule 148 (generate_gosub -> .)
    C_BRACKET       reduce using rule 148 (generate_gosub -> .)

    generate_gosub                 shift and go to state 231

state 204

    (142) timesloop -> TIMES O_PARENTHESIS expression C_PARENTHESIS start_times block end_times .

    IF              reduce using rule 142 (timesloop -> TIMES O_PARENTHESIS expression C_PARENTHESIS start_times block end_times .)
    PRINT           reduce using rule 142 (timesloop -> TIMES O_PARENTHESIS expression C_PARENTHESIS start_times block end_times .)
    ID              reduce using rule 142 (timesloop -> TIMES O_PARENTHESIS expression C_PARENTHESIS start_times block end_times .)
    LIST            reduce using rule 142 (timesloop -> TIMES O_PARENTHESIS expression C_PARENTHESIS start_times block end_times .)
    WHILE           reduce using rule 142 (timesloop -> TIMES O_PARENTHESIS expression C_PARENTHESIS start_times block end_times .)
    TIMES           reduce using rule 142 (timesloop -> TIMES O_PARENTHESIS expression C_PARENTHESIS start_times block end_times .)
    BOOL            reduce using rule 142 (timesloop -> TIMES O_PARENTHESIS expression C_PARENTHESIS start_times block end_times .)
    INT             reduce using rule 142 (timesloop -> TIMES O_PARENTHESIS expression C_PARENTHESIS start_times block end_times .)
    FLOAT           reduce using rule 142 (timesloop -> TIMES O_PARENTHESIS expression C_PARENTHESIS start_times block end_times .)
    STRING          reduce using rule 142 (timesloop -> TIMES O_PARENTHESIS expression C_PARENTHESIS start_times block end_times .)
    C_BRACKET       reduce using rule 142 (timesloop -> TIMES O_PARENTHESIS expression C_PARENTHESIS start_times block end_times .)


state 205

    (137) whileloop -> WHILE start_while O_PARENTHESIS expression C_PARENTHESIS condition_while block . end_while
    (141) end_while -> .

    IF              reduce using rule 141 (end_while -> .)
    PRINT           reduce using rule 141 (end_while -> .)
    ID              reduce using rule 141 (end_while -> .)
    LIST            reduce using rule 141 (end_while -> .)
    WHILE           reduce using rule 141 (end_while -> .)
    TIMES           reduce using rule 141 (end_while -> .)
    BOOL            reduce using rule 141 (end_while -> .)
    INT             reduce using rule 141 (end_while -> .)
    FLOAT           reduce using rule 141 (end_while -> .)
    STRING          reduce using rule 141 (end_while -> .)
    C_BRACKET       reduce using rule 141 (end_while -> .)

    end_while                      shift and go to state 232

state 206

    (57) optionalwritting -> COMMA writtingloop .

    C_PARENTHESIS   reduce using rule 57 (optionalwritting -> COMMA writtingloop .)


state 207

    (61) normalinit -> type var EQUALS add_equals expression equals_quadruple SEMICOLON .

    IF              reduce using rule 61 (normalinit -> type var EQUALS add_equals expression equals_quadruple SEMICOLON .)
    PRINT           reduce using rule 61 (normalinit -> type var EQUALS add_equals expression equals_quadruple SEMICOLON .)
    ID              reduce using rule 61 (normalinit -> type var EQUALS add_equals expression equals_quadruple SEMICOLON .)
    LIST            reduce using rule 61 (normalinit -> type var EQUALS add_equals expression equals_quadruple SEMICOLON .)
    WHILE           reduce using rule 61 (normalinit -> type var EQUALS add_equals expression equals_quadruple SEMICOLON .)
    TIMES           reduce using rule 61 (normalinit -> type var EQUALS add_equals expression equals_quadruple SEMICOLON .)
    BOOL            reduce using rule 61 (normalinit -> type var EQUALS add_equals expression equals_quadruple SEMICOLON .)
    INT             reduce using rule 61 (normalinit -> type var EQUALS add_equals expression equals_quadruple SEMICOLON .)
    FLOAT           reduce using rule 61 (normalinit -> type var EQUALS add_equals expression equals_quadruple SEMICOLON .)
    STRING          reduce using rule 61 (normalinit -> type var EQUALS add_equals expression equals_quadruple SEMICOLON .)
    C_BRACKET       reduce using rule 61 (normalinit -> type var EQUALS add_equals expression equals_quadruple SEMICOLON .)
    RETURN          reduce using rule 61 (normalinit -> type var EQUALS add_equals expression equals_quadruple SEMICOLON .)


state 208

    (146) functioncall -> ID check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON generate_gosub .

    IF              reduce using rule 146 (functioncall -> ID check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON generate_gosub .)
    PRINT           reduce using rule 146 (functioncall -> ID check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON generate_gosub .)
    ID              reduce using rule 146 (functioncall -> ID check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON generate_gosub .)
    LIST            reduce using rule 146 (functioncall -> ID check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON generate_gosub .)
    WHILE           reduce using rule 146 (functioncall -> ID check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON generate_gosub .)
    TIMES           reduce using rule 146 (functioncall -> ID check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON generate_gosub .)
    BOOL            reduce using rule 146 (functioncall -> ID check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON generate_gosub .)
    INT             reduce using rule 146 (functioncall -> ID check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON generate_gosub .)
    FLOAT           reduce using rule 146 (functioncall -> ID check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON generate_gosub .)
    STRING          reduce using rule 146 (functioncall -> ID check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON generate_gosub .)
    C_BRACKET       reduce using rule 146 (functioncall -> ID check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON generate_gosub .)
    RETURN          reduce using rule 146 (functioncall -> ID check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON generate_gosub .)


state 209

    (149) parametersinput -> expression push_type_to_function_options generate_parameter_quadruple parametersinputloop . check_params_order
    (154) check_params_order -> .

    C_PARENTHESIS   reduce using rule 154 (check_params_order -> .)

    check_params_order             shift and go to state 233

state 210

    (151) parametersinputloop -> COMMA . expression push_type_to_function_options generate_parameter_quadruple parametersinputloop
    (79) expression -> . expression2 expressionoptional
    (82) expression2 -> . exp expression2optional
    (95) exp -> . term exp_quadruple exploop
    (101) term -> . fact term_quadruple termloop
    (108) fact -> . varconst
    (109) fact -> . O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis
    (116) varconst -> . varconstfunction
    (117) varconst -> . constants
    (118) varconstfunction -> . ID functionorlist
    (123) constants -> . INTCONST add_int_constant_to_dict
    (124) constants -> . FLOATCONST add_float_constant_to_dict
    (125) constants -> . STRINGCONST add_string_constant_to_dict
    (126) constants -> . booleanconst
    (127) booleanconst -> . TRUE add_bool_constant_to_dict
    (128) booleanconst -> . FALSE add_bool_constant_to_dict

    O_PARENTHESIS   shift and go to state 83
    ID              shift and go to state 90
    INTCONST        shift and go to state 88
    FLOATCONST      shift and go to state 82
    STRINGCONST     shift and go to state 85
    TRUE            shift and go to state 84
    FALSE           shift and go to state 93

    varconstfunction               shift and go to state 86
    exp                            shift and go to state 87
    expression2                    shift and go to state 89
    constants                      shift and go to state 91
    term                           shift and go to state 92
    varconst                       shift and go to state 94
    booleanconst                   shift and go to state 95
    expression                     shift and go to state 234
    fact                           shift and go to state 97

state 211

    (72) else -> ELSE . else_condition block
    (77) else_condition -> .

    O_BRACKET       reduce using rule 77 (else_condition -> .)

    else_condition                 shift and go to state 235

state 212

    (70) condition -> IF O_PARENTHESIS expression C_PARENTHESIS start_condition block else . end_condition
    (78) end_condition -> .

    IF              reduce using rule 78 (end_condition -> .)
    PRINT           reduce using rule 78 (end_condition -> .)
    ID              reduce using rule 78 (end_condition -> .)
    LIST            reduce using rule 78 (end_condition -> .)
    WHILE           reduce using rule 78 (end_condition -> .)
    TIMES           reduce using rule 78 (end_condition -> .)
    BOOL            reduce using rule 78 (end_condition -> .)
    INT             reduce using rule 78 (end_condition -> .)
    FLOAT           reduce using rule 78 (end_condition -> .)
    STRING          reduce using rule 78 (end_condition -> .)
    C_BRACKET       reduce using rule 78 (end_condition -> .)

    end_condition                  shift and go to state 236

state 213

    (65) list -> O_S_BRACKET listelements C_S_BRACKET .

    SEMICOLON       reduce using rule 65 (list -> O_S_BRACKET listelements C_S_BRACKET .)


state 214

    (66) listelements -> constants optionalconstants .

    C_S_BRACKET     reduce using rule 66 (listelements -> constants optionalconstants .)


state 215

    (68) optionalconstants -> COMMA . constants optionalconstants
    (123) constants -> . INTCONST add_int_constant_to_dict
    (124) constants -> . FLOATCONST add_float_constant_to_dict
    (125) constants -> . STRINGCONST add_string_constant_to_dict
    (126) constants -> . booleanconst
    (127) booleanconst -> . TRUE add_bool_constant_to_dict
    (128) booleanconst -> . FALSE add_bool_constant_to_dict

    INTCONST        shift and go to state 88
    FLOATCONST      shift and go to state 82
    STRINGCONST     shift and go to state 85
    TRUE            shift and go to state 84
    FALSE           shift and go to state 93

    booleanconst                   shift and go to state 95
    constants                      shift and go to state 237

state 216

    (143) functiontimesloop -> TIMES . O_PARENTHESIS expression C_PARENTHESIS start_times functionblock end_times

    O_PARENTHESIS   shift and go to state 238


state 217

    (31) functionreturn -> RETURN . add_function_var_to_stack O_BRACKET expression C_BRACKET SEMICOLON
    (32) functionreturn -> RETURN . add_function_var_to_stack expression SEMICOLON
    (33) add_function_var_to_stack -> .

    O_BRACKET       reduce using rule 33 (add_function_var_to_stack -> .)
    O_PARENTHESIS   reduce using rule 33 (add_function_var_to_stack -> .)
    ID              reduce using rule 33 (add_function_var_to_stack -> .)
    INTCONST        reduce using rule 33 (add_function_var_to_stack -> .)
    FLOATCONST      reduce using rule 33 (add_function_var_to_stack -> .)
    STRINGCONST     reduce using rule 33 (add_function_var_to_stack -> .)
    TRUE            reduce using rule 33 (add_function_var_to_stack -> .)
    FALSE           reduce using rule 33 (add_function_var_to_stack -> .)

    add_function_var_to_stack      shift and go to state 239

state 218

    (37) functionstatutesloop -> functionstatute . functionstatutesloop
    (37) functionstatutesloop -> . functionstatute functionstatutesloop
    (38) functionstatutesloop -> . functionreturn
    (39) functionstatutesloop -> .
    (46) functionstatute -> . init
    (47) functionstatute -> . functioncondition
    (48) functionstatute -> . writting
    (49) functionstatute -> . functionloops
    (50) functionstatute -> . assignation
    (51) functionstatute -> . functioncall
    (31) functionreturn -> . RETURN add_function_var_to_stack O_BRACKET expression C_BRACKET SEMICOLON
    (32) functionreturn -> . RETURN add_function_var_to_stack expression SEMICOLON
    (59) init -> . listinit
    (60) init -> . normalinit
    (71) functioncondition -> . IF O_PARENTHESIS expression C_PARENTHESIS start_condition functionblock functionelse end_condition
    (53) writting -> . PRINT O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON
    (135) functionloops -> . functionwhileloop
    (136) functionloops -> . functiontimesloop
    (52) assignation -> . var_assign EQUALS add_equals expression equals_quadruple SEMICOLON
    (146) functioncall -> . ID check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON generate_gosub
    (64) listinit -> . LIST type var EQUALS list SEMICOLON
    (61) normalinit -> . type var EQUALS add_equals expression equals_quadruple SEMICOLON
    (138) functionwhileloop -> . WHILE start_while O_PARENTHESIS expression C_PARENTHESIS condition_while functionblock end_while
    (143) functiontimesloop -> . TIMES O_PARENTHESIS expression C_PARENTHESIS start_times functionblock end_times
    (112) var_assign -> . ID add_to_stack listaccess
    (21) type -> . BOOL
    (22) type -> . INT
    (23) type -> . FLOAT
    (24) type -> . STRING

    C_BRACKET       reduce using rule 39 (functionstatutesloop -> .)
    RETURN          shift and go to state 217
    IF              shift and go to state 228
    PRINT           shift and go to state 38
    ID              shift and go to state 49
    LIST            shift and go to state 57
    WHILE           shift and go to state 219
    TIMES           shift and go to state 216
    BOOL            shift and go to state 41
    INT             shift and go to state 55
    FLOAT           shift and go to state 56
    STRING          shift and go to state 45

    functionstatute                shift and go to state 218
    functiontimesloop              shift and go to state 220
    functionstatutesloop           shift and go to state 240
    functionwhileloop              shift and go to state 222
    init                           shift and go to state 223
    var_assign                     shift and go to state 42
    type                           shift and go to state 43
    listinit                       shift and go to state 46
    functionloops                  shift and go to state 224
    writting                       shift and go to state 225
    functionreturn                 shift and go to state 226
    functioncondition              shift and go to state 227
    assignation                    shift and go to state 229
    functioncall                   shift and go to state 230
    normalinit                     shift and go to state 44

state 219

    (138) functionwhileloop -> WHILE . start_while O_PARENTHESIS expression C_PARENTHESIS condition_while functionblock end_while
    (139) start_while -> .

    O_PARENTHESIS   reduce using rule 139 (start_while -> .)

    start_while                    shift and go to state 241

state 220

    (136) functionloops -> functiontimesloop .

    RETURN          reduce using rule 136 (functionloops -> functiontimesloop .)
    IF              reduce using rule 136 (functionloops -> functiontimesloop .)
    PRINT           reduce using rule 136 (functionloops -> functiontimesloop .)
    ID              reduce using rule 136 (functionloops -> functiontimesloop .)
    LIST            reduce using rule 136 (functionloops -> functiontimesloop .)
    WHILE           reduce using rule 136 (functionloops -> functiontimesloop .)
    TIMES           reduce using rule 136 (functionloops -> functiontimesloop .)
    BOOL            reduce using rule 136 (functionloops -> functiontimesloop .)
    INT             reduce using rule 136 (functionloops -> functiontimesloop .)
    FLOAT           reduce using rule 136 (functionloops -> functiontimesloop .)
    STRING          reduce using rule 136 (functionloops -> functiontimesloop .)
    C_BRACKET       reduce using rule 136 (functionloops -> functiontimesloop .)


state 221

    (30) functionblock -> O_BRACKET functionstatutesloop . C_BRACKET

    C_BRACKET       shift and go to state 242


state 222

    (135) functionloops -> functionwhileloop .

    RETURN          reduce using rule 135 (functionloops -> functionwhileloop .)
    IF              reduce using rule 135 (functionloops -> functionwhileloop .)
    PRINT           reduce using rule 135 (functionloops -> functionwhileloop .)
    ID              reduce using rule 135 (functionloops -> functionwhileloop .)
    LIST            reduce using rule 135 (functionloops -> functionwhileloop .)
    WHILE           reduce using rule 135 (functionloops -> functionwhileloop .)
    TIMES           reduce using rule 135 (functionloops -> functionwhileloop .)
    BOOL            reduce using rule 135 (functionloops -> functionwhileloop .)
    INT             reduce using rule 135 (functionloops -> functionwhileloop .)
    FLOAT           reduce using rule 135 (functionloops -> functionwhileloop .)
    STRING          reduce using rule 135 (functionloops -> functionwhileloop .)
    C_BRACKET       reduce using rule 135 (functionloops -> functionwhileloop .)


state 223

    (46) functionstatute -> init .

    RETURN          reduce using rule 46 (functionstatute -> init .)
    IF              reduce using rule 46 (functionstatute -> init .)
    PRINT           reduce using rule 46 (functionstatute -> init .)
    ID              reduce using rule 46 (functionstatute -> init .)
    LIST            reduce using rule 46 (functionstatute -> init .)
    WHILE           reduce using rule 46 (functionstatute -> init .)
    TIMES           reduce using rule 46 (functionstatute -> init .)
    BOOL            reduce using rule 46 (functionstatute -> init .)
    INT             reduce using rule 46 (functionstatute -> init .)
    FLOAT           reduce using rule 46 (functionstatute -> init .)
    STRING          reduce using rule 46 (functionstatute -> init .)
    C_BRACKET       reduce using rule 46 (functionstatute -> init .)


state 224

    (49) functionstatute -> functionloops .

    RETURN          reduce using rule 49 (functionstatute -> functionloops .)
    IF              reduce using rule 49 (functionstatute -> functionloops .)
    PRINT           reduce using rule 49 (functionstatute -> functionloops .)
    ID              reduce using rule 49 (functionstatute -> functionloops .)
    LIST            reduce using rule 49 (functionstatute -> functionloops .)
    WHILE           reduce using rule 49 (functionstatute -> functionloops .)
    TIMES           reduce using rule 49 (functionstatute -> functionloops .)
    BOOL            reduce using rule 49 (functionstatute -> functionloops .)
    INT             reduce using rule 49 (functionstatute -> functionloops .)
    FLOAT           reduce using rule 49 (functionstatute -> functionloops .)
    STRING          reduce using rule 49 (functionstatute -> functionloops .)
    C_BRACKET       reduce using rule 49 (functionstatute -> functionloops .)


state 225

    (48) functionstatute -> writting .

    RETURN          reduce using rule 48 (functionstatute -> writting .)
    IF              reduce using rule 48 (functionstatute -> writting .)
    PRINT           reduce using rule 48 (functionstatute -> writting .)
    ID              reduce using rule 48 (functionstatute -> writting .)
    LIST            reduce using rule 48 (functionstatute -> writting .)
    WHILE           reduce using rule 48 (functionstatute -> writting .)
    TIMES           reduce using rule 48 (functionstatute -> writting .)
    BOOL            reduce using rule 48 (functionstatute -> writting .)
    INT             reduce using rule 48 (functionstatute -> writting .)
    FLOAT           reduce using rule 48 (functionstatute -> writting .)
    STRING          reduce using rule 48 (functionstatute -> writting .)
    C_BRACKET       reduce using rule 48 (functionstatute -> writting .)


state 226

    (38) functionstatutesloop -> functionreturn .

    C_BRACKET       reduce using rule 38 (functionstatutesloop -> functionreturn .)


state 227

    (47) functionstatute -> functioncondition .

    RETURN          reduce using rule 47 (functionstatute -> functioncondition .)
    IF              reduce using rule 47 (functionstatute -> functioncondition .)
    PRINT           reduce using rule 47 (functionstatute -> functioncondition .)
    ID              reduce using rule 47 (functionstatute -> functioncondition .)
    LIST            reduce using rule 47 (functionstatute -> functioncondition .)
    WHILE           reduce using rule 47 (functionstatute -> functioncondition .)
    TIMES           reduce using rule 47 (functionstatute -> functioncondition .)
    BOOL            reduce using rule 47 (functionstatute -> functioncondition .)
    INT             reduce using rule 47 (functionstatute -> functioncondition .)
    FLOAT           reduce using rule 47 (functionstatute -> functioncondition .)
    STRING          reduce using rule 47 (functionstatute -> functioncondition .)
    C_BRACKET       reduce using rule 47 (functionstatute -> functioncondition .)


state 228

    (71) functioncondition -> IF . O_PARENTHESIS expression C_PARENTHESIS start_condition functionblock functionelse end_condition

    O_PARENTHESIS   shift and go to state 243


state 229

    (50) functionstatute -> assignation .

    RETURN          reduce using rule 50 (functionstatute -> assignation .)
    IF              reduce using rule 50 (functionstatute -> assignation .)
    PRINT           reduce using rule 50 (functionstatute -> assignation .)
    ID              reduce using rule 50 (functionstatute -> assignation .)
    LIST            reduce using rule 50 (functionstatute -> assignation .)
    WHILE           reduce using rule 50 (functionstatute -> assignation .)
    TIMES           reduce using rule 50 (functionstatute -> assignation .)
    BOOL            reduce using rule 50 (functionstatute -> assignation .)
    INT             reduce using rule 50 (functionstatute -> assignation .)
    FLOAT           reduce using rule 50 (functionstatute -> assignation .)
    STRING          reduce using rule 50 (functionstatute -> assignation .)
    C_BRACKET       reduce using rule 50 (functionstatute -> assignation .)


state 230

    (51) functionstatute -> functioncall .

    RETURN          reduce using rule 51 (functionstatute -> functioncall .)
    IF              reduce using rule 51 (functionstatute -> functioncall .)
    PRINT           reduce using rule 51 (functionstatute -> functioncall .)
    ID              reduce using rule 51 (functionstatute -> functioncall .)
    LIST            reduce using rule 51 (functionstatute -> functioncall .)
    WHILE           reduce using rule 51 (functionstatute -> functioncall .)
    TIMES           reduce using rule 51 (functionstatute -> functioncall .)
    BOOL            reduce using rule 51 (functionstatute -> functioncall .)
    INT             reduce using rule 51 (functionstatute -> functioncall .)
    FLOAT           reduce using rule 51 (functionstatute -> functioncall .)
    STRING          reduce using rule 51 (functionstatute -> functioncall .)
    C_BRACKET       reduce using rule 51 (functionstatute -> functioncall .)


state 231

    (121) functionorlist -> check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS generate_gosub .

    MULTIPLY        reduce using rule 121 (functionorlist -> check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS generate_gosub .)
    DIVIDE          reduce using rule 121 (functionorlist -> check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS generate_gosub .)
    MOD             reduce using rule 121 (functionorlist -> check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS generate_gosub .)
    SUM             reduce using rule 121 (functionorlist -> check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS generate_gosub .)
    MINUS           reduce using rule 121 (functionorlist -> check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS generate_gosub .)
    EQUALITY        reduce using rule 121 (functionorlist -> check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS generate_gosub .)
    GREATER         reduce using rule 121 (functionorlist -> check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS generate_gosub .)
    GREATER_EQUAL   reduce using rule 121 (functionorlist -> check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS generate_gosub .)
    LESS            reduce using rule 121 (functionorlist -> check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS generate_gosub .)
    LESS_EQUAL      reduce using rule 121 (functionorlist -> check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS generate_gosub .)
    DIFFERENT       reduce using rule 121 (functionorlist -> check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS generate_gosub .)
    AND             reduce using rule 121 (functionorlist -> check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS generate_gosub .)
    OR              reduce using rule 121 (functionorlist -> check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS generate_gosub .)
    C_PARENTHESIS   reduce using rule 121 (functionorlist -> check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS generate_gosub .)
    COMMA           reduce using rule 121 (functionorlist -> check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS generate_gosub .)
    SEMICOLON       reduce using rule 121 (functionorlist -> check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS generate_gosub .)
    C_BRACKET       reduce using rule 121 (functionorlist -> check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS generate_gosub .)


state 232

    (137) whileloop -> WHILE start_while O_PARENTHESIS expression C_PARENTHESIS condition_while block end_while .

    IF              reduce using rule 137 (whileloop -> WHILE start_while O_PARENTHESIS expression C_PARENTHESIS condition_while block end_while .)
    PRINT           reduce using rule 137 (whileloop -> WHILE start_while O_PARENTHESIS expression C_PARENTHESIS condition_while block end_while .)
    ID              reduce using rule 137 (whileloop -> WHILE start_while O_PARENTHESIS expression C_PARENTHESIS condition_while block end_while .)
    LIST            reduce using rule 137 (whileloop -> WHILE start_while O_PARENTHESIS expression C_PARENTHESIS condition_while block end_while .)
    WHILE           reduce using rule 137 (whileloop -> WHILE start_while O_PARENTHESIS expression C_PARENTHESIS condition_while block end_while .)
    TIMES           reduce using rule 137 (whileloop -> WHILE start_while O_PARENTHESIS expression C_PARENTHESIS condition_while block end_while .)
    BOOL            reduce using rule 137 (whileloop -> WHILE start_while O_PARENTHESIS expression C_PARENTHESIS condition_while block end_while .)
    INT             reduce using rule 137 (whileloop -> WHILE start_while O_PARENTHESIS expression C_PARENTHESIS condition_while block end_while .)
    FLOAT           reduce using rule 137 (whileloop -> WHILE start_while O_PARENTHESIS expression C_PARENTHESIS condition_while block end_while .)
    STRING          reduce using rule 137 (whileloop -> WHILE start_while O_PARENTHESIS expression C_PARENTHESIS condition_while block end_while .)
    C_BRACKET       reduce using rule 137 (whileloop -> WHILE start_while O_PARENTHESIS expression C_PARENTHESIS condition_while block end_while .)


state 233

    (149) parametersinput -> expression push_type_to_function_options generate_parameter_quadruple parametersinputloop check_params_order .

    C_PARENTHESIS   reduce using rule 149 (parametersinput -> expression push_type_to_function_options generate_parameter_quadruple parametersinputloop check_params_order .)


state 234

    (151) parametersinputloop -> COMMA expression . push_type_to_function_options generate_parameter_quadruple parametersinputloop
    (153) push_type_to_function_options -> .

    COMMA           reduce using rule 153 (push_type_to_function_options -> .)
    C_PARENTHESIS   reduce using rule 153 (push_type_to_function_options -> .)

    push_type_to_function_options  shift and go to state 244

state 235

    (72) else -> ELSE else_condition . block
    (29) block -> . O_BRACKET statutesloop C_BRACKET

    O_BRACKET       shift and go to state 32

    block                          shift and go to state 245

state 236

    (70) condition -> IF O_PARENTHESIS expression C_PARENTHESIS start_condition block else end_condition .

    IF              reduce using rule 70 (condition -> IF O_PARENTHESIS expression C_PARENTHESIS start_condition block else end_condition .)
    PRINT           reduce using rule 70 (condition -> IF O_PARENTHESIS expression C_PARENTHESIS start_condition block else end_condition .)
    ID              reduce using rule 70 (condition -> IF O_PARENTHESIS expression C_PARENTHESIS start_condition block else end_condition .)
    LIST            reduce using rule 70 (condition -> IF O_PARENTHESIS expression C_PARENTHESIS start_condition block else end_condition .)
    WHILE           reduce using rule 70 (condition -> IF O_PARENTHESIS expression C_PARENTHESIS start_condition block else end_condition .)
    TIMES           reduce using rule 70 (condition -> IF O_PARENTHESIS expression C_PARENTHESIS start_condition block else end_condition .)
    BOOL            reduce using rule 70 (condition -> IF O_PARENTHESIS expression C_PARENTHESIS start_condition block else end_condition .)
    INT             reduce using rule 70 (condition -> IF O_PARENTHESIS expression C_PARENTHESIS start_condition block else end_condition .)
    FLOAT           reduce using rule 70 (condition -> IF O_PARENTHESIS expression C_PARENTHESIS start_condition block else end_condition .)
    STRING          reduce using rule 70 (condition -> IF O_PARENTHESIS expression C_PARENTHESIS start_condition block else end_condition .)
    C_BRACKET       reduce using rule 70 (condition -> IF O_PARENTHESIS expression C_PARENTHESIS start_condition block else end_condition .)


state 237

    (68) optionalconstants -> COMMA constants . optionalconstants
    (68) optionalconstants -> . COMMA constants optionalconstants
    (69) optionalconstants -> .

    COMMA           shift and go to state 215
    C_S_BRACKET     reduce using rule 69 (optionalconstants -> .)

    optionalconstants              shift and go to state 246

state 238

    (143) functiontimesloop -> TIMES O_PARENTHESIS . expression C_PARENTHESIS start_times functionblock end_times
    (79) expression -> . expression2 expressionoptional
    (82) expression2 -> . exp expression2optional
    (95) exp -> . term exp_quadruple exploop
    (101) term -> . fact term_quadruple termloop
    (108) fact -> . varconst
    (109) fact -> . O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis
    (116) varconst -> . varconstfunction
    (117) varconst -> . constants
    (118) varconstfunction -> . ID functionorlist
    (123) constants -> . INTCONST add_int_constant_to_dict
    (124) constants -> . FLOATCONST add_float_constant_to_dict
    (125) constants -> . STRINGCONST add_string_constant_to_dict
    (126) constants -> . booleanconst
    (127) booleanconst -> . TRUE add_bool_constant_to_dict
    (128) booleanconst -> . FALSE add_bool_constant_to_dict

    O_PARENTHESIS   shift and go to state 83
    ID              shift and go to state 90
    INTCONST        shift and go to state 88
    FLOATCONST      shift and go to state 82
    STRINGCONST     shift and go to state 85
    TRUE            shift and go to state 84
    FALSE           shift and go to state 93

    varconstfunction               shift and go to state 86
    exp                            shift and go to state 87
    expression2                    shift and go to state 89
    constants                      shift and go to state 91
    term                           shift and go to state 92
    varconst                       shift and go to state 94
    booleanconst                   shift and go to state 95
    expression                     shift and go to state 247
    fact                           shift and go to state 97

state 239

    (31) functionreturn -> RETURN add_function_var_to_stack . O_BRACKET expression C_BRACKET SEMICOLON
    (32) functionreturn -> RETURN add_function_var_to_stack . expression SEMICOLON
    (79) expression -> . expression2 expressionoptional
    (82) expression2 -> . exp expression2optional
    (95) exp -> . term exp_quadruple exploop
    (101) term -> . fact term_quadruple termloop
    (108) fact -> . varconst
    (109) fact -> . O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis
    (116) varconst -> . varconstfunction
    (117) varconst -> . constants
    (118) varconstfunction -> . ID functionorlist
    (123) constants -> . INTCONST add_int_constant_to_dict
    (124) constants -> . FLOATCONST add_float_constant_to_dict
    (125) constants -> . STRINGCONST add_string_constant_to_dict
    (126) constants -> . booleanconst
    (127) booleanconst -> . TRUE add_bool_constant_to_dict
    (128) booleanconst -> . FALSE add_bool_constant_to_dict

    O_BRACKET       shift and go to state 248
    O_PARENTHESIS   shift and go to state 83
    ID              shift and go to state 90
    INTCONST        shift and go to state 88
    FLOATCONST      shift and go to state 82
    STRINGCONST     shift and go to state 85
    TRUE            shift and go to state 84
    FALSE           shift and go to state 93

    varconstfunction               shift and go to state 86
    exp                            shift and go to state 87
    expression2                    shift and go to state 89
    constants                      shift and go to state 91
    term                           shift and go to state 92
    varconst                       shift and go to state 94
    booleanconst                   shift and go to state 95
    expression                     shift and go to state 249
    fact                           shift and go to state 97

state 240

    (37) functionstatutesloop -> functionstatute functionstatutesloop .

    C_BRACKET       reduce using rule 37 (functionstatutesloop -> functionstatute functionstatutesloop .)


state 241

    (138) functionwhileloop -> WHILE start_while . O_PARENTHESIS expression C_PARENTHESIS condition_while functionblock end_while

    O_PARENTHESIS   shift and go to state 250


state 242

    (30) functionblock -> O_BRACKET functionstatutesloop C_BRACKET .

    RETURN          reduce using rule 30 (functionblock -> O_BRACKET functionstatutesloop C_BRACKET .)
    IF              reduce using rule 30 (functionblock -> O_BRACKET functionstatutesloop C_BRACKET .)
    PRINT           reduce using rule 30 (functionblock -> O_BRACKET functionstatutesloop C_BRACKET .)
    ID              reduce using rule 30 (functionblock -> O_BRACKET functionstatutesloop C_BRACKET .)
    LIST            reduce using rule 30 (functionblock -> O_BRACKET functionstatutesloop C_BRACKET .)
    WHILE           reduce using rule 30 (functionblock -> O_BRACKET functionstatutesloop C_BRACKET .)
    TIMES           reduce using rule 30 (functionblock -> O_BRACKET functionstatutesloop C_BRACKET .)
    BOOL            reduce using rule 30 (functionblock -> O_BRACKET functionstatutesloop C_BRACKET .)
    INT             reduce using rule 30 (functionblock -> O_BRACKET functionstatutesloop C_BRACKET .)
    FLOAT           reduce using rule 30 (functionblock -> O_BRACKET functionstatutesloop C_BRACKET .)
    STRING          reduce using rule 30 (functionblock -> O_BRACKET functionstatutesloop C_BRACKET .)
    C_BRACKET       reduce using rule 30 (functionblock -> O_BRACKET functionstatutesloop C_BRACKET .)
    FUNCTION        reduce using rule 30 (functionblock -> O_BRACKET functionstatutesloop C_BRACKET .)
    MAIN            reduce using rule 30 (functionblock -> O_BRACKET functionstatutesloop C_BRACKET .)
    ELSE            reduce using rule 30 (functionblock -> O_BRACKET functionstatutesloop C_BRACKET .)


state 243

    (71) functioncondition -> IF O_PARENTHESIS . expression C_PARENTHESIS start_condition functionblock functionelse end_condition
    (79) expression -> . expression2 expressionoptional
    (82) expression2 -> . exp expression2optional
    (95) exp -> . term exp_quadruple exploop
    (101) term -> . fact term_quadruple termloop
    (108) fact -> . varconst
    (109) fact -> . O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis
    (116) varconst -> . varconstfunction
    (117) varconst -> . constants
    (118) varconstfunction -> . ID functionorlist
    (123) constants -> . INTCONST add_int_constant_to_dict
    (124) constants -> . FLOATCONST add_float_constant_to_dict
    (125) constants -> . STRINGCONST add_string_constant_to_dict
    (126) constants -> . booleanconst
    (127) booleanconst -> . TRUE add_bool_constant_to_dict
    (128) booleanconst -> . FALSE add_bool_constant_to_dict

    O_PARENTHESIS   shift and go to state 83
    ID              shift and go to state 90
    INTCONST        shift and go to state 88
    FLOATCONST      shift and go to state 82
    STRINGCONST     shift and go to state 85
    TRUE            shift and go to state 84
    FALSE           shift and go to state 93

    varconstfunction               shift and go to state 86
    exp                            shift and go to state 87
    expression2                    shift and go to state 89
    constants                      shift and go to state 91
    term                           shift and go to state 92
    varconst                       shift and go to state 94
    booleanconst                   shift and go to state 95
    expression                     shift and go to state 251
    fact                           shift and go to state 97

state 244

    (151) parametersinputloop -> COMMA expression push_type_to_function_options . generate_parameter_quadruple parametersinputloop
    (155) generate_parameter_quadruple -> .

    COMMA           reduce using rule 155 (generate_parameter_quadruple -> .)
    C_PARENTHESIS   reduce using rule 155 (generate_parameter_quadruple -> .)

    generate_parameter_quadruple   shift and go to state 252

state 245

    (72) else -> ELSE else_condition block .

    IF              reduce using rule 72 (else -> ELSE else_condition block .)
    PRINT           reduce using rule 72 (else -> ELSE else_condition block .)
    ID              reduce using rule 72 (else -> ELSE else_condition block .)
    LIST            reduce using rule 72 (else -> ELSE else_condition block .)
    WHILE           reduce using rule 72 (else -> ELSE else_condition block .)
    TIMES           reduce using rule 72 (else -> ELSE else_condition block .)
    BOOL            reduce using rule 72 (else -> ELSE else_condition block .)
    INT             reduce using rule 72 (else -> ELSE else_condition block .)
    FLOAT           reduce using rule 72 (else -> ELSE else_condition block .)
    STRING          reduce using rule 72 (else -> ELSE else_condition block .)
    C_BRACKET       reduce using rule 72 (else -> ELSE else_condition block .)


state 246

    (68) optionalconstants -> COMMA constants optionalconstants .

    C_S_BRACKET     reduce using rule 68 (optionalconstants -> COMMA constants optionalconstants .)


state 247

    (143) functiontimesloop -> TIMES O_PARENTHESIS expression . C_PARENTHESIS start_times functionblock end_times

    C_PARENTHESIS   shift and go to state 253


state 248

    (31) functionreturn -> RETURN add_function_var_to_stack O_BRACKET . expression C_BRACKET SEMICOLON
    (79) expression -> . expression2 expressionoptional
    (82) expression2 -> . exp expression2optional
    (95) exp -> . term exp_quadruple exploop
    (101) term -> . fact term_quadruple termloop
    (108) fact -> . varconst
    (109) fact -> . O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis
    (116) varconst -> . varconstfunction
    (117) varconst -> . constants
    (118) varconstfunction -> . ID functionorlist
    (123) constants -> . INTCONST add_int_constant_to_dict
    (124) constants -> . FLOATCONST add_float_constant_to_dict
    (125) constants -> . STRINGCONST add_string_constant_to_dict
    (126) constants -> . booleanconst
    (127) booleanconst -> . TRUE add_bool_constant_to_dict
    (128) booleanconst -> . FALSE add_bool_constant_to_dict

    O_PARENTHESIS   shift and go to state 83
    ID              shift and go to state 90
    INTCONST        shift and go to state 88
    FLOATCONST      shift and go to state 82
    STRINGCONST     shift and go to state 85
    TRUE            shift and go to state 84
    FALSE           shift and go to state 93

    varconstfunction               shift and go to state 86
    exp                            shift and go to state 87
    expression2                    shift and go to state 89
    constants                      shift and go to state 91
    term                           shift and go to state 92
    varconst                       shift and go to state 94
    booleanconst                   shift and go to state 95
    expression                     shift and go to state 254
    fact                           shift and go to state 97

state 249

    (32) functionreturn -> RETURN add_function_var_to_stack expression . SEMICOLON

    SEMICOLON       shift and go to state 255


state 250

    (138) functionwhileloop -> WHILE start_while O_PARENTHESIS . expression C_PARENTHESIS condition_while functionblock end_while
    (79) expression -> . expression2 expressionoptional
    (82) expression2 -> . exp expression2optional
    (95) exp -> . term exp_quadruple exploop
    (101) term -> . fact term_quadruple termloop
    (108) fact -> . varconst
    (109) fact -> . O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis
    (116) varconst -> . varconstfunction
    (117) varconst -> . constants
    (118) varconstfunction -> . ID functionorlist
    (123) constants -> . INTCONST add_int_constant_to_dict
    (124) constants -> . FLOATCONST add_float_constant_to_dict
    (125) constants -> . STRINGCONST add_string_constant_to_dict
    (126) constants -> . booleanconst
    (127) booleanconst -> . TRUE add_bool_constant_to_dict
    (128) booleanconst -> . FALSE add_bool_constant_to_dict

    O_PARENTHESIS   shift and go to state 83
    ID              shift and go to state 90
    INTCONST        shift and go to state 88
    FLOATCONST      shift and go to state 82
    STRINGCONST     shift and go to state 85
    TRUE            shift and go to state 84
    FALSE           shift and go to state 93

    varconstfunction               shift and go to state 86
    exp                            shift and go to state 87
    expression2                    shift and go to state 89
    constants                      shift and go to state 91
    term                           shift and go to state 92
    varconst                       shift and go to state 94
    booleanconst                   shift and go to state 95
    expression                     shift and go to state 256
    fact                           shift and go to state 97

state 251

    (71) functioncondition -> IF O_PARENTHESIS expression . C_PARENTHESIS start_condition functionblock functionelse end_condition

    C_PARENTHESIS   shift and go to state 257


state 252

    (151) parametersinputloop -> COMMA expression push_type_to_function_options generate_parameter_quadruple . parametersinputloop
    (151) parametersinputloop -> . COMMA expression push_type_to_function_options generate_parameter_quadruple parametersinputloop
    (152) parametersinputloop -> .

    COMMA           shift and go to state 210
    C_PARENTHESIS   reduce using rule 152 (parametersinputloop -> .)

    parametersinputloop            shift and go to state 258

state 253

    (143) functiontimesloop -> TIMES O_PARENTHESIS expression C_PARENTHESIS . start_times functionblock end_times
    (144) start_times -> .

    O_BRACKET       reduce using rule 144 (start_times -> .)

    start_times                    shift and go to state 259

state 254

    (31) functionreturn -> RETURN add_function_var_to_stack O_BRACKET expression . C_BRACKET SEMICOLON

    C_BRACKET       shift and go to state 260


state 255

    (32) functionreturn -> RETURN add_function_var_to_stack expression SEMICOLON .

    C_BRACKET       reduce using rule 32 (functionreturn -> RETURN add_function_var_to_stack expression SEMICOLON .)


state 256

    (138) functionwhileloop -> WHILE start_while O_PARENTHESIS expression . C_PARENTHESIS condition_while functionblock end_while

    C_PARENTHESIS   shift and go to state 261


state 257

    (71) functioncondition -> IF O_PARENTHESIS expression C_PARENTHESIS . start_condition functionblock functionelse end_condition
    (76) start_condition -> .

    O_BRACKET       reduce using rule 76 (start_condition -> .)

    start_condition                shift and go to state 262

state 258

    (151) parametersinputloop -> COMMA expression push_type_to_function_options generate_parameter_quadruple parametersinputloop .

    C_PARENTHESIS   reduce using rule 151 (parametersinputloop -> COMMA expression push_type_to_function_options generate_parameter_quadruple parametersinputloop .)


state 259

    (143) functiontimesloop -> TIMES O_PARENTHESIS expression C_PARENTHESIS start_times . functionblock end_times
    (30) functionblock -> . O_BRACKET functionstatutesloop C_BRACKET

    O_BRACKET       shift and go to state 200

    functionblock                  shift and go to state 263

state 260

    (31) functionreturn -> RETURN add_function_var_to_stack O_BRACKET expression C_BRACKET . SEMICOLON

    SEMICOLON       shift and go to state 264


state 261

    (138) functionwhileloop -> WHILE start_while O_PARENTHESIS expression C_PARENTHESIS . condition_while functionblock end_while
    (140) condition_while -> .

    O_BRACKET       reduce using rule 140 (condition_while -> .)

    condition_while                shift and go to state 265

state 262

    (71) functioncondition -> IF O_PARENTHESIS expression C_PARENTHESIS start_condition . functionblock functionelse end_condition
    (30) functionblock -> . O_BRACKET functionstatutesloop C_BRACKET

    O_BRACKET       shift and go to state 200

    functionblock                  shift and go to state 266

state 263

    (143) functiontimesloop -> TIMES O_PARENTHESIS expression C_PARENTHESIS start_times functionblock . end_times
    (145) end_times -> .

    RETURN          reduce using rule 145 (end_times -> .)
    IF              reduce using rule 145 (end_times -> .)
    PRINT           reduce using rule 145 (end_times -> .)
    ID              reduce using rule 145 (end_times -> .)
    LIST            reduce using rule 145 (end_times -> .)
    WHILE           reduce using rule 145 (end_times -> .)
    TIMES           reduce using rule 145 (end_times -> .)
    BOOL            reduce using rule 145 (end_times -> .)
    INT             reduce using rule 145 (end_times -> .)
    FLOAT           reduce using rule 145 (end_times -> .)
    STRING          reduce using rule 145 (end_times -> .)
    C_BRACKET       reduce using rule 145 (end_times -> .)

    end_times                      shift and go to state 267

state 264

    (31) functionreturn -> RETURN add_function_var_to_stack O_BRACKET expression C_BRACKET SEMICOLON .

    C_BRACKET       reduce using rule 31 (functionreturn -> RETURN add_function_var_to_stack O_BRACKET expression C_BRACKET SEMICOLON .)


state 265

    (138) functionwhileloop -> WHILE start_while O_PARENTHESIS expression C_PARENTHESIS condition_while . functionblock end_while
    (30) functionblock -> . O_BRACKET functionstatutesloop C_BRACKET

    O_BRACKET       shift and go to state 200

    functionblock                  shift and go to state 268

state 266

    (71) functioncondition -> IF O_PARENTHESIS expression C_PARENTHESIS start_condition functionblock . functionelse end_condition
    (74) functionelse -> . ELSE else_condition functionblock
    (75) functionelse -> .

    ELSE            shift and go to state 270
    RETURN          reduce using rule 75 (functionelse -> .)
    IF              reduce using rule 75 (functionelse -> .)
    PRINT           reduce using rule 75 (functionelse -> .)
    ID              reduce using rule 75 (functionelse -> .)
    LIST            reduce using rule 75 (functionelse -> .)
    WHILE           reduce using rule 75 (functionelse -> .)
    TIMES           reduce using rule 75 (functionelse -> .)
    BOOL            reduce using rule 75 (functionelse -> .)
    INT             reduce using rule 75 (functionelse -> .)
    FLOAT           reduce using rule 75 (functionelse -> .)
    STRING          reduce using rule 75 (functionelse -> .)
    C_BRACKET       reduce using rule 75 (functionelse -> .)

    functionelse                   shift and go to state 269

state 267

    (143) functiontimesloop -> TIMES O_PARENTHESIS expression C_PARENTHESIS start_times functionblock end_times .

    RETURN          reduce using rule 143 (functiontimesloop -> TIMES O_PARENTHESIS expression C_PARENTHESIS start_times functionblock end_times .)
    IF              reduce using rule 143 (functiontimesloop -> TIMES O_PARENTHESIS expression C_PARENTHESIS start_times functionblock end_times .)
    PRINT           reduce using rule 143 (functiontimesloop -> TIMES O_PARENTHESIS expression C_PARENTHESIS start_times functionblock end_times .)
    ID              reduce using rule 143 (functiontimesloop -> TIMES O_PARENTHESIS expression C_PARENTHESIS start_times functionblock end_times .)
    LIST            reduce using rule 143 (functiontimesloop -> TIMES O_PARENTHESIS expression C_PARENTHESIS start_times functionblock end_times .)
    WHILE           reduce using rule 143 (functiontimesloop -> TIMES O_PARENTHESIS expression C_PARENTHESIS start_times functionblock end_times .)
    TIMES           reduce using rule 143 (functiontimesloop -> TIMES O_PARENTHESIS expression C_PARENTHESIS start_times functionblock end_times .)
    BOOL            reduce using rule 143 (functiontimesloop -> TIMES O_PARENTHESIS expression C_PARENTHESIS start_times functionblock end_times .)
    INT             reduce using rule 143 (functiontimesloop -> TIMES O_PARENTHESIS expression C_PARENTHESIS start_times functionblock end_times .)
    FLOAT           reduce using rule 143 (functiontimesloop -> TIMES O_PARENTHESIS expression C_PARENTHESIS start_times functionblock end_times .)
    STRING          reduce using rule 143 (functiontimesloop -> TIMES O_PARENTHESIS expression C_PARENTHESIS start_times functionblock end_times .)
    C_BRACKET       reduce using rule 143 (functiontimesloop -> TIMES O_PARENTHESIS expression C_PARENTHESIS start_times functionblock end_times .)


state 268

    (138) functionwhileloop -> WHILE start_while O_PARENTHESIS expression C_PARENTHESIS condition_while functionblock . end_while
    (141) end_while -> .

    RETURN          reduce using rule 141 (end_while -> .)
    IF              reduce using rule 141 (end_while -> .)
    PRINT           reduce using rule 141 (end_while -> .)
    ID              reduce using rule 141 (end_while -> .)
    LIST            reduce using rule 141 (end_while -> .)
    WHILE           reduce using rule 141 (end_while -> .)
    TIMES           reduce using rule 141 (end_while -> .)
    BOOL            reduce using rule 141 (end_while -> .)
    INT             reduce using rule 141 (end_while -> .)
    FLOAT           reduce using rule 141 (end_while -> .)
    STRING          reduce using rule 141 (end_while -> .)
    C_BRACKET       reduce using rule 141 (end_while -> .)

    end_while                      shift and go to state 271

state 269

    (71) functioncondition -> IF O_PARENTHESIS expression C_PARENTHESIS start_condition functionblock functionelse . end_condition
    (78) end_condition -> .

    RETURN          reduce using rule 78 (end_condition -> .)
    IF              reduce using rule 78 (end_condition -> .)
    PRINT           reduce using rule 78 (end_condition -> .)
    ID              reduce using rule 78 (end_condition -> .)
    LIST            reduce using rule 78 (end_condition -> .)
    WHILE           reduce using rule 78 (end_condition -> .)
    TIMES           reduce using rule 78 (end_condition -> .)
    BOOL            reduce using rule 78 (end_condition -> .)
    INT             reduce using rule 78 (end_condition -> .)
    FLOAT           reduce using rule 78 (end_condition -> .)
    STRING          reduce using rule 78 (end_condition -> .)
    C_BRACKET       reduce using rule 78 (end_condition -> .)

    end_condition                  shift and go to state 272

state 270

    (74) functionelse -> ELSE . else_condition functionblock
    (77) else_condition -> .

    O_BRACKET       reduce using rule 77 (else_condition -> .)

    else_condition                 shift and go to state 273

state 271

    (138) functionwhileloop -> WHILE start_while O_PARENTHESIS expression C_PARENTHESIS condition_while functionblock end_while .

    RETURN          reduce using rule 138 (functionwhileloop -> WHILE start_while O_PARENTHESIS expression C_PARENTHESIS condition_while functionblock end_while .)
    IF              reduce using rule 138 (functionwhileloop -> WHILE start_while O_PARENTHESIS expression C_PARENTHESIS condition_while functionblock end_while .)
    PRINT           reduce using rule 138 (functionwhileloop -> WHILE start_while O_PARENTHESIS expression C_PARENTHESIS condition_while functionblock end_while .)
    ID              reduce using rule 138 (functionwhileloop -> WHILE start_while O_PARENTHESIS expression C_PARENTHESIS condition_while functionblock end_while .)
    LIST            reduce using rule 138 (functionwhileloop -> WHILE start_while O_PARENTHESIS expression C_PARENTHESIS condition_while functionblock end_while .)
    WHILE           reduce using rule 138 (functionwhileloop -> WHILE start_while O_PARENTHESIS expression C_PARENTHESIS condition_while functionblock end_while .)
    TIMES           reduce using rule 138 (functionwhileloop -> WHILE start_while O_PARENTHESIS expression C_PARENTHESIS condition_while functionblock end_while .)
    BOOL            reduce using rule 138 (functionwhileloop -> WHILE start_while O_PARENTHESIS expression C_PARENTHESIS condition_while functionblock end_while .)
    INT             reduce using rule 138 (functionwhileloop -> WHILE start_while O_PARENTHESIS expression C_PARENTHESIS condition_while functionblock end_while .)
    FLOAT           reduce using rule 138 (functionwhileloop -> WHILE start_while O_PARENTHESIS expression C_PARENTHESIS condition_while functionblock end_while .)
    STRING          reduce using rule 138 (functionwhileloop -> WHILE start_while O_PARENTHESIS expression C_PARENTHESIS condition_while functionblock end_while .)
    C_BRACKET       reduce using rule 138 (functionwhileloop -> WHILE start_while O_PARENTHESIS expression C_PARENTHESIS condition_while functionblock end_while .)


state 272

    (71) functioncondition -> IF O_PARENTHESIS expression C_PARENTHESIS start_condition functionblock functionelse end_condition .

    RETURN          reduce using rule 71 (functioncondition -> IF O_PARENTHESIS expression C_PARENTHESIS start_condition functionblock functionelse end_condition .)
    IF              reduce using rule 71 (functioncondition -> IF O_PARENTHESIS expression C_PARENTHESIS start_condition functionblock functionelse end_condition .)
    PRINT           reduce using rule 71 (functioncondition -> IF O_PARENTHESIS expression C_PARENTHESIS start_condition functionblock functionelse end_condition .)
    ID              reduce using rule 71 (functioncondition -> IF O_PARENTHESIS expression C_PARENTHESIS start_condition functionblock functionelse end_condition .)
    LIST            reduce using rule 71 (functioncondition -> IF O_PARENTHESIS expression C_PARENTHESIS start_condition functionblock functionelse end_condition .)
    WHILE           reduce using rule 71 (functioncondition -> IF O_PARENTHESIS expression C_PARENTHESIS start_condition functionblock functionelse end_condition .)
    TIMES           reduce using rule 71 (functioncondition -> IF O_PARENTHESIS expression C_PARENTHESIS start_condition functionblock functionelse end_condition .)
    BOOL            reduce using rule 71 (functioncondition -> IF O_PARENTHESIS expression C_PARENTHESIS start_condition functionblock functionelse end_condition .)
    INT             reduce using rule 71 (functioncondition -> IF O_PARENTHESIS expression C_PARENTHESIS start_condition functionblock functionelse end_condition .)
    FLOAT           reduce using rule 71 (functioncondition -> IF O_PARENTHESIS expression C_PARENTHESIS start_condition functionblock functionelse end_condition .)
    STRING          reduce using rule 71 (functioncondition -> IF O_PARENTHESIS expression C_PARENTHESIS start_condition functionblock functionelse end_condition .)
    C_BRACKET       reduce using rule 71 (functioncondition -> IF O_PARENTHESIS expression C_PARENTHESIS start_condition functionblock functionelse end_condition .)


state 273

    (74) functionelse -> ELSE else_condition . functionblock
    (30) functionblock -> . O_BRACKET functionstatutesloop C_BRACKET

    O_BRACKET       shift and go to state 200

    functionblock                  shift and go to state 274

state 274

    (74) functionelse -> ELSE else_condition functionblock .

    RETURN          reduce using rule 74 (functionelse -> ELSE else_condition functionblock .)
    IF              reduce using rule 74 (functionelse -> ELSE else_condition functionblock .)
    PRINT           reduce using rule 74 (functionelse -> ELSE else_condition functionblock .)
    ID              reduce using rule 74 (functionelse -> ELSE else_condition functionblock .)
    LIST            reduce using rule 74 (functionelse -> ELSE else_condition functionblock .)
    WHILE           reduce using rule 74 (functionelse -> ELSE else_condition functionblock .)
    TIMES           reduce using rule 74 (functionelse -> ELSE else_condition functionblock .)
    BOOL            reduce using rule 74 (functionelse -> ELSE else_condition functionblock .)
    INT             reduce using rule 74 (functionelse -> ELSE else_condition functionblock .)
    FLOAT           reduce using rule 74 (functionelse -> ELSE else_condition functionblock .)
    STRING          reduce using rule 74 (functionelse -> ELSE else_condition functionblock .)
    C_BRACKET       reduce using rule 74 (functionelse -> ELSE else_condition functionblock .)

