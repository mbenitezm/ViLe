Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> main functionloop
Rule 2     main -> MAIN block
Rule 3     functionloop -> function functionloop
Rule 4     functionloop -> <empty>
Rule 5     function -> FUNCTION functiontype ID O_PARENTHESIS parameters C_PARENTHESIS block
Rule 6     functiontype -> VOID
Rule 7     functiontype -> BOOL
Rule 8     functiontype -> INT
Rule 9     functiontype -> FLOAT
Rule 10    functiontype -> STRING
Rule 11    type -> BOOL
Rule 12    type -> INT
Rule 13    type -> FLOAT
Rule 14    type -> STRING
Rule 15    parametertype -> BOOL
Rule 16    parametertype -> INT
Rule 17    parametertype -> FLOAT
Rule 18    parametertype -> STRING
Rule 19    block -> O_BRACKET statutesloop functionreturn C_BRACKET
Rule 20    functionreturn -> RETURN expression SEMICOLON
Rule 21    functionreturn -> <empty>
Rule 22    statutesloop -> statute statutesloop
Rule 23    statutesloop -> <empty>
Rule 24    statute -> init
Rule 25    statute -> condition
Rule 26    statute -> writting
Rule 27    statute -> loop
Rule 28    statute -> assignation
Rule 29    statute -> functioncall
Rule 30    assignation -> var_assign EQUALS add_equals expression equals_quadruple SEMICOLON
Rule 31    writting -> PRINT O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON
Rule 32    start_printing -> <empty>
Rule 33    print_quadruple -> <empty>
Rule 34    writtingloop -> start_printing expression print_quadruple optionalwritting
Rule 35    optionalwritting -> COMMA writtingloop
Rule 36    optionalwritting -> <empty>
Rule 37    init -> listinit
Rule 38    init -> normalinit
Rule 39    normalinit -> type var EQUALS add_equals expression equals_quadruple SEMICOLON
Rule 40    equals_quadruple -> <empty>
Rule 41    add_equals -> <empty>
Rule 42    listinit -> LIST type var EQUALS list SEMICOLON
Rule 43    list -> O_S_BRACKET listelements C_S_BRACKET
Rule 44    listelements -> constants optionalconstants
Rule 45    listelements -> <empty>
Rule 46    optionalconstants -> COMMA constants optionalconstants
Rule 47    optionalconstants -> <empty>
Rule 48    condition -> IF O_PARENTHESIS expression C_PARENTHESIS block else
Rule 49    else -> ELSE block
Rule 50    else -> <empty>
Rule 51    expression -> expression2 expressionoptional
Rule 52    expressionoptional -> logicop expression2 logic_op_quadruple
Rule 53    expressionoptional -> <empty>
Rule 54    expression2 -> exp expression2optional
Rule 55    expression2optional -> relop exp relop_quadruple
Rule 56    expression2optional -> <empty>
Rule 57    logicop -> AND
Rule 58    logicop -> OR
Rule 59    logic_op_quadruple -> <empty>
Rule 60    relop -> EQUALITY
Rule 61    relop -> GREATER
Rule 62    relop -> GREATER_EQUAL
Rule 63    relop -> LESS
Rule 64    relop -> LESS_EQUAL
Rule 65    relop -> DIFFERENT
Rule 66    relop_quadruple -> <empty>
Rule 67    exp -> term exp_quadruple exploop
Rule 68    exp_quadruple -> <empty>
Rule 69    exploop -> addsub exp
Rule 70    exploop -> <empty>
Rule 71    addsub -> SUM
Rule 72    addsub -> MINUS
Rule 73    term -> fact term_quadruple termloop
Rule 74    term_quadruple -> <empty>
Rule 75    termloop -> divmult term
Rule 76    termloop -> <empty>
Rule 77    divmult -> MULTIPLY
Rule 78    divmult -> DIVIDE
Rule 79    divmult -> MOD
Rule 80    fact -> varconst
Rule 81    fact -> O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis
Rule 82    add_o_parenthesis -> <empty>
Rule 83    add_c_parenthesis -> <empty>
Rule 84    var_assign -> ID listaccess
Rule 85    var -> ID listaccess
Rule 86    listaccess -> O_S_BRACKET INTCONST C_S_BRACKET
Rule 87    listaccess -> <empty>
Rule 88    varconst -> varconstfunction
Rule 89    varconst -> constants
Rule 90    varconstfunction -> ID functionorlist
Rule 91    add_to_stack -> <empty>
Rule 92    functionorlist -> O_S_BRACKET INTCONST C_S_BRACKET
Rule 93    functionorlist -> O_PARENTHESIS parametersinput C_PARENTHESIS
Rule 94    functionorlist -> add_to_stack
Rule 95    constants -> INTCONST add_int_constant_to_dict
Rule 96    constants -> FLOATCONST add_float_constant_to_dict
Rule 97    constants -> STRINGCONST add_string_constant_to_dict
Rule 98    constants -> booleanconst
Rule 99    booleanconst -> TRUE add_bool_constant_to_dict
Rule 100   booleanconst -> FALSE add_bool_constant_to_dict
Rule 101   add_int_constant_to_dict -> <empty>
Rule 102   add_float_constant_to_dict -> <empty>
Rule 103   add_string_constant_to_dict -> <empty>
Rule 104   add_bool_constant_to_dict -> <empty>
Rule 105   loop -> whileloop
Rule 106   loop -> timesloop
Rule 107   whileloop -> WHILE O_PARENTHESIS expression C_PARENTHESIS block
Rule 108   timesloop -> TIMES O_PARENTHESIS INTCONST C_PARENTHESIS block
Rule 109   functioncall -> ID O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON
Rule 110   parametersinput -> expression parametersinputloop
Rule 111   parametersinput -> <empty>
Rule 112   parametersinputloop -> COMMA expression parametersinputloop
Rule 113   parametersinputloop -> <empty>
Rule 114   parameters -> parameterinit parametersloop
Rule 115   parameters -> <empty>
Rule 116   parameterinit -> parametertype ID
Rule 117   parametersloop -> COMMA parameterinit parametersloop
Rule 118   parametersloop -> <empty>

Terminals, with rules where they appear

AND                  : 57
BOOL                 : 7 11 15
COMMA                : 35 46 112 117
C_BRACKET            : 19
C_PARENTHESIS        : 5 31 48 81 93 107 108 109
C_S_BRACKET          : 43 86 92
DIFFERENT            : 65
DIVIDE               : 78
ELSE                 : 49
EQUALITY             : 60
EQUALS               : 30 39 42
FALSE                : 100
FLOAT                : 9 13 17
FLOATCONST           : 96
FUNCTION             : 5
GREATER              : 61
GREATER_EQUAL        : 62
ID                   : 5 84 85 90 109 116
IF                   : 48
INT                  : 8 12 16
INTCONST             : 86 92 95 108
LESS                 : 63
LESS_EQUAL           : 64
LIST                 : 42
MAIN                 : 2
MINUS                : 72
MOD                  : 79
MULTIPLY             : 77
OR                   : 58
O_BRACKET            : 19
O_PARENTHESIS        : 5 31 48 81 93 107 108 109
O_S_BRACKET          : 43 86 92
PRINT                : 31
RETURN               : 20
SEMICOLON            : 20 30 31 39 42 109
STRING               : 10 14 18
STRINGCONST          : 97
SUM                  : 71
TIMES                : 108
TRUE                 : 99
VOID                 : 6
WHILE                : 107
error                : 

Nonterminals, with rules where they appear

add_bool_constant_to_dict : 99 100
add_c_parenthesis    : 81
add_equals           : 30 39
add_float_constant_to_dict : 96
add_int_constant_to_dict : 95
add_o_parenthesis    : 81
add_string_constant_to_dict : 97
add_to_stack         : 94
addsub               : 69
assignation          : 28
block                : 2 5 48 49 107 108
booleanconst         : 98
condition            : 25
constants            : 44 46 89
divmult              : 75
else                 : 48
equals_quadruple     : 30 39
exp                  : 54 55 69
exp_quadruple        : 67
exploop              : 67
expression           : 20 30 34 39 48 81 107 110 112
expression2          : 51 52
expression2optional  : 54
expressionoptional   : 51
fact                 : 73
function             : 3
functioncall         : 29
functionloop         : 1 3
functionorlist       : 90
functionreturn       : 19
functiontype         : 5
init                 : 24
list                 : 42
listaccess           : 84 85
listelements         : 43
listinit             : 37
logic_op_quadruple   : 52
logicop              : 52
loop                 : 27
main                 : 1
normalinit           : 38
optionalconstants    : 44 46
optionalwritting     : 34
parameterinit        : 114 117
parameters           : 5
parametersinput      : 93 109
parametersinputloop  : 110 112
parametersloop       : 114 117
parametertype        : 116
print_quadruple      : 34
program              : 0
relop                : 55
relop_quadruple      : 55
start_printing       : 34
statute              : 22
statutesloop         : 19 22
term                 : 67 75
term_quadruple       : 73
termloop             : 73
timesloop            : 106
type                 : 39 42
var                  : 39 42
var_assign           : 30
varconst             : 80
varconstfunction     : 88
whileloop            : 105
writting             : 26
writtingloop         : 31 35

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . main functionloop
    (2) main -> . MAIN block

    MAIN            shift and go to state 3

    main                           shift and go to state 1
    program                        shift and go to state 2

state 1

    (1) program -> main . functionloop
    (3) functionloop -> . function functionloop
    (4) functionloop -> .
    (5) function -> . FUNCTION functiontype ID O_PARENTHESIS parameters C_PARENTHESIS block

    $end            reduce using rule 4 (functionloop -> .)
    FUNCTION        shift and go to state 5

    function                       shift and go to state 4
    functionloop                   shift and go to state 6

state 2

    (0) S' -> program .



state 3

    (2) main -> MAIN . block
    (19) block -> . O_BRACKET statutesloop functionreturn C_BRACKET

    O_BRACKET       shift and go to state 7

    block                          shift and go to state 8

state 4

    (3) functionloop -> function . functionloop
    (3) functionloop -> . function functionloop
    (4) functionloop -> .
    (5) function -> . FUNCTION functiontype ID O_PARENTHESIS parameters C_PARENTHESIS block

    $end            reduce using rule 4 (functionloop -> .)
    FUNCTION        shift and go to state 5

    function                       shift and go to state 4
    functionloop                   shift and go to state 9

state 5

    (5) function -> FUNCTION . functiontype ID O_PARENTHESIS parameters C_PARENTHESIS block
    (6) functiontype -> . VOID
    (7) functiontype -> . BOOL
    (8) functiontype -> . INT
    (9) functiontype -> . FLOAT
    (10) functiontype -> . STRING

    VOID            shift and go to state 12
    BOOL            shift and go to state 14
    INT             shift and go to state 11
    FLOAT           shift and go to state 13
    STRING          shift and go to state 10

    functiontype                   shift and go to state 15

state 6

    (1) program -> main functionloop .

    $end            reduce using rule 1 (program -> main functionloop .)


state 7

    (19) block -> O_BRACKET . statutesloop functionreturn C_BRACKET
    (22) statutesloop -> . statute statutesloop
    (23) statutesloop -> .
    (24) statute -> . init
    (25) statute -> . condition
    (26) statute -> . writting
    (27) statute -> . loop
    (28) statute -> . assignation
    (29) statute -> . functioncall
    (37) init -> . listinit
    (38) init -> . normalinit
    (48) condition -> . IF O_PARENTHESIS expression C_PARENTHESIS block else
    (31) writting -> . PRINT O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON
    (105) loop -> . whileloop
    (106) loop -> . timesloop
    (30) assignation -> . var_assign EQUALS add_equals expression equals_quadruple SEMICOLON
    (109) functioncall -> . ID O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON
    (42) listinit -> . LIST type var EQUALS list SEMICOLON
    (39) normalinit -> . type var EQUALS add_equals expression equals_quadruple SEMICOLON
    (107) whileloop -> . WHILE O_PARENTHESIS expression C_PARENTHESIS block
    (108) timesloop -> . TIMES O_PARENTHESIS INTCONST C_PARENTHESIS block
    (84) var_assign -> . ID listaccess
    (11) type -> . BOOL
    (12) type -> . INT
    (13) type -> . FLOAT
    (14) type -> . STRING

    RETURN          reduce using rule 23 (statutesloop -> .)
    C_BRACKET       reduce using rule 23 (statutesloop -> .)
    IF              shift and go to state 31
    PRINT           shift and go to state 18
    ID              shift and go to state 29
    LIST            shift and go to state 37
    WHILE           shift and go to state 17
    TIMES           shift and go to state 16
    BOOL            shift and go to state 21
    INT             shift and go to state 35
    FLOAT           shift and go to state 36
    STRING          shift and go to state 25

    whileloop                      shift and go to state 19
    init                           shift and go to state 20
    var_assign                     shift and go to state 22
    type                           shift and go to state 23
    normalinit                     shift and go to state 24
    listinit                       shift and go to state 26
    writting                       shift and go to state 27
    timesloop                      shift and go to state 28
    condition                      shift and go to state 30
    statute                        shift and go to state 32
    assignation                    shift and go to state 33
    statutesloop                   shift and go to state 34
    functioncall                   shift and go to state 38
    loop                           shift and go to state 39

state 8

    (2) main -> MAIN block .

    FUNCTION        reduce using rule 2 (main -> MAIN block .)
    $end            reduce using rule 2 (main -> MAIN block .)


state 9

    (3) functionloop -> function functionloop .

    $end            reduce using rule 3 (functionloop -> function functionloop .)


state 10

    (10) functiontype -> STRING .

    ID              reduce using rule 10 (functiontype -> STRING .)


state 11

    (8) functiontype -> INT .

    ID              reduce using rule 8 (functiontype -> INT .)


state 12

    (6) functiontype -> VOID .

    ID              reduce using rule 6 (functiontype -> VOID .)


state 13

    (9) functiontype -> FLOAT .

    ID              reduce using rule 9 (functiontype -> FLOAT .)


state 14

    (7) functiontype -> BOOL .

    ID              reduce using rule 7 (functiontype -> BOOL .)


state 15

    (5) function -> FUNCTION functiontype . ID O_PARENTHESIS parameters C_PARENTHESIS block

    ID              shift and go to state 40


state 16

    (108) timesloop -> TIMES . O_PARENTHESIS INTCONST C_PARENTHESIS block

    O_PARENTHESIS   shift and go to state 41


state 17

    (107) whileloop -> WHILE . O_PARENTHESIS expression C_PARENTHESIS block

    O_PARENTHESIS   shift and go to state 42


state 18

    (31) writting -> PRINT . O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON

    O_PARENTHESIS   shift and go to state 43


state 19

    (105) loop -> whileloop .

    IF              reduce using rule 105 (loop -> whileloop .)
    PRINT           reduce using rule 105 (loop -> whileloop .)
    ID              reduce using rule 105 (loop -> whileloop .)
    LIST            reduce using rule 105 (loop -> whileloop .)
    WHILE           reduce using rule 105 (loop -> whileloop .)
    TIMES           reduce using rule 105 (loop -> whileloop .)
    BOOL            reduce using rule 105 (loop -> whileloop .)
    INT             reduce using rule 105 (loop -> whileloop .)
    FLOAT           reduce using rule 105 (loop -> whileloop .)
    STRING          reduce using rule 105 (loop -> whileloop .)
    RETURN          reduce using rule 105 (loop -> whileloop .)
    C_BRACKET       reduce using rule 105 (loop -> whileloop .)


state 20

    (24) statute -> init .

    IF              reduce using rule 24 (statute -> init .)
    PRINT           reduce using rule 24 (statute -> init .)
    ID              reduce using rule 24 (statute -> init .)
    LIST            reduce using rule 24 (statute -> init .)
    WHILE           reduce using rule 24 (statute -> init .)
    TIMES           reduce using rule 24 (statute -> init .)
    BOOL            reduce using rule 24 (statute -> init .)
    INT             reduce using rule 24 (statute -> init .)
    FLOAT           reduce using rule 24 (statute -> init .)
    STRING          reduce using rule 24 (statute -> init .)
    RETURN          reduce using rule 24 (statute -> init .)
    C_BRACKET       reduce using rule 24 (statute -> init .)


state 21

    (11) type -> BOOL .

    ID              reduce using rule 11 (type -> BOOL .)


state 22

    (30) assignation -> var_assign . EQUALS add_equals expression equals_quadruple SEMICOLON

    EQUALS          shift and go to state 44


state 23

    (39) normalinit -> type . var EQUALS add_equals expression equals_quadruple SEMICOLON
    (85) var -> . ID listaccess

    ID              shift and go to state 46

    var                            shift and go to state 45

state 24

    (38) init -> normalinit .

    IF              reduce using rule 38 (init -> normalinit .)
    PRINT           reduce using rule 38 (init -> normalinit .)
    ID              reduce using rule 38 (init -> normalinit .)
    LIST            reduce using rule 38 (init -> normalinit .)
    WHILE           reduce using rule 38 (init -> normalinit .)
    TIMES           reduce using rule 38 (init -> normalinit .)
    BOOL            reduce using rule 38 (init -> normalinit .)
    INT             reduce using rule 38 (init -> normalinit .)
    FLOAT           reduce using rule 38 (init -> normalinit .)
    STRING          reduce using rule 38 (init -> normalinit .)
    RETURN          reduce using rule 38 (init -> normalinit .)
    C_BRACKET       reduce using rule 38 (init -> normalinit .)


state 25

    (14) type -> STRING .

    ID              reduce using rule 14 (type -> STRING .)


state 26

    (37) init -> listinit .

    IF              reduce using rule 37 (init -> listinit .)
    PRINT           reduce using rule 37 (init -> listinit .)
    ID              reduce using rule 37 (init -> listinit .)
    LIST            reduce using rule 37 (init -> listinit .)
    WHILE           reduce using rule 37 (init -> listinit .)
    TIMES           reduce using rule 37 (init -> listinit .)
    BOOL            reduce using rule 37 (init -> listinit .)
    INT             reduce using rule 37 (init -> listinit .)
    FLOAT           reduce using rule 37 (init -> listinit .)
    STRING          reduce using rule 37 (init -> listinit .)
    RETURN          reduce using rule 37 (init -> listinit .)
    C_BRACKET       reduce using rule 37 (init -> listinit .)


state 27

    (26) statute -> writting .

    IF              reduce using rule 26 (statute -> writting .)
    PRINT           reduce using rule 26 (statute -> writting .)
    ID              reduce using rule 26 (statute -> writting .)
    LIST            reduce using rule 26 (statute -> writting .)
    WHILE           reduce using rule 26 (statute -> writting .)
    TIMES           reduce using rule 26 (statute -> writting .)
    BOOL            reduce using rule 26 (statute -> writting .)
    INT             reduce using rule 26 (statute -> writting .)
    FLOAT           reduce using rule 26 (statute -> writting .)
    STRING          reduce using rule 26 (statute -> writting .)
    RETURN          reduce using rule 26 (statute -> writting .)
    C_BRACKET       reduce using rule 26 (statute -> writting .)


state 28

    (106) loop -> timesloop .

    IF              reduce using rule 106 (loop -> timesloop .)
    PRINT           reduce using rule 106 (loop -> timesloop .)
    ID              reduce using rule 106 (loop -> timesloop .)
    LIST            reduce using rule 106 (loop -> timesloop .)
    WHILE           reduce using rule 106 (loop -> timesloop .)
    TIMES           reduce using rule 106 (loop -> timesloop .)
    BOOL            reduce using rule 106 (loop -> timesloop .)
    INT             reduce using rule 106 (loop -> timesloop .)
    FLOAT           reduce using rule 106 (loop -> timesloop .)
    STRING          reduce using rule 106 (loop -> timesloop .)
    RETURN          reduce using rule 106 (loop -> timesloop .)
    C_BRACKET       reduce using rule 106 (loop -> timesloop .)


state 29

    (109) functioncall -> ID . O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON
    (84) var_assign -> ID . listaccess
    (86) listaccess -> . O_S_BRACKET INTCONST C_S_BRACKET
    (87) listaccess -> .

    O_PARENTHESIS   shift and go to state 49
    O_S_BRACKET     shift and go to state 47
    EQUALS          reduce using rule 87 (listaccess -> .)

    listaccess                     shift and go to state 48

state 30

    (25) statute -> condition .

    IF              reduce using rule 25 (statute -> condition .)
    PRINT           reduce using rule 25 (statute -> condition .)
    ID              reduce using rule 25 (statute -> condition .)
    LIST            reduce using rule 25 (statute -> condition .)
    WHILE           reduce using rule 25 (statute -> condition .)
    TIMES           reduce using rule 25 (statute -> condition .)
    BOOL            reduce using rule 25 (statute -> condition .)
    INT             reduce using rule 25 (statute -> condition .)
    FLOAT           reduce using rule 25 (statute -> condition .)
    STRING          reduce using rule 25 (statute -> condition .)
    RETURN          reduce using rule 25 (statute -> condition .)
    C_BRACKET       reduce using rule 25 (statute -> condition .)


state 31

    (48) condition -> IF . O_PARENTHESIS expression C_PARENTHESIS block else

    O_PARENTHESIS   shift and go to state 50


state 32

    (22) statutesloop -> statute . statutesloop
    (22) statutesloop -> . statute statutesloop
    (23) statutesloop -> .
    (24) statute -> . init
    (25) statute -> . condition
    (26) statute -> . writting
    (27) statute -> . loop
    (28) statute -> . assignation
    (29) statute -> . functioncall
    (37) init -> . listinit
    (38) init -> . normalinit
    (48) condition -> . IF O_PARENTHESIS expression C_PARENTHESIS block else
    (31) writting -> . PRINT O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON
    (105) loop -> . whileloop
    (106) loop -> . timesloop
    (30) assignation -> . var_assign EQUALS add_equals expression equals_quadruple SEMICOLON
    (109) functioncall -> . ID O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON
    (42) listinit -> . LIST type var EQUALS list SEMICOLON
    (39) normalinit -> . type var EQUALS add_equals expression equals_quadruple SEMICOLON
    (107) whileloop -> . WHILE O_PARENTHESIS expression C_PARENTHESIS block
    (108) timesloop -> . TIMES O_PARENTHESIS INTCONST C_PARENTHESIS block
    (84) var_assign -> . ID listaccess
    (11) type -> . BOOL
    (12) type -> . INT
    (13) type -> . FLOAT
    (14) type -> . STRING

    RETURN          reduce using rule 23 (statutesloop -> .)
    C_BRACKET       reduce using rule 23 (statutesloop -> .)
    IF              shift and go to state 31
    PRINT           shift and go to state 18
    ID              shift and go to state 29
    LIST            shift and go to state 37
    WHILE           shift and go to state 17
    TIMES           shift and go to state 16
    BOOL            shift and go to state 21
    INT             shift and go to state 35
    FLOAT           shift and go to state 36
    STRING          shift and go to state 25

    whileloop                      shift and go to state 19
    init                           shift and go to state 20
    var_assign                     shift and go to state 22
    type                           shift and go to state 23
    normalinit                     shift and go to state 24
    listinit                       shift and go to state 26
    writting                       shift and go to state 27
    timesloop                      shift and go to state 28
    condition                      shift and go to state 30
    statute                        shift and go to state 32
    assignation                    shift and go to state 33
    statutesloop                   shift and go to state 51
    functioncall                   shift and go to state 38
    loop                           shift and go to state 39

state 33

    (28) statute -> assignation .

    IF              reduce using rule 28 (statute -> assignation .)
    PRINT           reduce using rule 28 (statute -> assignation .)
    ID              reduce using rule 28 (statute -> assignation .)
    LIST            reduce using rule 28 (statute -> assignation .)
    WHILE           reduce using rule 28 (statute -> assignation .)
    TIMES           reduce using rule 28 (statute -> assignation .)
    BOOL            reduce using rule 28 (statute -> assignation .)
    INT             reduce using rule 28 (statute -> assignation .)
    FLOAT           reduce using rule 28 (statute -> assignation .)
    STRING          reduce using rule 28 (statute -> assignation .)
    RETURN          reduce using rule 28 (statute -> assignation .)
    C_BRACKET       reduce using rule 28 (statute -> assignation .)


state 34

    (19) block -> O_BRACKET statutesloop . functionreturn C_BRACKET
    (20) functionreturn -> . RETURN expression SEMICOLON
    (21) functionreturn -> .

    RETURN          shift and go to state 52
    C_BRACKET       reduce using rule 21 (functionreturn -> .)

    functionreturn                 shift and go to state 53

state 35

    (12) type -> INT .

    ID              reduce using rule 12 (type -> INT .)


state 36

    (13) type -> FLOAT .

    ID              reduce using rule 13 (type -> FLOAT .)


state 37

    (42) listinit -> LIST . type var EQUALS list SEMICOLON
    (11) type -> . BOOL
    (12) type -> . INT
    (13) type -> . FLOAT
    (14) type -> . STRING

    BOOL            shift and go to state 21
    INT             shift and go to state 35
    FLOAT           shift and go to state 36
    STRING          shift and go to state 25

    type                           shift and go to state 54

state 38

    (29) statute -> functioncall .

    IF              reduce using rule 29 (statute -> functioncall .)
    PRINT           reduce using rule 29 (statute -> functioncall .)
    ID              reduce using rule 29 (statute -> functioncall .)
    LIST            reduce using rule 29 (statute -> functioncall .)
    WHILE           reduce using rule 29 (statute -> functioncall .)
    TIMES           reduce using rule 29 (statute -> functioncall .)
    BOOL            reduce using rule 29 (statute -> functioncall .)
    INT             reduce using rule 29 (statute -> functioncall .)
    FLOAT           reduce using rule 29 (statute -> functioncall .)
    STRING          reduce using rule 29 (statute -> functioncall .)
    RETURN          reduce using rule 29 (statute -> functioncall .)
    C_BRACKET       reduce using rule 29 (statute -> functioncall .)


state 39

    (27) statute -> loop .

    IF              reduce using rule 27 (statute -> loop .)
    PRINT           reduce using rule 27 (statute -> loop .)
    ID              reduce using rule 27 (statute -> loop .)
    LIST            reduce using rule 27 (statute -> loop .)
    WHILE           reduce using rule 27 (statute -> loop .)
    TIMES           reduce using rule 27 (statute -> loop .)
    BOOL            reduce using rule 27 (statute -> loop .)
    INT             reduce using rule 27 (statute -> loop .)
    FLOAT           reduce using rule 27 (statute -> loop .)
    STRING          reduce using rule 27 (statute -> loop .)
    RETURN          reduce using rule 27 (statute -> loop .)
    C_BRACKET       reduce using rule 27 (statute -> loop .)


state 40

    (5) function -> FUNCTION functiontype ID . O_PARENTHESIS parameters C_PARENTHESIS block

    O_PARENTHESIS   shift and go to state 55


state 41

    (108) timesloop -> TIMES O_PARENTHESIS . INTCONST C_PARENTHESIS block

    INTCONST        shift and go to state 56


state 42

    (107) whileloop -> WHILE O_PARENTHESIS . expression C_PARENTHESIS block
    (51) expression -> . expression2 expressionoptional
    (54) expression2 -> . exp expression2optional
    (67) exp -> . term exp_quadruple exploop
    (73) term -> . fact term_quadruple termloop
    (80) fact -> . varconst
    (81) fact -> . O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis
    (88) varconst -> . varconstfunction
    (89) varconst -> . constants
    (90) varconstfunction -> . ID functionorlist
    (95) constants -> . INTCONST add_int_constant_to_dict
    (96) constants -> . FLOATCONST add_float_constant_to_dict
    (97) constants -> . STRINGCONST add_string_constant_to_dict
    (98) constants -> . booleanconst
    (99) booleanconst -> . TRUE add_bool_constant_to_dict
    (100) booleanconst -> . FALSE add_bool_constant_to_dict

    O_PARENTHESIS   shift and go to state 58
    ID              shift and go to state 65
    INTCONST        shift and go to state 63
    FLOATCONST      shift and go to state 57
    STRINGCONST     shift and go to state 60
    TRUE            shift and go to state 59
    FALSE           shift and go to state 68

    varconstfunction               shift and go to state 61
    exp                            shift and go to state 62
    expression2                    shift and go to state 64
    constants                      shift and go to state 66
    term                           shift and go to state 67
    varconst                       shift and go to state 69
    booleanconst                   shift and go to state 70
    expression                     shift and go to state 71
    fact                           shift and go to state 72

state 43

    (31) writting -> PRINT O_PARENTHESIS . writtingloop C_PARENTHESIS SEMICOLON
    (34) writtingloop -> . start_printing expression print_quadruple optionalwritting
    (32) start_printing -> .

    O_PARENTHESIS   reduce using rule 32 (start_printing -> .)
    ID              reduce using rule 32 (start_printing -> .)
    INTCONST        reduce using rule 32 (start_printing -> .)
    FLOATCONST      reduce using rule 32 (start_printing -> .)
    STRINGCONST     reduce using rule 32 (start_printing -> .)
    TRUE            reduce using rule 32 (start_printing -> .)
    FALSE           reduce using rule 32 (start_printing -> .)

    writtingloop                   shift and go to state 74
    start_printing                 shift and go to state 73

state 44

    (30) assignation -> var_assign EQUALS . add_equals expression equals_quadruple SEMICOLON
    (41) add_equals -> .

    O_PARENTHESIS   reduce using rule 41 (add_equals -> .)
    ID              reduce using rule 41 (add_equals -> .)
    INTCONST        reduce using rule 41 (add_equals -> .)
    FLOATCONST      reduce using rule 41 (add_equals -> .)
    STRINGCONST     reduce using rule 41 (add_equals -> .)
    TRUE            reduce using rule 41 (add_equals -> .)
    FALSE           reduce using rule 41 (add_equals -> .)

    add_equals                     shift and go to state 75

state 45

    (39) normalinit -> type var . EQUALS add_equals expression equals_quadruple SEMICOLON

    EQUALS          shift and go to state 76


state 46

    (85) var -> ID . listaccess
    (86) listaccess -> . O_S_BRACKET INTCONST C_S_BRACKET
    (87) listaccess -> .

    O_S_BRACKET     shift and go to state 47
    EQUALS          reduce using rule 87 (listaccess -> .)

    listaccess                     shift and go to state 77

state 47

    (86) listaccess -> O_S_BRACKET . INTCONST C_S_BRACKET

    INTCONST        shift and go to state 78


state 48

    (84) var_assign -> ID listaccess .

    EQUALS          reduce using rule 84 (var_assign -> ID listaccess .)


state 49

    (109) functioncall -> ID O_PARENTHESIS . parametersinput C_PARENTHESIS SEMICOLON
    (110) parametersinput -> . expression parametersinputloop
    (111) parametersinput -> .
    (51) expression -> . expression2 expressionoptional
    (54) expression2 -> . exp expression2optional
    (67) exp -> . term exp_quadruple exploop
    (73) term -> . fact term_quadruple termloop
    (80) fact -> . varconst
    (81) fact -> . O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis
    (88) varconst -> . varconstfunction
    (89) varconst -> . constants
    (90) varconstfunction -> . ID functionorlist
    (95) constants -> . INTCONST add_int_constant_to_dict
    (96) constants -> . FLOATCONST add_float_constant_to_dict
    (97) constants -> . STRINGCONST add_string_constant_to_dict
    (98) constants -> . booleanconst
    (99) booleanconst -> . TRUE add_bool_constant_to_dict
    (100) booleanconst -> . FALSE add_bool_constant_to_dict

    C_PARENTHESIS   reduce using rule 111 (parametersinput -> .)
    O_PARENTHESIS   shift and go to state 58
    ID              shift and go to state 65
    INTCONST        shift and go to state 63
    FLOATCONST      shift and go to state 57
    STRINGCONST     shift and go to state 60
    TRUE            shift and go to state 59
    FALSE           shift and go to state 68

    varconstfunction               shift and go to state 61
    exp                            shift and go to state 62
    parametersinput                shift and go to state 79
    expression2                    shift and go to state 64
    constants                      shift and go to state 66
    term                           shift and go to state 67
    varconst                       shift and go to state 69
    booleanconst                   shift and go to state 70
    expression                     shift and go to state 80
    fact                           shift and go to state 72

state 50

    (48) condition -> IF O_PARENTHESIS . expression C_PARENTHESIS block else
    (51) expression -> . expression2 expressionoptional
    (54) expression2 -> . exp expression2optional
    (67) exp -> . term exp_quadruple exploop
    (73) term -> . fact term_quadruple termloop
    (80) fact -> . varconst
    (81) fact -> . O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis
    (88) varconst -> . varconstfunction
    (89) varconst -> . constants
    (90) varconstfunction -> . ID functionorlist
    (95) constants -> . INTCONST add_int_constant_to_dict
    (96) constants -> . FLOATCONST add_float_constant_to_dict
    (97) constants -> . STRINGCONST add_string_constant_to_dict
    (98) constants -> . booleanconst
    (99) booleanconst -> . TRUE add_bool_constant_to_dict
    (100) booleanconst -> . FALSE add_bool_constant_to_dict

    O_PARENTHESIS   shift and go to state 58
    ID              shift and go to state 65
    INTCONST        shift and go to state 63
    FLOATCONST      shift and go to state 57
    STRINGCONST     shift and go to state 60
    TRUE            shift and go to state 59
    FALSE           shift and go to state 68

    varconstfunction               shift and go to state 61
    exp                            shift and go to state 62
    expression2                    shift and go to state 64
    constants                      shift and go to state 66
    term                           shift and go to state 67
    varconst                       shift and go to state 69
    booleanconst                   shift and go to state 70
    expression                     shift and go to state 81
    fact                           shift and go to state 72

state 51

    (22) statutesloop -> statute statutesloop .

    RETURN          reduce using rule 22 (statutesloop -> statute statutesloop .)
    C_BRACKET       reduce using rule 22 (statutesloop -> statute statutesloop .)


state 52

    (20) functionreturn -> RETURN . expression SEMICOLON
    (51) expression -> . expression2 expressionoptional
    (54) expression2 -> . exp expression2optional
    (67) exp -> . term exp_quadruple exploop
    (73) term -> . fact term_quadruple termloop
    (80) fact -> . varconst
    (81) fact -> . O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis
    (88) varconst -> . varconstfunction
    (89) varconst -> . constants
    (90) varconstfunction -> . ID functionorlist
    (95) constants -> . INTCONST add_int_constant_to_dict
    (96) constants -> . FLOATCONST add_float_constant_to_dict
    (97) constants -> . STRINGCONST add_string_constant_to_dict
    (98) constants -> . booleanconst
    (99) booleanconst -> . TRUE add_bool_constant_to_dict
    (100) booleanconst -> . FALSE add_bool_constant_to_dict

    O_PARENTHESIS   shift and go to state 58
    ID              shift and go to state 65
    INTCONST        shift and go to state 63
    FLOATCONST      shift and go to state 57
    STRINGCONST     shift and go to state 60
    TRUE            shift and go to state 59
    FALSE           shift and go to state 68

    varconstfunction               shift and go to state 61
    exp                            shift and go to state 62
    expression2                    shift and go to state 64
    constants                      shift and go to state 66
    term                           shift and go to state 67
    varconst                       shift and go to state 69
    booleanconst                   shift and go to state 70
    expression                     shift and go to state 82
    fact                           shift and go to state 72

state 53

    (19) block -> O_BRACKET statutesloop functionreturn . C_BRACKET

    C_BRACKET       shift and go to state 83


state 54

    (42) listinit -> LIST type . var EQUALS list SEMICOLON
    (85) var -> . ID listaccess

    ID              shift and go to state 46

    var                            shift and go to state 84

state 55

    (5) function -> FUNCTION functiontype ID O_PARENTHESIS . parameters C_PARENTHESIS block
    (114) parameters -> . parameterinit parametersloop
    (115) parameters -> .
    (116) parameterinit -> . parametertype ID
    (15) parametertype -> . BOOL
    (16) parametertype -> . INT
    (17) parametertype -> . FLOAT
    (18) parametertype -> . STRING

    C_PARENTHESIS   reduce using rule 115 (parameters -> .)
    BOOL            shift and go to state 89
    INT             shift and go to state 87
    FLOAT           shift and go to state 88
    STRING          shift and go to state 91

    parametertype                  shift and go to state 85
    parameters                     shift and go to state 86
    parameterinit                  shift and go to state 90

state 56

    (108) timesloop -> TIMES O_PARENTHESIS INTCONST . C_PARENTHESIS block

    C_PARENTHESIS   shift and go to state 92


state 57

    (96) constants -> FLOATCONST . add_float_constant_to_dict
    (102) add_float_constant_to_dict -> .

    MULTIPLY        reduce using rule 102 (add_float_constant_to_dict -> .)
    DIVIDE          reduce using rule 102 (add_float_constant_to_dict -> .)
    MOD             reduce using rule 102 (add_float_constant_to_dict -> .)
    SUM             reduce using rule 102 (add_float_constant_to_dict -> .)
    MINUS           reduce using rule 102 (add_float_constant_to_dict -> .)
    EQUALITY        reduce using rule 102 (add_float_constant_to_dict -> .)
    GREATER         reduce using rule 102 (add_float_constant_to_dict -> .)
    GREATER_EQUAL   reduce using rule 102 (add_float_constant_to_dict -> .)
    LESS            reduce using rule 102 (add_float_constant_to_dict -> .)
    LESS_EQUAL      reduce using rule 102 (add_float_constant_to_dict -> .)
    DIFFERENT       reduce using rule 102 (add_float_constant_to_dict -> .)
    AND             reduce using rule 102 (add_float_constant_to_dict -> .)
    OR              reduce using rule 102 (add_float_constant_to_dict -> .)
    C_PARENTHESIS   reduce using rule 102 (add_float_constant_to_dict -> .)
    COMMA           reduce using rule 102 (add_float_constant_to_dict -> .)
    SEMICOLON       reduce using rule 102 (add_float_constant_to_dict -> .)
    C_S_BRACKET     reduce using rule 102 (add_float_constant_to_dict -> .)

    add_float_constant_to_dict     shift and go to state 93

state 58

    (81) fact -> O_PARENTHESIS . add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis
    (82) add_o_parenthesis -> .

    O_PARENTHESIS   reduce using rule 82 (add_o_parenthesis -> .)
    ID              reduce using rule 82 (add_o_parenthesis -> .)
    INTCONST        reduce using rule 82 (add_o_parenthesis -> .)
    FLOATCONST      reduce using rule 82 (add_o_parenthesis -> .)
    STRINGCONST     reduce using rule 82 (add_o_parenthesis -> .)
    TRUE            reduce using rule 82 (add_o_parenthesis -> .)
    FALSE           reduce using rule 82 (add_o_parenthesis -> .)

    add_o_parenthesis              shift and go to state 94

state 59

    (99) booleanconst -> TRUE . add_bool_constant_to_dict
    (104) add_bool_constant_to_dict -> .

    MULTIPLY        reduce using rule 104 (add_bool_constant_to_dict -> .)
    DIVIDE          reduce using rule 104 (add_bool_constant_to_dict -> .)
    MOD             reduce using rule 104 (add_bool_constant_to_dict -> .)
    SUM             reduce using rule 104 (add_bool_constant_to_dict -> .)
    MINUS           reduce using rule 104 (add_bool_constant_to_dict -> .)
    EQUALITY        reduce using rule 104 (add_bool_constant_to_dict -> .)
    GREATER         reduce using rule 104 (add_bool_constant_to_dict -> .)
    GREATER_EQUAL   reduce using rule 104 (add_bool_constant_to_dict -> .)
    LESS            reduce using rule 104 (add_bool_constant_to_dict -> .)
    LESS_EQUAL      reduce using rule 104 (add_bool_constant_to_dict -> .)
    DIFFERENT       reduce using rule 104 (add_bool_constant_to_dict -> .)
    AND             reduce using rule 104 (add_bool_constant_to_dict -> .)
    OR              reduce using rule 104 (add_bool_constant_to_dict -> .)
    C_PARENTHESIS   reduce using rule 104 (add_bool_constant_to_dict -> .)
    COMMA           reduce using rule 104 (add_bool_constant_to_dict -> .)
    SEMICOLON       reduce using rule 104 (add_bool_constant_to_dict -> .)
    C_S_BRACKET     reduce using rule 104 (add_bool_constant_to_dict -> .)

    add_bool_constant_to_dict      shift and go to state 95

state 60

    (97) constants -> STRINGCONST . add_string_constant_to_dict
    (103) add_string_constant_to_dict -> .

    MULTIPLY        reduce using rule 103 (add_string_constant_to_dict -> .)
    DIVIDE          reduce using rule 103 (add_string_constant_to_dict -> .)
    MOD             reduce using rule 103 (add_string_constant_to_dict -> .)
    SUM             reduce using rule 103 (add_string_constant_to_dict -> .)
    MINUS           reduce using rule 103 (add_string_constant_to_dict -> .)
    EQUALITY        reduce using rule 103 (add_string_constant_to_dict -> .)
    GREATER         reduce using rule 103 (add_string_constant_to_dict -> .)
    GREATER_EQUAL   reduce using rule 103 (add_string_constant_to_dict -> .)
    LESS            reduce using rule 103 (add_string_constant_to_dict -> .)
    LESS_EQUAL      reduce using rule 103 (add_string_constant_to_dict -> .)
    DIFFERENT       reduce using rule 103 (add_string_constant_to_dict -> .)
    AND             reduce using rule 103 (add_string_constant_to_dict -> .)
    OR              reduce using rule 103 (add_string_constant_to_dict -> .)
    C_PARENTHESIS   reduce using rule 103 (add_string_constant_to_dict -> .)
    COMMA           reduce using rule 103 (add_string_constant_to_dict -> .)
    SEMICOLON       reduce using rule 103 (add_string_constant_to_dict -> .)
    C_S_BRACKET     reduce using rule 103 (add_string_constant_to_dict -> .)

    add_string_constant_to_dict    shift and go to state 96

state 61

    (88) varconst -> varconstfunction .

    MULTIPLY        reduce using rule 88 (varconst -> varconstfunction .)
    DIVIDE          reduce using rule 88 (varconst -> varconstfunction .)
    MOD             reduce using rule 88 (varconst -> varconstfunction .)
    SUM             reduce using rule 88 (varconst -> varconstfunction .)
    MINUS           reduce using rule 88 (varconst -> varconstfunction .)
    EQUALITY        reduce using rule 88 (varconst -> varconstfunction .)
    GREATER         reduce using rule 88 (varconst -> varconstfunction .)
    GREATER_EQUAL   reduce using rule 88 (varconst -> varconstfunction .)
    LESS            reduce using rule 88 (varconst -> varconstfunction .)
    LESS_EQUAL      reduce using rule 88 (varconst -> varconstfunction .)
    DIFFERENT       reduce using rule 88 (varconst -> varconstfunction .)
    AND             reduce using rule 88 (varconst -> varconstfunction .)
    OR              reduce using rule 88 (varconst -> varconstfunction .)
    COMMA           reduce using rule 88 (varconst -> varconstfunction .)
    C_PARENTHESIS   reduce using rule 88 (varconst -> varconstfunction .)
    SEMICOLON       reduce using rule 88 (varconst -> varconstfunction .)


state 62

    (54) expression2 -> exp . expression2optional
    (55) expression2optional -> . relop exp relop_quadruple
    (56) expression2optional -> .
    (60) relop -> . EQUALITY
    (61) relop -> . GREATER
    (62) relop -> . GREATER_EQUAL
    (63) relop -> . LESS
    (64) relop -> . LESS_EQUAL
    (65) relop -> . DIFFERENT

    AND             reduce using rule 56 (expression2optional -> .)
    OR              reduce using rule 56 (expression2optional -> .)
    C_PARENTHESIS   reduce using rule 56 (expression2optional -> .)
    COMMA           reduce using rule 56 (expression2optional -> .)
    SEMICOLON       reduce using rule 56 (expression2optional -> .)
    EQUALITY        shift and go to state 98
    GREATER         shift and go to state 99
    GREATER_EQUAL   shift and go to state 100
    LESS            shift and go to state 101
    LESS_EQUAL      shift and go to state 103
    DIFFERENT       shift and go to state 97

    relop                          shift and go to state 104
    expression2optional            shift and go to state 102

state 63

    (95) constants -> INTCONST . add_int_constant_to_dict
    (101) add_int_constant_to_dict -> .

    MULTIPLY        reduce using rule 101 (add_int_constant_to_dict -> .)
    DIVIDE          reduce using rule 101 (add_int_constant_to_dict -> .)
    MOD             reduce using rule 101 (add_int_constant_to_dict -> .)
    SUM             reduce using rule 101 (add_int_constant_to_dict -> .)
    MINUS           reduce using rule 101 (add_int_constant_to_dict -> .)
    EQUALITY        reduce using rule 101 (add_int_constant_to_dict -> .)
    GREATER         reduce using rule 101 (add_int_constant_to_dict -> .)
    GREATER_EQUAL   reduce using rule 101 (add_int_constant_to_dict -> .)
    LESS            reduce using rule 101 (add_int_constant_to_dict -> .)
    LESS_EQUAL      reduce using rule 101 (add_int_constant_to_dict -> .)
    DIFFERENT       reduce using rule 101 (add_int_constant_to_dict -> .)
    AND             reduce using rule 101 (add_int_constant_to_dict -> .)
    OR              reduce using rule 101 (add_int_constant_to_dict -> .)
    C_PARENTHESIS   reduce using rule 101 (add_int_constant_to_dict -> .)
    COMMA           reduce using rule 101 (add_int_constant_to_dict -> .)
    SEMICOLON       reduce using rule 101 (add_int_constant_to_dict -> .)
    C_S_BRACKET     reduce using rule 101 (add_int_constant_to_dict -> .)

    add_int_constant_to_dict       shift and go to state 105

state 64

    (51) expression -> expression2 . expressionoptional
    (52) expressionoptional -> . logicop expression2 logic_op_quadruple
    (53) expressionoptional -> .
    (57) logicop -> . AND
    (58) logicop -> . OR

    C_PARENTHESIS   reduce using rule 53 (expressionoptional -> .)
    COMMA           reduce using rule 53 (expressionoptional -> .)
    SEMICOLON       reduce using rule 53 (expressionoptional -> .)
    AND             shift and go to state 106
    OR              shift and go to state 109

    logicop                        shift and go to state 108
    expressionoptional             shift and go to state 107

state 65

    (90) varconstfunction -> ID . functionorlist
    (92) functionorlist -> . O_S_BRACKET INTCONST C_S_BRACKET
    (93) functionorlist -> . O_PARENTHESIS parametersinput C_PARENTHESIS
    (94) functionorlist -> . add_to_stack
    (91) add_to_stack -> .

    O_S_BRACKET     shift and go to state 111
    O_PARENTHESIS   shift and go to state 113
    MULTIPLY        reduce using rule 91 (add_to_stack -> .)
    DIVIDE          reduce using rule 91 (add_to_stack -> .)
    MOD             reduce using rule 91 (add_to_stack -> .)
    SUM             reduce using rule 91 (add_to_stack -> .)
    MINUS           reduce using rule 91 (add_to_stack -> .)
    EQUALITY        reduce using rule 91 (add_to_stack -> .)
    GREATER         reduce using rule 91 (add_to_stack -> .)
    GREATER_EQUAL   reduce using rule 91 (add_to_stack -> .)
    LESS            reduce using rule 91 (add_to_stack -> .)
    LESS_EQUAL      reduce using rule 91 (add_to_stack -> .)
    DIFFERENT       reduce using rule 91 (add_to_stack -> .)
    AND             reduce using rule 91 (add_to_stack -> .)
    OR              reduce using rule 91 (add_to_stack -> .)
    C_PARENTHESIS   reduce using rule 91 (add_to_stack -> .)
    COMMA           reduce using rule 91 (add_to_stack -> .)
    SEMICOLON       reduce using rule 91 (add_to_stack -> .)

    functionorlist                 shift and go to state 112
    add_to_stack                   shift and go to state 110

state 66

    (89) varconst -> constants .

    MULTIPLY        reduce using rule 89 (varconst -> constants .)
    DIVIDE          reduce using rule 89 (varconst -> constants .)
    MOD             reduce using rule 89 (varconst -> constants .)
    SUM             reduce using rule 89 (varconst -> constants .)
    MINUS           reduce using rule 89 (varconst -> constants .)
    EQUALITY        reduce using rule 89 (varconst -> constants .)
    GREATER         reduce using rule 89 (varconst -> constants .)
    GREATER_EQUAL   reduce using rule 89 (varconst -> constants .)
    LESS            reduce using rule 89 (varconst -> constants .)
    LESS_EQUAL      reduce using rule 89 (varconst -> constants .)
    DIFFERENT       reduce using rule 89 (varconst -> constants .)
    AND             reduce using rule 89 (varconst -> constants .)
    OR              reduce using rule 89 (varconst -> constants .)
    COMMA           reduce using rule 89 (varconst -> constants .)
    C_PARENTHESIS   reduce using rule 89 (varconst -> constants .)
    SEMICOLON       reduce using rule 89 (varconst -> constants .)


state 67

    (67) exp -> term . exp_quadruple exploop
    (68) exp_quadruple -> .

    SUM             reduce using rule 68 (exp_quadruple -> .)
    MINUS           reduce using rule 68 (exp_quadruple -> .)
    EQUALITY        reduce using rule 68 (exp_quadruple -> .)
    GREATER         reduce using rule 68 (exp_quadruple -> .)
    GREATER_EQUAL   reduce using rule 68 (exp_quadruple -> .)
    LESS            reduce using rule 68 (exp_quadruple -> .)
    LESS_EQUAL      reduce using rule 68 (exp_quadruple -> .)
    DIFFERENT       reduce using rule 68 (exp_quadruple -> .)
    AND             reduce using rule 68 (exp_quadruple -> .)
    OR              reduce using rule 68 (exp_quadruple -> .)
    C_PARENTHESIS   reduce using rule 68 (exp_quadruple -> .)
    COMMA           reduce using rule 68 (exp_quadruple -> .)
    SEMICOLON       reduce using rule 68 (exp_quadruple -> .)

    exp_quadruple                  shift and go to state 114

state 68

    (100) booleanconst -> FALSE . add_bool_constant_to_dict
    (104) add_bool_constant_to_dict -> .

    MULTIPLY        reduce using rule 104 (add_bool_constant_to_dict -> .)
    DIVIDE          reduce using rule 104 (add_bool_constant_to_dict -> .)
    MOD             reduce using rule 104 (add_bool_constant_to_dict -> .)
    SUM             reduce using rule 104 (add_bool_constant_to_dict -> .)
    MINUS           reduce using rule 104 (add_bool_constant_to_dict -> .)
    EQUALITY        reduce using rule 104 (add_bool_constant_to_dict -> .)
    GREATER         reduce using rule 104 (add_bool_constant_to_dict -> .)
    GREATER_EQUAL   reduce using rule 104 (add_bool_constant_to_dict -> .)
    LESS            reduce using rule 104 (add_bool_constant_to_dict -> .)
    LESS_EQUAL      reduce using rule 104 (add_bool_constant_to_dict -> .)
    DIFFERENT       reduce using rule 104 (add_bool_constant_to_dict -> .)
    AND             reduce using rule 104 (add_bool_constant_to_dict -> .)
    OR              reduce using rule 104 (add_bool_constant_to_dict -> .)
    C_PARENTHESIS   reduce using rule 104 (add_bool_constant_to_dict -> .)
    COMMA           reduce using rule 104 (add_bool_constant_to_dict -> .)
    SEMICOLON       reduce using rule 104 (add_bool_constant_to_dict -> .)
    C_S_BRACKET     reduce using rule 104 (add_bool_constant_to_dict -> .)

    add_bool_constant_to_dict      shift and go to state 115

state 69

    (80) fact -> varconst .

    MULTIPLY        reduce using rule 80 (fact -> varconst .)
    DIVIDE          reduce using rule 80 (fact -> varconst .)
    MOD             reduce using rule 80 (fact -> varconst .)
    SUM             reduce using rule 80 (fact -> varconst .)
    MINUS           reduce using rule 80 (fact -> varconst .)
    EQUALITY        reduce using rule 80 (fact -> varconst .)
    GREATER         reduce using rule 80 (fact -> varconst .)
    GREATER_EQUAL   reduce using rule 80 (fact -> varconst .)
    LESS            reduce using rule 80 (fact -> varconst .)
    LESS_EQUAL      reduce using rule 80 (fact -> varconst .)
    DIFFERENT       reduce using rule 80 (fact -> varconst .)
    AND             reduce using rule 80 (fact -> varconst .)
    OR              reduce using rule 80 (fact -> varconst .)
    C_PARENTHESIS   reduce using rule 80 (fact -> varconst .)
    COMMA           reduce using rule 80 (fact -> varconst .)
    SEMICOLON       reduce using rule 80 (fact -> varconst .)


state 70

    (98) constants -> booleanconst .

    MULTIPLY        reduce using rule 98 (constants -> booleanconst .)
    DIVIDE          reduce using rule 98 (constants -> booleanconst .)
    MOD             reduce using rule 98 (constants -> booleanconst .)
    SUM             reduce using rule 98 (constants -> booleanconst .)
    MINUS           reduce using rule 98 (constants -> booleanconst .)
    EQUALITY        reduce using rule 98 (constants -> booleanconst .)
    GREATER         reduce using rule 98 (constants -> booleanconst .)
    GREATER_EQUAL   reduce using rule 98 (constants -> booleanconst .)
    LESS            reduce using rule 98 (constants -> booleanconst .)
    LESS_EQUAL      reduce using rule 98 (constants -> booleanconst .)
    DIFFERENT       reduce using rule 98 (constants -> booleanconst .)
    AND             reduce using rule 98 (constants -> booleanconst .)
    OR              reduce using rule 98 (constants -> booleanconst .)
    C_PARENTHESIS   reduce using rule 98 (constants -> booleanconst .)
    COMMA           reduce using rule 98 (constants -> booleanconst .)
    C_S_BRACKET     reduce using rule 98 (constants -> booleanconst .)
    SEMICOLON       reduce using rule 98 (constants -> booleanconst .)


state 71

    (107) whileloop -> WHILE O_PARENTHESIS expression . C_PARENTHESIS block

    C_PARENTHESIS   shift and go to state 116


state 72

    (73) term -> fact . term_quadruple termloop
    (74) term_quadruple -> .

    MULTIPLY        reduce using rule 74 (term_quadruple -> .)
    DIVIDE          reduce using rule 74 (term_quadruple -> .)
    MOD             reduce using rule 74 (term_quadruple -> .)
    SUM             reduce using rule 74 (term_quadruple -> .)
    MINUS           reduce using rule 74 (term_quadruple -> .)
    EQUALITY        reduce using rule 74 (term_quadruple -> .)
    GREATER         reduce using rule 74 (term_quadruple -> .)
    GREATER_EQUAL   reduce using rule 74 (term_quadruple -> .)
    LESS            reduce using rule 74 (term_quadruple -> .)
    LESS_EQUAL      reduce using rule 74 (term_quadruple -> .)
    DIFFERENT       reduce using rule 74 (term_quadruple -> .)
    AND             reduce using rule 74 (term_quadruple -> .)
    OR              reduce using rule 74 (term_quadruple -> .)
    C_PARENTHESIS   reduce using rule 74 (term_quadruple -> .)
    COMMA           reduce using rule 74 (term_quadruple -> .)
    SEMICOLON       reduce using rule 74 (term_quadruple -> .)

    term_quadruple                 shift and go to state 117

state 73

    (34) writtingloop -> start_printing . expression print_quadruple optionalwritting
    (51) expression -> . expression2 expressionoptional
    (54) expression2 -> . exp expression2optional
    (67) exp -> . term exp_quadruple exploop
    (73) term -> . fact term_quadruple termloop
    (80) fact -> . varconst
    (81) fact -> . O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis
    (88) varconst -> . varconstfunction
    (89) varconst -> . constants
    (90) varconstfunction -> . ID functionorlist
    (95) constants -> . INTCONST add_int_constant_to_dict
    (96) constants -> . FLOATCONST add_float_constant_to_dict
    (97) constants -> . STRINGCONST add_string_constant_to_dict
    (98) constants -> . booleanconst
    (99) booleanconst -> . TRUE add_bool_constant_to_dict
    (100) booleanconst -> . FALSE add_bool_constant_to_dict

    O_PARENTHESIS   shift and go to state 58
    ID              shift and go to state 65
    INTCONST        shift and go to state 63
    FLOATCONST      shift and go to state 57
    STRINGCONST     shift and go to state 60
    TRUE            shift and go to state 59
    FALSE           shift and go to state 68

    varconstfunction               shift and go to state 61
    exp                            shift and go to state 62
    expression2                    shift and go to state 64
    constants                      shift and go to state 66
    term                           shift and go to state 67
    varconst                       shift and go to state 69
    booleanconst                   shift and go to state 70
    expression                     shift and go to state 118
    fact                           shift and go to state 72

state 74

    (31) writting -> PRINT O_PARENTHESIS writtingloop . C_PARENTHESIS SEMICOLON

    C_PARENTHESIS   shift and go to state 119


state 75

    (30) assignation -> var_assign EQUALS add_equals . expression equals_quadruple SEMICOLON
    (51) expression -> . expression2 expressionoptional
    (54) expression2 -> . exp expression2optional
    (67) exp -> . term exp_quadruple exploop
    (73) term -> . fact term_quadruple termloop
    (80) fact -> . varconst
    (81) fact -> . O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis
    (88) varconst -> . varconstfunction
    (89) varconst -> . constants
    (90) varconstfunction -> . ID functionorlist
    (95) constants -> . INTCONST add_int_constant_to_dict
    (96) constants -> . FLOATCONST add_float_constant_to_dict
    (97) constants -> . STRINGCONST add_string_constant_to_dict
    (98) constants -> . booleanconst
    (99) booleanconst -> . TRUE add_bool_constant_to_dict
    (100) booleanconst -> . FALSE add_bool_constant_to_dict

    O_PARENTHESIS   shift and go to state 58
    ID              shift and go to state 65
    INTCONST        shift and go to state 63
    FLOATCONST      shift and go to state 57
    STRINGCONST     shift and go to state 60
    TRUE            shift and go to state 59
    FALSE           shift and go to state 68

    varconstfunction               shift and go to state 61
    expression2                    shift and go to state 64
    constants                      shift and go to state 66
    term                           shift and go to state 67
    varconst                       shift and go to state 69
    exp                            shift and go to state 62
    booleanconst                   shift and go to state 70
    expression                     shift and go to state 120
    fact                           shift and go to state 72

state 76

    (39) normalinit -> type var EQUALS . add_equals expression equals_quadruple SEMICOLON
    (41) add_equals -> .

    O_PARENTHESIS   reduce using rule 41 (add_equals -> .)
    ID              reduce using rule 41 (add_equals -> .)
    INTCONST        reduce using rule 41 (add_equals -> .)
    FLOATCONST      reduce using rule 41 (add_equals -> .)
    STRINGCONST     reduce using rule 41 (add_equals -> .)
    TRUE            reduce using rule 41 (add_equals -> .)
    FALSE           reduce using rule 41 (add_equals -> .)

    add_equals                     shift and go to state 121

state 77

    (85) var -> ID listaccess .

    EQUALS          reduce using rule 85 (var -> ID listaccess .)


state 78

    (86) listaccess -> O_S_BRACKET INTCONST . C_S_BRACKET

    C_S_BRACKET     shift and go to state 122


state 79

    (109) functioncall -> ID O_PARENTHESIS parametersinput . C_PARENTHESIS SEMICOLON

    C_PARENTHESIS   shift and go to state 123


state 80

    (110) parametersinput -> expression . parametersinputloop
    (112) parametersinputloop -> . COMMA expression parametersinputloop
    (113) parametersinputloop -> .

    COMMA           shift and go to state 125
    C_PARENTHESIS   reduce using rule 113 (parametersinputloop -> .)

    parametersinputloop            shift and go to state 124

state 81

    (48) condition -> IF O_PARENTHESIS expression . C_PARENTHESIS block else

    C_PARENTHESIS   shift and go to state 126


state 82

    (20) functionreturn -> RETURN expression . SEMICOLON

    SEMICOLON       shift and go to state 127


state 83

    (19) block -> O_BRACKET statutesloop functionreturn C_BRACKET .

    IF              reduce using rule 19 (block -> O_BRACKET statutesloop functionreturn C_BRACKET .)
    PRINT           reduce using rule 19 (block -> O_BRACKET statutesloop functionreturn C_BRACKET .)
    ID              reduce using rule 19 (block -> O_BRACKET statutesloop functionreturn C_BRACKET .)
    LIST            reduce using rule 19 (block -> O_BRACKET statutesloop functionreturn C_BRACKET .)
    WHILE           reduce using rule 19 (block -> O_BRACKET statutesloop functionreturn C_BRACKET .)
    TIMES           reduce using rule 19 (block -> O_BRACKET statutesloop functionreturn C_BRACKET .)
    BOOL            reduce using rule 19 (block -> O_BRACKET statutesloop functionreturn C_BRACKET .)
    INT             reduce using rule 19 (block -> O_BRACKET statutesloop functionreturn C_BRACKET .)
    FLOAT           reduce using rule 19 (block -> O_BRACKET statutesloop functionreturn C_BRACKET .)
    STRING          reduce using rule 19 (block -> O_BRACKET statutesloop functionreturn C_BRACKET .)
    RETURN          reduce using rule 19 (block -> O_BRACKET statutesloop functionreturn C_BRACKET .)
    C_BRACKET       reduce using rule 19 (block -> O_BRACKET statutesloop functionreturn C_BRACKET .)
    ELSE            reduce using rule 19 (block -> O_BRACKET statutesloop functionreturn C_BRACKET .)
    FUNCTION        reduce using rule 19 (block -> O_BRACKET statutesloop functionreturn C_BRACKET .)
    $end            reduce using rule 19 (block -> O_BRACKET statutesloop functionreturn C_BRACKET .)


state 84

    (42) listinit -> LIST type var . EQUALS list SEMICOLON

    EQUALS          shift and go to state 128


state 85

    (116) parameterinit -> parametertype . ID

    ID              shift and go to state 129


state 86

    (5) function -> FUNCTION functiontype ID O_PARENTHESIS parameters . C_PARENTHESIS block

    C_PARENTHESIS   shift and go to state 130


state 87

    (16) parametertype -> INT .

    ID              reduce using rule 16 (parametertype -> INT .)


state 88

    (17) parametertype -> FLOAT .

    ID              reduce using rule 17 (parametertype -> FLOAT .)


state 89

    (15) parametertype -> BOOL .

    ID              reduce using rule 15 (parametertype -> BOOL .)


state 90

    (114) parameters -> parameterinit . parametersloop
    (117) parametersloop -> . COMMA parameterinit parametersloop
    (118) parametersloop -> .

    COMMA           shift and go to state 132
    C_PARENTHESIS   reduce using rule 118 (parametersloop -> .)

    parametersloop                 shift and go to state 131

state 91

    (18) parametertype -> STRING .

    ID              reduce using rule 18 (parametertype -> STRING .)


state 92

    (108) timesloop -> TIMES O_PARENTHESIS INTCONST C_PARENTHESIS . block
    (19) block -> . O_BRACKET statutesloop functionreturn C_BRACKET

    O_BRACKET       shift and go to state 7

    block                          shift and go to state 133

state 93

    (96) constants -> FLOATCONST add_float_constant_to_dict .

    MULTIPLY        reduce using rule 96 (constants -> FLOATCONST add_float_constant_to_dict .)
    DIVIDE          reduce using rule 96 (constants -> FLOATCONST add_float_constant_to_dict .)
    MOD             reduce using rule 96 (constants -> FLOATCONST add_float_constant_to_dict .)
    SUM             reduce using rule 96 (constants -> FLOATCONST add_float_constant_to_dict .)
    MINUS           reduce using rule 96 (constants -> FLOATCONST add_float_constant_to_dict .)
    EQUALITY        reduce using rule 96 (constants -> FLOATCONST add_float_constant_to_dict .)
    GREATER         reduce using rule 96 (constants -> FLOATCONST add_float_constant_to_dict .)
    GREATER_EQUAL   reduce using rule 96 (constants -> FLOATCONST add_float_constant_to_dict .)
    LESS            reduce using rule 96 (constants -> FLOATCONST add_float_constant_to_dict .)
    LESS_EQUAL      reduce using rule 96 (constants -> FLOATCONST add_float_constant_to_dict .)
    DIFFERENT       reduce using rule 96 (constants -> FLOATCONST add_float_constant_to_dict .)
    AND             reduce using rule 96 (constants -> FLOATCONST add_float_constant_to_dict .)
    OR              reduce using rule 96 (constants -> FLOATCONST add_float_constant_to_dict .)
    C_PARENTHESIS   reduce using rule 96 (constants -> FLOATCONST add_float_constant_to_dict .)
    COMMA           reduce using rule 96 (constants -> FLOATCONST add_float_constant_to_dict .)
    C_S_BRACKET     reduce using rule 96 (constants -> FLOATCONST add_float_constant_to_dict .)
    SEMICOLON       reduce using rule 96 (constants -> FLOATCONST add_float_constant_to_dict .)


state 94

    (81) fact -> O_PARENTHESIS add_o_parenthesis . expression C_PARENTHESIS add_c_parenthesis
    (51) expression -> . expression2 expressionoptional
    (54) expression2 -> . exp expression2optional
    (67) exp -> . term exp_quadruple exploop
    (73) term -> . fact term_quadruple termloop
    (80) fact -> . varconst
    (81) fact -> . O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis
    (88) varconst -> . varconstfunction
    (89) varconst -> . constants
    (90) varconstfunction -> . ID functionorlist
    (95) constants -> . INTCONST add_int_constant_to_dict
    (96) constants -> . FLOATCONST add_float_constant_to_dict
    (97) constants -> . STRINGCONST add_string_constant_to_dict
    (98) constants -> . booleanconst
    (99) booleanconst -> . TRUE add_bool_constant_to_dict
    (100) booleanconst -> . FALSE add_bool_constant_to_dict

    O_PARENTHESIS   shift and go to state 58
    ID              shift and go to state 65
    INTCONST        shift and go to state 63
    FLOATCONST      shift and go to state 57
    STRINGCONST     shift and go to state 60
    TRUE            shift and go to state 59
    FALSE           shift and go to state 68

    varconstfunction               shift and go to state 61
    exp                            shift and go to state 62
    expression2                    shift and go to state 64
    constants                      shift and go to state 66
    term                           shift and go to state 67
    varconst                       shift and go to state 69
    booleanconst                   shift and go to state 70
    expression                     shift and go to state 134
    fact                           shift and go to state 72

state 95

    (99) booleanconst -> TRUE add_bool_constant_to_dict .

    MULTIPLY        reduce using rule 99 (booleanconst -> TRUE add_bool_constant_to_dict .)
    DIVIDE          reduce using rule 99 (booleanconst -> TRUE add_bool_constant_to_dict .)
    MOD             reduce using rule 99 (booleanconst -> TRUE add_bool_constant_to_dict .)
    SUM             reduce using rule 99 (booleanconst -> TRUE add_bool_constant_to_dict .)
    MINUS           reduce using rule 99 (booleanconst -> TRUE add_bool_constant_to_dict .)
    AND             reduce using rule 99 (booleanconst -> TRUE add_bool_constant_to_dict .)
    OR              reduce using rule 99 (booleanconst -> TRUE add_bool_constant_to_dict .)
    C_PARENTHESIS   reduce using rule 99 (booleanconst -> TRUE add_bool_constant_to_dict .)
    COMMA           reduce using rule 99 (booleanconst -> TRUE add_bool_constant_to_dict .)
    SEMICOLON       reduce using rule 99 (booleanconst -> TRUE add_bool_constant_to_dict .)
    EQUALITY        reduce using rule 99 (booleanconst -> TRUE add_bool_constant_to_dict .)
    GREATER         reduce using rule 99 (booleanconst -> TRUE add_bool_constant_to_dict .)
    GREATER_EQUAL   reduce using rule 99 (booleanconst -> TRUE add_bool_constant_to_dict .)
    LESS            reduce using rule 99 (booleanconst -> TRUE add_bool_constant_to_dict .)
    LESS_EQUAL      reduce using rule 99 (booleanconst -> TRUE add_bool_constant_to_dict .)
    DIFFERENT       reduce using rule 99 (booleanconst -> TRUE add_bool_constant_to_dict .)
    C_S_BRACKET     reduce using rule 99 (booleanconst -> TRUE add_bool_constant_to_dict .)


state 96

    (97) constants -> STRINGCONST add_string_constant_to_dict .

    MULTIPLY        reduce using rule 97 (constants -> STRINGCONST add_string_constant_to_dict .)
    DIVIDE          reduce using rule 97 (constants -> STRINGCONST add_string_constant_to_dict .)
    MOD             reduce using rule 97 (constants -> STRINGCONST add_string_constant_to_dict .)
    SUM             reduce using rule 97 (constants -> STRINGCONST add_string_constant_to_dict .)
    MINUS           reduce using rule 97 (constants -> STRINGCONST add_string_constant_to_dict .)
    EQUALITY        reduce using rule 97 (constants -> STRINGCONST add_string_constant_to_dict .)
    GREATER         reduce using rule 97 (constants -> STRINGCONST add_string_constant_to_dict .)
    GREATER_EQUAL   reduce using rule 97 (constants -> STRINGCONST add_string_constant_to_dict .)
    LESS            reduce using rule 97 (constants -> STRINGCONST add_string_constant_to_dict .)
    LESS_EQUAL      reduce using rule 97 (constants -> STRINGCONST add_string_constant_to_dict .)
    DIFFERENT       reduce using rule 97 (constants -> STRINGCONST add_string_constant_to_dict .)
    AND             reduce using rule 97 (constants -> STRINGCONST add_string_constant_to_dict .)
    OR              reduce using rule 97 (constants -> STRINGCONST add_string_constant_to_dict .)
    C_PARENTHESIS   reduce using rule 97 (constants -> STRINGCONST add_string_constant_to_dict .)
    COMMA           reduce using rule 97 (constants -> STRINGCONST add_string_constant_to_dict .)
    C_S_BRACKET     reduce using rule 97 (constants -> STRINGCONST add_string_constant_to_dict .)
    SEMICOLON       reduce using rule 97 (constants -> STRINGCONST add_string_constant_to_dict .)


state 97

    (65) relop -> DIFFERENT .

    O_PARENTHESIS   reduce using rule 65 (relop -> DIFFERENT .)
    ID              reduce using rule 65 (relop -> DIFFERENT .)
    INTCONST        reduce using rule 65 (relop -> DIFFERENT .)
    FLOATCONST      reduce using rule 65 (relop -> DIFFERENT .)
    STRINGCONST     reduce using rule 65 (relop -> DIFFERENT .)
    TRUE            reduce using rule 65 (relop -> DIFFERENT .)
    FALSE           reduce using rule 65 (relop -> DIFFERENT .)


state 98

    (60) relop -> EQUALITY .

    O_PARENTHESIS   reduce using rule 60 (relop -> EQUALITY .)
    ID              reduce using rule 60 (relop -> EQUALITY .)
    INTCONST        reduce using rule 60 (relop -> EQUALITY .)
    FLOATCONST      reduce using rule 60 (relop -> EQUALITY .)
    STRINGCONST     reduce using rule 60 (relop -> EQUALITY .)
    TRUE            reduce using rule 60 (relop -> EQUALITY .)
    FALSE           reduce using rule 60 (relop -> EQUALITY .)


state 99

    (61) relop -> GREATER .

    O_PARENTHESIS   reduce using rule 61 (relop -> GREATER .)
    ID              reduce using rule 61 (relop -> GREATER .)
    INTCONST        reduce using rule 61 (relop -> GREATER .)
    FLOATCONST      reduce using rule 61 (relop -> GREATER .)
    STRINGCONST     reduce using rule 61 (relop -> GREATER .)
    TRUE            reduce using rule 61 (relop -> GREATER .)
    FALSE           reduce using rule 61 (relop -> GREATER .)


state 100

    (62) relop -> GREATER_EQUAL .

    O_PARENTHESIS   reduce using rule 62 (relop -> GREATER_EQUAL .)
    ID              reduce using rule 62 (relop -> GREATER_EQUAL .)
    INTCONST        reduce using rule 62 (relop -> GREATER_EQUAL .)
    FLOATCONST      reduce using rule 62 (relop -> GREATER_EQUAL .)
    STRINGCONST     reduce using rule 62 (relop -> GREATER_EQUAL .)
    TRUE            reduce using rule 62 (relop -> GREATER_EQUAL .)
    FALSE           reduce using rule 62 (relop -> GREATER_EQUAL .)


state 101

    (63) relop -> LESS .

    O_PARENTHESIS   reduce using rule 63 (relop -> LESS .)
    ID              reduce using rule 63 (relop -> LESS .)
    INTCONST        reduce using rule 63 (relop -> LESS .)
    FLOATCONST      reduce using rule 63 (relop -> LESS .)
    STRINGCONST     reduce using rule 63 (relop -> LESS .)
    TRUE            reduce using rule 63 (relop -> LESS .)
    FALSE           reduce using rule 63 (relop -> LESS .)


state 102

    (54) expression2 -> exp expression2optional .

    AND             reduce using rule 54 (expression2 -> exp expression2optional .)
    OR              reduce using rule 54 (expression2 -> exp expression2optional .)
    SEMICOLON       reduce using rule 54 (expression2 -> exp expression2optional .)
    COMMA           reduce using rule 54 (expression2 -> exp expression2optional .)
    C_PARENTHESIS   reduce using rule 54 (expression2 -> exp expression2optional .)


state 103

    (64) relop -> LESS_EQUAL .

    O_PARENTHESIS   reduce using rule 64 (relop -> LESS_EQUAL .)
    ID              reduce using rule 64 (relop -> LESS_EQUAL .)
    INTCONST        reduce using rule 64 (relop -> LESS_EQUAL .)
    FLOATCONST      reduce using rule 64 (relop -> LESS_EQUAL .)
    STRINGCONST     reduce using rule 64 (relop -> LESS_EQUAL .)
    TRUE            reduce using rule 64 (relop -> LESS_EQUAL .)
    FALSE           reduce using rule 64 (relop -> LESS_EQUAL .)


state 104

    (55) expression2optional -> relop . exp relop_quadruple
    (67) exp -> . term exp_quadruple exploop
    (73) term -> . fact term_quadruple termloop
    (80) fact -> . varconst
    (81) fact -> . O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis
    (88) varconst -> . varconstfunction
    (89) varconst -> . constants
    (90) varconstfunction -> . ID functionorlist
    (95) constants -> . INTCONST add_int_constant_to_dict
    (96) constants -> . FLOATCONST add_float_constant_to_dict
    (97) constants -> . STRINGCONST add_string_constant_to_dict
    (98) constants -> . booleanconst
    (99) booleanconst -> . TRUE add_bool_constant_to_dict
    (100) booleanconst -> . FALSE add_bool_constant_to_dict

    O_PARENTHESIS   shift and go to state 58
    ID              shift and go to state 65
    INTCONST        shift and go to state 63
    FLOATCONST      shift and go to state 57
    STRINGCONST     shift and go to state 60
    TRUE            shift and go to state 59
    FALSE           shift and go to state 68

    term                           shift and go to state 67
    varconst                       shift and go to state 69
    constants                      shift and go to state 66
    exp                            shift and go to state 135
    booleanconst                   shift and go to state 70
    varconstfunction               shift and go to state 61
    fact                           shift and go to state 72

state 105

    (95) constants -> INTCONST add_int_constant_to_dict .

    MULTIPLY        reduce using rule 95 (constants -> INTCONST add_int_constant_to_dict .)
    DIVIDE          reduce using rule 95 (constants -> INTCONST add_int_constant_to_dict .)
    MOD             reduce using rule 95 (constants -> INTCONST add_int_constant_to_dict .)
    SUM             reduce using rule 95 (constants -> INTCONST add_int_constant_to_dict .)
    MINUS           reduce using rule 95 (constants -> INTCONST add_int_constant_to_dict .)
    EQUALITY        reduce using rule 95 (constants -> INTCONST add_int_constant_to_dict .)
    GREATER         reduce using rule 95 (constants -> INTCONST add_int_constant_to_dict .)
    GREATER_EQUAL   reduce using rule 95 (constants -> INTCONST add_int_constant_to_dict .)
    LESS            reduce using rule 95 (constants -> INTCONST add_int_constant_to_dict .)
    LESS_EQUAL      reduce using rule 95 (constants -> INTCONST add_int_constant_to_dict .)
    DIFFERENT       reduce using rule 95 (constants -> INTCONST add_int_constant_to_dict .)
    AND             reduce using rule 95 (constants -> INTCONST add_int_constant_to_dict .)
    OR              reduce using rule 95 (constants -> INTCONST add_int_constant_to_dict .)
    C_PARENTHESIS   reduce using rule 95 (constants -> INTCONST add_int_constant_to_dict .)
    COMMA           reduce using rule 95 (constants -> INTCONST add_int_constant_to_dict .)
    C_S_BRACKET     reduce using rule 95 (constants -> INTCONST add_int_constant_to_dict .)
    SEMICOLON       reduce using rule 95 (constants -> INTCONST add_int_constant_to_dict .)


state 106

    (57) logicop -> AND .

    O_PARENTHESIS   reduce using rule 57 (logicop -> AND .)
    ID              reduce using rule 57 (logicop -> AND .)
    INTCONST        reduce using rule 57 (logicop -> AND .)
    FLOATCONST      reduce using rule 57 (logicop -> AND .)
    STRINGCONST     reduce using rule 57 (logicop -> AND .)
    TRUE            reduce using rule 57 (logicop -> AND .)
    FALSE           reduce using rule 57 (logicop -> AND .)


state 107

    (51) expression -> expression2 expressionoptional .

    SEMICOLON       reduce using rule 51 (expression -> expression2 expressionoptional .)
    C_PARENTHESIS   reduce using rule 51 (expression -> expression2 expressionoptional .)
    COMMA           reduce using rule 51 (expression -> expression2 expressionoptional .)


state 108

    (52) expressionoptional -> logicop . expression2 logic_op_quadruple
    (54) expression2 -> . exp expression2optional
    (67) exp -> . term exp_quadruple exploop
    (73) term -> . fact term_quadruple termloop
    (80) fact -> . varconst
    (81) fact -> . O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis
    (88) varconst -> . varconstfunction
    (89) varconst -> . constants
    (90) varconstfunction -> . ID functionorlist
    (95) constants -> . INTCONST add_int_constant_to_dict
    (96) constants -> . FLOATCONST add_float_constant_to_dict
    (97) constants -> . STRINGCONST add_string_constant_to_dict
    (98) constants -> . booleanconst
    (99) booleanconst -> . TRUE add_bool_constant_to_dict
    (100) booleanconst -> . FALSE add_bool_constant_to_dict

    O_PARENTHESIS   shift and go to state 58
    ID              shift and go to state 65
    INTCONST        shift and go to state 63
    FLOATCONST      shift and go to state 57
    STRINGCONST     shift and go to state 60
    TRUE            shift and go to state 59
    FALSE           shift and go to state 68

    varconstfunction               shift and go to state 61
    exp                            shift and go to state 62
    expression2                    shift and go to state 136
    constants                      shift and go to state 66
    term                           shift and go to state 67
    varconst                       shift and go to state 69
    booleanconst                   shift and go to state 70
    fact                           shift and go to state 72

state 109

    (58) logicop -> OR .

    O_PARENTHESIS   reduce using rule 58 (logicop -> OR .)
    ID              reduce using rule 58 (logicop -> OR .)
    INTCONST        reduce using rule 58 (logicop -> OR .)
    FLOATCONST      reduce using rule 58 (logicop -> OR .)
    STRINGCONST     reduce using rule 58 (logicop -> OR .)
    TRUE            reduce using rule 58 (logicop -> OR .)
    FALSE           reduce using rule 58 (logicop -> OR .)


state 110

    (94) functionorlist -> add_to_stack .

    MULTIPLY        reduce using rule 94 (functionorlist -> add_to_stack .)
    DIVIDE          reduce using rule 94 (functionorlist -> add_to_stack .)
    MOD             reduce using rule 94 (functionorlist -> add_to_stack .)
    SUM             reduce using rule 94 (functionorlist -> add_to_stack .)
    MINUS           reduce using rule 94 (functionorlist -> add_to_stack .)
    EQUALITY        reduce using rule 94 (functionorlist -> add_to_stack .)
    GREATER         reduce using rule 94 (functionorlist -> add_to_stack .)
    GREATER_EQUAL   reduce using rule 94 (functionorlist -> add_to_stack .)
    LESS            reduce using rule 94 (functionorlist -> add_to_stack .)
    LESS_EQUAL      reduce using rule 94 (functionorlist -> add_to_stack .)
    DIFFERENT       reduce using rule 94 (functionorlist -> add_to_stack .)
    AND             reduce using rule 94 (functionorlist -> add_to_stack .)
    OR              reduce using rule 94 (functionorlist -> add_to_stack .)
    C_PARENTHESIS   reduce using rule 94 (functionorlist -> add_to_stack .)
    COMMA           reduce using rule 94 (functionorlist -> add_to_stack .)
    SEMICOLON       reduce using rule 94 (functionorlist -> add_to_stack .)


state 111

    (92) functionorlist -> O_S_BRACKET . INTCONST C_S_BRACKET

    INTCONST        shift and go to state 137


state 112

    (90) varconstfunction -> ID functionorlist .

    MULTIPLY        reduce using rule 90 (varconstfunction -> ID functionorlist .)
    DIVIDE          reduce using rule 90 (varconstfunction -> ID functionorlist .)
    MOD             reduce using rule 90 (varconstfunction -> ID functionorlist .)
    SUM             reduce using rule 90 (varconstfunction -> ID functionorlist .)
    MINUS           reduce using rule 90 (varconstfunction -> ID functionorlist .)
    EQUALITY        reduce using rule 90 (varconstfunction -> ID functionorlist .)
    GREATER         reduce using rule 90 (varconstfunction -> ID functionorlist .)
    GREATER_EQUAL   reduce using rule 90 (varconstfunction -> ID functionorlist .)
    LESS            reduce using rule 90 (varconstfunction -> ID functionorlist .)
    LESS_EQUAL      reduce using rule 90 (varconstfunction -> ID functionorlist .)
    DIFFERENT       reduce using rule 90 (varconstfunction -> ID functionorlist .)
    AND             reduce using rule 90 (varconstfunction -> ID functionorlist .)
    OR              reduce using rule 90 (varconstfunction -> ID functionorlist .)
    COMMA           reduce using rule 90 (varconstfunction -> ID functionorlist .)
    C_PARENTHESIS   reduce using rule 90 (varconstfunction -> ID functionorlist .)
    SEMICOLON       reduce using rule 90 (varconstfunction -> ID functionorlist .)


state 113

    (93) functionorlist -> O_PARENTHESIS . parametersinput C_PARENTHESIS
    (110) parametersinput -> . expression parametersinputloop
    (111) parametersinput -> .
    (51) expression -> . expression2 expressionoptional
    (54) expression2 -> . exp expression2optional
    (67) exp -> . term exp_quadruple exploop
    (73) term -> . fact term_quadruple termloop
    (80) fact -> . varconst
    (81) fact -> . O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis
    (88) varconst -> . varconstfunction
    (89) varconst -> . constants
    (90) varconstfunction -> . ID functionorlist
    (95) constants -> . INTCONST add_int_constant_to_dict
    (96) constants -> . FLOATCONST add_float_constant_to_dict
    (97) constants -> . STRINGCONST add_string_constant_to_dict
    (98) constants -> . booleanconst
    (99) booleanconst -> . TRUE add_bool_constant_to_dict
    (100) booleanconst -> . FALSE add_bool_constant_to_dict

    C_PARENTHESIS   reduce using rule 111 (parametersinput -> .)
    O_PARENTHESIS   shift and go to state 58
    ID              shift and go to state 65
    INTCONST        shift and go to state 63
    FLOATCONST      shift and go to state 57
    STRINGCONST     shift and go to state 60
    TRUE            shift and go to state 59
    FALSE           shift and go to state 68

    varconstfunction               shift and go to state 61
    exp                            shift and go to state 62
    parametersinput                shift and go to state 138
    expression2                    shift and go to state 64
    constants                      shift and go to state 66
    term                           shift and go to state 67
    varconst                       shift and go to state 69
    booleanconst                   shift and go to state 70
    expression                     shift and go to state 80
    fact                           shift and go to state 72

state 114

    (67) exp -> term exp_quadruple . exploop
    (69) exploop -> . addsub exp
    (70) exploop -> .
    (71) addsub -> . SUM
    (72) addsub -> . MINUS

    EQUALITY        reduce using rule 70 (exploop -> .)
    GREATER         reduce using rule 70 (exploop -> .)
    GREATER_EQUAL   reduce using rule 70 (exploop -> .)
    LESS            reduce using rule 70 (exploop -> .)
    LESS_EQUAL      reduce using rule 70 (exploop -> .)
    DIFFERENT       reduce using rule 70 (exploop -> .)
    AND             reduce using rule 70 (exploop -> .)
    OR              reduce using rule 70 (exploop -> .)
    C_PARENTHESIS   reduce using rule 70 (exploop -> .)
    COMMA           reduce using rule 70 (exploop -> .)
    SEMICOLON       reduce using rule 70 (exploop -> .)
    SUM             shift and go to state 139
    MINUS           shift and go to state 140

    exploop                        shift and go to state 141
    addsub                         shift and go to state 142

state 115

    (100) booleanconst -> FALSE add_bool_constant_to_dict .

    MULTIPLY        reduce using rule 100 (booleanconst -> FALSE add_bool_constant_to_dict .)
    DIVIDE          reduce using rule 100 (booleanconst -> FALSE add_bool_constant_to_dict .)
    MOD             reduce using rule 100 (booleanconst -> FALSE add_bool_constant_to_dict .)
    SUM             reduce using rule 100 (booleanconst -> FALSE add_bool_constant_to_dict .)
    MINUS           reduce using rule 100 (booleanconst -> FALSE add_bool_constant_to_dict .)
    AND             reduce using rule 100 (booleanconst -> FALSE add_bool_constant_to_dict .)
    OR              reduce using rule 100 (booleanconst -> FALSE add_bool_constant_to_dict .)
    C_PARENTHESIS   reduce using rule 100 (booleanconst -> FALSE add_bool_constant_to_dict .)
    COMMA           reduce using rule 100 (booleanconst -> FALSE add_bool_constant_to_dict .)
    SEMICOLON       reduce using rule 100 (booleanconst -> FALSE add_bool_constant_to_dict .)
    EQUALITY        reduce using rule 100 (booleanconst -> FALSE add_bool_constant_to_dict .)
    GREATER         reduce using rule 100 (booleanconst -> FALSE add_bool_constant_to_dict .)
    GREATER_EQUAL   reduce using rule 100 (booleanconst -> FALSE add_bool_constant_to_dict .)
    LESS            reduce using rule 100 (booleanconst -> FALSE add_bool_constant_to_dict .)
    LESS_EQUAL      reduce using rule 100 (booleanconst -> FALSE add_bool_constant_to_dict .)
    DIFFERENT       reduce using rule 100 (booleanconst -> FALSE add_bool_constant_to_dict .)
    C_S_BRACKET     reduce using rule 100 (booleanconst -> FALSE add_bool_constant_to_dict .)


state 116

    (107) whileloop -> WHILE O_PARENTHESIS expression C_PARENTHESIS . block
    (19) block -> . O_BRACKET statutesloop functionreturn C_BRACKET

    O_BRACKET       shift and go to state 7

    block                          shift and go to state 143

state 117

    (73) term -> fact term_quadruple . termloop
    (75) termloop -> . divmult term
    (76) termloop -> .
    (77) divmult -> . MULTIPLY
    (78) divmult -> . DIVIDE
    (79) divmult -> . MOD

    SUM             reduce using rule 76 (termloop -> .)
    MINUS           reduce using rule 76 (termloop -> .)
    EQUALITY        reduce using rule 76 (termloop -> .)
    GREATER         reduce using rule 76 (termloop -> .)
    GREATER_EQUAL   reduce using rule 76 (termloop -> .)
    LESS            reduce using rule 76 (termloop -> .)
    LESS_EQUAL      reduce using rule 76 (termloop -> .)
    DIFFERENT       reduce using rule 76 (termloop -> .)
    AND             reduce using rule 76 (termloop -> .)
    OR              reduce using rule 76 (termloop -> .)
    C_PARENTHESIS   reduce using rule 76 (termloop -> .)
    COMMA           reduce using rule 76 (termloop -> .)
    SEMICOLON       reduce using rule 76 (termloop -> .)
    MULTIPLY        shift and go to state 146
    DIVIDE          shift and go to state 144
    MOD             shift and go to state 148

    termloop                       shift and go to state 145
    divmult                        shift and go to state 147

state 118

    (34) writtingloop -> start_printing expression . print_quadruple optionalwritting
    (33) print_quadruple -> .

    COMMA           reduce using rule 33 (print_quadruple -> .)
    C_PARENTHESIS   reduce using rule 33 (print_quadruple -> .)

    print_quadruple                shift and go to state 149

state 119

    (31) writting -> PRINT O_PARENTHESIS writtingloop C_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 150


state 120

    (30) assignation -> var_assign EQUALS add_equals expression . equals_quadruple SEMICOLON
    (40) equals_quadruple -> .

    SEMICOLON       reduce using rule 40 (equals_quadruple -> .)

    equals_quadruple               shift and go to state 151

state 121

    (39) normalinit -> type var EQUALS add_equals . expression equals_quadruple SEMICOLON
    (51) expression -> . expression2 expressionoptional
    (54) expression2 -> . exp expression2optional
    (67) exp -> . term exp_quadruple exploop
    (73) term -> . fact term_quadruple termloop
    (80) fact -> . varconst
    (81) fact -> . O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis
    (88) varconst -> . varconstfunction
    (89) varconst -> . constants
    (90) varconstfunction -> . ID functionorlist
    (95) constants -> . INTCONST add_int_constant_to_dict
    (96) constants -> . FLOATCONST add_float_constant_to_dict
    (97) constants -> . STRINGCONST add_string_constant_to_dict
    (98) constants -> . booleanconst
    (99) booleanconst -> . TRUE add_bool_constant_to_dict
    (100) booleanconst -> . FALSE add_bool_constant_to_dict

    O_PARENTHESIS   shift and go to state 58
    ID              shift and go to state 65
    INTCONST        shift and go to state 63
    FLOATCONST      shift and go to state 57
    STRINGCONST     shift and go to state 60
    TRUE            shift and go to state 59
    FALSE           shift and go to state 68

    varconstfunction               shift and go to state 61
    expression2                    shift and go to state 64
    constants                      shift and go to state 66
    term                           shift and go to state 67
    varconst                       shift and go to state 69
    exp                            shift and go to state 62
    booleanconst                   shift and go to state 70
    expression                     shift and go to state 152
    fact                           shift and go to state 72

state 122

    (86) listaccess -> O_S_BRACKET INTCONST C_S_BRACKET .

    EQUALS          reduce using rule 86 (listaccess -> O_S_BRACKET INTCONST C_S_BRACKET .)


state 123

    (109) functioncall -> ID O_PARENTHESIS parametersinput C_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 153


state 124

    (110) parametersinput -> expression parametersinputloop .

    C_PARENTHESIS   reduce using rule 110 (parametersinput -> expression parametersinputloop .)


state 125

    (112) parametersinputloop -> COMMA . expression parametersinputloop
    (51) expression -> . expression2 expressionoptional
    (54) expression2 -> . exp expression2optional
    (67) exp -> . term exp_quadruple exploop
    (73) term -> . fact term_quadruple termloop
    (80) fact -> . varconst
    (81) fact -> . O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis
    (88) varconst -> . varconstfunction
    (89) varconst -> . constants
    (90) varconstfunction -> . ID functionorlist
    (95) constants -> . INTCONST add_int_constant_to_dict
    (96) constants -> . FLOATCONST add_float_constant_to_dict
    (97) constants -> . STRINGCONST add_string_constant_to_dict
    (98) constants -> . booleanconst
    (99) booleanconst -> . TRUE add_bool_constant_to_dict
    (100) booleanconst -> . FALSE add_bool_constant_to_dict

    O_PARENTHESIS   shift and go to state 58
    ID              shift and go to state 65
    INTCONST        shift and go to state 63
    FLOATCONST      shift and go to state 57
    STRINGCONST     shift and go to state 60
    TRUE            shift and go to state 59
    FALSE           shift and go to state 68

    varconstfunction               shift and go to state 61
    exp                            shift and go to state 62
    expression2                    shift and go to state 64
    constants                      shift and go to state 66
    term                           shift and go to state 67
    varconst                       shift and go to state 69
    booleanconst                   shift and go to state 70
    expression                     shift and go to state 154
    fact                           shift and go to state 72

state 126

    (48) condition -> IF O_PARENTHESIS expression C_PARENTHESIS . block else
    (19) block -> . O_BRACKET statutesloop functionreturn C_BRACKET

    O_BRACKET       shift and go to state 7

    block                          shift and go to state 155

state 127

    (20) functionreturn -> RETURN expression SEMICOLON .

    C_BRACKET       reduce using rule 20 (functionreturn -> RETURN expression SEMICOLON .)


state 128

    (42) listinit -> LIST type var EQUALS . list SEMICOLON
    (43) list -> . O_S_BRACKET listelements C_S_BRACKET

    O_S_BRACKET     shift and go to state 157

    list                           shift and go to state 156

state 129

    (116) parameterinit -> parametertype ID .

    COMMA           reduce using rule 116 (parameterinit -> parametertype ID .)
    C_PARENTHESIS   reduce using rule 116 (parameterinit -> parametertype ID .)


state 130

    (5) function -> FUNCTION functiontype ID O_PARENTHESIS parameters C_PARENTHESIS . block
    (19) block -> . O_BRACKET statutesloop functionreturn C_BRACKET

    O_BRACKET       shift and go to state 7

    block                          shift and go to state 158

state 131

    (114) parameters -> parameterinit parametersloop .

    C_PARENTHESIS   reduce using rule 114 (parameters -> parameterinit parametersloop .)


state 132

    (117) parametersloop -> COMMA . parameterinit parametersloop
    (116) parameterinit -> . parametertype ID
    (15) parametertype -> . BOOL
    (16) parametertype -> . INT
    (17) parametertype -> . FLOAT
    (18) parametertype -> . STRING

    BOOL            shift and go to state 89
    INT             shift and go to state 87
    FLOAT           shift and go to state 88
    STRING          shift and go to state 91

    parametertype                  shift and go to state 85
    parameterinit                  shift and go to state 159

state 133

    (108) timesloop -> TIMES O_PARENTHESIS INTCONST C_PARENTHESIS block .

    IF              reduce using rule 108 (timesloop -> TIMES O_PARENTHESIS INTCONST C_PARENTHESIS block .)
    PRINT           reduce using rule 108 (timesloop -> TIMES O_PARENTHESIS INTCONST C_PARENTHESIS block .)
    ID              reduce using rule 108 (timesloop -> TIMES O_PARENTHESIS INTCONST C_PARENTHESIS block .)
    LIST            reduce using rule 108 (timesloop -> TIMES O_PARENTHESIS INTCONST C_PARENTHESIS block .)
    WHILE           reduce using rule 108 (timesloop -> TIMES O_PARENTHESIS INTCONST C_PARENTHESIS block .)
    TIMES           reduce using rule 108 (timesloop -> TIMES O_PARENTHESIS INTCONST C_PARENTHESIS block .)
    BOOL            reduce using rule 108 (timesloop -> TIMES O_PARENTHESIS INTCONST C_PARENTHESIS block .)
    INT             reduce using rule 108 (timesloop -> TIMES O_PARENTHESIS INTCONST C_PARENTHESIS block .)
    FLOAT           reduce using rule 108 (timesloop -> TIMES O_PARENTHESIS INTCONST C_PARENTHESIS block .)
    STRING          reduce using rule 108 (timesloop -> TIMES O_PARENTHESIS INTCONST C_PARENTHESIS block .)
    RETURN          reduce using rule 108 (timesloop -> TIMES O_PARENTHESIS INTCONST C_PARENTHESIS block .)
    C_BRACKET       reduce using rule 108 (timesloop -> TIMES O_PARENTHESIS INTCONST C_PARENTHESIS block .)


state 134

    (81) fact -> O_PARENTHESIS add_o_parenthesis expression . C_PARENTHESIS add_c_parenthesis

    C_PARENTHESIS   shift and go to state 160


state 135

    (55) expression2optional -> relop exp . relop_quadruple
    (66) relop_quadruple -> .

    AND             reduce using rule 66 (relop_quadruple -> .)
    OR              reduce using rule 66 (relop_quadruple -> .)
    C_PARENTHESIS   reduce using rule 66 (relop_quadruple -> .)
    COMMA           reduce using rule 66 (relop_quadruple -> .)
    SEMICOLON       reduce using rule 66 (relop_quadruple -> .)

    relop_quadruple                shift and go to state 161

state 136

    (52) expressionoptional -> logicop expression2 . logic_op_quadruple
    (59) logic_op_quadruple -> .

    C_PARENTHESIS   reduce using rule 59 (logic_op_quadruple -> .)
    COMMA           reduce using rule 59 (logic_op_quadruple -> .)
    SEMICOLON       reduce using rule 59 (logic_op_quadruple -> .)

    logic_op_quadruple             shift and go to state 162

state 137

    (92) functionorlist -> O_S_BRACKET INTCONST . C_S_BRACKET

    C_S_BRACKET     shift and go to state 163


state 138

    (93) functionorlist -> O_PARENTHESIS parametersinput . C_PARENTHESIS

    C_PARENTHESIS   shift and go to state 164


state 139

    (71) addsub -> SUM .

    O_PARENTHESIS   reduce using rule 71 (addsub -> SUM .)
    ID              reduce using rule 71 (addsub -> SUM .)
    INTCONST        reduce using rule 71 (addsub -> SUM .)
    FLOATCONST      reduce using rule 71 (addsub -> SUM .)
    STRINGCONST     reduce using rule 71 (addsub -> SUM .)
    TRUE            reduce using rule 71 (addsub -> SUM .)
    FALSE           reduce using rule 71 (addsub -> SUM .)


state 140

    (72) addsub -> MINUS .

    O_PARENTHESIS   reduce using rule 72 (addsub -> MINUS .)
    ID              reduce using rule 72 (addsub -> MINUS .)
    INTCONST        reduce using rule 72 (addsub -> MINUS .)
    FLOATCONST      reduce using rule 72 (addsub -> MINUS .)
    STRINGCONST     reduce using rule 72 (addsub -> MINUS .)
    TRUE            reduce using rule 72 (addsub -> MINUS .)
    FALSE           reduce using rule 72 (addsub -> MINUS .)


state 141

    (67) exp -> term exp_quadruple exploop .

    EQUALITY        reduce using rule 67 (exp -> term exp_quadruple exploop .)
    GREATER         reduce using rule 67 (exp -> term exp_quadruple exploop .)
    GREATER_EQUAL   reduce using rule 67 (exp -> term exp_quadruple exploop .)
    LESS            reduce using rule 67 (exp -> term exp_quadruple exploop .)
    LESS_EQUAL      reduce using rule 67 (exp -> term exp_quadruple exploop .)
    DIFFERENT       reduce using rule 67 (exp -> term exp_quadruple exploop .)
    AND             reduce using rule 67 (exp -> term exp_quadruple exploop .)
    OR              reduce using rule 67 (exp -> term exp_quadruple exploop .)
    SEMICOLON       reduce using rule 67 (exp -> term exp_quadruple exploop .)
    C_PARENTHESIS   reduce using rule 67 (exp -> term exp_quadruple exploop .)
    COMMA           reduce using rule 67 (exp -> term exp_quadruple exploop .)


state 142

    (69) exploop -> addsub . exp
    (67) exp -> . term exp_quadruple exploop
    (73) term -> . fact term_quadruple termloop
    (80) fact -> . varconst
    (81) fact -> . O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis
    (88) varconst -> . varconstfunction
    (89) varconst -> . constants
    (90) varconstfunction -> . ID functionorlist
    (95) constants -> . INTCONST add_int_constant_to_dict
    (96) constants -> . FLOATCONST add_float_constant_to_dict
    (97) constants -> . STRINGCONST add_string_constant_to_dict
    (98) constants -> . booleanconst
    (99) booleanconst -> . TRUE add_bool_constant_to_dict
    (100) booleanconst -> . FALSE add_bool_constant_to_dict

    O_PARENTHESIS   shift and go to state 58
    ID              shift and go to state 65
    INTCONST        shift and go to state 63
    FLOATCONST      shift and go to state 57
    STRINGCONST     shift and go to state 60
    TRUE            shift and go to state 59
    FALSE           shift and go to state 68

    term                           shift and go to state 67
    varconst                       shift and go to state 69
    constants                      shift and go to state 66
    exp                            shift and go to state 165
    booleanconst                   shift and go to state 70
    varconstfunction               shift and go to state 61
    fact                           shift and go to state 72

state 143

    (107) whileloop -> WHILE O_PARENTHESIS expression C_PARENTHESIS block .

    IF              reduce using rule 107 (whileloop -> WHILE O_PARENTHESIS expression C_PARENTHESIS block .)
    PRINT           reduce using rule 107 (whileloop -> WHILE O_PARENTHESIS expression C_PARENTHESIS block .)
    ID              reduce using rule 107 (whileloop -> WHILE O_PARENTHESIS expression C_PARENTHESIS block .)
    LIST            reduce using rule 107 (whileloop -> WHILE O_PARENTHESIS expression C_PARENTHESIS block .)
    WHILE           reduce using rule 107 (whileloop -> WHILE O_PARENTHESIS expression C_PARENTHESIS block .)
    TIMES           reduce using rule 107 (whileloop -> WHILE O_PARENTHESIS expression C_PARENTHESIS block .)
    BOOL            reduce using rule 107 (whileloop -> WHILE O_PARENTHESIS expression C_PARENTHESIS block .)
    INT             reduce using rule 107 (whileloop -> WHILE O_PARENTHESIS expression C_PARENTHESIS block .)
    FLOAT           reduce using rule 107 (whileloop -> WHILE O_PARENTHESIS expression C_PARENTHESIS block .)
    STRING          reduce using rule 107 (whileloop -> WHILE O_PARENTHESIS expression C_PARENTHESIS block .)
    RETURN          reduce using rule 107 (whileloop -> WHILE O_PARENTHESIS expression C_PARENTHESIS block .)
    C_BRACKET       reduce using rule 107 (whileloop -> WHILE O_PARENTHESIS expression C_PARENTHESIS block .)


state 144

    (78) divmult -> DIVIDE .

    O_PARENTHESIS   reduce using rule 78 (divmult -> DIVIDE .)
    ID              reduce using rule 78 (divmult -> DIVIDE .)
    INTCONST        reduce using rule 78 (divmult -> DIVIDE .)
    FLOATCONST      reduce using rule 78 (divmult -> DIVIDE .)
    STRINGCONST     reduce using rule 78 (divmult -> DIVIDE .)
    TRUE            reduce using rule 78 (divmult -> DIVIDE .)
    FALSE           reduce using rule 78 (divmult -> DIVIDE .)


state 145

    (73) term -> fact term_quadruple termloop .

    SUM             reduce using rule 73 (term -> fact term_quadruple termloop .)
    MINUS           reduce using rule 73 (term -> fact term_quadruple termloop .)
    EQUALITY        reduce using rule 73 (term -> fact term_quadruple termloop .)
    GREATER         reduce using rule 73 (term -> fact term_quadruple termloop .)
    GREATER_EQUAL   reduce using rule 73 (term -> fact term_quadruple termloop .)
    LESS            reduce using rule 73 (term -> fact term_quadruple termloop .)
    LESS_EQUAL      reduce using rule 73 (term -> fact term_quadruple termloop .)
    DIFFERENT       reduce using rule 73 (term -> fact term_quadruple termloop .)
    AND             reduce using rule 73 (term -> fact term_quadruple termloop .)
    OR              reduce using rule 73 (term -> fact term_quadruple termloop .)
    SEMICOLON       reduce using rule 73 (term -> fact term_quadruple termloop .)
    COMMA           reduce using rule 73 (term -> fact term_quadruple termloop .)
    C_PARENTHESIS   reduce using rule 73 (term -> fact term_quadruple termloop .)


state 146

    (77) divmult -> MULTIPLY .

    O_PARENTHESIS   reduce using rule 77 (divmult -> MULTIPLY .)
    ID              reduce using rule 77 (divmult -> MULTIPLY .)
    INTCONST        reduce using rule 77 (divmult -> MULTIPLY .)
    FLOATCONST      reduce using rule 77 (divmult -> MULTIPLY .)
    STRINGCONST     reduce using rule 77 (divmult -> MULTIPLY .)
    TRUE            reduce using rule 77 (divmult -> MULTIPLY .)
    FALSE           reduce using rule 77 (divmult -> MULTIPLY .)


state 147

    (75) termloop -> divmult . term
    (73) term -> . fact term_quadruple termloop
    (80) fact -> . varconst
    (81) fact -> . O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis
    (88) varconst -> . varconstfunction
    (89) varconst -> . constants
    (90) varconstfunction -> . ID functionorlist
    (95) constants -> . INTCONST add_int_constant_to_dict
    (96) constants -> . FLOATCONST add_float_constant_to_dict
    (97) constants -> . STRINGCONST add_string_constant_to_dict
    (98) constants -> . booleanconst
    (99) booleanconst -> . TRUE add_bool_constant_to_dict
    (100) booleanconst -> . FALSE add_bool_constant_to_dict

    O_PARENTHESIS   shift and go to state 58
    ID              shift and go to state 65
    INTCONST        shift and go to state 63
    FLOATCONST      shift and go to state 57
    STRINGCONST     shift and go to state 60
    TRUE            shift and go to state 59
    FALSE           shift and go to state 68

    term                           shift and go to state 166
    varconstfunction               shift and go to state 61
    varconst                       shift and go to state 69
    constants                      shift and go to state 66
    booleanconst                   shift and go to state 70
    fact                           shift and go to state 72

state 148

    (79) divmult -> MOD .

    O_PARENTHESIS   reduce using rule 79 (divmult -> MOD .)
    ID              reduce using rule 79 (divmult -> MOD .)
    INTCONST        reduce using rule 79 (divmult -> MOD .)
    FLOATCONST      reduce using rule 79 (divmult -> MOD .)
    STRINGCONST     reduce using rule 79 (divmult -> MOD .)
    TRUE            reduce using rule 79 (divmult -> MOD .)
    FALSE           reduce using rule 79 (divmult -> MOD .)


state 149

    (34) writtingloop -> start_printing expression print_quadruple . optionalwritting
    (35) optionalwritting -> . COMMA writtingloop
    (36) optionalwritting -> .

    COMMA           shift and go to state 168
    C_PARENTHESIS   reduce using rule 36 (optionalwritting -> .)

    optionalwritting               shift and go to state 167

state 150

    (31) writting -> PRINT O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON .

    IF              reduce using rule 31 (writting -> PRINT O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON .)
    PRINT           reduce using rule 31 (writting -> PRINT O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON .)
    ID              reduce using rule 31 (writting -> PRINT O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON .)
    LIST            reduce using rule 31 (writting -> PRINT O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON .)
    WHILE           reduce using rule 31 (writting -> PRINT O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON .)
    TIMES           reduce using rule 31 (writting -> PRINT O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON .)
    BOOL            reduce using rule 31 (writting -> PRINT O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON .)
    INT             reduce using rule 31 (writting -> PRINT O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON .)
    FLOAT           reduce using rule 31 (writting -> PRINT O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON .)
    STRING          reduce using rule 31 (writting -> PRINT O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON .)
    RETURN          reduce using rule 31 (writting -> PRINT O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON .)
    C_BRACKET       reduce using rule 31 (writting -> PRINT O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON .)


state 151

    (30) assignation -> var_assign EQUALS add_equals expression equals_quadruple . SEMICOLON

    SEMICOLON       shift and go to state 169


state 152

    (39) normalinit -> type var EQUALS add_equals expression . equals_quadruple SEMICOLON
    (40) equals_quadruple -> .

    SEMICOLON       reduce using rule 40 (equals_quadruple -> .)

    equals_quadruple               shift and go to state 170

state 153

    (109) functioncall -> ID O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON .

    IF              reduce using rule 109 (functioncall -> ID O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON .)
    PRINT           reduce using rule 109 (functioncall -> ID O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON .)
    ID              reduce using rule 109 (functioncall -> ID O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON .)
    LIST            reduce using rule 109 (functioncall -> ID O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON .)
    WHILE           reduce using rule 109 (functioncall -> ID O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON .)
    TIMES           reduce using rule 109 (functioncall -> ID O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON .)
    BOOL            reduce using rule 109 (functioncall -> ID O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON .)
    INT             reduce using rule 109 (functioncall -> ID O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON .)
    FLOAT           reduce using rule 109 (functioncall -> ID O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON .)
    STRING          reduce using rule 109 (functioncall -> ID O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON .)
    RETURN          reduce using rule 109 (functioncall -> ID O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON .)
    C_BRACKET       reduce using rule 109 (functioncall -> ID O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON .)


state 154

    (112) parametersinputloop -> COMMA expression . parametersinputloop
    (112) parametersinputloop -> . COMMA expression parametersinputloop
    (113) parametersinputloop -> .

    COMMA           shift and go to state 125
    C_PARENTHESIS   reduce using rule 113 (parametersinputloop -> .)

    parametersinputloop            shift and go to state 171

state 155

    (48) condition -> IF O_PARENTHESIS expression C_PARENTHESIS block . else
    (49) else -> . ELSE block
    (50) else -> .

    ELSE            shift and go to state 172
    IF              reduce using rule 50 (else -> .)
    PRINT           reduce using rule 50 (else -> .)
    ID              reduce using rule 50 (else -> .)
    LIST            reduce using rule 50 (else -> .)
    WHILE           reduce using rule 50 (else -> .)
    TIMES           reduce using rule 50 (else -> .)
    BOOL            reduce using rule 50 (else -> .)
    INT             reduce using rule 50 (else -> .)
    FLOAT           reduce using rule 50 (else -> .)
    STRING          reduce using rule 50 (else -> .)
    RETURN          reduce using rule 50 (else -> .)
    C_BRACKET       reduce using rule 50 (else -> .)

    else                           shift and go to state 173

state 156

    (42) listinit -> LIST type var EQUALS list . SEMICOLON

    SEMICOLON       shift and go to state 174


state 157

    (43) list -> O_S_BRACKET . listelements C_S_BRACKET
    (44) listelements -> . constants optionalconstants
    (45) listelements -> .
    (95) constants -> . INTCONST add_int_constant_to_dict
    (96) constants -> . FLOATCONST add_float_constant_to_dict
    (97) constants -> . STRINGCONST add_string_constant_to_dict
    (98) constants -> . booleanconst
    (99) booleanconst -> . TRUE add_bool_constant_to_dict
    (100) booleanconst -> . FALSE add_bool_constant_to_dict

    C_S_BRACKET     reduce using rule 45 (listelements -> .)
    INTCONST        shift and go to state 63
    FLOATCONST      shift and go to state 57
    STRINGCONST     shift and go to state 60
    TRUE            shift and go to state 59
    FALSE           shift and go to state 68

    listelements                   shift and go to state 175
    booleanconst                   shift and go to state 70
    constants                      shift and go to state 176

state 158

    (5) function -> FUNCTION functiontype ID O_PARENTHESIS parameters C_PARENTHESIS block .

    FUNCTION        reduce using rule 5 (function -> FUNCTION functiontype ID O_PARENTHESIS parameters C_PARENTHESIS block .)
    $end            reduce using rule 5 (function -> FUNCTION functiontype ID O_PARENTHESIS parameters C_PARENTHESIS block .)


state 159

    (117) parametersloop -> COMMA parameterinit . parametersloop
    (117) parametersloop -> . COMMA parameterinit parametersloop
    (118) parametersloop -> .

    COMMA           shift and go to state 132
    C_PARENTHESIS   reduce using rule 118 (parametersloop -> .)

    parametersloop                 shift and go to state 177

state 160

    (81) fact -> O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS . add_c_parenthesis
    (83) add_c_parenthesis -> .

    MULTIPLY        reduce using rule 83 (add_c_parenthesis -> .)
    DIVIDE          reduce using rule 83 (add_c_parenthesis -> .)
    MOD             reduce using rule 83 (add_c_parenthesis -> .)
    SUM             reduce using rule 83 (add_c_parenthesis -> .)
    MINUS           reduce using rule 83 (add_c_parenthesis -> .)
    EQUALITY        reduce using rule 83 (add_c_parenthesis -> .)
    GREATER         reduce using rule 83 (add_c_parenthesis -> .)
    GREATER_EQUAL   reduce using rule 83 (add_c_parenthesis -> .)
    LESS            reduce using rule 83 (add_c_parenthesis -> .)
    LESS_EQUAL      reduce using rule 83 (add_c_parenthesis -> .)
    DIFFERENT       reduce using rule 83 (add_c_parenthesis -> .)
    AND             reduce using rule 83 (add_c_parenthesis -> .)
    OR              reduce using rule 83 (add_c_parenthesis -> .)
    C_PARENTHESIS   reduce using rule 83 (add_c_parenthesis -> .)
    COMMA           reduce using rule 83 (add_c_parenthesis -> .)
    SEMICOLON       reduce using rule 83 (add_c_parenthesis -> .)

    add_c_parenthesis              shift and go to state 178

state 161

    (55) expression2optional -> relop exp relop_quadruple .

    AND             reduce using rule 55 (expression2optional -> relop exp relop_quadruple .)
    OR              reduce using rule 55 (expression2optional -> relop exp relop_quadruple .)
    C_PARENTHESIS   reduce using rule 55 (expression2optional -> relop exp relop_quadruple .)
    COMMA           reduce using rule 55 (expression2optional -> relop exp relop_quadruple .)
    SEMICOLON       reduce using rule 55 (expression2optional -> relop exp relop_quadruple .)


state 162

    (52) expressionoptional -> logicop expression2 logic_op_quadruple .

    C_PARENTHESIS   reduce using rule 52 (expressionoptional -> logicop expression2 logic_op_quadruple .)
    COMMA           reduce using rule 52 (expressionoptional -> logicop expression2 logic_op_quadruple .)
    SEMICOLON       reduce using rule 52 (expressionoptional -> logicop expression2 logic_op_quadruple .)


state 163

    (92) functionorlist -> O_S_BRACKET INTCONST C_S_BRACKET .

    MULTIPLY        reduce using rule 92 (functionorlist -> O_S_BRACKET INTCONST C_S_BRACKET .)
    DIVIDE          reduce using rule 92 (functionorlist -> O_S_BRACKET INTCONST C_S_BRACKET .)
    MOD             reduce using rule 92 (functionorlist -> O_S_BRACKET INTCONST C_S_BRACKET .)
    SUM             reduce using rule 92 (functionorlist -> O_S_BRACKET INTCONST C_S_BRACKET .)
    MINUS           reduce using rule 92 (functionorlist -> O_S_BRACKET INTCONST C_S_BRACKET .)
    EQUALITY        reduce using rule 92 (functionorlist -> O_S_BRACKET INTCONST C_S_BRACKET .)
    GREATER         reduce using rule 92 (functionorlist -> O_S_BRACKET INTCONST C_S_BRACKET .)
    GREATER_EQUAL   reduce using rule 92 (functionorlist -> O_S_BRACKET INTCONST C_S_BRACKET .)
    LESS            reduce using rule 92 (functionorlist -> O_S_BRACKET INTCONST C_S_BRACKET .)
    LESS_EQUAL      reduce using rule 92 (functionorlist -> O_S_BRACKET INTCONST C_S_BRACKET .)
    DIFFERENT       reduce using rule 92 (functionorlist -> O_S_BRACKET INTCONST C_S_BRACKET .)
    AND             reduce using rule 92 (functionorlist -> O_S_BRACKET INTCONST C_S_BRACKET .)
    OR              reduce using rule 92 (functionorlist -> O_S_BRACKET INTCONST C_S_BRACKET .)
    C_PARENTHESIS   reduce using rule 92 (functionorlist -> O_S_BRACKET INTCONST C_S_BRACKET .)
    COMMA           reduce using rule 92 (functionorlist -> O_S_BRACKET INTCONST C_S_BRACKET .)
    SEMICOLON       reduce using rule 92 (functionorlist -> O_S_BRACKET INTCONST C_S_BRACKET .)


state 164

    (93) functionorlist -> O_PARENTHESIS parametersinput C_PARENTHESIS .

    MULTIPLY        reduce using rule 93 (functionorlist -> O_PARENTHESIS parametersinput C_PARENTHESIS .)
    DIVIDE          reduce using rule 93 (functionorlist -> O_PARENTHESIS parametersinput C_PARENTHESIS .)
    MOD             reduce using rule 93 (functionorlist -> O_PARENTHESIS parametersinput C_PARENTHESIS .)
    SUM             reduce using rule 93 (functionorlist -> O_PARENTHESIS parametersinput C_PARENTHESIS .)
    MINUS           reduce using rule 93 (functionorlist -> O_PARENTHESIS parametersinput C_PARENTHESIS .)
    EQUALITY        reduce using rule 93 (functionorlist -> O_PARENTHESIS parametersinput C_PARENTHESIS .)
    GREATER         reduce using rule 93 (functionorlist -> O_PARENTHESIS parametersinput C_PARENTHESIS .)
    GREATER_EQUAL   reduce using rule 93 (functionorlist -> O_PARENTHESIS parametersinput C_PARENTHESIS .)
    LESS            reduce using rule 93 (functionorlist -> O_PARENTHESIS parametersinput C_PARENTHESIS .)
    LESS_EQUAL      reduce using rule 93 (functionorlist -> O_PARENTHESIS parametersinput C_PARENTHESIS .)
    DIFFERENT       reduce using rule 93 (functionorlist -> O_PARENTHESIS parametersinput C_PARENTHESIS .)
    AND             reduce using rule 93 (functionorlist -> O_PARENTHESIS parametersinput C_PARENTHESIS .)
    OR              reduce using rule 93 (functionorlist -> O_PARENTHESIS parametersinput C_PARENTHESIS .)
    C_PARENTHESIS   reduce using rule 93 (functionorlist -> O_PARENTHESIS parametersinput C_PARENTHESIS .)
    COMMA           reduce using rule 93 (functionorlist -> O_PARENTHESIS parametersinput C_PARENTHESIS .)
    SEMICOLON       reduce using rule 93 (functionorlist -> O_PARENTHESIS parametersinput C_PARENTHESIS .)


state 165

    (69) exploop -> addsub exp .

    EQUALITY        reduce using rule 69 (exploop -> addsub exp .)
    GREATER         reduce using rule 69 (exploop -> addsub exp .)
    GREATER_EQUAL   reduce using rule 69 (exploop -> addsub exp .)
    LESS            reduce using rule 69 (exploop -> addsub exp .)
    LESS_EQUAL      reduce using rule 69 (exploop -> addsub exp .)
    DIFFERENT       reduce using rule 69 (exploop -> addsub exp .)
    AND             reduce using rule 69 (exploop -> addsub exp .)
    OR              reduce using rule 69 (exploop -> addsub exp .)
    C_PARENTHESIS   reduce using rule 69 (exploop -> addsub exp .)
    COMMA           reduce using rule 69 (exploop -> addsub exp .)
    SEMICOLON       reduce using rule 69 (exploop -> addsub exp .)


state 166

    (75) termloop -> divmult term .

    SUM             reduce using rule 75 (termloop -> divmult term .)
    MINUS           reduce using rule 75 (termloop -> divmult term .)
    EQUALITY        reduce using rule 75 (termloop -> divmult term .)
    GREATER         reduce using rule 75 (termloop -> divmult term .)
    GREATER_EQUAL   reduce using rule 75 (termloop -> divmult term .)
    LESS            reduce using rule 75 (termloop -> divmult term .)
    LESS_EQUAL      reduce using rule 75 (termloop -> divmult term .)
    DIFFERENT       reduce using rule 75 (termloop -> divmult term .)
    AND             reduce using rule 75 (termloop -> divmult term .)
    OR              reduce using rule 75 (termloop -> divmult term .)
    C_PARENTHESIS   reduce using rule 75 (termloop -> divmult term .)
    COMMA           reduce using rule 75 (termloop -> divmult term .)
    SEMICOLON       reduce using rule 75 (termloop -> divmult term .)


state 167

    (34) writtingloop -> start_printing expression print_quadruple optionalwritting .

    C_PARENTHESIS   reduce using rule 34 (writtingloop -> start_printing expression print_quadruple optionalwritting .)


state 168

    (35) optionalwritting -> COMMA . writtingloop
    (34) writtingloop -> . start_printing expression print_quadruple optionalwritting
    (32) start_printing -> .

    O_PARENTHESIS   reduce using rule 32 (start_printing -> .)
    ID              reduce using rule 32 (start_printing -> .)
    INTCONST        reduce using rule 32 (start_printing -> .)
    FLOATCONST      reduce using rule 32 (start_printing -> .)
    STRINGCONST     reduce using rule 32 (start_printing -> .)
    TRUE            reduce using rule 32 (start_printing -> .)
    FALSE           reduce using rule 32 (start_printing -> .)

    writtingloop                   shift and go to state 179
    start_printing                 shift and go to state 73

state 169

    (30) assignation -> var_assign EQUALS add_equals expression equals_quadruple SEMICOLON .

    IF              reduce using rule 30 (assignation -> var_assign EQUALS add_equals expression equals_quadruple SEMICOLON .)
    PRINT           reduce using rule 30 (assignation -> var_assign EQUALS add_equals expression equals_quadruple SEMICOLON .)
    ID              reduce using rule 30 (assignation -> var_assign EQUALS add_equals expression equals_quadruple SEMICOLON .)
    LIST            reduce using rule 30 (assignation -> var_assign EQUALS add_equals expression equals_quadruple SEMICOLON .)
    WHILE           reduce using rule 30 (assignation -> var_assign EQUALS add_equals expression equals_quadruple SEMICOLON .)
    TIMES           reduce using rule 30 (assignation -> var_assign EQUALS add_equals expression equals_quadruple SEMICOLON .)
    BOOL            reduce using rule 30 (assignation -> var_assign EQUALS add_equals expression equals_quadruple SEMICOLON .)
    INT             reduce using rule 30 (assignation -> var_assign EQUALS add_equals expression equals_quadruple SEMICOLON .)
    FLOAT           reduce using rule 30 (assignation -> var_assign EQUALS add_equals expression equals_quadruple SEMICOLON .)
    STRING          reduce using rule 30 (assignation -> var_assign EQUALS add_equals expression equals_quadruple SEMICOLON .)
    RETURN          reduce using rule 30 (assignation -> var_assign EQUALS add_equals expression equals_quadruple SEMICOLON .)
    C_BRACKET       reduce using rule 30 (assignation -> var_assign EQUALS add_equals expression equals_quadruple SEMICOLON .)


state 170

    (39) normalinit -> type var EQUALS add_equals expression equals_quadruple . SEMICOLON

    SEMICOLON       shift and go to state 180


state 171

    (112) parametersinputloop -> COMMA expression parametersinputloop .

    C_PARENTHESIS   reduce using rule 112 (parametersinputloop -> COMMA expression parametersinputloop .)


state 172

    (49) else -> ELSE . block
    (19) block -> . O_BRACKET statutesloop functionreturn C_BRACKET

    O_BRACKET       shift and go to state 7

    block                          shift and go to state 181

state 173

    (48) condition -> IF O_PARENTHESIS expression C_PARENTHESIS block else .

    IF              reduce using rule 48 (condition -> IF O_PARENTHESIS expression C_PARENTHESIS block else .)
    PRINT           reduce using rule 48 (condition -> IF O_PARENTHESIS expression C_PARENTHESIS block else .)
    ID              reduce using rule 48 (condition -> IF O_PARENTHESIS expression C_PARENTHESIS block else .)
    LIST            reduce using rule 48 (condition -> IF O_PARENTHESIS expression C_PARENTHESIS block else .)
    WHILE           reduce using rule 48 (condition -> IF O_PARENTHESIS expression C_PARENTHESIS block else .)
    TIMES           reduce using rule 48 (condition -> IF O_PARENTHESIS expression C_PARENTHESIS block else .)
    BOOL            reduce using rule 48 (condition -> IF O_PARENTHESIS expression C_PARENTHESIS block else .)
    INT             reduce using rule 48 (condition -> IF O_PARENTHESIS expression C_PARENTHESIS block else .)
    FLOAT           reduce using rule 48 (condition -> IF O_PARENTHESIS expression C_PARENTHESIS block else .)
    STRING          reduce using rule 48 (condition -> IF O_PARENTHESIS expression C_PARENTHESIS block else .)
    RETURN          reduce using rule 48 (condition -> IF O_PARENTHESIS expression C_PARENTHESIS block else .)
    C_BRACKET       reduce using rule 48 (condition -> IF O_PARENTHESIS expression C_PARENTHESIS block else .)


state 174

    (42) listinit -> LIST type var EQUALS list SEMICOLON .

    IF              reduce using rule 42 (listinit -> LIST type var EQUALS list SEMICOLON .)
    PRINT           reduce using rule 42 (listinit -> LIST type var EQUALS list SEMICOLON .)
    ID              reduce using rule 42 (listinit -> LIST type var EQUALS list SEMICOLON .)
    LIST            reduce using rule 42 (listinit -> LIST type var EQUALS list SEMICOLON .)
    WHILE           reduce using rule 42 (listinit -> LIST type var EQUALS list SEMICOLON .)
    TIMES           reduce using rule 42 (listinit -> LIST type var EQUALS list SEMICOLON .)
    BOOL            reduce using rule 42 (listinit -> LIST type var EQUALS list SEMICOLON .)
    INT             reduce using rule 42 (listinit -> LIST type var EQUALS list SEMICOLON .)
    FLOAT           reduce using rule 42 (listinit -> LIST type var EQUALS list SEMICOLON .)
    STRING          reduce using rule 42 (listinit -> LIST type var EQUALS list SEMICOLON .)
    RETURN          reduce using rule 42 (listinit -> LIST type var EQUALS list SEMICOLON .)
    C_BRACKET       reduce using rule 42 (listinit -> LIST type var EQUALS list SEMICOLON .)


state 175

    (43) list -> O_S_BRACKET listelements . C_S_BRACKET

    C_S_BRACKET     shift and go to state 182


state 176

    (44) listelements -> constants . optionalconstants
    (46) optionalconstants -> . COMMA constants optionalconstants
    (47) optionalconstants -> .

    COMMA           shift and go to state 184
    C_S_BRACKET     reduce using rule 47 (optionalconstants -> .)

    optionalconstants              shift and go to state 183

state 177

    (117) parametersloop -> COMMA parameterinit parametersloop .

    C_PARENTHESIS   reduce using rule 117 (parametersloop -> COMMA parameterinit parametersloop .)


state 178

    (81) fact -> O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis .

    MULTIPLY        reduce using rule 81 (fact -> O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis .)
    DIVIDE          reduce using rule 81 (fact -> O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis .)
    MOD             reduce using rule 81 (fact -> O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis .)
    SUM             reduce using rule 81 (fact -> O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis .)
    MINUS           reduce using rule 81 (fact -> O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis .)
    EQUALITY        reduce using rule 81 (fact -> O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis .)
    GREATER         reduce using rule 81 (fact -> O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis .)
    GREATER_EQUAL   reduce using rule 81 (fact -> O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis .)
    LESS            reduce using rule 81 (fact -> O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis .)
    LESS_EQUAL      reduce using rule 81 (fact -> O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis .)
    DIFFERENT       reduce using rule 81 (fact -> O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis .)
    AND             reduce using rule 81 (fact -> O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis .)
    OR              reduce using rule 81 (fact -> O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis .)
    C_PARENTHESIS   reduce using rule 81 (fact -> O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis .)
    COMMA           reduce using rule 81 (fact -> O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis .)
    SEMICOLON       reduce using rule 81 (fact -> O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis .)


state 179

    (35) optionalwritting -> COMMA writtingloop .

    C_PARENTHESIS   reduce using rule 35 (optionalwritting -> COMMA writtingloop .)


state 180

    (39) normalinit -> type var EQUALS add_equals expression equals_quadruple SEMICOLON .

    IF              reduce using rule 39 (normalinit -> type var EQUALS add_equals expression equals_quadruple SEMICOLON .)
    PRINT           reduce using rule 39 (normalinit -> type var EQUALS add_equals expression equals_quadruple SEMICOLON .)
    ID              reduce using rule 39 (normalinit -> type var EQUALS add_equals expression equals_quadruple SEMICOLON .)
    LIST            reduce using rule 39 (normalinit -> type var EQUALS add_equals expression equals_quadruple SEMICOLON .)
    WHILE           reduce using rule 39 (normalinit -> type var EQUALS add_equals expression equals_quadruple SEMICOLON .)
    TIMES           reduce using rule 39 (normalinit -> type var EQUALS add_equals expression equals_quadruple SEMICOLON .)
    BOOL            reduce using rule 39 (normalinit -> type var EQUALS add_equals expression equals_quadruple SEMICOLON .)
    INT             reduce using rule 39 (normalinit -> type var EQUALS add_equals expression equals_quadruple SEMICOLON .)
    FLOAT           reduce using rule 39 (normalinit -> type var EQUALS add_equals expression equals_quadruple SEMICOLON .)
    STRING          reduce using rule 39 (normalinit -> type var EQUALS add_equals expression equals_quadruple SEMICOLON .)
    RETURN          reduce using rule 39 (normalinit -> type var EQUALS add_equals expression equals_quadruple SEMICOLON .)
    C_BRACKET       reduce using rule 39 (normalinit -> type var EQUALS add_equals expression equals_quadruple SEMICOLON .)


state 181

    (49) else -> ELSE block .

    IF              reduce using rule 49 (else -> ELSE block .)
    PRINT           reduce using rule 49 (else -> ELSE block .)
    ID              reduce using rule 49 (else -> ELSE block .)
    LIST            reduce using rule 49 (else -> ELSE block .)
    WHILE           reduce using rule 49 (else -> ELSE block .)
    TIMES           reduce using rule 49 (else -> ELSE block .)
    BOOL            reduce using rule 49 (else -> ELSE block .)
    INT             reduce using rule 49 (else -> ELSE block .)
    FLOAT           reduce using rule 49 (else -> ELSE block .)
    STRING          reduce using rule 49 (else -> ELSE block .)
    RETURN          reduce using rule 49 (else -> ELSE block .)
    C_BRACKET       reduce using rule 49 (else -> ELSE block .)


state 182

    (43) list -> O_S_BRACKET listelements C_S_BRACKET .

    SEMICOLON       reduce using rule 43 (list -> O_S_BRACKET listelements C_S_BRACKET .)


state 183

    (44) listelements -> constants optionalconstants .

    C_S_BRACKET     reduce using rule 44 (listelements -> constants optionalconstants .)


state 184

    (46) optionalconstants -> COMMA . constants optionalconstants
    (95) constants -> . INTCONST add_int_constant_to_dict
    (96) constants -> . FLOATCONST add_float_constant_to_dict
    (97) constants -> . STRINGCONST add_string_constant_to_dict
    (98) constants -> . booleanconst
    (99) booleanconst -> . TRUE add_bool_constant_to_dict
    (100) booleanconst -> . FALSE add_bool_constant_to_dict

    INTCONST        shift and go to state 63
    FLOATCONST      shift and go to state 57
    STRINGCONST     shift and go to state 60
    TRUE            shift and go to state 59
    FALSE           shift and go to state 68

    booleanconst                   shift and go to state 70
    constants                      shift and go to state 185

state 185

    (46) optionalconstants -> COMMA constants . optionalconstants
    (46) optionalconstants -> . COMMA constants optionalconstants
    (47) optionalconstants -> .

    COMMA           shift and go to state 184
    C_S_BRACKET     reduce using rule 47 (optionalconstants -> .)

    optionalconstants              shift and go to state 186

state 186

    (46) optionalconstants -> COMMA constants optionalconstants .

    C_S_BRACKET     reduce using rule 46 (optionalconstants -> COMMA constants optionalconstants .)

