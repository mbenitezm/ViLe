Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> main functionloop
Rule 2     main -> MAIN block
Rule 3     functionloop -> function functionloop
Rule 4     functionloop -> <empty>
Rule 5     function -> FUNCTION functiontype ID O_PARENTHESIS parameters C_PARENTHESIS block
Rule 6     functiontype -> VOID
Rule 7     functiontype -> BOOL
Rule 8     functiontype -> INT
Rule 9     functiontype -> FLOAT
Rule 10    functiontype -> STRING
Rule 11    type -> BOOL
Rule 12    type -> INT
Rule 13    type -> FLOAT
Rule 14    type -> STRING
Rule 15    parametertype -> BOOL
Rule 16    parametertype -> INT
Rule 17    parametertype -> FLOAT
Rule 18    parametertype -> STRING
Rule 19    block -> O_BRACKET statutesloop functionreturn C_BRACKET
Rule 20    functionreturn -> RETURN expression SEMICOLON
Rule 21    functionreturn -> <empty>
Rule 22    statutesloop -> statute statutesloop
Rule 23    statutesloop -> <empty>
Rule 24    statute -> init
Rule 25    statute -> condition
Rule 26    statute -> writting
Rule 27    statute -> loop
Rule 28    statute -> assignation
Rule 29    statute -> functioncall
Rule 30    assignation -> var_assign EQUALS expression SEMICOLON
Rule 31    writting -> PRINT O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON
Rule 32    writtingloop -> expression optionalwritting
Rule 33    optionalwritting -> COMMA writtingloop
Rule 34    optionalwritting -> <empty>
Rule 35    init -> listinit
Rule 36    init -> normalinit
Rule 37    normalinit -> type var EQUALS expression SEMICOLON
Rule 38    listinit -> LIST type var EQUALS list SEMICOLON
Rule 39    list -> O_S_BRACKET listelements C_S_BRACKET
Rule 40    listelements -> constants optionalconstants
Rule 41    listelements -> <empty>
Rule 42    optionalconstants -> COMMA constants optionalconstants
Rule 43    optionalconstants -> <empty>
Rule 44    condition -> IF O_PARENTHESIS expression C_PARENTHESIS block else
Rule 45    else -> ELSE block
Rule 46    else -> <empty>
Rule 47    expression -> expression2 expressionoptional
Rule 48    expressionoptional -> logicop expression2
Rule 49    expressionoptional -> <empty>
Rule 50    expression2 -> exp expression2optional
Rule 51    expression2optional -> relop exp
Rule 52    expression2optional -> <empty>
Rule 53    logicop -> AND
Rule 54    logicop -> OR
Rule 55    relop -> EQUALITY
Rule 56    relop -> GREATER
Rule 57    relop -> GREATER_EQUAL
Rule 58    relop -> LESS
Rule 59    relop -> LESS_EQUAL
Rule 60    relop -> DIFFERENT
Rule 61    exp -> term exploop
Rule 62    exploop -> addsub exp
Rule 63    exploop -> <empty>
Rule 64    addsub -> SUM
Rule 65    addsub -> MINUS
Rule 66    term -> fact termloop
Rule 67    termloop -> divmult term
Rule 68    termloop -> <empty>
Rule 69    divmult -> MULTIPLY
Rule 70    divmult -> DIVIDE
Rule 71    divmult -> MOD
Rule 72    fact -> varconst
Rule 73    fact -> O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis
Rule 74    add_o_parenthesis -> <empty>
Rule 75    add_c_parenthesis -> <empty>
Rule 76    var_assign -> ID listaccess
Rule 77    var -> ID listaccess
Rule 78    listaccess -> O_S_BRACKET INTCONST C_S_BRACKET
Rule 79    listaccess -> <empty>
Rule 80    varconst -> varconstfunction
Rule 81    varconst -> constants
Rule 82    varconstfunction -> ID functionorlist
Rule 83    functionorlist -> O_S_BRACKET INTCONST C_S_BRACKET
Rule 84    functionorlist -> O_PARENTHESIS parametersinput C_PARENTHESIS
Rule 85    functionorlist -> <empty>
Rule 86    constants -> INTCONST
Rule 87    constants -> FLOATCONST
Rule 88    constants -> STRINGCONST
Rule 89    constants -> booleanconst
Rule 90    booleanconst -> TRUE
Rule 91    booleanconst -> FALSE
Rule 92    loop -> whileloop
Rule 93    loop -> timesloop
Rule 94    whileloop -> WHILE O_PARENTHESIS expression C_PARENTHESIS block
Rule 95    timesloop -> TIMES O_PARENTHESIS INTCONST C_PARENTHESIS block
Rule 96    functioncall -> ID O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON
Rule 97    parametersinput -> expression parametersinputloop
Rule 98    parametersinput -> <empty>
Rule 99    parametersinputloop -> COMMA expression parametersinputloop
Rule 100   parametersinputloop -> <empty>
Rule 101   parameters -> parameterinit parametersloop
Rule 102   parameters -> <empty>
Rule 103   parameterinit -> parametertype ID
Rule 104   parametersloop -> COMMA parameterinit parametersloop
Rule 105   parametersloop -> <empty>

Terminals, with rules where they appear

AND                  : 53
BOOL                 : 7 11 15
COMMA                : 33 42 99 104
C_BRACKET            : 19
C_PARENTHESIS        : 5 31 44 73 84 94 95 96
C_S_BRACKET          : 39 78 83
DIFFERENT            : 60
DIVIDE               : 70
ELSE                 : 45
EQUALITY             : 55
EQUALS               : 30 37 38
FALSE                : 91
FLOAT                : 9 13 17
FLOATCONST           : 87
FUNCTION             : 5
GREATER              : 56
GREATER_EQUAL        : 57
ID                   : 5 76 77 82 96 103
IF                   : 44
INT                  : 8 12 16
INTCONST             : 78 83 86 95
LESS                 : 58
LESS_EQUAL           : 59
LIST                 : 38
MAIN                 : 2
MINUS                : 65
MOD                  : 71
MULTIPLY             : 69
OR                   : 54
O_BRACKET            : 19
O_PARENTHESIS        : 5 31 44 73 84 94 95 96
O_S_BRACKET          : 39 78 83
PRINT                : 31
RETURN               : 20
SEMICOLON            : 20 30 31 37 38 96
STRING               : 10 14 18
STRINGCONST          : 88
SUM                  : 64
TIMES                : 95
TRUE                 : 90
VOID                 : 6
WHILE                : 94
error                : 

Nonterminals, with rules where they appear

add_c_parenthesis    : 73
add_o_parenthesis    : 73
addsub               : 62
assignation          : 28
block                : 2 5 44 45 94 95
booleanconst         : 89
condition            : 25
constants            : 40 42 81
divmult              : 67
else                 : 44
exp                  : 50 51 62
exploop              : 61
expression           : 20 30 32 37 44 73 94 97 99
expression2          : 47 48
expression2optional  : 50
expressionoptional   : 47
fact                 : 66
function             : 3
functioncall         : 29
functionloop         : 1 3
functionorlist       : 82
functionreturn       : 19
functiontype         : 5
init                 : 24
list                 : 38
listaccess           : 76 77
listelements         : 39
listinit             : 35
logicop              : 48
loop                 : 27
main                 : 1
normalinit           : 36
optionalconstants    : 40 42
optionalwritting     : 32
parameterinit        : 101 104
parameters           : 5
parametersinput      : 84 96
parametersinputloop  : 97 99
parametersloop       : 101 104
parametertype        : 103
program              : 0
relop                : 51
statute              : 22
statutesloop         : 19 22
term                 : 61 67
termloop             : 66
timesloop            : 93
type                 : 37 38
var                  : 37 38
var_assign           : 30
varconst             : 72
varconstfunction     : 80
whileloop            : 92
writting             : 26
writtingloop         : 31 33

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . main functionloop
    (2) main -> . MAIN block

    MAIN            shift and go to state 3

    main                           shift and go to state 1
    program                        shift and go to state 2

state 1

    (1) program -> main . functionloop
    (3) functionloop -> . function functionloop
    (4) functionloop -> .
    (5) function -> . FUNCTION functiontype ID O_PARENTHESIS parameters C_PARENTHESIS block

    $end            reduce using rule 4 (functionloop -> .)
    FUNCTION        shift and go to state 5

    function                       shift and go to state 4
    functionloop                   shift and go to state 6

state 2

    (0) S' -> program .



state 3

    (2) main -> MAIN . block
    (19) block -> . O_BRACKET statutesloop functionreturn C_BRACKET

    O_BRACKET       shift and go to state 7

    block                          shift and go to state 8

state 4

    (3) functionloop -> function . functionloop
    (3) functionloop -> . function functionloop
    (4) functionloop -> .
    (5) function -> . FUNCTION functiontype ID O_PARENTHESIS parameters C_PARENTHESIS block

    $end            reduce using rule 4 (functionloop -> .)
    FUNCTION        shift and go to state 5

    function                       shift and go to state 4
    functionloop                   shift and go to state 9

state 5

    (5) function -> FUNCTION . functiontype ID O_PARENTHESIS parameters C_PARENTHESIS block
    (6) functiontype -> . VOID
    (7) functiontype -> . BOOL
    (8) functiontype -> . INT
    (9) functiontype -> . FLOAT
    (10) functiontype -> . STRING

    VOID            shift and go to state 12
    BOOL            shift and go to state 14
    INT             shift and go to state 11
    FLOAT           shift and go to state 13
    STRING          shift and go to state 10

    functiontype                   shift and go to state 15

state 6

    (1) program -> main functionloop .

    $end            reduce using rule 1 (program -> main functionloop .)


state 7

    (19) block -> O_BRACKET . statutesloop functionreturn C_BRACKET
    (22) statutesloop -> . statute statutesloop
    (23) statutesloop -> .
    (24) statute -> . init
    (25) statute -> . condition
    (26) statute -> . writting
    (27) statute -> . loop
    (28) statute -> . assignation
    (29) statute -> . functioncall
    (35) init -> . listinit
    (36) init -> . normalinit
    (44) condition -> . IF O_PARENTHESIS expression C_PARENTHESIS block else
    (31) writting -> . PRINT O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON
    (92) loop -> . whileloop
    (93) loop -> . timesloop
    (30) assignation -> . var_assign EQUALS expression SEMICOLON
    (96) functioncall -> . ID O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON
    (38) listinit -> . LIST type var EQUALS list SEMICOLON
    (37) normalinit -> . type var EQUALS expression SEMICOLON
    (94) whileloop -> . WHILE O_PARENTHESIS expression C_PARENTHESIS block
    (95) timesloop -> . TIMES O_PARENTHESIS INTCONST C_PARENTHESIS block
    (76) var_assign -> . ID listaccess
    (11) type -> . BOOL
    (12) type -> . INT
    (13) type -> . FLOAT
    (14) type -> . STRING

    RETURN          reduce using rule 23 (statutesloop -> .)
    C_BRACKET       reduce using rule 23 (statutesloop -> .)
    IF              shift and go to state 31
    PRINT           shift and go to state 18
    ID              shift and go to state 29
    LIST            shift and go to state 37
    WHILE           shift and go to state 17
    TIMES           shift and go to state 16
    BOOL            shift and go to state 21
    INT             shift and go to state 35
    FLOAT           shift and go to state 36
    STRING          shift and go to state 25

    whileloop                      shift and go to state 19
    init                           shift and go to state 20
    var_assign                     shift and go to state 22
    type                           shift and go to state 23
    normalinit                     shift and go to state 24
    listinit                       shift and go to state 26
    writting                       shift and go to state 27
    timesloop                      shift and go to state 28
    condition                      shift and go to state 30
    statute                        shift and go to state 32
    assignation                    shift and go to state 33
    statutesloop                   shift and go to state 34
    functioncall                   shift and go to state 38
    loop                           shift and go to state 39

state 8

    (2) main -> MAIN block .

    FUNCTION        reduce using rule 2 (main -> MAIN block .)
    $end            reduce using rule 2 (main -> MAIN block .)


state 9

    (3) functionloop -> function functionloop .

    $end            reduce using rule 3 (functionloop -> function functionloop .)


state 10

    (10) functiontype -> STRING .

    ID              reduce using rule 10 (functiontype -> STRING .)


state 11

    (8) functiontype -> INT .

    ID              reduce using rule 8 (functiontype -> INT .)


state 12

    (6) functiontype -> VOID .

    ID              reduce using rule 6 (functiontype -> VOID .)


state 13

    (9) functiontype -> FLOAT .

    ID              reduce using rule 9 (functiontype -> FLOAT .)


state 14

    (7) functiontype -> BOOL .

    ID              reduce using rule 7 (functiontype -> BOOL .)


state 15

    (5) function -> FUNCTION functiontype . ID O_PARENTHESIS parameters C_PARENTHESIS block

    ID              shift and go to state 40


state 16

    (95) timesloop -> TIMES . O_PARENTHESIS INTCONST C_PARENTHESIS block

    O_PARENTHESIS   shift and go to state 41


state 17

    (94) whileloop -> WHILE . O_PARENTHESIS expression C_PARENTHESIS block

    O_PARENTHESIS   shift and go to state 42


state 18

    (31) writting -> PRINT . O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON

    O_PARENTHESIS   shift and go to state 43


state 19

    (92) loop -> whileloop .

    IF              reduce using rule 92 (loop -> whileloop .)
    PRINT           reduce using rule 92 (loop -> whileloop .)
    ID              reduce using rule 92 (loop -> whileloop .)
    LIST            reduce using rule 92 (loop -> whileloop .)
    WHILE           reduce using rule 92 (loop -> whileloop .)
    TIMES           reduce using rule 92 (loop -> whileloop .)
    BOOL            reduce using rule 92 (loop -> whileloop .)
    INT             reduce using rule 92 (loop -> whileloop .)
    FLOAT           reduce using rule 92 (loop -> whileloop .)
    STRING          reduce using rule 92 (loop -> whileloop .)
    RETURN          reduce using rule 92 (loop -> whileloop .)
    C_BRACKET       reduce using rule 92 (loop -> whileloop .)


state 20

    (24) statute -> init .

    IF              reduce using rule 24 (statute -> init .)
    PRINT           reduce using rule 24 (statute -> init .)
    ID              reduce using rule 24 (statute -> init .)
    LIST            reduce using rule 24 (statute -> init .)
    WHILE           reduce using rule 24 (statute -> init .)
    TIMES           reduce using rule 24 (statute -> init .)
    BOOL            reduce using rule 24 (statute -> init .)
    INT             reduce using rule 24 (statute -> init .)
    FLOAT           reduce using rule 24 (statute -> init .)
    STRING          reduce using rule 24 (statute -> init .)
    RETURN          reduce using rule 24 (statute -> init .)
    C_BRACKET       reduce using rule 24 (statute -> init .)


state 21

    (11) type -> BOOL .

    ID              reduce using rule 11 (type -> BOOL .)


state 22

    (30) assignation -> var_assign . EQUALS expression SEMICOLON

    EQUALS          shift and go to state 44


state 23

    (37) normalinit -> type . var EQUALS expression SEMICOLON
    (77) var -> . ID listaccess

    ID              shift and go to state 46

    var                            shift and go to state 45

state 24

    (36) init -> normalinit .

    IF              reduce using rule 36 (init -> normalinit .)
    PRINT           reduce using rule 36 (init -> normalinit .)
    ID              reduce using rule 36 (init -> normalinit .)
    LIST            reduce using rule 36 (init -> normalinit .)
    WHILE           reduce using rule 36 (init -> normalinit .)
    TIMES           reduce using rule 36 (init -> normalinit .)
    BOOL            reduce using rule 36 (init -> normalinit .)
    INT             reduce using rule 36 (init -> normalinit .)
    FLOAT           reduce using rule 36 (init -> normalinit .)
    STRING          reduce using rule 36 (init -> normalinit .)
    RETURN          reduce using rule 36 (init -> normalinit .)
    C_BRACKET       reduce using rule 36 (init -> normalinit .)


state 25

    (14) type -> STRING .

    ID              reduce using rule 14 (type -> STRING .)


state 26

    (35) init -> listinit .

    IF              reduce using rule 35 (init -> listinit .)
    PRINT           reduce using rule 35 (init -> listinit .)
    ID              reduce using rule 35 (init -> listinit .)
    LIST            reduce using rule 35 (init -> listinit .)
    WHILE           reduce using rule 35 (init -> listinit .)
    TIMES           reduce using rule 35 (init -> listinit .)
    BOOL            reduce using rule 35 (init -> listinit .)
    INT             reduce using rule 35 (init -> listinit .)
    FLOAT           reduce using rule 35 (init -> listinit .)
    STRING          reduce using rule 35 (init -> listinit .)
    RETURN          reduce using rule 35 (init -> listinit .)
    C_BRACKET       reduce using rule 35 (init -> listinit .)


state 27

    (26) statute -> writting .

    IF              reduce using rule 26 (statute -> writting .)
    PRINT           reduce using rule 26 (statute -> writting .)
    ID              reduce using rule 26 (statute -> writting .)
    LIST            reduce using rule 26 (statute -> writting .)
    WHILE           reduce using rule 26 (statute -> writting .)
    TIMES           reduce using rule 26 (statute -> writting .)
    BOOL            reduce using rule 26 (statute -> writting .)
    INT             reduce using rule 26 (statute -> writting .)
    FLOAT           reduce using rule 26 (statute -> writting .)
    STRING          reduce using rule 26 (statute -> writting .)
    RETURN          reduce using rule 26 (statute -> writting .)
    C_BRACKET       reduce using rule 26 (statute -> writting .)


state 28

    (93) loop -> timesloop .

    IF              reduce using rule 93 (loop -> timesloop .)
    PRINT           reduce using rule 93 (loop -> timesloop .)
    ID              reduce using rule 93 (loop -> timesloop .)
    LIST            reduce using rule 93 (loop -> timesloop .)
    WHILE           reduce using rule 93 (loop -> timesloop .)
    TIMES           reduce using rule 93 (loop -> timesloop .)
    BOOL            reduce using rule 93 (loop -> timesloop .)
    INT             reduce using rule 93 (loop -> timesloop .)
    FLOAT           reduce using rule 93 (loop -> timesloop .)
    STRING          reduce using rule 93 (loop -> timesloop .)
    RETURN          reduce using rule 93 (loop -> timesloop .)
    C_BRACKET       reduce using rule 93 (loop -> timesloop .)


state 29

    (96) functioncall -> ID . O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON
    (76) var_assign -> ID . listaccess
    (78) listaccess -> . O_S_BRACKET INTCONST C_S_BRACKET
    (79) listaccess -> .

    O_PARENTHESIS   shift and go to state 49
    O_S_BRACKET     shift and go to state 47
    EQUALS          reduce using rule 79 (listaccess -> .)

    listaccess                     shift and go to state 48

state 30

    (25) statute -> condition .

    IF              reduce using rule 25 (statute -> condition .)
    PRINT           reduce using rule 25 (statute -> condition .)
    ID              reduce using rule 25 (statute -> condition .)
    LIST            reduce using rule 25 (statute -> condition .)
    WHILE           reduce using rule 25 (statute -> condition .)
    TIMES           reduce using rule 25 (statute -> condition .)
    BOOL            reduce using rule 25 (statute -> condition .)
    INT             reduce using rule 25 (statute -> condition .)
    FLOAT           reduce using rule 25 (statute -> condition .)
    STRING          reduce using rule 25 (statute -> condition .)
    RETURN          reduce using rule 25 (statute -> condition .)
    C_BRACKET       reduce using rule 25 (statute -> condition .)


state 31

    (44) condition -> IF . O_PARENTHESIS expression C_PARENTHESIS block else

    O_PARENTHESIS   shift and go to state 50


state 32

    (22) statutesloop -> statute . statutesloop
    (22) statutesloop -> . statute statutesloop
    (23) statutesloop -> .
    (24) statute -> . init
    (25) statute -> . condition
    (26) statute -> . writting
    (27) statute -> . loop
    (28) statute -> . assignation
    (29) statute -> . functioncall
    (35) init -> . listinit
    (36) init -> . normalinit
    (44) condition -> . IF O_PARENTHESIS expression C_PARENTHESIS block else
    (31) writting -> . PRINT O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON
    (92) loop -> . whileloop
    (93) loop -> . timesloop
    (30) assignation -> . var_assign EQUALS expression SEMICOLON
    (96) functioncall -> . ID O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON
    (38) listinit -> . LIST type var EQUALS list SEMICOLON
    (37) normalinit -> . type var EQUALS expression SEMICOLON
    (94) whileloop -> . WHILE O_PARENTHESIS expression C_PARENTHESIS block
    (95) timesloop -> . TIMES O_PARENTHESIS INTCONST C_PARENTHESIS block
    (76) var_assign -> . ID listaccess
    (11) type -> . BOOL
    (12) type -> . INT
    (13) type -> . FLOAT
    (14) type -> . STRING

    RETURN          reduce using rule 23 (statutesloop -> .)
    C_BRACKET       reduce using rule 23 (statutesloop -> .)
    IF              shift and go to state 31
    PRINT           shift and go to state 18
    ID              shift and go to state 29
    LIST            shift and go to state 37
    WHILE           shift and go to state 17
    TIMES           shift and go to state 16
    BOOL            shift and go to state 21
    INT             shift and go to state 35
    FLOAT           shift and go to state 36
    STRING          shift and go to state 25

    whileloop                      shift and go to state 19
    init                           shift and go to state 20
    var_assign                     shift and go to state 22
    type                           shift and go to state 23
    normalinit                     shift and go to state 24
    listinit                       shift and go to state 26
    writting                       shift and go to state 27
    timesloop                      shift and go to state 28
    condition                      shift and go to state 30
    statute                        shift and go to state 32
    assignation                    shift and go to state 33
    statutesloop                   shift and go to state 51
    functioncall                   shift and go to state 38
    loop                           shift and go to state 39

state 33

    (28) statute -> assignation .

    IF              reduce using rule 28 (statute -> assignation .)
    PRINT           reduce using rule 28 (statute -> assignation .)
    ID              reduce using rule 28 (statute -> assignation .)
    LIST            reduce using rule 28 (statute -> assignation .)
    WHILE           reduce using rule 28 (statute -> assignation .)
    TIMES           reduce using rule 28 (statute -> assignation .)
    BOOL            reduce using rule 28 (statute -> assignation .)
    INT             reduce using rule 28 (statute -> assignation .)
    FLOAT           reduce using rule 28 (statute -> assignation .)
    STRING          reduce using rule 28 (statute -> assignation .)
    RETURN          reduce using rule 28 (statute -> assignation .)
    C_BRACKET       reduce using rule 28 (statute -> assignation .)


state 34

    (19) block -> O_BRACKET statutesloop . functionreturn C_BRACKET
    (20) functionreturn -> . RETURN expression SEMICOLON
    (21) functionreturn -> .

    RETURN          shift and go to state 52
    C_BRACKET       reduce using rule 21 (functionreturn -> .)

    functionreturn                 shift and go to state 53

state 35

    (12) type -> INT .

    ID              reduce using rule 12 (type -> INT .)


state 36

    (13) type -> FLOAT .

    ID              reduce using rule 13 (type -> FLOAT .)


state 37

    (38) listinit -> LIST . type var EQUALS list SEMICOLON
    (11) type -> . BOOL
    (12) type -> . INT
    (13) type -> . FLOAT
    (14) type -> . STRING

    BOOL            shift and go to state 21
    INT             shift and go to state 35
    FLOAT           shift and go to state 36
    STRING          shift and go to state 25

    type                           shift and go to state 54

state 38

    (29) statute -> functioncall .

    IF              reduce using rule 29 (statute -> functioncall .)
    PRINT           reduce using rule 29 (statute -> functioncall .)
    ID              reduce using rule 29 (statute -> functioncall .)
    LIST            reduce using rule 29 (statute -> functioncall .)
    WHILE           reduce using rule 29 (statute -> functioncall .)
    TIMES           reduce using rule 29 (statute -> functioncall .)
    BOOL            reduce using rule 29 (statute -> functioncall .)
    INT             reduce using rule 29 (statute -> functioncall .)
    FLOAT           reduce using rule 29 (statute -> functioncall .)
    STRING          reduce using rule 29 (statute -> functioncall .)
    RETURN          reduce using rule 29 (statute -> functioncall .)
    C_BRACKET       reduce using rule 29 (statute -> functioncall .)


state 39

    (27) statute -> loop .

    IF              reduce using rule 27 (statute -> loop .)
    PRINT           reduce using rule 27 (statute -> loop .)
    ID              reduce using rule 27 (statute -> loop .)
    LIST            reduce using rule 27 (statute -> loop .)
    WHILE           reduce using rule 27 (statute -> loop .)
    TIMES           reduce using rule 27 (statute -> loop .)
    BOOL            reduce using rule 27 (statute -> loop .)
    INT             reduce using rule 27 (statute -> loop .)
    FLOAT           reduce using rule 27 (statute -> loop .)
    STRING          reduce using rule 27 (statute -> loop .)
    RETURN          reduce using rule 27 (statute -> loop .)
    C_BRACKET       reduce using rule 27 (statute -> loop .)


state 40

    (5) function -> FUNCTION functiontype ID . O_PARENTHESIS parameters C_PARENTHESIS block

    O_PARENTHESIS   shift and go to state 55


state 41

    (95) timesloop -> TIMES O_PARENTHESIS . INTCONST C_PARENTHESIS block

    INTCONST        shift and go to state 56


state 42

    (94) whileloop -> WHILE O_PARENTHESIS . expression C_PARENTHESIS block
    (47) expression -> . expression2 expressionoptional
    (50) expression2 -> . exp expression2optional
    (61) exp -> . term exploop
    (66) term -> . fact termloop
    (72) fact -> . varconst
    (73) fact -> . O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis
    (80) varconst -> . varconstfunction
    (81) varconst -> . constants
    (82) varconstfunction -> . ID functionorlist
    (86) constants -> . INTCONST
    (87) constants -> . FLOATCONST
    (88) constants -> . STRINGCONST
    (89) constants -> . booleanconst
    (90) booleanconst -> . TRUE
    (91) booleanconst -> . FALSE

    O_PARENTHESIS   shift and go to state 58
    ID              shift and go to state 64
    INTCONST        shift and go to state 62
    FLOATCONST      shift and go to state 57
    STRINGCONST     shift and go to state 60
    TRUE            shift and go to state 59
    FALSE           shift and go to state 67

    term                           shift and go to state 66
    booleanconst                   shift and go to state 69
    varconst                       shift and go to state 68
    fact                           shift and go to state 72
    exp                            shift and go to state 70
    varconstfunction               shift and go to state 61
    constants                      shift and go to state 65
    expression2                    shift and go to state 63
    expression                     shift and go to state 71

state 43

    (31) writting -> PRINT O_PARENTHESIS . writtingloop C_PARENTHESIS SEMICOLON
    (32) writtingloop -> . expression optionalwritting
    (47) expression -> . expression2 expressionoptional
    (50) expression2 -> . exp expression2optional
    (61) exp -> . term exploop
    (66) term -> . fact termloop
    (72) fact -> . varconst
    (73) fact -> . O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis
    (80) varconst -> . varconstfunction
    (81) varconst -> . constants
    (82) varconstfunction -> . ID functionorlist
    (86) constants -> . INTCONST
    (87) constants -> . FLOATCONST
    (88) constants -> . STRINGCONST
    (89) constants -> . booleanconst
    (90) booleanconst -> . TRUE
    (91) booleanconst -> . FALSE

    O_PARENTHESIS   shift and go to state 58
    ID              shift and go to state 64
    INTCONST        shift and go to state 62
    FLOATCONST      shift and go to state 57
    STRINGCONST     shift and go to state 60
    TRUE            shift and go to state 59
    FALSE           shift and go to state 67

    term                           shift and go to state 66
    booleanconst                   shift and go to state 69
    varconst                       shift and go to state 68
    constants                      shift and go to state 65
    exp                            shift and go to state 70
    varconstfunction               shift and go to state 61
    writtingloop                   shift and go to state 73
    expression2                    shift and go to state 63
    expression                     shift and go to state 74
    fact                           shift and go to state 72

state 44

    (30) assignation -> var_assign EQUALS . expression SEMICOLON
    (47) expression -> . expression2 expressionoptional
    (50) expression2 -> . exp expression2optional
    (61) exp -> . term exploop
    (66) term -> . fact termloop
    (72) fact -> . varconst
    (73) fact -> . O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis
    (80) varconst -> . varconstfunction
    (81) varconst -> . constants
    (82) varconstfunction -> . ID functionorlist
    (86) constants -> . INTCONST
    (87) constants -> . FLOATCONST
    (88) constants -> . STRINGCONST
    (89) constants -> . booleanconst
    (90) booleanconst -> . TRUE
    (91) booleanconst -> . FALSE

    O_PARENTHESIS   shift and go to state 58
    ID              shift and go to state 64
    INTCONST        shift and go to state 62
    FLOATCONST      shift and go to state 57
    STRINGCONST     shift and go to state 60
    TRUE            shift and go to state 59
    FALSE           shift and go to state 67

    term                           shift and go to state 66
    booleanconst                   shift and go to state 69
    varconst                       shift and go to state 68
    constants                      shift and go to state 65
    exp                            shift and go to state 70
    varconstfunction               shift and go to state 61
    expression2                    shift and go to state 63
    expression                     shift and go to state 75
    fact                           shift and go to state 72

state 45

    (37) normalinit -> type var . EQUALS expression SEMICOLON

    EQUALS          shift and go to state 76


state 46

    (77) var -> ID . listaccess
    (78) listaccess -> . O_S_BRACKET INTCONST C_S_BRACKET
    (79) listaccess -> .

    O_S_BRACKET     shift and go to state 47
    EQUALS          reduce using rule 79 (listaccess -> .)

    listaccess                     shift and go to state 77

state 47

    (78) listaccess -> O_S_BRACKET . INTCONST C_S_BRACKET

    INTCONST        shift and go to state 78


state 48

    (76) var_assign -> ID listaccess .

    EQUALS          reduce using rule 76 (var_assign -> ID listaccess .)


state 49

    (96) functioncall -> ID O_PARENTHESIS . parametersinput C_PARENTHESIS SEMICOLON
    (97) parametersinput -> . expression parametersinputloop
    (98) parametersinput -> .
    (47) expression -> . expression2 expressionoptional
    (50) expression2 -> . exp expression2optional
    (61) exp -> . term exploop
    (66) term -> . fact termloop
    (72) fact -> . varconst
    (73) fact -> . O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis
    (80) varconst -> . varconstfunction
    (81) varconst -> . constants
    (82) varconstfunction -> . ID functionorlist
    (86) constants -> . INTCONST
    (87) constants -> . FLOATCONST
    (88) constants -> . STRINGCONST
    (89) constants -> . booleanconst
    (90) booleanconst -> . TRUE
    (91) booleanconst -> . FALSE

    C_PARENTHESIS   reduce using rule 98 (parametersinput -> .)
    O_PARENTHESIS   shift and go to state 58
    ID              shift and go to state 64
    INTCONST        shift and go to state 62
    FLOATCONST      shift and go to state 57
    STRINGCONST     shift and go to state 60
    TRUE            shift and go to state 59
    FALSE           shift and go to state 67

    term                           shift and go to state 66
    parametersinput                shift and go to state 79
    booleanconst                   shift and go to state 69
    varconst                       shift and go to state 68
    constants                      shift and go to state 65
    exp                            shift and go to state 70
    varconstfunction               shift and go to state 61
    expression2                    shift and go to state 63
    expression                     shift and go to state 80
    fact                           shift and go to state 72

state 50

    (44) condition -> IF O_PARENTHESIS . expression C_PARENTHESIS block else
    (47) expression -> . expression2 expressionoptional
    (50) expression2 -> . exp expression2optional
    (61) exp -> . term exploop
    (66) term -> . fact termloop
    (72) fact -> . varconst
    (73) fact -> . O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis
    (80) varconst -> . varconstfunction
    (81) varconst -> . constants
    (82) varconstfunction -> . ID functionorlist
    (86) constants -> . INTCONST
    (87) constants -> . FLOATCONST
    (88) constants -> . STRINGCONST
    (89) constants -> . booleanconst
    (90) booleanconst -> . TRUE
    (91) booleanconst -> . FALSE

    O_PARENTHESIS   shift and go to state 58
    ID              shift and go to state 64
    INTCONST        shift and go to state 62
    FLOATCONST      shift and go to state 57
    STRINGCONST     shift and go to state 60
    TRUE            shift and go to state 59
    FALSE           shift and go to state 67

    term                           shift and go to state 66
    booleanconst                   shift and go to state 69
    varconst                       shift and go to state 68
    fact                           shift and go to state 72
    exp                            shift and go to state 70
    varconstfunction               shift and go to state 61
    constants                      shift and go to state 65
    expression2                    shift and go to state 63
    expression                     shift and go to state 81

state 51

    (22) statutesloop -> statute statutesloop .

    RETURN          reduce using rule 22 (statutesloop -> statute statutesloop .)
    C_BRACKET       reduce using rule 22 (statutesloop -> statute statutesloop .)


state 52

    (20) functionreturn -> RETURN . expression SEMICOLON
    (47) expression -> . expression2 expressionoptional
    (50) expression2 -> . exp expression2optional
    (61) exp -> . term exploop
    (66) term -> . fact termloop
    (72) fact -> . varconst
    (73) fact -> . O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis
    (80) varconst -> . varconstfunction
    (81) varconst -> . constants
    (82) varconstfunction -> . ID functionorlist
    (86) constants -> . INTCONST
    (87) constants -> . FLOATCONST
    (88) constants -> . STRINGCONST
    (89) constants -> . booleanconst
    (90) booleanconst -> . TRUE
    (91) booleanconst -> . FALSE

    O_PARENTHESIS   shift and go to state 58
    ID              shift and go to state 64
    INTCONST        shift and go to state 62
    FLOATCONST      shift and go to state 57
    STRINGCONST     shift and go to state 60
    TRUE            shift and go to state 59
    FALSE           shift and go to state 67

    term                           shift and go to state 66
    booleanconst                   shift and go to state 69
    varconst                       shift and go to state 68
    constants                      shift and go to state 65
    exp                            shift and go to state 70
    varconstfunction               shift and go to state 61
    expression2                    shift and go to state 63
    expression                     shift and go to state 82
    fact                           shift and go to state 72

state 53

    (19) block -> O_BRACKET statutesloop functionreturn . C_BRACKET

    C_BRACKET       shift and go to state 83


state 54

    (38) listinit -> LIST type . var EQUALS list SEMICOLON
    (77) var -> . ID listaccess

    ID              shift and go to state 46

    var                            shift and go to state 84

state 55

    (5) function -> FUNCTION functiontype ID O_PARENTHESIS . parameters C_PARENTHESIS block
    (101) parameters -> . parameterinit parametersloop
    (102) parameters -> .
    (103) parameterinit -> . parametertype ID
    (15) parametertype -> . BOOL
    (16) parametertype -> . INT
    (17) parametertype -> . FLOAT
    (18) parametertype -> . STRING

    C_PARENTHESIS   reduce using rule 102 (parameters -> .)
    BOOL            shift and go to state 89
    INT             shift and go to state 87
    FLOAT           shift and go to state 88
    STRING          shift and go to state 91

    parametertype                  shift and go to state 85
    parameters                     shift and go to state 86
    parameterinit                  shift and go to state 90

state 56

    (95) timesloop -> TIMES O_PARENTHESIS INTCONST . C_PARENTHESIS block

    C_PARENTHESIS   shift and go to state 92


state 57

    (87) constants -> FLOATCONST .

    MULTIPLY        reduce using rule 87 (constants -> FLOATCONST .)
    DIVIDE          reduce using rule 87 (constants -> FLOATCONST .)
    MOD             reduce using rule 87 (constants -> FLOATCONST .)
    SUM             reduce using rule 87 (constants -> FLOATCONST .)
    MINUS           reduce using rule 87 (constants -> FLOATCONST .)
    EQUALITY        reduce using rule 87 (constants -> FLOATCONST .)
    GREATER         reduce using rule 87 (constants -> FLOATCONST .)
    GREATER_EQUAL   reduce using rule 87 (constants -> FLOATCONST .)
    LESS            reduce using rule 87 (constants -> FLOATCONST .)
    LESS_EQUAL      reduce using rule 87 (constants -> FLOATCONST .)
    DIFFERENT       reduce using rule 87 (constants -> FLOATCONST .)
    AND             reduce using rule 87 (constants -> FLOATCONST .)
    OR              reduce using rule 87 (constants -> FLOATCONST .)
    C_PARENTHESIS   reduce using rule 87 (constants -> FLOATCONST .)
    COMMA           reduce using rule 87 (constants -> FLOATCONST .)
    C_S_BRACKET     reduce using rule 87 (constants -> FLOATCONST .)
    SEMICOLON       reduce using rule 87 (constants -> FLOATCONST .)


state 58

    (73) fact -> O_PARENTHESIS . add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis
    (74) add_o_parenthesis -> .

    O_PARENTHESIS   reduce using rule 74 (add_o_parenthesis -> .)
    ID              reduce using rule 74 (add_o_parenthesis -> .)
    INTCONST        reduce using rule 74 (add_o_parenthesis -> .)
    FLOATCONST      reduce using rule 74 (add_o_parenthesis -> .)
    STRINGCONST     reduce using rule 74 (add_o_parenthesis -> .)
    TRUE            reduce using rule 74 (add_o_parenthesis -> .)
    FALSE           reduce using rule 74 (add_o_parenthesis -> .)

    add_o_parenthesis              shift and go to state 93

state 59

    (90) booleanconst -> TRUE .

    MULTIPLY        reduce using rule 90 (booleanconst -> TRUE .)
    DIVIDE          reduce using rule 90 (booleanconst -> TRUE .)
    MOD             reduce using rule 90 (booleanconst -> TRUE .)
    SUM             reduce using rule 90 (booleanconst -> TRUE .)
    MINUS           reduce using rule 90 (booleanconst -> TRUE .)
    EQUALITY        reduce using rule 90 (booleanconst -> TRUE .)
    GREATER         reduce using rule 90 (booleanconst -> TRUE .)
    GREATER_EQUAL   reduce using rule 90 (booleanconst -> TRUE .)
    LESS            reduce using rule 90 (booleanconst -> TRUE .)
    LESS_EQUAL      reduce using rule 90 (booleanconst -> TRUE .)
    DIFFERENT       reduce using rule 90 (booleanconst -> TRUE .)
    AND             reduce using rule 90 (booleanconst -> TRUE .)
    OR              reduce using rule 90 (booleanconst -> TRUE .)
    C_PARENTHESIS   reduce using rule 90 (booleanconst -> TRUE .)
    COMMA           reduce using rule 90 (booleanconst -> TRUE .)
    SEMICOLON       reduce using rule 90 (booleanconst -> TRUE .)
    C_S_BRACKET     reduce using rule 90 (booleanconst -> TRUE .)


state 60

    (88) constants -> STRINGCONST .

    MULTIPLY        reduce using rule 88 (constants -> STRINGCONST .)
    DIVIDE          reduce using rule 88 (constants -> STRINGCONST .)
    MOD             reduce using rule 88 (constants -> STRINGCONST .)
    SUM             reduce using rule 88 (constants -> STRINGCONST .)
    MINUS           reduce using rule 88 (constants -> STRINGCONST .)
    EQUALITY        reduce using rule 88 (constants -> STRINGCONST .)
    GREATER         reduce using rule 88 (constants -> STRINGCONST .)
    GREATER_EQUAL   reduce using rule 88 (constants -> STRINGCONST .)
    LESS            reduce using rule 88 (constants -> STRINGCONST .)
    LESS_EQUAL      reduce using rule 88 (constants -> STRINGCONST .)
    DIFFERENT       reduce using rule 88 (constants -> STRINGCONST .)
    AND             reduce using rule 88 (constants -> STRINGCONST .)
    OR              reduce using rule 88 (constants -> STRINGCONST .)
    C_PARENTHESIS   reduce using rule 88 (constants -> STRINGCONST .)
    COMMA           reduce using rule 88 (constants -> STRINGCONST .)
    C_S_BRACKET     reduce using rule 88 (constants -> STRINGCONST .)
    SEMICOLON       reduce using rule 88 (constants -> STRINGCONST .)


state 61

    (80) varconst -> varconstfunction .

    MULTIPLY        reduce using rule 80 (varconst -> varconstfunction .)
    DIVIDE          reduce using rule 80 (varconst -> varconstfunction .)
    MOD             reduce using rule 80 (varconst -> varconstfunction .)
    SUM             reduce using rule 80 (varconst -> varconstfunction .)
    MINUS           reduce using rule 80 (varconst -> varconstfunction .)
    EQUALITY        reduce using rule 80 (varconst -> varconstfunction .)
    GREATER         reduce using rule 80 (varconst -> varconstfunction .)
    GREATER_EQUAL   reduce using rule 80 (varconst -> varconstfunction .)
    LESS            reduce using rule 80 (varconst -> varconstfunction .)
    LESS_EQUAL      reduce using rule 80 (varconst -> varconstfunction .)
    DIFFERENT       reduce using rule 80 (varconst -> varconstfunction .)
    AND             reduce using rule 80 (varconst -> varconstfunction .)
    OR              reduce using rule 80 (varconst -> varconstfunction .)
    C_PARENTHESIS   reduce using rule 80 (varconst -> varconstfunction .)
    COMMA           reduce using rule 80 (varconst -> varconstfunction .)
    SEMICOLON       reduce using rule 80 (varconst -> varconstfunction .)


state 62

    (86) constants -> INTCONST .

    MULTIPLY        reduce using rule 86 (constants -> INTCONST .)
    DIVIDE          reduce using rule 86 (constants -> INTCONST .)
    MOD             reduce using rule 86 (constants -> INTCONST .)
    SUM             reduce using rule 86 (constants -> INTCONST .)
    MINUS           reduce using rule 86 (constants -> INTCONST .)
    EQUALITY        reduce using rule 86 (constants -> INTCONST .)
    GREATER         reduce using rule 86 (constants -> INTCONST .)
    GREATER_EQUAL   reduce using rule 86 (constants -> INTCONST .)
    LESS            reduce using rule 86 (constants -> INTCONST .)
    LESS_EQUAL      reduce using rule 86 (constants -> INTCONST .)
    DIFFERENT       reduce using rule 86 (constants -> INTCONST .)
    AND             reduce using rule 86 (constants -> INTCONST .)
    OR              reduce using rule 86 (constants -> INTCONST .)
    C_PARENTHESIS   reduce using rule 86 (constants -> INTCONST .)
    COMMA           reduce using rule 86 (constants -> INTCONST .)
    C_S_BRACKET     reduce using rule 86 (constants -> INTCONST .)
    SEMICOLON       reduce using rule 86 (constants -> INTCONST .)


state 63

    (47) expression -> expression2 . expressionoptional
    (48) expressionoptional -> . logicop expression2
    (49) expressionoptional -> .
    (53) logicop -> . AND
    (54) logicop -> . OR

    C_PARENTHESIS   reduce using rule 49 (expressionoptional -> .)
    COMMA           reduce using rule 49 (expressionoptional -> .)
    SEMICOLON       reduce using rule 49 (expressionoptional -> .)
    AND             shift and go to state 94
    OR              shift and go to state 97

    logicop                        shift and go to state 95
    expressionoptional             shift and go to state 96

state 64

    (82) varconstfunction -> ID . functionorlist
    (83) functionorlist -> . O_S_BRACKET INTCONST C_S_BRACKET
    (84) functionorlist -> . O_PARENTHESIS parametersinput C_PARENTHESIS
    (85) functionorlist -> .

    O_S_BRACKET     shift and go to state 98
    O_PARENTHESIS   shift and go to state 100
    MULTIPLY        reduce using rule 85 (functionorlist -> .)
    DIVIDE          reduce using rule 85 (functionorlist -> .)
    MOD             reduce using rule 85 (functionorlist -> .)
    SUM             reduce using rule 85 (functionorlist -> .)
    MINUS           reduce using rule 85 (functionorlist -> .)
    EQUALITY        reduce using rule 85 (functionorlist -> .)
    GREATER         reduce using rule 85 (functionorlist -> .)
    GREATER_EQUAL   reduce using rule 85 (functionorlist -> .)
    LESS            reduce using rule 85 (functionorlist -> .)
    LESS_EQUAL      reduce using rule 85 (functionorlist -> .)
    DIFFERENT       reduce using rule 85 (functionorlist -> .)
    AND             reduce using rule 85 (functionorlist -> .)
    OR              reduce using rule 85 (functionorlist -> .)
    C_PARENTHESIS   reduce using rule 85 (functionorlist -> .)
    COMMA           reduce using rule 85 (functionorlist -> .)
    SEMICOLON       reduce using rule 85 (functionorlist -> .)

    functionorlist                 shift and go to state 99

state 65

    (81) varconst -> constants .

    MULTIPLY        reduce using rule 81 (varconst -> constants .)
    DIVIDE          reduce using rule 81 (varconst -> constants .)
    MOD             reduce using rule 81 (varconst -> constants .)
    SUM             reduce using rule 81 (varconst -> constants .)
    MINUS           reduce using rule 81 (varconst -> constants .)
    EQUALITY        reduce using rule 81 (varconst -> constants .)
    GREATER         reduce using rule 81 (varconst -> constants .)
    GREATER_EQUAL   reduce using rule 81 (varconst -> constants .)
    LESS            reduce using rule 81 (varconst -> constants .)
    LESS_EQUAL      reduce using rule 81 (varconst -> constants .)
    DIFFERENT       reduce using rule 81 (varconst -> constants .)
    AND             reduce using rule 81 (varconst -> constants .)
    OR              reduce using rule 81 (varconst -> constants .)
    C_PARENTHESIS   reduce using rule 81 (varconst -> constants .)
    COMMA           reduce using rule 81 (varconst -> constants .)
    SEMICOLON       reduce using rule 81 (varconst -> constants .)


state 66

    (61) exp -> term . exploop
    (62) exploop -> . addsub exp
    (63) exploop -> .
    (64) addsub -> . SUM
    (65) addsub -> . MINUS

    EQUALITY        reduce using rule 63 (exploop -> .)
    GREATER         reduce using rule 63 (exploop -> .)
    GREATER_EQUAL   reduce using rule 63 (exploop -> .)
    LESS            reduce using rule 63 (exploop -> .)
    LESS_EQUAL      reduce using rule 63 (exploop -> .)
    DIFFERENT       reduce using rule 63 (exploop -> .)
    AND             reduce using rule 63 (exploop -> .)
    OR              reduce using rule 63 (exploop -> .)
    C_PARENTHESIS   reduce using rule 63 (exploop -> .)
    COMMA           reduce using rule 63 (exploop -> .)
    SEMICOLON       reduce using rule 63 (exploop -> .)
    SUM             shift and go to state 101
    MINUS           shift and go to state 104

    exploop                        shift and go to state 102
    addsub                         shift and go to state 103

state 67

    (91) booleanconst -> FALSE .

    MULTIPLY        reduce using rule 91 (booleanconst -> FALSE .)
    DIVIDE          reduce using rule 91 (booleanconst -> FALSE .)
    MOD             reduce using rule 91 (booleanconst -> FALSE .)
    SUM             reduce using rule 91 (booleanconst -> FALSE .)
    MINUS           reduce using rule 91 (booleanconst -> FALSE .)
    EQUALITY        reduce using rule 91 (booleanconst -> FALSE .)
    GREATER         reduce using rule 91 (booleanconst -> FALSE .)
    GREATER_EQUAL   reduce using rule 91 (booleanconst -> FALSE .)
    LESS            reduce using rule 91 (booleanconst -> FALSE .)
    LESS_EQUAL      reduce using rule 91 (booleanconst -> FALSE .)
    DIFFERENT       reduce using rule 91 (booleanconst -> FALSE .)
    AND             reduce using rule 91 (booleanconst -> FALSE .)
    OR              reduce using rule 91 (booleanconst -> FALSE .)
    C_PARENTHESIS   reduce using rule 91 (booleanconst -> FALSE .)
    COMMA           reduce using rule 91 (booleanconst -> FALSE .)
    SEMICOLON       reduce using rule 91 (booleanconst -> FALSE .)
    C_S_BRACKET     reduce using rule 91 (booleanconst -> FALSE .)


state 68

    (72) fact -> varconst .

    MULTIPLY        reduce using rule 72 (fact -> varconst .)
    DIVIDE          reduce using rule 72 (fact -> varconst .)
    MOD             reduce using rule 72 (fact -> varconst .)
    SUM             reduce using rule 72 (fact -> varconst .)
    MINUS           reduce using rule 72 (fact -> varconst .)
    EQUALITY        reduce using rule 72 (fact -> varconst .)
    GREATER         reduce using rule 72 (fact -> varconst .)
    GREATER_EQUAL   reduce using rule 72 (fact -> varconst .)
    LESS            reduce using rule 72 (fact -> varconst .)
    LESS_EQUAL      reduce using rule 72 (fact -> varconst .)
    DIFFERENT       reduce using rule 72 (fact -> varconst .)
    AND             reduce using rule 72 (fact -> varconst .)
    OR              reduce using rule 72 (fact -> varconst .)
    SEMICOLON       reduce using rule 72 (fact -> varconst .)
    C_PARENTHESIS   reduce using rule 72 (fact -> varconst .)
    COMMA           reduce using rule 72 (fact -> varconst .)


state 69

    (89) constants -> booleanconst .

    MULTIPLY        reduce using rule 89 (constants -> booleanconst .)
    DIVIDE          reduce using rule 89 (constants -> booleanconst .)
    MOD             reduce using rule 89 (constants -> booleanconst .)
    SUM             reduce using rule 89 (constants -> booleanconst .)
    MINUS           reduce using rule 89 (constants -> booleanconst .)
    EQUALITY        reduce using rule 89 (constants -> booleanconst .)
    GREATER         reduce using rule 89 (constants -> booleanconst .)
    GREATER_EQUAL   reduce using rule 89 (constants -> booleanconst .)
    LESS            reduce using rule 89 (constants -> booleanconst .)
    LESS_EQUAL      reduce using rule 89 (constants -> booleanconst .)
    DIFFERENT       reduce using rule 89 (constants -> booleanconst .)
    AND             reduce using rule 89 (constants -> booleanconst .)
    OR              reduce using rule 89 (constants -> booleanconst .)
    C_PARENTHESIS   reduce using rule 89 (constants -> booleanconst .)
    COMMA           reduce using rule 89 (constants -> booleanconst .)
    C_S_BRACKET     reduce using rule 89 (constants -> booleanconst .)
    SEMICOLON       reduce using rule 89 (constants -> booleanconst .)


state 70

    (50) expression2 -> exp . expression2optional
    (51) expression2optional -> . relop exp
    (52) expression2optional -> .
    (55) relop -> . EQUALITY
    (56) relop -> . GREATER
    (57) relop -> . GREATER_EQUAL
    (58) relop -> . LESS
    (59) relop -> . LESS_EQUAL
    (60) relop -> . DIFFERENT

    AND             reduce using rule 52 (expression2optional -> .)
    OR              reduce using rule 52 (expression2optional -> .)
    C_PARENTHESIS   reduce using rule 52 (expression2optional -> .)
    COMMA           reduce using rule 52 (expression2optional -> .)
    SEMICOLON       reduce using rule 52 (expression2optional -> .)
    EQUALITY        shift and go to state 106
    GREATER         shift and go to state 107
    GREATER_EQUAL   shift and go to state 108
    LESS            shift and go to state 109
    LESS_EQUAL      shift and go to state 111
    DIFFERENT       shift and go to state 105

    relop                          shift and go to state 112
    expression2optional            shift and go to state 110

state 71

    (94) whileloop -> WHILE O_PARENTHESIS expression . C_PARENTHESIS block

    C_PARENTHESIS   shift and go to state 113


state 72

    (66) term -> fact . termloop
    (67) termloop -> . divmult term
    (68) termloop -> .
    (69) divmult -> . MULTIPLY
    (70) divmult -> . DIVIDE
    (71) divmult -> . MOD

    SUM             reduce using rule 68 (termloop -> .)
    MINUS           reduce using rule 68 (termloop -> .)
    EQUALITY        reduce using rule 68 (termloop -> .)
    GREATER         reduce using rule 68 (termloop -> .)
    GREATER_EQUAL   reduce using rule 68 (termloop -> .)
    LESS            reduce using rule 68 (termloop -> .)
    LESS_EQUAL      reduce using rule 68 (termloop -> .)
    DIFFERENT       reduce using rule 68 (termloop -> .)
    AND             reduce using rule 68 (termloop -> .)
    OR              reduce using rule 68 (termloop -> .)
    C_PARENTHESIS   reduce using rule 68 (termloop -> .)
    COMMA           reduce using rule 68 (termloop -> .)
    SEMICOLON       reduce using rule 68 (termloop -> .)
    MULTIPLY        shift and go to state 116
    DIVIDE          shift and go to state 114
    MOD             shift and go to state 118

    termloop                       shift and go to state 115
    divmult                        shift and go to state 117

state 73

    (31) writting -> PRINT O_PARENTHESIS writtingloop . C_PARENTHESIS SEMICOLON

    C_PARENTHESIS   shift and go to state 119


state 74

    (32) writtingloop -> expression . optionalwritting
    (33) optionalwritting -> . COMMA writtingloop
    (34) optionalwritting -> .

    COMMA           shift and go to state 121
    C_PARENTHESIS   reduce using rule 34 (optionalwritting -> .)

    optionalwritting               shift and go to state 120

state 75

    (30) assignation -> var_assign EQUALS expression . SEMICOLON

    SEMICOLON       shift and go to state 122


state 76

    (37) normalinit -> type var EQUALS . expression SEMICOLON
    (47) expression -> . expression2 expressionoptional
    (50) expression2 -> . exp expression2optional
    (61) exp -> . term exploop
    (66) term -> . fact termloop
    (72) fact -> . varconst
    (73) fact -> . O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis
    (80) varconst -> . varconstfunction
    (81) varconst -> . constants
    (82) varconstfunction -> . ID functionorlist
    (86) constants -> . INTCONST
    (87) constants -> . FLOATCONST
    (88) constants -> . STRINGCONST
    (89) constants -> . booleanconst
    (90) booleanconst -> . TRUE
    (91) booleanconst -> . FALSE

    O_PARENTHESIS   shift and go to state 58
    ID              shift and go to state 64
    INTCONST        shift and go to state 62
    FLOATCONST      shift and go to state 57
    STRINGCONST     shift and go to state 60
    TRUE            shift and go to state 59
    FALSE           shift and go to state 67

    term                           shift and go to state 66
    booleanconst                   shift and go to state 69
    varconstfunction               shift and go to state 61
    varconst                       shift and go to state 68
    constants                      shift and go to state 65
    exp                            shift and go to state 70
    expression2                    shift and go to state 63
    expression                     shift and go to state 123
    fact                           shift and go to state 72

state 77

    (77) var -> ID listaccess .

    EQUALS          reduce using rule 77 (var -> ID listaccess .)


state 78

    (78) listaccess -> O_S_BRACKET INTCONST . C_S_BRACKET

    C_S_BRACKET     shift and go to state 124


state 79

    (96) functioncall -> ID O_PARENTHESIS parametersinput . C_PARENTHESIS SEMICOLON

    C_PARENTHESIS   shift and go to state 125


state 80

    (97) parametersinput -> expression . parametersinputloop
    (99) parametersinputloop -> . COMMA expression parametersinputloop
    (100) parametersinputloop -> .

    COMMA           shift and go to state 127
    C_PARENTHESIS   reduce using rule 100 (parametersinputloop -> .)

    parametersinputloop            shift and go to state 126

state 81

    (44) condition -> IF O_PARENTHESIS expression . C_PARENTHESIS block else

    C_PARENTHESIS   shift and go to state 128


state 82

    (20) functionreturn -> RETURN expression . SEMICOLON

    SEMICOLON       shift and go to state 129


state 83

    (19) block -> O_BRACKET statutesloop functionreturn C_BRACKET .

    IF              reduce using rule 19 (block -> O_BRACKET statutesloop functionreturn C_BRACKET .)
    PRINT           reduce using rule 19 (block -> O_BRACKET statutesloop functionreturn C_BRACKET .)
    ID              reduce using rule 19 (block -> O_BRACKET statutesloop functionreturn C_BRACKET .)
    LIST            reduce using rule 19 (block -> O_BRACKET statutesloop functionreturn C_BRACKET .)
    WHILE           reduce using rule 19 (block -> O_BRACKET statutesloop functionreturn C_BRACKET .)
    TIMES           reduce using rule 19 (block -> O_BRACKET statutesloop functionreturn C_BRACKET .)
    BOOL            reduce using rule 19 (block -> O_BRACKET statutesloop functionreturn C_BRACKET .)
    INT             reduce using rule 19 (block -> O_BRACKET statutesloop functionreturn C_BRACKET .)
    FLOAT           reduce using rule 19 (block -> O_BRACKET statutesloop functionreturn C_BRACKET .)
    STRING          reduce using rule 19 (block -> O_BRACKET statutesloop functionreturn C_BRACKET .)
    RETURN          reduce using rule 19 (block -> O_BRACKET statutesloop functionreturn C_BRACKET .)
    C_BRACKET       reduce using rule 19 (block -> O_BRACKET statutesloop functionreturn C_BRACKET .)
    FUNCTION        reduce using rule 19 (block -> O_BRACKET statutesloop functionreturn C_BRACKET .)
    $end            reduce using rule 19 (block -> O_BRACKET statutesloop functionreturn C_BRACKET .)
    ELSE            reduce using rule 19 (block -> O_BRACKET statutesloop functionreturn C_BRACKET .)


state 84

    (38) listinit -> LIST type var . EQUALS list SEMICOLON

    EQUALS          shift and go to state 130


state 85

    (103) parameterinit -> parametertype . ID

    ID              shift and go to state 131


state 86

    (5) function -> FUNCTION functiontype ID O_PARENTHESIS parameters . C_PARENTHESIS block

    C_PARENTHESIS   shift and go to state 132


state 87

    (16) parametertype -> INT .

    ID              reduce using rule 16 (parametertype -> INT .)


state 88

    (17) parametertype -> FLOAT .

    ID              reduce using rule 17 (parametertype -> FLOAT .)


state 89

    (15) parametertype -> BOOL .

    ID              reduce using rule 15 (parametertype -> BOOL .)


state 90

    (101) parameters -> parameterinit . parametersloop
    (104) parametersloop -> . COMMA parameterinit parametersloop
    (105) parametersloop -> .

    COMMA           shift and go to state 134
    C_PARENTHESIS   reduce using rule 105 (parametersloop -> .)

    parametersloop                 shift and go to state 133

state 91

    (18) parametertype -> STRING .

    ID              reduce using rule 18 (parametertype -> STRING .)


state 92

    (95) timesloop -> TIMES O_PARENTHESIS INTCONST C_PARENTHESIS . block
    (19) block -> . O_BRACKET statutesloop functionreturn C_BRACKET

    O_BRACKET       shift and go to state 7

    block                          shift and go to state 135

state 93

    (73) fact -> O_PARENTHESIS add_o_parenthesis . expression C_PARENTHESIS add_c_parenthesis
    (47) expression -> . expression2 expressionoptional
    (50) expression2 -> . exp expression2optional
    (61) exp -> . term exploop
    (66) term -> . fact termloop
    (72) fact -> . varconst
    (73) fact -> . O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis
    (80) varconst -> . varconstfunction
    (81) varconst -> . constants
    (82) varconstfunction -> . ID functionorlist
    (86) constants -> . INTCONST
    (87) constants -> . FLOATCONST
    (88) constants -> . STRINGCONST
    (89) constants -> . booleanconst
    (90) booleanconst -> . TRUE
    (91) booleanconst -> . FALSE

    O_PARENTHESIS   shift and go to state 58
    ID              shift and go to state 64
    INTCONST        shift and go to state 62
    FLOATCONST      shift and go to state 57
    STRINGCONST     shift and go to state 60
    TRUE            shift and go to state 59
    FALSE           shift and go to state 67

    term                           shift and go to state 66
    booleanconst                   shift and go to state 69
    varconst                       shift and go to state 68
    constants                      shift and go to state 65
    exp                            shift and go to state 70
    varconstfunction               shift and go to state 61
    expression2                    shift and go to state 63
    expression                     shift and go to state 136
    fact                           shift and go to state 72

state 94

    (53) logicop -> AND .

    O_PARENTHESIS   reduce using rule 53 (logicop -> AND .)
    ID              reduce using rule 53 (logicop -> AND .)
    INTCONST        reduce using rule 53 (logicop -> AND .)
    FLOATCONST      reduce using rule 53 (logicop -> AND .)
    STRINGCONST     reduce using rule 53 (logicop -> AND .)
    TRUE            reduce using rule 53 (logicop -> AND .)
    FALSE           reduce using rule 53 (logicop -> AND .)


state 95

    (48) expressionoptional -> logicop . expression2
    (50) expression2 -> . exp expression2optional
    (61) exp -> . term exploop
    (66) term -> . fact termloop
    (72) fact -> . varconst
    (73) fact -> . O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis
    (80) varconst -> . varconstfunction
    (81) varconst -> . constants
    (82) varconstfunction -> . ID functionorlist
    (86) constants -> . INTCONST
    (87) constants -> . FLOATCONST
    (88) constants -> . STRINGCONST
    (89) constants -> . booleanconst
    (90) booleanconst -> . TRUE
    (91) booleanconst -> . FALSE

    O_PARENTHESIS   shift and go to state 58
    ID              shift and go to state 64
    INTCONST        shift and go to state 62
    FLOATCONST      shift and go to state 57
    STRINGCONST     shift and go to state 60
    TRUE            shift and go to state 59
    FALSE           shift and go to state 67

    term                           shift and go to state 66
    booleanconst                   shift and go to state 69
    varconst                       shift and go to state 68
    constants                      shift and go to state 65
    exp                            shift and go to state 70
    varconstfunction               shift and go to state 61
    expression2                    shift and go to state 137
    fact                           shift and go to state 72

state 96

    (47) expression -> expression2 expressionoptional .

    COMMA           reduce using rule 47 (expression -> expression2 expressionoptional .)
    C_PARENTHESIS   reduce using rule 47 (expression -> expression2 expressionoptional .)
    SEMICOLON       reduce using rule 47 (expression -> expression2 expressionoptional .)


state 97

    (54) logicop -> OR .

    O_PARENTHESIS   reduce using rule 54 (logicop -> OR .)
    ID              reduce using rule 54 (logicop -> OR .)
    INTCONST        reduce using rule 54 (logicop -> OR .)
    FLOATCONST      reduce using rule 54 (logicop -> OR .)
    STRINGCONST     reduce using rule 54 (logicop -> OR .)
    TRUE            reduce using rule 54 (logicop -> OR .)
    FALSE           reduce using rule 54 (logicop -> OR .)


state 98

    (83) functionorlist -> O_S_BRACKET . INTCONST C_S_BRACKET

    INTCONST        shift and go to state 138


state 99

    (82) varconstfunction -> ID functionorlist .

    MULTIPLY        reduce using rule 82 (varconstfunction -> ID functionorlist .)
    DIVIDE          reduce using rule 82 (varconstfunction -> ID functionorlist .)
    MOD             reduce using rule 82 (varconstfunction -> ID functionorlist .)
    SUM             reduce using rule 82 (varconstfunction -> ID functionorlist .)
    MINUS           reduce using rule 82 (varconstfunction -> ID functionorlist .)
    EQUALITY        reduce using rule 82 (varconstfunction -> ID functionorlist .)
    GREATER         reduce using rule 82 (varconstfunction -> ID functionorlist .)
    GREATER_EQUAL   reduce using rule 82 (varconstfunction -> ID functionorlist .)
    LESS            reduce using rule 82 (varconstfunction -> ID functionorlist .)
    LESS_EQUAL      reduce using rule 82 (varconstfunction -> ID functionorlist .)
    DIFFERENT       reduce using rule 82 (varconstfunction -> ID functionorlist .)
    AND             reduce using rule 82 (varconstfunction -> ID functionorlist .)
    OR              reduce using rule 82 (varconstfunction -> ID functionorlist .)
    SEMICOLON       reduce using rule 82 (varconstfunction -> ID functionorlist .)
    C_PARENTHESIS   reduce using rule 82 (varconstfunction -> ID functionorlist .)
    COMMA           reduce using rule 82 (varconstfunction -> ID functionorlist .)


state 100

    (84) functionorlist -> O_PARENTHESIS . parametersinput C_PARENTHESIS
    (97) parametersinput -> . expression parametersinputloop
    (98) parametersinput -> .
    (47) expression -> . expression2 expressionoptional
    (50) expression2 -> . exp expression2optional
    (61) exp -> . term exploop
    (66) term -> . fact termloop
    (72) fact -> . varconst
    (73) fact -> . O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis
    (80) varconst -> . varconstfunction
    (81) varconst -> . constants
    (82) varconstfunction -> . ID functionorlist
    (86) constants -> . INTCONST
    (87) constants -> . FLOATCONST
    (88) constants -> . STRINGCONST
    (89) constants -> . booleanconst
    (90) booleanconst -> . TRUE
    (91) booleanconst -> . FALSE

    C_PARENTHESIS   reduce using rule 98 (parametersinput -> .)
    O_PARENTHESIS   shift and go to state 58
    ID              shift and go to state 64
    INTCONST        shift and go to state 62
    FLOATCONST      shift and go to state 57
    STRINGCONST     shift and go to state 60
    TRUE            shift and go to state 59
    FALSE           shift and go to state 67

    term                           shift and go to state 66
    parametersinput                shift and go to state 139
    booleanconst                   shift and go to state 69
    varconst                       shift and go to state 68
    constants                      shift and go to state 65
    exp                            shift and go to state 70
    varconstfunction               shift and go to state 61
    expression2                    shift and go to state 63
    expression                     shift and go to state 80
    fact                           shift and go to state 72

state 101

    (64) addsub -> SUM .

    O_PARENTHESIS   reduce using rule 64 (addsub -> SUM .)
    ID              reduce using rule 64 (addsub -> SUM .)
    INTCONST        reduce using rule 64 (addsub -> SUM .)
    FLOATCONST      reduce using rule 64 (addsub -> SUM .)
    STRINGCONST     reduce using rule 64 (addsub -> SUM .)
    TRUE            reduce using rule 64 (addsub -> SUM .)
    FALSE           reduce using rule 64 (addsub -> SUM .)


state 102

    (61) exp -> term exploop .

    EQUALITY        reduce using rule 61 (exp -> term exploop .)
    GREATER         reduce using rule 61 (exp -> term exploop .)
    GREATER_EQUAL   reduce using rule 61 (exp -> term exploop .)
    LESS            reduce using rule 61 (exp -> term exploop .)
    LESS_EQUAL      reduce using rule 61 (exp -> term exploop .)
    DIFFERENT       reduce using rule 61 (exp -> term exploop .)
    AND             reduce using rule 61 (exp -> term exploop .)
    OR              reduce using rule 61 (exp -> term exploop .)
    SEMICOLON       reduce using rule 61 (exp -> term exploop .)
    C_PARENTHESIS   reduce using rule 61 (exp -> term exploop .)
    COMMA           reduce using rule 61 (exp -> term exploop .)


state 103

    (62) exploop -> addsub . exp
    (61) exp -> . term exploop
    (66) term -> . fact termloop
    (72) fact -> . varconst
    (73) fact -> . O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis
    (80) varconst -> . varconstfunction
    (81) varconst -> . constants
    (82) varconstfunction -> . ID functionorlist
    (86) constants -> . INTCONST
    (87) constants -> . FLOATCONST
    (88) constants -> . STRINGCONST
    (89) constants -> . booleanconst
    (90) booleanconst -> . TRUE
    (91) booleanconst -> . FALSE

    O_PARENTHESIS   shift and go to state 58
    ID              shift and go to state 64
    INTCONST        shift and go to state 62
    FLOATCONST      shift and go to state 57
    STRINGCONST     shift and go to state 60
    TRUE            shift and go to state 59
    FALSE           shift and go to state 67

    term                           shift and go to state 66
    booleanconst                   shift and go to state 69
    varconst                       shift and go to state 68
    constants                      shift and go to state 65
    exp                            shift and go to state 140
    varconstfunction               shift and go to state 61
    fact                           shift and go to state 72

state 104

    (65) addsub -> MINUS .

    O_PARENTHESIS   reduce using rule 65 (addsub -> MINUS .)
    ID              reduce using rule 65 (addsub -> MINUS .)
    INTCONST        reduce using rule 65 (addsub -> MINUS .)
    FLOATCONST      reduce using rule 65 (addsub -> MINUS .)
    STRINGCONST     reduce using rule 65 (addsub -> MINUS .)
    TRUE            reduce using rule 65 (addsub -> MINUS .)
    FALSE           reduce using rule 65 (addsub -> MINUS .)


state 105

    (60) relop -> DIFFERENT .

    O_PARENTHESIS   reduce using rule 60 (relop -> DIFFERENT .)
    ID              reduce using rule 60 (relop -> DIFFERENT .)
    INTCONST        reduce using rule 60 (relop -> DIFFERENT .)
    FLOATCONST      reduce using rule 60 (relop -> DIFFERENT .)
    STRINGCONST     reduce using rule 60 (relop -> DIFFERENT .)
    TRUE            reduce using rule 60 (relop -> DIFFERENT .)
    FALSE           reduce using rule 60 (relop -> DIFFERENT .)


state 106

    (55) relop -> EQUALITY .

    O_PARENTHESIS   reduce using rule 55 (relop -> EQUALITY .)
    ID              reduce using rule 55 (relop -> EQUALITY .)
    INTCONST        reduce using rule 55 (relop -> EQUALITY .)
    FLOATCONST      reduce using rule 55 (relop -> EQUALITY .)
    STRINGCONST     reduce using rule 55 (relop -> EQUALITY .)
    TRUE            reduce using rule 55 (relop -> EQUALITY .)
    FALSE           reduce using rule 55 (relop -> EQUALITY .)


state 107

    (56) relop -> GREATER .

    O_PARENTHESIS   reduce using rule 56 (relop -> GREATER .)
    ID              reduce using rule 56 (relop -> GREATER .)
    INTCONST        reduce using rule 56 (relop -> GREATER .)
    FLOATCONST      reduce using rule 56 (relop -> GREATER .)
    STRINGCONST     reduce using rule 56 (relop -> GREATER .)
    TRUE            reduce using rule 56 (relop -> GREATER .)
    FALSE           reduce using rule 56 (relop -> GREATER .)


state 108

    (57) relop -> GREATER_EQUAL .

    O_PARENTHESIS   reduce using rule 57 (relop -> GREATER_EQUAL .)
    ID              reduce using rule 57 (relop -> GREATER_EQUAL .)
    INTCONST        reduce using rule 57 (relop -> GREATER_EQUAL .)
    FLOATCONST      reduce using rule 57 (relop -> GREATER_EQUAL .)
    STRINGCONST     reduce using rule 57 (relop -> GREATER_EQUAL .)
    TRUE            reduce using rule 57 (relop -> GREATER_EQUAL .)
    FALSE           reduce using rule 57 (relop -> GREATER_EQUAL .)


state 109

    (58) relop -> LESS .

    O_PARENTHESIS   reduce using rule 58 (relop -> LESS .)
    ID              reduce using rule 58 (relop -> LESS .)
    INTCONST        reduce using rule 58 (relop -> LESS .)
    FLOATCONST      reduce using rule 58 (relop -> LESS .)
    STRINGCONST     reduce using rule 58 (relop -> LESS .)
    TRUE            reduce using rule 58 (relop -> LESS .)
    FALSE           reduce using rule 58 (relop -> LESS .)


state 110

    (50) expression2 -> exp expression2optional .

    AND             reduce using rule 50 (expression2 -> exp expression2optional .)
    OR              reduce using rule 50 (expression2 -> exp expression2optional .)
    SEMICOLON       reduce using rule 50 (expression2 -> exp expression2optional .)
    C_PARENTHESIS   reduce using rule 50 (expression2 -> exp expression2optional .)
    COMMA           reduce using rule 50 (expression2 -> exp expression2optional .)


state 111

    (59) relop -> LESS_EQUAL .

    O_PARENTHESIS   reduce using rule 59 (relop -> LESS_EQUAL .)
    ID              reduce using rule 59 (relop -> LESS_EQUAL .)
    INTCONST        reduce using rule 59 (relop -> LESS_EQUAL .)
    FLOATCONST      reduce using rule 59 (relop -> LESS_EQUAL .)
    STRINGCONST     reduce using rule 59 (relop -> LESS_EQUAL .)
    TRUE            reduce using rule 59 (relop -> LESS_EQUAL .)
    FALSE           reduce using rule 59 (relop -> LESS_EQUAL .)


state 112

    (51) expression2optional -> relop . exp
    (61) exp -> . term exploop
    (66) term -> . fact termloop
    (72) fact -> . varconst
    (73) fact -> . O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis
    (80) varconst -> . varconstfunction
    (81) varconst -> . constants
    (82) varconstfunction -> . ID functionorlist
    (86) constants -> . INTCONST
    (87) constants -> . FLOATCONST
    (88) constants -> . STRINGCONST
    (89) constants -> . booleanconst
    (90) booleanconst -> . TRUE
    (91) booleanconst -> . FALSE

    O_PARENTHESIS   shift and go to state 58
    ID              shift and go to state 64
    INTCONST        shift and go to state 62
    FLOATCONST      shift and go to state 57
    STRINGCONST     shift and go to state 60
    TRUE            shift and go to state 59
    FALSE           shift and go to state 67

    term                           shift and go to state 66
    booleanconst                   shift and go to state 69
    varconst                       shift and go to state 68
    constants                      shift and go to state 65
    exp                            shift and go to state 141
    varconstfunction               shift and go to state 61
    fact                           shift and go to state 72

state 113

    (94) whileloop -> WHILE O_PARENTHESIS expression C_PARENTHESIS . block
    (19) block -> . O_BRACKET statutesloop functionreturn C_BRACKET

    O_BRACKET       shift and go to state 7

    block                          shift and go to state 142

state 114

    (70) divmult -> DIVIDE .

    O_PARENTHESIS   reduce using rule 70 (divmult -> DIVIDE .)
    ID              reduce using rule 70 (divmult -> DIVIDE .)
    INTCONST        reduce using rule 70 (divmult -> DIVIDE .)
    FLOATCONST      reduce using rule 70 (divmult -> DIVIDE .)
    STRINGCONST     reduce using rule 70 (divmult -> DIVIDE .)
    TRUE            reduce using rule 70 (divmult -> DIVIDE .)
    FALSE           reduce using rule 70 (divmult -> DIVIDE .)


state 115

    (66) term -> fact termloop .

    SUM             reduce using rule 66 (term -> fact termloop .)
    MINUS           reduce using rule 66 (term -> fact termloop .)
    EQUALITY        reduce using rule 66 (term -> fact termloop .)
    GREATER         reduce using rule 66 (term -> fact termloop .)
    GREATER_EQUAL   reduce using rule 66 (term -> fact termloop .)
    LESS            reduce using rule 66 (term -> fact termloop .)
    LESS_EQUAL      reduce using rule 66 (term -> fact termloop .)
    DIFFERENT       reduce using rule 66 (term -> fact termloop .)
    AND             reduce using rule 66 (term -> fact termloop .)
    OR              reduce using rule 66 (term -> fact termloop .)
    SEMICOLON       reduce using rule 66 (term -> fact termloop .)
    COMMA           reduce using rule 66 (term -> fact termloop .)
    C_PARENTHESIS   reduce using rule 66 (term -> fact termloop .)


state 116

    (69) divmult -> MULTIPLY .

    O_PARENTHESIS   reduce using rule 69 (divmult -> MULTIPLY .)
    ID              reduce using rule 69 (divmult -> MULTIPLY .)
    INTCONST        reduce using rule 69 (divmult -> MULTIPLY .)
    FLOATCONST      reduce using rule 69 (divmult -> MULTIPLY .)
    STRINGCONST     reduce using rule 69 (divmult -> MULTIPLY .)
    TRUE            reduce using rule 69 (divmult -> MULTIPLY .)
    FALSE           reduce using rule 69 (divmult -> MULTIPLY .)


state 117

    (67) termloop -> divmult . term
    (66) term -> . fact termloop
    (72) fact -> . varconst
    (73) fact -> . O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis
    (80) varconst -> . varconstfunction
    (81) varconst -> . constants
    (82) varconstfunction -> . ID functionorlist
    (86) constants -> . INTCONST
    (87) constants -> . FLOATCONST
    (88) constants -> . STRINGCONST
    (89) constants -> . booleanconst
    (90) booleanconst -> . TRUE
    (91) booleanconst -> . FALSE

    O_PARENTHESIS   shift and go to state 58
    ID              shift and go to state 64
    INTCONST        shift and go to state 62
    FLOATCONST      shift and go to state 57
    STRINGCONST     shift and go to state 60
    TRUE            shift and go to state 59
    FALSE           shift and go to state 67

    term                           shift and go to state 143
    booleanconst                   shift and go to state 69
    varconstfunction               shift and go to state 61
    varconst                       shift and go to state 68
    constants                      shift and go to state 65
    fact                           shift and go to state 72

state 118

    (71) divmult -> MOD .

    O_PARENTHESIS   reduce using rule 71 (divmult -> MOD .)
    ID              reduce using rule 71 (divmult -> MOD .)
    INTCONST        reduce using rule 71 (divmult -> MOD .)
    FLOATCONST      reduce using rule 71 (divmult -> MOD .)
    STRINGCONST     reduce using rule 71 (divmult -> MOD .)
    TRUE            reduce using rule 71 (divmult -> MOD .)
    FALSE           reduce using rule 71 (divmult -> MOD .)


state 119

    (31) writting -> PRINT O_PARENTHESIS writtingloop C_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 144


state 120

    (32) writtingloop -> expression optionalwritting .

    C_PARENTHESIS   reduce using rule 32 (writtingloop -> expression optionalwritting .)


state 121

    (33) optionalwritting -> COMMA . writtingloop
    (32) writtingloop -> . expression optionalwritting
    (47) expression -> . expression2 expressionoptional
    (50) expression2 -> . exp expression2optional
    (61) exp -> . term exploop
    (66) term -> . fact termloop
    (72) fact -> . varconst
    (73) fact -> . O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis
    (80) varconst -> . varconstfunction
    (81) varconst -> . constants
    (82) varconstfunction -> . ID functionorlist
    (86) constants -> . INTCONST
    (87) constants -> . FLOATCONST
    (88) constants -> . STRINGCONST
    (89) constants -> . booleanconst
    (90) booleanconst -> . TRUE
    (91) booleanconst -> . FALSE

    O_PARENTHESIS   shift and go to state 58
    ID              shift and go to state 64
    INTCONST        shift and go to state 62
    FLOATCONST      shift and go to state 57
    STRINGCONST     shift and go to state 60
    TRUE            shift and go to state 59
    FALSE           shift and go to state 67

    term                           shift and go to state 66
    booleanconst                   shift and go to state 69
    varconst                       shift and go to state 68
    constants                      shift and go to state 65
    exp                            shift and go to state 70
    varconstfunction               shift and go to state 61
    writtingloop                   shift and go to state 145
    expression2                    shift and go to state 63
    expression                     shift and go to state 74
    fact                           shift and go to state 72

state 122

    (30) assignation -> var_assign EQUALS expression SEMICOLON .

    IF              reduce using rule 30 (assignation -> var_assign EQUALS expression SEMICOLON .)
    PRINT           reduce using rule 30 (assignation -> var_assign EQUALS expression SEMICOLON .)
    ID              reduce using rule 30 (assignation -> var_assign EQUALS expression SEMICOLON .)
    LIST            reduce using rule 30 (assignation -> var_assign EQUALS expression SEMICOLON .)
    WHILE           reduce using rule 30 (assignation -> var_assign EQUALS expression SEMICOLON .)
    TIMES           reduce using rule 30 (assignation -> var_assign EQUALS expression SEMICOLON .)
    BOOL            reduce using rule 30 (assignation -> var_assign EQUALS expression SEMICOLON .)
    INT             reduce using rule 30 (assignation -> var_assign EQUALS expression SEMICOLON .)
    FLOAT           reduce using rule 30 (assignation -> var_assign EQUALS expression SEMICOLON .)
    STRING          reduce using rule 30 (assignation -> var_assign EQUALS expression SEMICOLON .)
    RETURN          reduce using rule 30 (assignation -> var_assign EQUALS expression SEMICOLON .)
    C_BRACKET       reduce using rule 30 (assignation -> var_assign EQUALS expression SEMICOLON .)


state 123

    (37) normalinit -> type var EQUALS expression . SEMICOLON

    SEMICOLON       shift and go to state 146


state 124

    (78) listaccess -> O_S_BRACKET INTCONST C_S_BRACKET .

    EQUALS          reduce using rule 78 (listaccess -> O_S_BRACKET INTCONST C_S_BRACKET .)


state 125

    (96) functioncall -> ID O_PARENTHESIS parametersinput C_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 147


state 126

    (97) parametersinput -> expression parametersinputloop .

    C_PARENTHESIS   reduce using rule 97 (parametersinput -> expression parametersinputloop .)


state 127

    (99) parametersinputloop -> COMMA . expression parametersinputloop
    (47) expression -> . expression2 expressionoptional
    (50) expression2 -> . exp expression2optional
    (61) exp -> . term exploop
    (66) term -> . fact termloop
    (72) fact -> . varconst
    (73) fact -> . O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis
    (80) varconst -> . varconstfunction
    (81) varconst -> . constants
    (82) varconstfunction -> . ID functionorlist
    (86) constants -> . INTCONST
    (87) constants -> . FLOATCONST
    (88) constants -> . STRINGCONST
    (89) constants -> . booleanconst
    (90) booleanconst -> . TRUE
    (91) booleanconst -> . FALSE

    O_PARENTHESIS   shift and go to state 58
    ID              shift and go to state 64
    INTCONST        shift and go to state 62
    FLOATCONST      shift and go to state 57
    STRINGCONST     shift and go to state 60
    TRUE            shift and go to state 59
    FALSE           shift and go to state 67

    term                           shift and go to state 66
    booleanconst                   shift and go to state 69
    varconst                       shift and go to state 68
    constants                      shift and go to state 65
    exp                            shift and go to state 70
    varconstfunction               shift and go to state 61
    expression2                    shift and go to state 63
    expression                     shift and go to state 148
    fact                           shift and go to state 72

state 128

    (44) condition -> IF O_PARENTHESIS expression C_PARENTHESIS . block else
    (19) block -> . O_BRACKET statutesloop functionreturn C_BRACKET

    O_BRACKET       shift and go to state 7

    block                          shift and go to state 149

state 129

    (20) functionreturn -> RETURN expression SEMICOLON .

    C_BRACKET       reduce using rule 20 (functionreturn -> RETURN expression SEMICOLON .)


state 130

    (38) listinit -> LIST type var EQUALS . list SEMICOLON
    (39) list -> . O_S_BRACKET listelements C_S_BRACKET

    O_S_BRACKET     shift and go to state 151

    list                           shift and go to state 150

state 131

    (103) parameterinit -> parametertype ID .

    COMMA           reduce using rule 103 (parameterinit -> parametertype ID .)
    C_PARENTHESIS   reduce using rule 103 (parameterinit -> parametertype ID .)


state 132

    (5) function -> FUNCTION functiontype ID O_PARENTHESIS parameters C_PARENTHESIS . block
    (19) block -> . O_BRACKET statutesloop functionreturn C_BRACKET

    O_BRACKET       shift and go to state 7

    block                          shift and go to state 152

state 133

    (101) parameters -> parameterinit parametersloop .

    C_PARENTHESIS   reduce using rule 101 (parameters -> parameterinit parametersloop .)


state 134

    (104) parametersloop -> COMMA . parameterinit parametersloop
    (103) parameterinit -> . parametertype ID
    (15) parametertype -> . BOOL
    (16) parametertype -> . INT
    (17) parametertype -> . FLOAT
    (18) parametertype -> . STRING

    BOOL            shift and go to state 89
    INT             shift and go to state 87
    FLOAT           shift and go to state 88
    STRING          shift and go to state 91

    parametertype                  shift and go to state 85
    parameterinit                  shift and go to state 153

state 135

    (95) timesloop -> TIMES O_PARENTHESIS INTCONST C_PARENTHESIS block .

    IF              reduce using rule 95 (timesloop -> TIMES O_PARENTHESIS INTCONST C_PARENTHESIS block .)
    PRINT           reduce using rule 95 (timesloop -> TIMES O_PARENTHESIS INTCONST C_PARENTHESIS block .)
    ID              reduce using rule 95 (timesloop -> TIMES O_PARENTHESIS INTCONST C_PARENTHESIS block .)
    LIST            reduce using rule 95 (timesloop -> TIMES O_PARENTHESIS INTCONST C_PARENTHESIS block .)
    WHILE           reduce using rule 95 (timesloop -> TIMES O_PARENTHESIS INTCONST C_PARENTHESIS block .)
    TIMES           reduce using rule 95 (timesloop -> TIMES O_PARENTHESIS INTCONST C_PARENTHESIS block .)
    BOOL            reduce using rule 95 (timesloop -> TIMES O_PARENTHESIS INTCONST C_PARENTHESIS block .)
    INT             reduce using rule 95 (timesloop -> TIMES O_PARENTHESIS INTCONST C_PARENTHESIS block .)
    FLOAT           reduce using rule 95 (timesloop -> TIMES O_PARENTHESIS INTCONST C_PARENTHESIS block .)
    STRING          reduce using rule 95 (timesloop -> TIMES O_PARENTHESIS INTCONST C_PARENTHESIS block .)
    RETURN          reduce using rule 95 (timesloop -> TIMES O_PARENTHESIS INTCONST C_PARENTHESIS block .)
    C_BRACKET       reduce using rule 95 (timesloop -> TIMES O_PARENTHESIS INTCONST C_PARENTHESIS block .)


state 136

    (73) fact -> O_PARENTHESIS add_o_parenthesis expression . C_PARENTHESIS add_c_parenthesis

    C_PARENTHESIS   shift and go to state 154


state 137

    (48) expressionoptional -> logicop expression2 .

    C_PARENTHESIS   reduce using rule 48 (expressionoptional -> logicop expression2 .)
    COMMA           reduce using rule 48 (expressionoptional -> logicop expression2 .)
    SEMICOLON       reduce using rule 48 (expressionoptional -> logicop expression2 .)


state 138

    (83) functionorlist -> O_S_BRACKET INTCONST . C_S_BRACKET

    C_S_BRACKET     shift and go to state 155


state 139

    (84) functionorlist -> O_PARENTHESIS parametersinput . C_PARENTHESIS

    C_PARENTHESIS   shift and go to state 156


state 140

    (62) exploop -> addsub exp .

    EQUALITY        reduce using rule 62 (exploop -> addsub exp .)
    GREATER         reduce using rule 62 (exploop -> addsub exp .)
    GREATER_EQUAL   reduce using rule 62 (exploop -> addsub exp .)
    LESS            reduce using rule 62 (exploop -> addsub exp .)
    LESS_EQUAL      reduce using rule 62 (exploop -> addsub exp .)
    DIFFERENT       reduce using rule 62 (exploop -> addsub exp .)
    AND             reduce using rule 62 (exploop -> addsub exp .)
    OR              reduce using rule 62 (exploop -> addsub exp .)
    C_PARENTHESIS   reduce using rule 62 (exploop -> addsub exp .)
    COMMA           reduce using rule 62 (exploop -> addsub exp .)
    SEMICOLON       reduce using rule 62 (exploop -> addsub exp .)


state 141

    (51) expression2optional -> relop exp .

    AND             reduce using rule 51 (expression2optional -> relop exp .)
    OR              reduce using rule 51 (expression2optional -> relop exp .)
    C_PARENTHESIS   reduce using rule 51 (expression2optional -> relop exp .)
    COMMA           reduce using rule 51 (expression2optional -> relop exp .)
    SEMICOLON       reduce using rule 51 (expression2optional -> relop exp .)


state 142

    (94) whileloop -> WHILE O_PARENTHESIS expression C_PARENTHESIS block .

    IF              reduce using rule 94 (whileloop -> WHILE O_PARENTHESIS expression C_PARENTHESIS block .)
    PRINT           reduce using rule 94 (whileloop -> WHILE O_PARENTHESIS expression C_PARENTHESIS block .)
    ID              reduce using rule 94 (whileloop -> WHILE O_PARENTHESIS expression C_PARENTHESIS block .)
    LIST            reduce using rule 94 (whileloop -> WHILE O_PARENTHESIS expression C_PARENTHESIS block .)
    WHILE           reduce using rule 94 (whileloop -> WHILE O_PARENTHESIS expression C_PARENTHESIS block .)
    TIMES           reduce using rule 94 (whileloop -> WHILE O_PARENTHESIS expression C_PARENTHESIS block .)
    BOOL            reduce using rule 94 (whileloop -> WHILE O_PARENTHESIS expression C_PARENTHESIS block .)
    INT             reduce using rule 94 (whileloop -> WHILE O_PARENTHESIS expression C_PARENTHESIS block .)
    FLOAT           reduce using rule 94 (whileloop -> WHILE O_PARENTHESIS expression C_PARENTHESIS block .)
    STRING          reduce using rule 94 (whileloop -> WHILE O_PARENTHESIS expression C_PARENTHESIS block .)
    RETURN          reduce using rule 94 (whileloop -> WHILE O_PARENTHESIS expression C_PARENTHESIS block .)
    C_BRACKET       reduce using rule 94 (whileloop -> WHILE O_PARENTHESIS expression C_PARENTHESIS block .)


state 143

    (67) termloop -> divmult term .

    SUM             reduce using rule 67 (termloop -> divmult term .)
    MINUS           reduce using rule 67 (termloop -> divmult term .)
    EQUALITY        reduce using rule 67 (termloop -> divmult term .)
    GREATER         reduce using rule 67 (termloop -> divmult term .)
    GREATER_EQUAL   reduce using rule 67 (termloop -> divmult term .)
    LESS            reduce using rule 67 (termloop -> divmult term .)
    LESS_EQUAL      reduce using rule 67 (termloop -> divmult term .)
    DIFFERENT       reduce using rule 67 (termloop -> divmult term .)
    AND             reduce using rule 67 (termloop -> divmult term .)
    OR              reduce using rule 67 (termloop -> divmult term .)
    C_PARENTHESIS   reduce using rule 67 (termloop -> divmult term .)
    COMMA           reduce using rule 67 (termloop -> divmult term .)
    SEMICOLON       reduce using rule 67 (termloop -> divmult term .)


state 144

    (31) writting -> PRINT O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON .

    IF              reduce using rule 31 (writting -> PRINT O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON .)
    PRINT           reduce using rule 31 (writting -> PRINT O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON .)
    ID              reduce using rule 31 (writting -> PRINT O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON .)
    LIST            reduce using rule 31 (writting -> PRINT O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON .)
    WHILE           reduce using rule 31 (writting -> PRINT O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON .)
    TIMES           reduce using rule 31 (writting -> PRINT O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON .)
    BOOL            reduce using rule 31 (writting -> PRINT O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON .)
    INT             reduce using rule 31 (writting -> PRINT O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON .)
    FLOAT           reduce using rule 31 (writting -> PRINT O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON .)
    STRING          reduce using rule 31 (writting -> PRINT O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON .)
    RETURN          reduce using rule 31 (writting -> PRINT O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON .)
    C_BRACKET       reduce using rule 31 (writting -> PRINT O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON .)


state 145

    (33) optionalwritting -> COMMA writtingloop .

    C_PARENTHESIS   reduce using rule 33 (optionalwritting -> COMMA writtingloop .)


state 146

    (37) normalinit -> type var EQUALS expression SEMICOLON .

    IF              reduce using rule 37 (normalinit -> type var EQUALS expression SEMICOLON .)
    PRINT           reduce using rule 37 (normalinit -> type var EQUALS expression SEMICOLON .)
    ID              reduce using rule 37 (normalinit -> type var EQUALS expression SEMICOLON .)
    LIST            reduce using rule 37 (normalinit -> type var EQUALS expression SEMICOLON .)
    WHILE           reduce using rule 37 (normalinit -> type var EQUALS expression SEMICOLON .)
    TIMES           reduce using rule 37 (normalinit -> type var EQUALS expression SEMICOLON .)
    BOOL            reduce using rule 37 (normalinit -> type var EQUALS expression SEMICOLON .)
    INT             reduce using rule 37 (normalinit -> type var EQUALS expression SEMICOLON .)
    FLOAT           reduce using rule 37 (normalinit -> type var EQUALS expression SEMICOLON .)
    STRING          reduce using rule 37 (normalinit -> type var EQUALS expression SEMICOLON .)
    RETURN          reduce using rule 37 (normalinit -> type var EQUALS expression SEMICOLON .)
    C_BRACKET       reduce using rule 37 (normalinit -> type var EQUALS expression SEMICOLON .)


state 147

    (96) functioncall -> ID O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON .

    IF              reduce using rule 96 (functioncall -> ID O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON .)
    PRINT           reduce using rule 96 (functioncall -> ID O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON .)
    ID              reduce using rule 96 (functioncall -> ID O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON .)
    LIST            reduce using rule 96 (functioncall -> ID O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON .)
    WHILE           reduce using rule 96 (functioncall -> ID O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON .)
    TIMES           reduce using rule 96 (functioncall -> ID O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON .)
    BOOL            reduce using rule 96 (functioncall -> ID O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON .)
    INT             reduce using rule 96 (functioncall -> ID O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON .)
    FLOAT           reduce using rule 96 (functioncall -> ID O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON .)
    STRING          reduce using rule 96 (functioncall -> ID O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON .)
    RETURN          reduce using rule 96 (functioncall -> ID O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON .)
    C_BRACKET       reduce using rule 96 (functioncall -> ID O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON .)


state 148

    (99) parametersinputloop -> COMMA expression . parametersinputloop
    (99) parametersinputloop -> . COMMA expression parametersinputloop
    (100) parametersinputloop -> .

    COMMA           shift and go to state 127
    C_PARENTHESIS   reduce using rule 100 (parametersinputloop -> .)

    parametersinputloop            shift and go to state 157

state 149

    (44) condition -> IF O_PARENTHESIS expression C_PARENTHESIS block . else
    (45) else -> . ELSE block
    (46) else -> .

    ELSE            shift and go to state 158
    IF              reduce using rule 46 (else -> .)
    PRINT           reduce using rule 46 (else -> .)
    ID              reduce using rule 46 (else -> .)
    LIST            reduce using rule 46 (else -> .)
    WHILE           reduce using rule 46 (else -> .)
    TIMES           reduce using rule 46 (else -> .)
    BOOL            reduce using rule 46 (else -> .)
    INT             reduce using rule 46 (else -> .)
    FLOAT           reduce using rule 46 (else -> .)
    STRING          reduce using rule 46 (else -> .)
    RETURN          reduce using rule 46 (else -> .)
    C_BRACKET       reduce using rule 46 (else -> .)

    else                           shift and go to state 159

state 150

    (38) listinit -> LIST type var EQUALS list . SEMICOLON

    SEMICOLON       shift and go to state 160


state 151

    (39) list -> O_S_BRACKET . listelements C_S_BRACKET
    (40) listelements -> . constants optionalconstants
    (41) listelements -> .
    (86) constants -> . INTCONST
    (87) constants -> . FLOATCONST
    (88) constants -> . STRINGCONST
    (89) constants -> . booleanconst
    (90) booleanconst -> . TRUE
    (91) booleanconst -> . FALSE

    C_S_BRACKET     reduce using rule 41 (listelements -> .)
    INTCONST        shift and go to state 62
    FLOATCONST      shift and go to state 57
    STRINGCONST     shift and go to state 60
    TRUE            shift and go to state 59
    FALSE           shift and go to state 67

    booleanconst                   shift and go to state 69
    constants                      shift and go to state 162
    listelements                   shift and go to state 161

state 152

    (5) function -> FUNCTION functiontype ID O_PARENTHESIS parameters C_PARENTHESIS block .

    FUNCTION        reduce using rule 5 (function -> FUNCTION functiontype ID O_PARENTHESIS parameters C_PARENTHESIS block .)
    $end            reduce using rule 5 (function -> FUNCTION functiontype ID O_PARENTHESIS parameters C_PARENTHESIS block .)


state 153

    (104) parametersloop -> COMMA parameterinit . parametersloop
    (104) parametersloop -> . COMMA parameterinit parametersloop
    (105) parametersloop -> .

    COMMA           shift and go to state 134
    C_PARENTHESIS   reduce using rule 105 (parametersloop -> .)

    parametersloop                 shift and go to state 163

state 154

    (73) fact -> O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS . add_c_parenthesis
    (75) add_c_parenthesis -> .

    MULTIPLY        reduce using rule 75 (add_c_parenthesis -> .)
    DIVIDE          reduce using rule 75 (add_c_parenthesis -> .)
    MOD             reduce using rule 75 (add_c_parenthesis -> .)
    SUM             reduce using rule 75 (add_c_parenthesis -> .)
    MINUS           reduce using rule 75 (add_c_parenthesis -> .)
    EQUALITY        reduce using rule 75 (add_c_parenthesis -> .)
    GREATER         reduce using rule 75 (add_c_parenthesis -> .)
    GREATER_EQUAL   reduce using rule 75 (add_c_parenthesis -> .)
    LESS            reduce using rule 75 (add_c_parenthesis -> .)
    LESS_EQUAL      reduce using rule 75 (add_c_parenthesis -> .)
    DIFFERENT       reduce using rule 75 (add_c_parenthesis -> .)
    AND             reduce using rule 75 (add_c_parenthesis -> .)
    OR              reduce using rule 75 (add_c_parenthesis -> .)
    C_PARENTHESIS   reduce using rule 75 (add_c_parenthesis -> .)
    COMMA           reduce using rule 75 (add_c_parenthesis -> .)
    SEMICOLON       reduce using rule 75 (add_c_parenthesis -> .)

    add_c_parenthesis              shift and go to state 164

state 155

    (83) functionorlist -> O_S_BRACKET INTCONST C_S_BRACKET .

    MULTIPLY        reduce using rule 83 (functionorlist -> O_S_BRACKET INTCONST C_S_BRACKET .)
    DIVIDE          reduce using rule 83 (functionorlist -> O_S_BRACKET INTCONST C_S_BRACKET .)
    MOD             reduce using rule 83 (functionorlist -> O_S_BRACKET INTCONST C_S_BRACKET .)
    SUM             reduce using rule 83 (functionorlist -> O_S_BRACKET INTCONST C_S_BRACKET .)
    MINUS           reduce using rule 83 (functionorlist -> O_S_BRACKET INTCONST C_S_BRACKET .)
    EQUALITY        reduce using rule 83 (functionorlist -> O_S_BRACKET INTCONST C_S_BRACKET .)
    GREATER         reduce using rule 83 (functionorlist -> O_S_BRACKET INTCONST C_S_BRACKET .)
    GREATER_EQUAL   reduce using rule 83 (functionorlist -> O_S_BRACKET INTCONST C_S_BRACKET .)
    LESS            reduce using rule 83 (functionorlist -> O_S_BRACKET INTCONST C_S_BRACKET .)
    LESS_EQUAL      reduce using rule 83 (functionorlist -> O_S_BRACKET INTCONST C_S_BRACKET .)
    DIFFERENT       reduce using rule 83 (functionorlist -> O_S_BRACKET INTCONST C_S_BRACKET .)
    AND             reduce using rule 83 (functionorlist -> O_S_BRACKET INTCONST C_S_BRACKET .)
    OR              reduce using rule 83 (functionorlist -> O_S_BRACKET INTCONST C_S_BRACKET .)
    C_PARENTHESIS   reduce using rule 83 (functionorlist -> O_S_BRACKET INTCONST C_S_BRACKET .)
    COMMA           reduce using rule 83 (functionorlist -> O_S_BRACKET INTCONST C_S_BRACKET .)
    SEMICOLON       reduce using rule 83 (functionorlist -> O_S_BRACKET INTCONST C_S_BRACKET .)


state 156

    (84) functionorlist -> O_PARENTHESIS parametersinput C_PARENTHESIS .

    MULTIPLY        reduce using rule 84 (functionorlist -> O_PARENTHESIS parametersinput C_PARENTHESIS .)
    DIVIDE          reduce using rule 84 (functionorlist -> O_PARENTHESIS parametersinput C_PARENTHESIS .)
    MOD             reduce using rule 84 (functionorlist -> O_PARENTHESIS parametersinput C_PARENTHESIS .)
    SUM             reduce using rule 84 (functionorlist -> O_PARENTHESIS parametersinput C_PARENTHESIS .)
    MINUS           reduce using rule 84 (functionorlist -> O_PARENTHESIS parametersinput C_PARENTHESIS .)
    EQUALITY        reduce using rule 84 (functionorlist -> O_PARENTHESIS parametersinput C_PARENTHESIS .)
    GREATER         reduce using rule 84 (functionorlist -> O_PARENTHESIS parametersinput C_PARENTHESIS .)
    GREATER_EQUAL   reduce using rule 84 (functionorlist -> O_PARENTHESIS parametersinput C_PARENTHESIS .)
    LESS            reduce using rule 84 (functionorlist -> O_PARENTHESIS parametersinput C_PARENTHESIS .)
    LESS_EQUAL      reduce using rule 84 (functionorlist -> O_PARENTHESIS parametersinput C_PARENTHESIS .)
    DIFFERENT       reduce using rule 84 (functionorlist -> O_PARENTHESIS parametersinput C_PARENTHESIS .)
    AND             reduce using rule 84 (functionorlist -> O_PARENTHESIS parametersinput C_PARENTHESIS .)
    OR              reduce using rule 84 (functionorlist -> O_PARENTHESIS parametersinput C_PARENTHESIS .)
    C_PARENTHESIS   reduce using rule 84 (functionorlist -> O_PARENTHESIS parametersinput C_PARENTHESIS .)
    COMMA           reduce using rule 84 (functionorlist -> O_PARENTHESIS parametersinput C_PARENTHESIS .)
    SEMICOLON       reduce using rule 84 (functionorlist -> O_PARENTHESIS parametersinput C_PARENTHESIS .)


state 157

    (99) parametersinputloop -> COMMA expression parametersinputloop .

    C_PARENTHESIS   reduce using rule 99 (parametersinputloop -> COMMA expression parametersinputloop .)


state 158

    (45) else -> ELSE . block
    (19) block -> . O_BRACKET statutesloop functionreturn C_BRACKET

    O_BRACKET       shift and go to state 7

    block                          shift and go to state 165

state 159

    (44) condition -> IF O_PARENTHESIS expression C_PARENTHESIS block else .

    IF              reduce using rule 44 (condition -> IF O_PARENTHESIS expression C_PARENTHESIS block else .)
    PRINT           reduce using rule 44 (condition -> IF O_PARENTHESIS expression C_PARENTHESIS block else .)
    ID              reduce using rule 44 (condition -> IF O_PARENTHESIS expression C_PARENTHESIS block else .)
    LIST            reduce using rule 44 (condition -> IF O_PARENTHESIS expression C_PARENTHESIS block else .)
    WHILE           reduce using rule 44 (condition -> IF O_PARENTHESIS expression C_PARENTHESIS block else .)
    TIMES           reduce using rule 44 (condition -> IF O_PARENTHESIS expression C_PARENTHESIS block else .)
    BOOL            reduce using rule 44 (condition -> IF O_PARENTHESIS expression C_PARENTHESIS block else .)
    INT             reduce using rule 44 (condition -> IF O_PARENTHESIS expression C_PARENTHESIS block else .)
    FLOAT           reduce using rule 44 (condition -> IF O_PARENTHESIS expression C_PARENTHESIS block else .)
    STRING          reduce using rule 44 (condition -> IF O_PARENTHESIS expression C_PARENTHESIS block else .)
    RETURN          reduce using rule 44 (condition -> IF O_PARENTHESIS expression C_PARENTHESIS block else .)
    C_BRACKET       reduce using rule 44 (condition -> IF O_PARENTHESIS expression C_PARENTHESIS block else .)


state 160

    (38) listinit -> LIST type var EQUALS list SEMICOLON .

    IF              reduce using rule 38 (listinit -> LIST type var EQUALS list SEMICOLON .)
    PRINT           reduce using rule 38 (listinit -> LIST type var EQUALS list SEMICOLON .)
    ID              reduce using rule 38 (listinit -> LIST type var EQUALS list SEMICOLON .)
    LIST            reduce using rule 38 (listinit -> LIST type var EQUALS list SEMICOLON .)
    WHILE           reduce using rule 38 (listinit -> LIST type var EQUALS list SEMICOLON .)
    TIMES           reduce using rule 38 (listinit -> LIST type var EQUALS list SEMICOLON .)
    BOOL            reduce using rule 38 (listinit -> LIST type var EQUALS list SEMICOLON .)
    INT             reduce using rule 38 (listinit -> LIST type var EQUALS list SEMICOLON .)
    FLOAT           reduce using rule 38 (listinit -> LIST type var EQUALS list SEMICOLON .)
    STRING          reduce using rule 38 (listinit -> LIST type var EQUALS list SEMICOLON .)
    RETURN          reduce using rule 38 (listinit -> LIST type var EQUALS list SEMICOLON .)
    C_BRACKET       reduce using rule 38 (listinit -> LIST type var EQUALS list SEMICOLON .)


state 161

    (39) list -> O_S_BRACKET listelements . C_S_BRACKET

    C_S_BRACKET     shift and go to state 166


state 162

    (40) listelements -> constants . optionalconstants
    (42) optionalconstants -> . COMMA constants optionalconstants
    (43) optionalconstants -> .

    COMMA           shift and go to state 168
    C_S_BRACKET     reduce using rule 43 (optionalconstants -> .)

    optionalconstants              shift and go to state 167

state 163

    (104) parametersloop -> COMMA parameterinit parametersloop .

    C_PARENTHESIS   reduce using rule 104 (parametersloop -> COMMA parameterinit parametersloop .)


state 164

    (73) fact -> O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis .

    MULTIPLY        reduce using rule 73 (fact -> O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis .)
    DIVIDE          reduce using rule 73 (fact -> O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis .)
    MOD             reduce using rule 73 (fact -> O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis .)
    SUM             reduce using rule 73 (fact -> O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis .)
    MINUS           reduce using rule 73 (fact -> O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis .)
    EQUALITY        reduce using rule 73 (fact -> O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis .)
    GREATER         reduce using rule 73 (fact -> O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis .)
    GREATER_EQUAL   reduce using rule 73 (fact -> O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis .)
    LESS            reduce using rule 73 (fact -> O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis .)
    LESS_EQUAL      reduce using rule 73 (fact -> O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis .)
    DIFFERENT       reduce using rule 73 (fact -> O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis .)
    AND             reduce using rule 73 (fact -> O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis .)
    OR              reduce using rule 73 (fact -> O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis .)
    SEMICOLON       reduce using rule 73 (fact -> O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis .)
    C_PARENTHESIS   reduce using rule 73 (fact -> O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis .)
    COMMA           reduce using rule 73 (fact -> O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis .)


state 165

    (45) else -> ELSE block .

    IF              reduce using rule 45 (else -> ELSE block .)
    PRINT           reduce using rule 45 (else -> ELSE block .)
    ID              reduce using rule 45 (else -> ELSE block .)
    LIST            reduce using rule 45 (else -> ELSE block .)
    WHILE           reduce using rule 45 (else -> ELSE block .)
    TIMES           reduce using rule 45 (else -> ELSE block .)
    BOOL            reduce using rule 45 (else -> ELSE block .)
    INT             reduce using rule 45 (else -> ELSE block .)
    FLOAT           reduce using rule 45 (else -> ELSE block .)
    STRING          reduce using rule 45 (else -> ELSE block .)
    RETURN          reduce using rule 45 (else -> ELSE block .)
    C_BRACKET       reduce using rule 45 (else -> ELSE block .)


state 166

    (39) list -> O_S_BRACKET listelements C_S_BRACKET .

    SEMICOLON       reduce using rule 39 (list -> O_S_BRACKET listelements C_S_BRACKET .)


state 167

    (40) listelements -> constants optionalconstants .

    C_S_BRACKET     reduce using rule 40 (listelements -> constants optionalconstants .)


state 168

    (42) optionalconstants -> COMMA . constants optionalconstants
    (86) constants -> . INTCONST
    (87) constants -> . FLOATCONST
    (88) constants -> . STRINGCONST
    (89) constants -> . booleanconst
    (90) booleanconst -> . TRUE
    (91) booleanconst -> . FALSE

    INTCONST        shift and go to state 62
    FLOATCONST      shift and go to state 57
    STRINGCONST     shift and go to state 60
    TRUE            shift and go to state 59
    FALSE           shift and go to state 67

    booleanconst                   shift and go to state 69
    constants                      shift and go to state 169

state 169

    (42) optionalconstants -> COMMA constants . optionalconstants
    (42) optionalconstants -> . COMMA constants optionalconstants
    (43) optionalconstants -> .

    COMMA           shift and go to state 168
    C_S_BRACKET     reduce using rule 43 (optionalconstants -> .)

    optionalconstants              shift and go to state 170

state 170

    (42) optionalconstants -> COMMA constants optionalconstants .

    C_S_BRACKET     reduce using rule 42 (optionalconstants -> COMMA constants optionalconstants .)

