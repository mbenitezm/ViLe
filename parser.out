Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> generate_main_goto functionloop fill_main_goto main
Rule 2     generate_main_goto -> <empty>
Rule 3     fill_main_goto -> <empty>
Rule 4     main -> MAIN block
Rule 5     functionloop -> function functionloop
Rule 6     functionloop -> <empty>
Rule 7     function -> FUNCTION function_head function_end
Rule 8     function_head -> VOID function_def
Rule 9     function_head -> BOOL function_with_return_def
Rule 10    function_head -> INT function_with_return_def
Rule 11    function_head -> FLOAT function_with_return_def
Rule 12    function_head -> STRING function_with_return_def
Rule 13    function_with_return_def -> ID O_PARENTHESIS parameters C_PARENTHESIS functionblock
Rule 14    function_def -> ID O_PARENTHESIS parameters C_PARENTHESIS block
Rule 15    type -> BOOL
Rule 16    type -> INT
Rule 17    type -> FLOAT
Rule 18    type -> STRING
Rule 19    parametertype -> BOOL
Rule 20    parametertype -> INT
Rule 21    parametertype -> FLOAT
Rule 22    parametertype -> STRING
Rule 23    block -> O_BRACKET statutesloop C_BRACKET
Rule 24    functionblock -> O_BRACKET statutesloop functionreturn C_BRACKET
Rule 25    functionreturn -> RETURN O_BRACKET expression C_BRACKET SEMICOLON
Rule 26    functionreturn -> RETURN expression SEMICOLON
Rule 27    function_end -> <empty>
Rule 28    statutesloop -> statute statutesloop
Rule 29    statutesloop -> <empty>
Rule 30    statute -> init
Rule 31    statute -> condition
Rule 32    statute -> writting
Rule 33    statute -> loop
Rule 34    statute -> assignation
Rule 35    statute -> functioncall
Rule 36    assignation -> var_assign EQUALS add_equals expression equals_quadruple SEMICOLON
Rule 37    writting -> PRINT O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON
Rule 38    start_printing -> <empty>
Rule 39    print_quadruple -> <empty>
Rule 40    writtingloop -> start_printing expression print_quadruple optionalwritting
Rule 41    optionalwritting -> COMMA writtingloop
Rule 42    optionalwritting -> <empty>
Rule 43    init -> listinit
Rule 44    init -> normalinit
Rule 45    normalinit -> type var EQUALS add_equals expression equals_quadruple SEMICOLON
Rule 46    equals_quadruple -> <empty>
Rule 47    add_equals -> <empty>
Rule 48    listinit -> LIST type var EQUALS list SEMICOLON
Rule 49    list -> O_S_BRACKET listelements C_S_BRACKET
Rule 50    listelements -> constants optionalconstants
Rule 51    listelements -> <empty>
Rule 52    optionalconstants -> COMMA constants optionalconstants
Rule 53    optionalconstants -> <empty>
Rule 54    condition -> IF O_PARENTHESIS expression C_PARENTHESIS start_condition block else end_condition
Rule 55    else -> ELSE else_condition block
Rule 56    else -> <empty>
Rule 57    start_condition -> <empty>
Rule 58    else_condition -> <empty>
Rule 59    end_condition -> <empty>
Rule 60    expression -> expression2 expressionoptional
Rule 61    expressionoptional -> logicop expression2 logic_op_quadruple
Rule 62    expressionoptional -> <empty>
Rule 63    expression2 -> exp expression2optional
Rule 64    expression2optional -> relop exp relop_quadruple
Rule 65    expression2optional -> <empty>
Rule 66    logicop -> AND
Rule 67    logicop -> OR
Rule 68    logic_op_quadruple -> <empty>
Rule 69    relop -> EQUALITY
Rule 70    relop -> GREATER
Rule 71    relop -> GREATER_EQUAL
Rule 72    relop -> LESS
Rule 73    relop -> LESS_EQUAL
Rule 74    relop -> DIFFERENT
Rule 75    relop_quadruple -> <empty>
Rule 76    exp -> term exp_quadruple exploop
Rule 77    exp_quadruple -> <empty>
Rule 78    exploop -> addsub exp
Rule 79    exploop -> <empty>
Rule 80    addsub -> SUM
Rule 81    addsub -> MINUS
Rule 82    term -> fact term_quadruple termloop
Rule 83    term_quadruple -> <empty>
Rule 84    termloop -> divmult term
Rule 85    termloop -> <empty>
Rule 86    divmult -> MULTIPLY
Rule 87    divmult -> DIVIDE
Rule 88    divmult -> MOD
Rule 89    fact -> varconst
Rule 90    fact -> O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis
Rule 91    add_o_parenthesis -> <empty>
Rule 92    add_c_parenthesis -> <empty>
Rule 93    var_assign -> ID add_to_stack listaccess
Rule 94    var -> ID listaccess
Rule 95    listaccess -> O_S_BRACKET INTCONST C_S_BRACKET
Rule 96    listaccess -> <empty>
Rule 97    varconst -> varconstfunction
Rule 98    varconst -> constants
Rule 99    varconstfunction -> ID functionorlist
Rule 100   add_to_stack -> <empty>
Rule 101   functionorlist -> O_S_BRACKET INTCONST C_S_BRACKET
Rule 102   functionorlist -> check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS generate_gosub
Rule 103   functionorlist -> add_to_stack
Rule 104   constants -> INTCONST add_int_constant_to_dict
Rule 105   constants -> FLOATCONST add_float_constant_to_dict
Rule 106   constants -> STRINGCONST add_string_constant_to_dict
Rule 107   constants -> booleanconst
Rule 108   booleanconst -> TRUE add_bool_constant_to_dict
Rule 109   booleanconst -> FALSE add_bool_constant_to_dict
Rule 110   add_int_constant_to_dict -> <empty>
Rule 111   add_float_constant_to_dict -> <empty>
Rule 112   add_string_constant_to_dict -> <empty>
Rule 113   add_bool_constant_to_dict -> <empty>
Rule 114   loop -> whileloop
Rule 115   loop -> timesloop
Rule 116   whileloop -> WHILE start_while O_PARENTHESIS expression C_PARENTHESIS condition_while block end_while
Rule 117   start_while -> <empty>
Rule 118   condition_while -> <empty>
Rule 119   end_while -> <empty>
Rule 120   timesloop -> TIMES O_PARENTHESIS expression C_PARENTHESIS start_times block end_times
Rule 121   start_times -> <empty>
Rule 122   end_times -> <empty>
Rule 123   functioncall -> ID check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON generate_gosub
Rule 124   check_function_exists -> <empty>
Rule 125   generate_gosub -> <empty>
Rule 126   parametersinput -> expression push_type_to_function_options generate_parameter_quadruple parametersinputloop check_params_order
Rule 127   parametersinput -> <empty>
Rule 128   parametersinputloop -> COMMA expression push_type_to_function_options generate_parameter_quadruple parametersinputloop
Rule 129   parametersinputloop -> <empty>
Rule 130   push_type_to_function_options -> <empty>
Rule 131   check_params_order -> <empty>
Rule 132   generate_parameter_quadruple -> <empty>
Rule 133   parameters -> parameterinit parametersloop
Rule 134   parameters -> <empty>
Rule 135   parameterinit -> parametertype ID
Rule 136   parametersloop -> COMMA parameterinit parametersloop
Rule 137   parametersloop -> <empty>

Terminals, with rules where they appear

AND                  : 66
BOOL                 : 9 15 19
COMMA                : 41 52 128 136
C_BRACKET            : 23 24 25
C_PARENTHESIS        : 13 14 37 54 90 102 116 120 123
C_S_BRACKET          : 49 95 101
DIFFERENT            : 74
DIVIDE               : 87
ELSE                 : 55
EQUALITY             : 69
EQUALS               : 36 45 48
FALSE                : 109
FLOAT                : 11 17 21
FLOATCONST           : 105
FUNCTION             : 7
GREATER              : 70
GREATER_EQUAL        : 71
ID                   : 13 14 93 94 99 123 135
IF                   : 54
INT                  : 10 16 20
INTCONST             : 95 101 104
LESS                 : 72
LESS_EQUAL           : 73
LIST                 : 48
MAIN                 : 4
MINUS                : 81
MOD                  : 88
MULTIPLY             : 86
OR                   : 67
O_BRACKET            : 23 24 25
O_PARENTHESIS        : 13 14 37 54 90 102 116 120 123
O_S_BRACKET          : 49 95 101
PRINT                : 37
RETURN               : 25 26
SEMICOLON            : 25 26 36 37 45 48 123
STRING               : 12 18 22
STRINGCONST          : 106
SUM                  : 80
TIMES                : 120
TRUE                 : 108
VOID                 : 8
WHILE                : 116
error                : 

Nonterminals, with rules where they appear

add_bool_constant_to_dict : 108 109
add_c_parenthesis    : 90
add_equals           : 36 45
add_float_constant_to_dict : 105
add_int_constant_to_dict : 104
add_o_parenthesis    : 90
add_string_constant_to_dict : 106
add_to_stack         : 93 103
addsub               : 78
assignation          : 34
block                : 4 14 54 55 116 120
booleanconst         : 107
check_function_exists : 102 123
check_params_order   : 126
condition            : 31
condition_while      : 116
constants            : 50 52 98
divmult              : 84
else                 : 54
else_condition       : 55
end_condition        : 54
end_times            : 120
end_while            : 116
equals_quadruple     : 36 45
exp                  : 63 64 78
exp_quadruple        : 76
exploop              : 76
expression           : 25 26 36 40 45 54 90 116 120 126 128
expression2          : 60 61
expression2optional  : 63
expressionoptional   : 60
fact                 : 82
fill_main_goto       : 1
function             : 5
function_def         : 8
function_end         : 7
function_head        : 7
function_with_return_def : 9 10 11 12
functionblock        : 13
functioncall         : 35
functionloop         : 1 5
functionorlist       : 99
functionreturn       : 24
generate_gosub       : 102 123
generate_main_goto   : 1
generate_parameter_quadruple : 126 128
init                 : 30
list                 : 48
listaccess           : 93 94
listelements         : 49
listinit             : 43
logic_op_quadruple   : 61
logicop              : 61
loop                 : 33
main                 : 1
normalinit           : 44
optionalconstants    : 50 52
optionalwritting     : 40
parameterinit        : 133 136
parameters           : 13 14
parametersinput      : 102 123
parametersinputloop  : 126 128
parametersloop       : 133 136
parametertype        : 135
print_quadruple      : 40
program              : 0
push_type_to_function_options : 126 128
relop                : 64
relop_quadruple      : 64
start_condition      : 54
start_printing       : 40
start_times          : 120
start_while          : 116
statute              : 28
statutesloop         : 23 24 28
term                 : 76 84
term_quadruple       : 82
termloop             : 82
timesloop            : 115
type                 : 45 48
var                  : 45 48
var_assign           : 36
varconst             : 89
varconstfunction     : 97
whileloop            : 114
writting             : 32
writtingloop         : 37 41

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . generate_main_goto functionloop fill_main_goto main
    (2) generate_main_goto -> .

    FUNCTION        reduce using rule 2 (generate_main_goto -> .)
    MAIN            reduce using rule 2 (generate_main_goto -> .)

    program                        shift and go to state 1
    generate_main_goto             shift and go to state 2

state 1

    (0) S' -> program .



state 2

    (1) program -> generate_main_goto . functionloop fill_main_goto main
    (5) functionloop -> . function functionloop
    (6) functionloop -> .
    (7) function -> . FUNCTION function_head function_end

    MAIN            reduce using rule 6 (functionloop -> .)
    FUNCTION        shift and go to state 4

    function                       shift and go to state 3
    functionloop                   shift and go to state 5

state 3

    (5) functionloop -> function . functionloop
    (5) functionloop -> . function functionloop
    (6) functionloop -> .
    (7) function -> . FUNCTION function_head function_end

    MAIN            reduce using rule 6 (functionloop -> .)
    FUNCTION        shift and go to state 4

    function                       shift and go to state 3
    functionloop                   shift and go to state 6

state 4

    (7) function -> FUNCTION . function_head function_end
    (8) function_head -> . VOID function_def
    (9) function_head -> . BOOL function_with_return_def
    (10) function_head -> . INT function_with_return_def
    (11) function_head -> . FLOAT function_with_return_def
    (12) function_head -> . STRING function_with_return_def

    VOID            shift and go to state 8
    BOOL            shift and go to state 11
    INT             shift and go to state 12
    FLOAT           shift and go to state 9
    STRING          shift and go to state 7

    function_head                  shift and go to state 10

state 5

    (1) program -> generate_main_goto functionloop . fill_main_goto main
    (3) fill_main_goto -> .

    MAIN            reduce using rule 3 (fill_main_goto -> .)

    fill_main_goto                 shift and go to state 13

state 6

    (5) functionloop -> function functionloop .

    MAIN            reduce using rule 5 (functionloop -> function functionloop .)


state 7

    (12) function_head -> STRING . function_with_return_def
    (13) function_with_return_def -> . ID O_PARENTHESIS parameters C_PARENTHESIS functionblock

    ID              shift and go to state 15

    function_with_return_def       shift and go to state 14

state 8

    (8) function_head -> VOID . function_def
    (14) function_def -> . ID O_PARENTHESIS parameters C_PARENTHESIS block

    ID              shift and go to state 17

    function_def                   shift and go to state 16

state 9

    (11) function_head -> FLOAT . function_with_return_def
    (13) function_with_return_def -> . ID O_PARENTHESIS parameters C_PARENTHESIS functionblock

    ID              shift and go to state 15

    function_with_return_def       shift and go to state 18

state 10

    (7) function -> FUNCTION function_head . function_end
    (27) function_end -> .

    FUNCTION        reduce using rule 27 (function_end -> .)
    MAIN            reduce using rule 27 (function_end -> .)

    function_end                   shift and go to state 19

state 11

    (9) function_head -> BOOL . function_with_return_def
    (13) function_with_return_def -> . ID O_PARENTHESIS parameters C_PARENTHESIS functionblock

    ID              shift and go to state 15

    function_with_return_def       shift and go to state 20

state 12

    (10) function_head -> INT . function_with_return_def
    (13) function_with_return_def -> . ID O_PARENTHESIS parameters C_PARENTHESIS functionblock

    ID              shift and go to state 15

    function_with_return_def       shift and go to state 21

state 13

    (1) program -> generate_main_goto functionloop fill_main_goto . main
    (4) main -> . MAIN block

    MAIN            shift and go to state 22

    main                           shift and go to state 23

state 14

    (12) function_head -> STRING function_with_return_def .

    FUNCTION        reduce using rule 12 (function_head -> STRING function_with_return_def .)
    MAIN            reduce using rule 12 (function_head -> STRING function_with_return_def .)


state 15

    (13) function_with_return_def -> ID . O_PARENTHESIS parameters C_PARENTHESIS functionblock

    O_PARENTHESIS   shift and go to state 24


state 16

    (8) function_head -> VOID function_def .

    FUNCTION        reduce using rule 8 (function_head -> VOID function_def .)
    MAIN            reduce using rule 8 (function_head -> VOID function_def .)


state 17

    (14) function_def -> ID . O_PARENTHESIS parameters C_PARENTHESIS block

    O_PARENTHESIS   shift and go to state 25


state 18

    (11) function_head -> FLOAT function_with_return_def .

    FUNCTION        reduce using rule 11 (function_head -> FLOAT function_with_return_def .)
    MAIN            reduce using rule 11 (function_head -> FLOAT function_with_return_def .)


state 19

    (7) function -> FUNCTION function_head function_end .

    FUNCTION        reduce using rule 7 (function -> FUNCTION function_head function_end .)
    MAIN            reduce using rule 7 (function -> FUNCTION function_head function_end .)


state 20

    (9) function_head -> BOOL function_with_return_def .

    FUNCTION        reduce using rule 9 (function_head -> BOOL function_with_return_def .)
    MAIN            reduce using rule 9 (function_head -> BOOL function_with_return_def .)


state 21

    (10) function_head -> INT function_with_return_def .

    FUNCTION        reduce using rule 10 (function_head -> INT function_with_return_def .)
    MAIN            reduce using rule 10 (function_head -> INT function_with_return_def .)


state 22

    (4) main -> MAIN . block
    (23) block -> . O_BRACKET statutesloop C_BRACKET

    O_BRACKET       shift and go to state 26

    block                          shift and go to state 27

state 23

    (1) program -> generate_main_goto functionloop fill_main_goto main .

    $end            reduce using rule 1 (program -> generate_main_goto functionloop fill_main_goto main .)


state 24

    (13) function_with_return_def -> ID O_PARENTHESIS . parameters C_PARENTHESIS functionblock
    (133) parameters -> . parameterinit parametersloop
    (134) parameters -> .
    (135) parameterinit -> . parametertype ID
    (19) parametertype -> . BOOL
    (20) parametertype -> . INT
    (21) parametertype -> . FLOAT
    (22) parametertype -> . STRING

    C_PARENTHESIS   reduce using rule 134 (parameters -> .)
    BOOL            shift and go to state 33
    INT             shift and go to state 31
    FLOAT           shift and go to state 32
    STRING          shift and go to state 29

    parameterinit                  shift and go to state 34
    parametertype                  shift and go to state 28
    parameters                     shift and go to state 30

state 25

    (14) function_def -> ID O_PARENTHESIS . parameters C_PARENTHESIS block
    (133) parameters -> . parameterinit parametersloop
    (134) parameters -> .
    (135) parameterinit -> . parametertype ID
    (19) parametertype -> . BOOL
    (20) parametertype -> . INT
    (21) parametertype -> . FLOAT
    (22) parametertype -> . STRING

    C_PARENTHESIS   reduce using rule 134 (parameters -> .)
    BOOL            shift and go to state 33
    INT             shift and go to state 31
    FLOAT           shift and go to state 32
    STRING          shift and go to state 29

    parameterinit                  shift and go to state 34
    parametertype                  shift and go to state 28
    parameters                     shift and go to state 35

state 26

    (23) block -> O_BRACKET . statutesloop C_BRACKET
    (28) statutesloop -> . statute statutesloop
    (29) statutesloop -> .
    (30) statute -> . init
    (31) statute -> . condition
    (32) statute -> . writting
    (33) statute -> . loop
    (34) statute -> . assignation
    (35) statute -> . functioncall
    (43) init -> . listinit
    (44) init -> . normalinit
    (54) condition -> . IF O_PARENTHESIS expression C_PARENTHESIS start_condition block else end_condition
    (37) writting -> . PRINT O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON
    (114) loop -> . whileloop
    (115) loop -> . timesloop
    (36) assignation -> . var_assign EQUALS add_equals expression equals_quadruple SEMICOLON
    (123) functioncall -> . ID check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON generate_gosub
    (48) listinit -> . LIST type var EQUALS list SEMICOLON
    (45) normalinit -> . type var EQUALS add_equals expression equals_quadruple SEMICOLON
    (116) whileloop -> . WHILE start_while O_PARENTHESIS expression C_PARENTHESIS condition_while block end_while
    (120) timesloop -> . TIMES O_PARENTHESIS expression C_PARENTHESIS start_times block end_times
    (93) var_assign -> . ID add_to_stack listaccess
    (15) type -> . BOOL
    (16) type -> . INT
    (17) type -> . FLOAT
    (18) type -> . STRING

    C_BRACKET       reduce using rule 29 (statutesloop -> .)
    IF              shift and go to state 51
    PRINT           shift and go to state 38
    ID              shift and go to state 49
    LIST            shift and go to state 57
    WHILE           shift and go to state 37
    TIMES           shift and go to state 36
    BOOL            shift and go to state 41
    INT             shift and go to state 55
    FLOAT           shift and go to state 56
    STRING          shift and go to state 45

    whileloop                      shift and go to state 39
    init                           shift and go to state 40
    var_assign                     shift and go to state 42
    type                           shift and go to state 43
    normalinit                     shift and go to state 44
    listinit                       shift and go to state 46
    writting                       shift and go to state 47
    timesloop                      shift and go to state 48
    condition                      shift and go to state 50
    statute                        shift and go to state 52
    assignation                    shift and go to state 53
    statutesloop                   shift and go to state 54
    functioncall                   shift and go to state 58
    loop                           shift and go to state 59

state 27

    (4) main -> MAIN block .

    $end            reduce using rule 4 (main -> MAIN block .)


state 28

    (135) parameterinit -> parametertype . ID

    ID              shift and go to state 60


state 29

    (22) parametertype -> STRING .

    ID              reduce using rule 22 (parametertype -> STRING .)


state 30

    (13) function_with_return_def -> ID O_PARENTHESIS parameters . C_PARENTHESIS functionblock

    C_PARENTHESIS   shift and go to state 61


state 31

    (20) parametertype -> INT .

    ID              reduce using rule 20 (parametertype -> INT .)


state 32

    (21) parametertype -> FLOAT .

    ID              reduce using rule 21 (parametertype -> FLOAT .)


state 33

    (19) parametertype -> BOOL .

    ID              reduce using rule 19 (parametertype -> BOOL .)


state 34

    (133) parameters -> parameterinit . parametersloop
    (136) parametersloop -> . COMMA parameterinit parametersloop
    (137) parametersloop -> .

    COMMA           shift and go to state 63
    C_PARENTHESIS   reduce using rule 137 (parametersloop -> .)

    parametersloop                 shift and go to state 62

state 35

    (14) function_def -> ID O_PARENTHESIS parameters . C_PARENTHESIS block

    C_PARENTHESIS   shift and go to state 64


state 36

    (120) timesloop -> TIMES . O_PARENTHESIS expression C_PARENTHESIS start_times block end_times

    O_PARENTHESIS   shift and go to state 65


state 37

    (116) whileloop -> WHILE . start_while O_PARENTHESIS expression C_PARENTHESIS condition_while block end_while
    (117) start_while -> .

    O_PARENTHESIS   reduce using rule 117 (start_while -> .)

    start_while                    shift and go to state 66

state 38

    (37) writting -> PRINT . O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON

    O_PARENTHESIS   shift and go to state 67


state 39

    (114) loop -> whileloop .

    IF              reduce using rule 114 (loop -> whileloop .)
    PRINT           reduce using rule 114 (loop -> whileloop .)
    ID              reduce using rule 114 (loop -> whileloop .)
    LIST            reduce using rule 114 (loop -> whileloop .)
    WHILE           reduce using rule 114 (loop -> whileloop .)
    TIMES           reduce using rule 114 (loop -> whileloop .)
    BOOL            reduce using rule 114 (loop -> whileloop .)
    INT             reduce using rule 114 (loop -> whileloop .)
    FLOAT           reduce using rule 114 (loop -> whileloop .)
    STRING          reduce using rule 114 (loop -> whileloop .)
    C_BRACKET       reduce using rule 114 (loop -> whileloop .)
    RETURN          reduce using rule 114 (loop -> whileloop .)


state 40

    (30) statute -> init .

    IF              reduce using rule 30 (statute -> init .)
    PRINT           reduce using rule 30 (statute -> init .)
    ID              reduce using rule 30 (statute -> init .)
    LIST            reduce using rule 30 (statute -> init .)
    WHILE           reduce using rule 30 (statute -> init .)
    TIMES           reduce using rule 30 (statute -> init .)
    BOOL            reduce using rule 30 (statute -> init .)
    INT             reduce using rule 30 (statute -> init .)
    FLOAT           reduce using rule 30 (statute -> init .)
    STRING          reduce using rule 30 (statute -> init .)
    C_BRACKET       reduce using rule 30 (statute -> init .)
    RETURN          reduce using rule 30 (statute -> init .)


state 41

    (15) type -> BOOL .

    ID              reduce using rule 15 (type -> BOOL .)


state 42

    (36) assignation -> var_assign . EQUALS add_equals expression equals_quadruple SEMICOLON

    EQUALS          shift and go to state 68


state 43

    (45) normalinit -> type . var EQUALS add_equals expression equals_quadruple SEMICOLON
    (94) var -> . ID listaccess

    ID              shift and go to state 70

    var                            shift and go to state 69

state 44

    (44) init -> normalinit .

    IF              reduce using rule 44 (init -> normalinit .)
    PRINT           reduce using rule 44 (init -> normalinit .)
    ID              reduce using rule 44 (init -> normalinit .)
    LIST            reduce using rule 44 (init -> normalinit .)
    WHILE           reduce using rule 44 (init -> normalinit .)
    TIMES           reduce using rule 44 (init -> normalinit .)
    BOOL            reduce using rule 44 (init -> normalinit .)
    INT             reduce using rule 44 (init -> normalinit .)
    FLOAT           reduce using rule 44 (init -> normalinit .)
    STRING          reduce using rule 44 (init -> normalinit .)
    C_BRACKET       reduce using rule 44 (init -> normalinit .)
    RETURN          reduce using rule 44 (init -> normalinit .)


state 45

    (18) type -> STRING .

    ID              reduce using rule 18 (type -> STRING .)


state 46

    (43) init -> listinit .

    IF              reduce using rule 43 (init -> listinit .)
    PRINT           reduce using rule 43 (init -> listinit .)
    ID              reduce using rule 43 (init -> listinit .)
    LIST            reduce using rule 43 (init -> listinit .)
    WHILE           reduce using rule 43 (init -> listinit .)
    TIMES           reduce using rule 43 (init -> listinit .)
    BOOL            reduce using rule 43 (init -> listinit .)
    INT             reduce using rule 43 (init -> listinit .)
    FLOAT           reduce using rule 43 (init -> listinit .)
    STRING          reduce using rule 43 (init -> listinit .)
    C_BRACKET       reduce using rule 43 (init -> listinit .)
    RETURN          reduce using rule 43 (init -> listinit .)


state 47

    (32) statute -> writting .

    IF              reduce using rule 32 (statute -> writting .)
    PRINT           reduce using rule 32 (statute -> writting .)
    ID              reduce using rule 32 (statute -> writting .)
    LIST            reduce using rule 32 (statute -> writting .)
    WHILE           reduce using rule 32 (statute -> writting .)
    TIMES           reduce using rule 32 (statute -> writting .)
    BOOL            reduce using rule 32 (statute -> writting .)
    INT             reduce using rule 32 (statute -> writting .)
    FLOAT           reduce using rule 32 (statute -> writting .)
    STRING          reduce using rule 32 (statute -> writting .)
    C_BRACKET       reduce using rule 32 (statute -> writting .)
    RETURN          reduce using rule 32 (statute -> writting .)


state 48

    (115) loop -> timesloop .

    IF              reduce using rule 115 (loop -> timesloop .)
    PRINT           reduce using rule 115 (loop -> timesloop .)
    ID              reduce using rule 115 (loop -> timesloop .)
    LIST            reduce using rule 115 (loop -> timesloop .)
    WHILE           reduce using rule 115 (loop -> timesloop .)
    TIMES           reduce using rule 115 (loop -> timesloop .)
    BOOL            reduce using rule 115 (loop -> timesloop .)
    INT             reduce using rule 115 (loop -> timesloop .)
    FLOAT           reduce using rule 115 (loop -> timesloop .)
    STRING          reduce using rule 115 (loop -> timesloop .)
    C_BRACKET       reduce using rule 115 (loop -> timesloop .)
    RETURN          reduce using rule 115 (loop -> timesloop .)


state 49

    (123) functioncall -> ID . check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON generate_gosub
    (93) var_assign -> ID . add_to_stack listaccess
    (124) check_function_exists -> .
    (100) add_to_stack -> .

    O_PARENTHESIS   reduce using rule 124 (check_function_exists -> .)
    O_S_BRACKET     reduce using rule 100 (add_to_stack -> .)
    EQUALS          reduce using rule 100 (add_to_stack -> .)

    check_function_exists          shift and go to state 71
    add_to_stack                   shift and go to state 72

state 50

    (31) statute -> condition .

    IF              reduce using rule 31 (statute -> condition .)
    PRINT           reduce using rule 31 (statute -> condition .)
    ID              reduce using rule 31 (statute -> condition .)
    LIST            reduce using rule 31 (statute -> condition .)
    WHILE           reduce using rule 31 (statute -> condition .)
    TIMES           reduce using rule 31 (statute -> condition .)
    BOOL            reduce using rule 31 (statute -> condition .)
    INT             reduce using rule 31 (statute -> condition .)
    FLOAT           reduce using rule 31 (statute -> condition .)
    STRING          reduce using rule 31 (statute -> condition .)
    C_BRACKET       reduce using rule 31 (statute -> condition .)
    RETURN          reduce using rule 31 (statute -> condition .)


state 51

    (54) condition -> IF . O_PARENTHESIS expression C_PARENTHESIS start_condition block else end_condition

    O_PARENTHESIS   shift and go to state 73


state 52

    (28) statutesloop -> statute . statutesloop
    (28) statutesloop -> . statute statutesloop
    (29) statutesloop -> .
    (30) statute -> . init
    (31) statute -> . condition
    (32) statute -> . writting
    (33) statute -> . loop
    (34) statute -> . assignation
    (35) statute -> . functioncall
    (43) init -> . listinit
    (44) init -> . normalinit
    (54) condition -> . IF O_PARENTHESIS expression C_PARENTHESIS start_condition block else end_condition
    (37) writting -> . PRINT O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON
    (114) loop -> . whileloop
    (115) loop -> . timesloop
    (36) assignation -> . var_assign EQUALS add_equals expression equals_quadruple SEMICOLON
    (123) functioncall -> . ID check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON generate_gosub
    (48) listinit -> . LIST type var EQUALS list SEMICOLON
    (45) normalinit -> . type var EQUALS add_equals expression equals_quadruple SEMICOLON
    (116) whileloop -> . WHILE start_while O_PARENTHESIS expression C_PARENTHESIS condition_while block end_while
    (120) timesloop -> . TIMES O_PARENTHESIS expression C_PARENTHESIS start_times block end_times
    (93) var_assign -> . ID add_to_stack listaccess
    (15) type -> . BOOL
    (16) type -> . INT
    (17) type -> . FLOAT
    (18) type -> . STRING

    C_BRACKET       reduce using rule 29 (statutesloop -> .)
    RETURN          reduce using rule 29 (statutesloop -> .)
    IF              shift and go to state 51
    PRINT           shift and go to state 38
    ID              shift and go to state 49
    LIST            shift and go to state 57
    WHILE           shift and go to state 37
    TIMES           shift and go to state 36
    BOOL            shift and go to state 41
    INT             shift and go to state 55
    FLOAT           shift and go to state 56
    STRING          shift and go to state 45

    whileloop                      shift and go to state 39
    init                           shift and go to state 40
    var_assign                     shift and go to state 42
    type                           shift and go to state 43
    normalinit                     shift and go to state 44
    listinit                       shift and go to state 46
    writting                       shift and go to state 47
    timesloop                      shift and go to state 48
    condition                      shift and go to state 50
    statute                        shift and go to state 52
    assignation                    shift and go to state 53
    statutesloop                   shift and go to state 74
    functioncall                   shift and go to state 58
    loop                           shift and go to state 59

state 53

    (34) statute -> assignation .

    IF              reduce using rule 34 (statute -> assignation .)
    PRINT           reduce using rule 34 (statute -> assignation .)
    ID              reduce using rule 34 (statute -> assignation .)
    LIST            reduce using rule 34 (statute -> assignation .)
    WHILE           reduce using rule 34 (statute -> assignation .)
    TIMES           reduce using rule 34 (statute -> assignation .)
    BOOL            reduce using rule 34 (statute -> assignation .)
    INT             reduce using rule 34 (statute -> assignation .)
    FLOAT           reduce using rule 34 (statute -> assignation .)
    STRING          reduce using rule 34 (statute -> assignation .)
    C_BRACKET       reduce using rule 34 (statute -> assignation .)
    RETURN          reduce using rule 34 (statute -> assignation .)


state 54

    (23) block -> O_BRACKET statutesloop . C_BRACKET

    C_BRACKET       shift and go to state 75


state 55

    (16) type -> INT .

    ID              reduce using rule 16 (type -> INT .)


state 56

    (17) type -> FLOAT .

    ID              reduce using rule 17 (type -> FLOAT .)


state 57

    (48) listinit -> LIST . type var EQUALS list SEMICOLON
    (15) type -> . BOOL
    (16) type -> . INT
    (17) type -> . FLOAT
    (18) type -> . STRING

    BOOL            shift and go to state 41
    INT             shift and go to state 55
    FLOAT           shift and go to state 56
    STRING          shift and go to state 45

    type                           shift and go to state 76

state 58

    (35) statute -> functioncall .

    IF              reduce using rule 35 (statute -> functioncall .)
    PRINT           reduce using rule 35 (statute -> functioncall .)
    ID              reduce using rule 35 (statute -> functioncall .)
    LIST            reduce using rule 35 (statute -> functioncall .)
    WHILE           reduce using rule 35 (statute -> functioncall .)
    TIMES           reduce using rule 35 (statute -> functioncall .)
    BOOL            reduce using rule 35 (statute -> functioncall .)
    INT             reduce using rule 35 (statute -> functioncall .)
    FLOAT           reduce using rule 35 (statute -> functioncall .)
    STRING          reduce using rule 35 (statute -> functioncall .)
    C_BRACKET       reduce using rule 35 (statute -> functioncall .)
    RETURN          reduce using rule 35 (statute -> functioncall .)


state 59

    (33) statute -> loop .

    IF              reduce using rule 33 (statute -> loop .)
    PRINT           reduce using rule 33 (statute -> loop .)
    ID              reduce using rule 33 (statute -> loop .)
    LIST            reduce using rule 33 (statute -> loop .)
    WHILE           reduce using rule 33 (statute -> loop .)
    TIMES           reduce using rule 33 (statute -> loop .)
    BOOL            reduce using rule 33 (statute -> loop .)
    INT             reduce using rule 33 (statute -> loop .)
    FLOAT           reduce using rule 33 (statute -> loop .)
    STRING          reduce using rule 33 (statute -> loop .)
    C_BRACKET       reduce using rule 33 (statute -> loop .)
    RETURN          reduce using rule 33 (statute -> loop .)


state 60

    (135) parameterinit -> parametertype ID .

    COMMA           reduce using rule 135 (parameterinit -> parametertype ID .)
    C_PARENTHESIS   reduce using rule 135 (parameterinit -> parametertype ID .)


state 61

    (13) function_with_return_def -> ID O_PARENTHESIS parameters C_PARENTHESIS . functionblock
    (24) functionblock -> . O_BRACKET statutesloop functionreturn C_BRACKET

    O_BRACKET       shift and go to state 77

    functionblock                  shift and go to state 78

state 62

    (133) parameters -> parameterinit parametersloop .

    C_PARENTHESIS   reduce using rule 133 (parameters -> parameterinit parametersloop .)


state 63

    (136) parametersloop -> COMMA . parameterinit parametersloop
    (135) parameterinit -> . parametertype ID
    (19) parametertype -> . BOOL
    (20) parametertype -> . INT
    (21) parametertype -> . FLOAT
    (22) parametertype -> . STRING

    BOOL            shift and go to state 33
    INT             shift and go to state 31
    FLOAT           shift and go to state 32
    STRING          shift and go to state 29

    parametertype                  shift and go to state 28
    parameterinit                  shift and go to state 79

state 64

    (14) function_def -> ID O_PARENTHESIS parameters C_PARENTHESIS . block
    (23) block -> . O_BRACKET statutesloop C_BRACKET

    O_BRACKET       shift and go to state 26

    block                          shift and go to state 80

state 65

    (120) timesloop -> TIMES O_PARENTHESIS . expression C_PARENTHESIS start_times block end_times
    (60) expression -> . expression2 expressionoptional
    (63) expression2 -> . exp expression2optional
    (76) exp -> . term exp_quadruple exploop
    (82) term -> . fact term_quadruple termloop
    (89) fact -> . varconst
    (90) fact -> . O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis
    (97) varconst -> . varconstfunction
    (98) varconst -> . constants
    (99) varconstfunction -> . ID functionorlist
    (104) constants -> . INTCONST add_int_constant_to_dict
    (105) constants -> . FLOATCONST add_float_constant_to_dict
    (106) constants -> . STRINGCONST add_string_constant_to_dict
    (107) constants -> . booleanconst
    (108) booleanconst -> . TRUE add_bool_constant_to_dict
    (109) booleanconst -> . FALSE add_bool_constant_to_dict

    O_PARENTHESIS   shift and go to state 82
    ID              shift and go to state 89
    INTCONST        shift and go to state 87
    FLOATCONST      shift and go to state 81
    STRINGCONST     shift and go to state 84
    TRUE            shift and go to state 83
    FALSE           shift and go to state 92

    varconstfunction               shift and go to state 85
    exp                            shift and go to state 86
    expression2                    shift and go to state 88
    constants                      shift and go to state 90
    term                           shift and go to state 91
    varconst                       shift and go to state 93
    booleanconst                   shift and go to state 94
    expression                     shift and go to state 95
    fact                           shift and go to state 96

state 66

    (116) whileloop -> WHILE start_while . O_PARENTHESIS expression C_PARENTHESIS condition_while block end_while

    O_PARENTHESIS   shift and go to state 97


state 67

    (37) writting -> PRINT O_PARENTHESIS . writtingloop C_PARENTHESIS SEMICOLON
    (40) writtingloop -> . start_printing expression print_quadruple optionalwritting
    (38) start_printing -> .

    O_PARENTHESIS   reduce using rule 38 (start_printing -> .)
    ID              reduce using rule 38 (start_printing -> .)
    INTCONST        reduce using rule 38 (start_printing -> .)
    FLOATCONST      reduce using rule 38 (start_printing -> .)
    STRINGCONST     reduce using rule 38 (start_printing -> .)
    TRUE            reduce using rule 38 (start_printing -> .)
    FALSE           reduce using rule 38 (start_printing -> .)

    writtingloop                   shift and go to state 99
    start_printing                 shift and go to state 98

state 68

    (36) assignation -> var_assign EQUALS . add_equals expression equals_quadruple SEMICOLON
    (47) add_equals -> .

    O_PARENTHESIS   reduce using rule 47 (add_equals -> .)
    ID              reduce using rule 47 (add_equals -> .)
    INTCONST        reduce using rule 47 (add_equals -> .)
    FLOATCONST      reduce using rule 47 (add_equals -> .)
    STRINGCONST     reduce using rule 47 (add_equals -> .)
    TRUE            reduce using rule 47 (add_equals -> .)
    FALSE           reduce using rule 47 (add_equals -> .)

    add_equals                     shift and go to state 100

state 69

    (45) normalinit -> type var . EQUALS add_equals expression equals_quadruple SEMICOLON

    EQUALS          shift and go to state 101


state 70

    (94) var -> ID . listaccess
    (95) listaccess -> . O_S_BRACKET INTCONST C_S_BRACKET
    (96) listaccess -> .

    O_S_BRACKET     shift and go to state 103
    EQUALS          reduce using rule 96 (listaccess -> .)

    listaccess                     shift and go to state 102

state 71

    (123) functioncall -> ID check_function_exists . O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON generate_gosub

    O_PARENTHESIS   shift and go to state 104


state 72

    (93) var_assign -> ID add_to_stack . listaccess
    (95) listaccess -> . O_S_BRACKET INTCONST C_S_BRACKET
    (96) listaccess -> .

    O_S_BRACKET     shift and go to state 103
    EQUALS          reduce using rule 96 (listaccess -> .)

    listaccess                     shift and go to state 105

state 73

    (54) condition -> IF O_PARENTHESIS . expression C_PARENTHESIS start_condition block else end_condition
    (60) expression -> . expression2 expressionoptional
    (63) expression2 -> . exp expression2optional
    (76) exp -> . term exp_quadruple exploop
    (82) term -> . fact term_quadruple termloop
    (89) fact -> . varconst
    (90) fact -> . O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis
    (97) varconst -> . varconstfunction
    (98) varconst -> . constants
    (99) varconstfunction -> . ID functionorlist
    (104) constants -> . INTCONST add_int_constant_to_dict
    (105) constants -> . FLOATCONST add_float_constant_to_dict
    (106) constants -> . STRINGCONST add_string_constant_to_dict
    (107) constants -> . booleanconst
    (108) booleanconst -> . TRUE add_bool_constant_to_dict
    (109) booleanconst -> . FALSE add_bool_constant_to_dict

    O_PARENTHESIS   shift and go to state 82
    ID              shift and go to state 89
    INTCONST        shift and go to state 87
    FLOATCONST      shift and go to state 81
    STRINGCONST     shift and go to state 84
    TRUE            shift and go to state 83
    FALSE           shift and go to state 92

    varconstfunction               shift and go to state 85
    exp                            shift and go to state 86
    expression2                    shift and go to state 88
    constants                      shift and go to state 90
    term                           shift and go to state 91
    varconst                       shift and go to state 93
    booleanconst                   shift and go to state 94
    expression                     shift and go to state 106
    fact                           shift and go to state 96

state 74

    (28) statutesloop -> statute statutesloop .

    RETURN          reduce using rule 28 (statutesloop -> statute statutesloop .)
    C_BRACKET       reduce using rule 28 (statutesloop -> statute statutesloop .)


state 75

    (23) block -> O_BRACKET statutesloop C_BRACKET .

    IF              reduce using rule 23 (block -> O_BRACKET statutesloop C_BRACKET .)
    PRINT           reduce using rule 23 (block -> O_BRACKET statutesloop C_BRACKET .)
    ID              reduce using rule 23 (block -> O_BRACKET statutesloop C_BRACKET .)
    LIST            reduce using rule 23 (block -> O_BRACKET statutesloop C_BRACKET .)
    WHILE           reduce using rule 23 (block -> O_BRACKET statutesloop C_BRACKET .)
    TIMES           reduce using rule 23 (block -> O_BRACKET statutesloop C_BRACKET .)
    BOOL            reduce using rule 23 (block -> O_BRACKET statutesloop C_BRACKET .)
    INT             reduce using rule 23 (block -> O_BRACKET statutesloop C_BRACKET .)
    FLOAT           reduce using rule 23 (block -> O_BRACKET statutesloop C_BRACKET .)
    STRING          reduce using rule 23 (block -> O_BRACKET statutesloop C_BRACKET .)
    C_BRACKET       reduce using rule 23 (block -> O_BRACKET statutesloop C_BRACKET .)
    RETURN          reduce using rule 23 (block -> O_BRACKET statutesloop C_BRACKET .)
    $end            reduce using rule 23 (block -> O_BRACKET statutesloop C_BRACKET .)
    FUNCTION        reduce using rule 23 (block -> O_BRACKET statutesloop C_BRACKET .)
    MAIN            reduce using rule 23 (block -> O_BRACKET statutesloop C_BRACKET .)
    ELSE            reduce using rule 23 (block -> O_BRACKET statutesloop C_BRACKET .)


state 76

    (48) listinit -> LIST type . var EQUALS list SEMICOLON
    (94) var -> . ID listaccess

    ID              shift and go to state 70

    var                            shift and go to state 107

state 77

    (24) functionblock -> O_BRACKET . statutesloop functionreturn C_BRACKET
    (28) statutesloop -> . statute statutesloop
    (29) statutesloop -> .
    (30) statute -> . init
    (31) statute -> . condition
    (32) statute -> . writting
    (33) statute -> . loop
    (34) statute -> . assignation
    (35) statute -> . functioncall
    (43) init -> . listinit
    (44) init -> . normalinit
    (54) condition -> . IF O_PARENTHESIS expression C_PARENTHESIS start_condition block else end_condition
    (37) writting -> . PRINT O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON
    (114) loop -> . whileloop
    (115) loop -> . timesloop
    (36) assignation -> . var_assign EQUALS add_equals expression equals_quadruple SEMICOLON
    (123) functioncall -> . ID check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON generate_gosub
    (48) listinit -> . LIST type var EQUALS list SEMICOLON
    (45) normalinit -> . type var EQUALS add_equals expression equals_quadruple SEMICOLON
    (116) whileloop -> . WHILE start_while O_PARENTHESIS expression C_PARENTHESIS condition_while block end_while
    (120) timesloop -> . TIMES O_PARENTHESIS expression C_PARENTHESIS start_times block end_times
    (93) var_assign -> . ID add_to_stack listaccess
    (15) type -> . BOOL
    (16) type -> . INT
    (17) type -> . FLOAT
    (18) type -> . STRING

    RETURN          reduce using rule 29 (statutesloop -> .)
    IF              shift and go to state 51
    PRINT           shift and go to state 38
    ID              shift and go to state 49
    LIST            shift and go to state 57
    WHILE           shift and go to state 37
    TIMES           shift and go to state 36
    BOOL            shift and go to state 41
    INT             shift and go to state 55
    FLOAT           shift and go to state 56
    STRING          shift and go to state 45

    whileloop                      shift and go to state 39
    init                           shift and go to state 40
    var_assign                     shift and go to state 42
    type                           shift and go to state 43
    normalinit                     shift and go to state 44
    listinit                       shift and go to state 46
    writting                       shift and go to state 47
    timesloop                      shift and go to state 48
    condition                      shift and go to state 50
    statute                        shift and go to state 52
    assignation                    shift and go to state 53
    statutesloop                   shift and go to state 108
    functioncall                   shift and go to state 58
    loop                           shift and go to state 59

state 78

    (13) function_with_return_def -> ID O_PARENTHESIS parameters C_PARENTHESIS functionblock .

    FUNCTION        reduce using rule 13 (function_with_return_def -> ID O_PARENTHESIS parameters C_PARENTHESIS functionblock .)
    MAIN            reduce using rule 13 (function_with_return_def -> ID O_PARENTHESIS parameters C_PARENTHESIS functionblock .)


state 79

    (136) parametersloop -> COMMA parameterinit . parametersloop
    (136) parametersloop -> . COMMA parameterinit parametersloop
    (137) parametersloop -> .

    COMMA           shift and go to state 63
    C_PARENTHESIS   reduce using rule 137 (parametersloop -> .)

    parametersloop                 shift and go to state 109

state 80

    (14) function_def -> ID O_PARENTHESIS parameters C_PARENTHESIS block .

    FUNCTION        reduce using rule 14 (function_def -> ID O_PARENTHESIS parameters C_PARENTHESIS block .)
    MAIN            reduce using rule 14 (function_def -> ID O_PARENTHESIS parameters C_PARENTHESIS block .)


state 81

    (105) constants -> FLOATCONST . add_float_constant_to_dict
    (111) add_float_constant_to_dict -> .

    MULTIPLY        reduce using rule 111 (add_float_constant_to_dict -> .)
    DIVIDE          reduce using rule 111 (add_float_constant_to_dict -> .)
    MOD             reduce using rule 111 (add_float_constant_to_dict -> .)
    SUM             reduce using rule 111 (add_float_constant_to_dict -> .)
    MINUS           reduce using rule 111 (add_float_constant_to_dict -> .)
    EQUALITY        reduce using rule 111 (add_float_constant_to_dict -> .)
    GREATER         reduce using rule 111 (add_float_constant_to_dict -> .)
    GREATER_EQUAL   reduce using rule 111 (add_float_constant_to_dict -> .)
    LESS            reduce using rule 111 (add_float_constant_to_dict -> .)
    LESS_EQUAL      reduce using rule 111 (add_float_constant_to_dict -> .)
    DIFFERENT       reduce using rule 111 (add_float_constant_to_dict -> .)
    AND             reduce using rule 111 (add_float_constant_to_dict -> .)
    OR              reduce using rule 111 (add_float_constant_to_dict -> .)
    C_PARENTHESIS   reduce using rule 111 (add_float_constant_to_dict -> .)
    COMMA           reduce using rule 111 (add_float_constant_to_dict -> .)
    SEMICOLON       reduce using rule 111 (add_float_constant_to_dict -> .)
    C_BRACKET       reduce using rule 111 (add_float_constant_to_dict -> .)
    C_S_BRACKET     reduce using rule 111 (add_float_constant_to_dict -> .)

    add_float_constant_to_dict     shift and go to state 110

state 82

    (90) fact -> O_PARENTHESIS . add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis
    (91) add_o_parenthesis -> .

    O_PARENTHESIS   reduce using rule 91 (add_o_parenthesis -> .)
    ID              reduce using rule 91 (add_o_parenthesis -> .)
    INTCONST        reduce using rule 91 (add_o_parenthesis -> .)
    FLOATCONST      reduce using rule 91 (add_o_parenthesis -> .)
    STRINGCONST     reduce using rule 91 (add_o_parenthesis -> .)
    TRUE            reduce using rule 91 (add_o_parenthesis -> .)
    FALSE           reduce using rule 91 (add_o_parenthesis -> .)

    add_o_parenthesis              shift and go to state 111

state 83

    (108) booleanconst -> TRUE . add_bool_constant_to_dict
    (113) add_bool_constant_to_dict -> .

    MULTIPLY        reduce using rule 113 (add_bool_constant_to_dict -> .)
    DIVIDE          reduce using rule 113 (add_bool_constant_to_dict -> .)
    MOD             reduce using rule 113 (add_bool_constant_to_dict -> .)
    SUM             reduce using rule 113 (add_bool_constant_to_dict -> .)
    MINUS           reduce using rule 113 (add_bool_constant_to_dict -> .)
    EQUALITY        reduce using rule 113 (add_bool_constant_to_dict -> .)
    GREATER         reduce using rule 113 (add_bool_constant_to_dict -> .)
    GREATER_EQUAL   reduce using rule 113 (add_bool_constant_to_dict -> .)
    LESS            reduce using rule 113 (add_bool_constant_to_dict -> .)
    LESS_EQUAL      reduce using rule 113 (add_bool_constant_to_dict -> .)
    DIFFERENT       reduce using rule 113 (add_bool_constant_to_dict -> .)
    AND             reduce using rule 113 (add_bool_constant_to_dict -> .)
    OR              reduce using rule 113 (add_bool_constant_to_dict -> .)
    C_PARENTHESIS   reduce using rule 113 (add_bool_constant_to_dict -> .)
    COMMA           reduce using rule 113 (add_bool_constant_to_dict -> .)
    SEMICOLON       reduce using rule 113 (add_bool_constant_to_dict -> .)
    C_BRACKET       reduce using rule 113 (add_bool_constant_to_dict -> .)
    C_S_BRACKET     reduce using rule 113 (add_bool_constant_to_dict -> .)

    add_bool_constant_to_dict      shift and go to state 112

state 84

    (106) constants -> STRINGCONST . add_string_constant_to_dict
    (112) add_string_constant_to_dict -> .

    MULTIPLY        reduce using rule 112 (add_string_constant_to_dict -> .)
    DIVIDE          reduce using rule 112 (add_string_constant_to_dict -> .)
    MOD             reduce using rule 112 (add_string_constant_to_dict -> .)
    SUM             reduce using rule 112 (add_string_constant_to_dict -> .)
    MINUS           reduce using rule 112 (add_string_constant_to_dict -> .)
    EQUALITY        reduce using rule 112 (add_string_constant_to_dict -> .)
    GREATER         reduce using rule 112 (add_string_constant_to_dict -> .)
    GREATER_EQUAL   reduce using rule 112 (add_string_constant_to_dict -> .)
    LESS            reduce using rule 112 (add_string_constant_to_dict -> .)
    LESS_EQUAL      reduce using rule 112 (add_string_constant_to_dict -> .)
    DIFFERENT       reduce using rule 112 (add_string_constant_to_dict -> .)
    AND             reduce using rule 112 (add_string_constant_to_dict -> .)
    OR              reduce using rule 112 (add_string_constant_to_dict -> .)
    C_PARENTHESIS   reduce using rule 112 (add_string_constant_to_dict -> .)
    COMMA           reduce using rule 112 (add_string_constant_to_dict -> .)
    SEMICOLON       reduce using rule 112 (add_string_constant_to_dict -> .)
    C_BRACKET       reduce using rule 112 (add_string_constant_to_dict -> .)
    C_S_BRACKET     reduce using rule 112 (add_string_constant_to_dict -> .)

    add_string_constant_to_dict    shift and go to state 113

state 85

    (97) varconst -> varconstfunction .

    MULTIPLY        reduce using rule 97 (varconst -> varconstfunction .)
    DIVIDE          reduce using rule 97 (varconst -> varconstfunction .)
    MOD             reduce using rule 97 (varconst -> varconstfunction .)
    SUM             reduce using rule 97 (varconst -> varconstfunction .)
    MINUS           reduce using rule 97 (varconst -> varconstfunction .)
    EQUALITY        reduce using rule 97 (varconst -> varconstfunction .)
    GREATER         reduce using rule 97 (varconst -> varconstfunction .)
    GREATER_EQUAL   reduce using rule 97 (varconst -> varconstfunction .)
    LESS            reduce using rule 97 (varconst -> varconstfunction .)
    LESS_EQUAL      reduce using rule 97 (varconst -> varconstfunction .)
    DIFFERENT       reduce using rule 97 (varconst -> varconstfunction .)
    AND             reduce using rule 97 (varconst -> varconstfunction .)
    OR              reduce using rule 97 (varconst -> varconstfunction .)
    C_PARENTHESIS   reduce using rule 97 (varconst -> varconstfunction .)
    COMMA           reduce using rule 97 (varconst -> varconstfunction .)
    SEMICOLON       reduce using rule 97 (varconst -> varconstfunction .)
    C_BRACKET       reduce using rule 97 (varconst -> varconstfunction .)


state 86

    (63) expression2 -> exp . expression2optional
    (64) expression2optional -> . relop exp relop_quadruple
    (65) expression2optional -> .
    (69) relop -> . EQUALITY
    (70) relop -> . GREATER
    (71) relop -> . GREATER_EQUAL
    (72) relop -> . LESS
    (73) relop -> . LESS_EQUAL
    (74) relop -> . DIFFERENT

    AND             reduce using rule 65 (expression2optional -> .)
    OR              reduce using rule 65 (expression2optional -> .)
    C_PARENTHESIS   reduce using rule 65 (expression2optional -> .)
    COMMA           reduce using rule 65 (expression2optional -> .)
    SEMICOLON       reduce using rule 65 (expression2optional -> .)
    C_BRACKET       reduce using rule 65 (expression2optional -> .)
    EQUALITY        shift and go to state 115
    GREATER         shift and go to state 116
    GREATER_EQUAL   shift and go to state 117
    LESS            shift and go to state 118
    LESS_EQUAL      shift and go to state 120
    DIFFERENT       shift and go to state 114

    relop                          shift and go to state 121
    expression2optional            shift and go to state 119

state 87

    (104) constants -> INTCONST . add_int_constant_to_dict
    (110) add_int_constant_to_dict -> .

    MULTIPLY        reduce using rule 110 (add_int_constant_to_dict -> .)
    DIVIDE          reduce using rule 110 (add_int_constant_to_dict -> .)
    MOD             reduce using rule 110 (add_int_constant_to_dict -> .)
    SUM             reduce using rule 110 (add_int_constant_to_dict -> .)
    MINUS           reduce using rule 110 (add_int_constant_to_dict -> .)
    EQUALITY        reduce using rule 110 (add_int_constant_to_dict -> .)
    GREATER         reduce using rule 110 (add_int_constant_to_dict -> .)
    GREATER_EQUAL   reduce using rule 110 (add_int_constant_to_dict -> .)
    LESS            reduce using rule 110 (add_int_constant_to_dict -> .)
    LESS_EQUAL      reduce using rule 110 (add_int_constant_to_dict -> .)
    DIFFERENT       reduce using rule 110 (add_int_constant_to_dict -> .)
    AND             reduce using rule 110 (add_int_constant_to_dict -> .)
    OR              reduce using rule 110 (add_int_constant_to_dict -> .)
    C_PARENTHESIS   reduce using rule 110 (add_int_constant_to_dict -> .)
    COMMA           reduce using rule 110 (add_int_constant_to_dict -> .)
    SEMICOLON       reduce using rule 110 (add_int_constant_to_dict -> .)
    C_BRACKET       reduce using rule 110 (add_int_constant_to_dict -> .)
    C_S_BRACKET     reduce using rule 110 (add_int_constant_to_dict -> .)

    add_int_constant_to_dict       shift and go to state 122

state 88

    (60) expression -> expression2 . expressionoptional
    (61) expressionoptional -> . logicop expression2 logic_op_quadruple
    (62) expressionoptional -> .
    (66) logicop -> . AND
    (67) logicop -> . OR

    C_PARENTHESIS   reduce using rule 62 (expressionoptional -> .)
    COMMA           reduce using rule 62 (expressionoptional -> .)
    SEMICOLON       reduce using rule 62 (expressionoptional -> .)
    C_BRACKET       reduce using rule 62 (expressionoptional -> .)
    AND             shift and go to state 123
    OR              shift and go to state 126

    logicop                        shift and go to state 125
    expressionoptional             shift and go to state 124

state 89

    (99) varconstfunction -> ID . functionorlist
    (101) functionorlist -> . O_S_BRACKET INTCONST C_S_BRACKET
    (102) functionorlist -> . check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS generate_gosub
    (103) functionorlist -> . add_to_stack
    (124) check_function_exists -> .
    (100) add_to_stack -> .

    O_S_BRACKET     shift and go to state 129
    O_PARENTHESIS   reduce using rule 124 (check_function_exists -> .)
    MULTIPLY        reduce using rule 100 (add_to_stack -> .)
    DIVIDE          reduce using rule 100 (add_to_stack -> .)
    MOD             reduce using rule 100 (add_to_stack -> .)
    SUM             reduce using rule 100 (add_to_stack -> .)
    MINUS           reduce using rule 100 (add_to_stack -> .)
    EQUALITY        reduce using rule 100 (add_to_stack -> .)
    GREATER         reduce using rule 100 (add_to_stack -> .)
    GREATER_EQUAL   reduce using rule 100 (add_to_stack -> .)
    LESS            reduce using rule 100 (add_to_stack -> .)
    LESS_EQUAL      reduce using rule 100 (add_to_stack -> .)
    DIFFERENT       reduce using rule 100 (add_to_stack -> .)
    AND             reduce using rule 100 (add_to_stack -> .)
    OR              reduce using rule 100 (add_to_stack -> .)
    C_PARENTHESIS   reduce using rule 100 (add_to_stack -> .)
    COMMA           reduce using rule 100 (add_to_stack -> .)
    SEMICOLON       reduce using rule 100 (add_to_stack -> .)
    C_BRACKET       reduce using rule 100 (add_to_stack -> .)

    check_function_exists          shift and go to state 127
    functionorlist                 shift and go to state 130
    add_to_stack                   shift and go to state 128

state 90

    (98) varconst -> constants .

    MULTIPLY        reduce using rule 98 (varconst -> constants .)
    DIVIDE          reduce using rule 98 (varconst -> constants .)
    MOD             reduce using rule 98 (varconst -> constants .)
    SUM             reduce using rule 98 (varconst -> constants .)
    MINUS           reduce using rule 98 (varconst -> constants .)
    EQUALITY        reduce using rule 98 (varconst -> constants .)
    GREATER         reduce using rule 98 (varconst -> constants .)
    GREATER_EQUAL   reduce using rule 98 (varconst -> constants .)
    LESS            reduce using rule 98 (varconst -> constants .)
    LESS_EQUAL      reduce using rule 98 (varconst -> constants .)
    DIFFERENT       reduce using rule 98 (varconst -> constants .)
    AND             reduce using rule 98 (varconst -> constants .)
    OR              reduce using rule 98 (varconst -> constants .)
    C_PARENTHESIS   reduce using rule 98 (varconst -> constants .)
    COMMA           reduce using rule 98 (varconst -> constants .)
    SEMICOLON       reduce using rule 98 (varconst -> constants .)
    C_BRACKET       reduce using rule 98 (varconst -> constants .)


state 91

    (76) exp -> term . exp_quadruple exploop
    (77) exp_quadruple -> .

    SUM             reduce using rule 77 (exp_quadruple -> .)
    MINUS           reduce using rule 77 (exp_quadruple -> .)
    EQUALITY        reduce using rule 77 (exp_quadruple -> .)
    GREATER         reduce using rule 77 (exp_quadruple -> .)
    GREATER_EQUAL   reduce using rule 77 (exp_quadruple -> .)
    LESS            reduce using rule 77 (exp_quadruple -> .)
    LESS_EQUAL      reduce using rule 77 (exp_quadruple -> .)
    DIFFERENT       reduce using rule 77 (exp_quadruple -> .)
    AND             reduce using rule 77 (exp_quadruple -> .)
    OR              reduce using rule 77 (exp_quadruple -> .)
    C_PARENTHESIS   reduce using rule 77 (exp_quadruple -> .)
    COMMA           reduce using rule 77 (exp_quadruple -> .)
    SEMICOLON       reduce using rule 77 (exp_quadruple -> .)
    C_BRACKET       reduce using rule 77 (exp_quadruple -> .)

    exp_quadruple                  shift and go to state 131

state 92

    (109) booleanconst -> FALSE . add_bool_constant_to_dict
    (113) add_bool_constant_to_dict -> .

    MULTIPLY        reduce using rule 113 (add_bool_constant_to_dict -> .)
    DIVIDE          reduce using rule 113 (add_bool_constant_to_dict -> .)
    MOD             reduce using rule 113 (add_bool_constant_to_dict -> .)
    SUM             reduce using rule 113 (add_bool_constant_to_dict -> .)
    MINUS           reduce using rule 113 (add_bool_constant_to_dict -> .)
    EQUALITY        reduce using rule 113 (add_bool_constant_to_dict -> .)
    GREATER         reduce using rule 113 (add_bool_constant_to_dict -> .)
    GREATER_EQUAL   reduce using rule 113 (add_bool_constant_to_dict -> .)
    LESS            reduce using rule 113 (add_bool_constant_to_dict -> .)
    LESS_EQUAL      reduce using rule 113 (add_bool_constant_to_dict -> .)
    DIFFERENT       reduce using rule 113 (add_bool_constant_to_dict -> .)
    AND             reduce using rule 113 (add_bool_constant_to_dict -> .)
    OR              reduce using rule 113 (add_bool_constant_to_dict -> .)
    C_PARENTHESIS   reduce using rule 113 (add_bool_constant_to_dict -> .)
    COMMA           reduce using rule 113 (add_bool_constant_to_dict -> .)
    SEMICOLON       reduce using rule 113 (add_bool_constant_to_dict -> .)
    C_BRACKET       reduce using rule 113 (add_bool_constant_to_dict -> .)
    C_S_BRACKET     reduce using rule 113 (add_bool_constant_to_dict -> .)

    add_bool_constant_to_dict      shift and go to state 132

state 93

    (89) fact -> varconst .

    MULTIPLY        reduce using rule 89 (fact -> varconst .)
    DIVIDE          reduce using rule 89 (fact -> varconst .)
    MOD             reduce using rule 89 (fact -> varconst .)
    SUM             reduce using rule 89 (fact -> varconst .)
    MINUS           reduce using rule 89 (fact -> varconst .)
    EQUALITY        reduce using rule 89 (fact -> varconst .)
    GREATER         reduce using rule 89 (fact -> varconst .)
    GREATER_EQUAL   reduce using rule 89 (fact -> varconst .)
    LESS            reduce using rule 89 (fact -> varconst .)
    LESS_EQUAL      reduce using rule 89 (fact -> varconst .)
    DIFFERENT       reduce using rule 89 (fact -> varconst .)
    AND             reduce using rule 89 (fact -> varconst .)
    OR              reduce using rule 89 (fact -> varconst .)
    COMMA           reduce using rule 89 (fact -> varconst .)
    C_PARENTHESIS   reduce using rule 89 (fact -> varconst .)
    SEMICOLON       reduce using rule 89 (fact -> varconst .)
    C_BRACKET       reduce using rule 89 (fact -> varconst .)


state 94

    (107) constants -> booleanconst .

    MULTIPLY        reduce using rule 107 (constants -> booleanconst .)
    DIVIDE          reduce using rule 107 (constants -> booleanconst .)
    MOD             reduce using rule 107 (constants -> booleanconst .)
    SUM             reduce using rule 107 (constants -> booleanconst .)
    MINUS           reduce using rule 107 (constants -> booleanconst .)
    EQUALITY        reduce using rule 107 (constants -> booleanconst .)
    GREATER         reduce using rule 107 (constants -> booleanconst .)
    GREATER_EQUAL   reduce using rule 107 (constants -> booleanconst .)
    LESS            reduce using rule 107 (constants -> booleanconst .)
    LESS_EQUAL      reduce using rule 107 (constants -> booleanconst .)
    DIFFERENT       reduce using rule 107 (constants -> booleanconst .)
    AND             reduce using rule 107 (constants -> booleanconst .)
    OR              reduce using rule 107 (constants -> booleanconst .)
    SEMICOLON       reduce using rule 107 (constants -> booleanconst .)
    COMMA           reduce using rule 107 (constants -> booleanconst .)
    C_S_BRACKET     reduce using rule 107 (constants -> booleanconst .)
    C_PARENTHESIS   reduce using rule 107 (constants -> booleanconst .)
    C_BRACKET       reduce using rule 107 (constants -> booleanconst .)


state 95

    (120) timesloop -> TIMES O_PARENTHESIS expression . C_PARENTHESIS start_times block end_times

    C_PARENTHESIS   shift and go to state 133


state 96

    (82) term -> fact . term_quadruple termloop
    (83) term_quadruple -> .

    MULTIPLY        reduce using rule 83 (term_quadruple -> .)
    DIVIDE          reduce using rule 83 (term_quadruple -> .)
    MOD             reduce using rule 83 (term_quadruple -> .)
    SUM             reduce using rule 83 (term_quadruple -> .)
    MINUS           reduce using rule 83 (term_quadruple -> .)
    EQUALITY        reduce using rule 83 (term_quadruple -> .)
    GREATER         reduce using rule 83 (term_quadruple -> .)
    GREATER_EQUAL   reduce using rule 83 (term_quadruple -> .)
    LESS            reduce using rule 83 (term_quadruple -> .)
    LESS_EQUAL      reduce using rule 83 (term_quadruple -> .)
    DIFFERENT       reduce using rule 83 (term_quadruple -> .)
    AND             reduce using rule 83 (term_quadruple -> .)
    OR              reduce using rule 83 (term_quadruple -> .)
    C_PARENTHESIS   reduce using rule 83 (term_quadruple -> .)
    COMMA           reduce using rule 83 (term_quadruple -> .)
    SEMICOLON       reduce using rule 83 (term_quadruple -> .)
    C_BRACKET       reduce using rule 83 (term_quadruple -> .)

    term_quadruple                 shift and go to state 134

state 97

    (116) whileloop -> WHILE start_while O_PARENTHESIS . expression C_PARENTHESIS condition_while block end_while
    (60) expression -> . expression2 expressionoptional
    (63) expression2 -> . exp expression2optional
    (76) exp -> . term exp_quadruple exploop
    (82) term -> . fact term_quadruple termloop
    (89) fact -> . varconst
    (90) fact -> . O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis
    (97) varconst -> . varconstfunction
    (98) varconst -> . constants
    (99) varconstfunction -> . ID functionorlist
    (104) constants -> . INTCONST add_int_constant_to_dict
    (105) constants -> . FLOATCONST add_float_constant_to_dict
    (106) constants -> . STRINGCONST add_string_constant_to_dict
    (107) constants -> . booleanconst
    (108) booleanconst -> . TRUE add_bool_constant_to_dict
    (109) booleanconst -> . FALSE add_bool_constant_to_dict

    O_PARENTHESIS   shift and go to state 82
    ID              shift and go to state 89
    INTCONST        shift and go to state 87
    FLOATCONST      shift and go to state 81
    STRINGCONST     shift and go to state 84
    TRUE            shift and go to state 83
    FALSE           shift and go to state 92

    varconstfunction               shift and go to state 85
    exp                            shift and go to state 86
    expression2                    shift and go to state 88
    constants                      shift and go to state 90
    term                           shift and go to state 91
    varconst                       shift and go to state 93
    booleanconst                   shift and go to state 94
    expression                     shift and go to state 135
    fact                           shift and go to state 96

state 98

    (40) writtingloop -> start_printing . expression print_quadruple optionalwritting
    (60) expression -> . expression2 expressionoptional
    (63) expression2 -> . exp expression2optional
    (76) exp -> . term exp_quadruple exploop
    (82) term -> . fact term_quadruple termloop
    (89) fact -> . varconst
    (90) fact -> . O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis
    (97) varconst -> . varconstfunction
    (98) varconst -> . constants
    (99) varconstfunction -> . ID functionorlist
    (104) constants -> . INTCONST add_int_constant_to_dict
    (105) constants -> . FLOATCONST add_float_constant_to_dict
    (106) constants -> . STRINGCONST add_string_constant_to_dict
    (107) constants -> . booleanconst
    (108) booleanconst -> . TRUE add_bool_constant_to_dict
    (109) booleanconst -> . FALSE add_bool_constant_to_dict

    O_PARENTHESIS   shift and go to state 82
    ID              shift and go to state 89
    INTCONST        shift and go to state 87
    FLOATCONST      shift and go to state 81
    STRINGCONST     shift and go to state 84
    TRUE            shift and go to state 83
    FALSE           shift and go to state 92

    varconstfunction               shift and go to state 85
    exp                            shift and go to state 86
    expression2                    shift and go to state 88
    constants                      shift and go to state 90
    term                           shift and go to state 91
    varconst                       shift and go to state 93
    booleanconst                   shift and go to state 94
    expression                     shift and go to state 136
    fact                           shift and go to state 96

state 99

    (37) writting -> PRINT O_PARENTHESIS writtingloop . C_PARENTHESIS SEMICOLON

    C_PARENTHESIS   shift and go to state 137


state 100

    (36) assignation -> var_assign EQUALS add_equals . expression equals_quadruple SEMICOLON
    (60) expression -> . expression2 expressionoptional
    (63) expression2 -> . exp expression2optional
    (76) exp -> . term exp_quadruple exploop
    (82) term -> . fact term_quadruple termloop
    (89) fact -> . varconst
    (90) fact -> . O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis
    (97) varconst -> . varconstfunction
    (98) varconst -> . constants
    (99) varconstfunction -> . ID functionorlist
    (104) constants -> . INTCONST add_int_constant_to_dict
    (105) constants -> . FLOATCONST add_float_constant_to_dict
    (106) constants -> . STRINGCONST add_string_constant_to_dict
    (107) constants -> . booleanconst
    (108) booleanconst -> . TRUE add_bool_constant_to_dict
    (109) booleanconst -> . FALSE add_bool_constant_to_dict

    O_PARENTHESIS   shift and go to state 82
    ID              shift and go to state 89
    INTCONST        shift and go to state 87
    FLOATCONST      shift and go to state 81
    STRINGCONST     shift and go to state 84
    TRUE            shift and go to state 83
    FALSE           shift and go to state 92

    varconstfunction               shift and go to state 85
    expression2                    shift and go to state 88
    constants                      shift and go to state 90
    term                           shift and go to state 91
    varconst                       shift and go to state 93
    exp                            shift and go to state 86
    booleanconst                   shift and go to state 94
    expression                     shift and go to state 138
    fact                           shift and go to state 96

state 101

    (45) normalinit -> type var EQUALS . add_equals expression equals_quadruple SEMICOLON
    (47) add_equals -> .

    O_PARENTHESIS   reduce using rule 47 (add_equals -> .)
    ID              reduce using rule 47 (add_equals -> .)
    INTCONST        reduce using rule 47 (add_equals -> .)
    FLOATCONST      reduce using rule 47 (add_equals -> .)
    STRINGCONST     reduce using rule 47 (add_equals -> .)
    TRUE            reduce using rule 47 (add_equals -> .)
    FALSE           reduce using rule 47 (add_equals -> .)

    add_equals                     shift and go to state 139

state 102

    (94) var -> ID listaccess .

    EQUALS          reduce using rule 94 (var -> ID listaccess .)


state 103

    (95) listaccess -> O_S_BRACKET . INTCONST C_S_BRACKET

    INTCONST        shift and go to state 140


state 104

    (123) functioncall -> ID check_function_exists O_PARENTHESIS . parametersinput C_PARENTHESIS SEMICOLON generate_gosub
    (126) parametersinput -> . expression push_type_to_function_options generate_parameter_quadruple parametersinputloop check_params_order
    (127) parametersinput -> .
    (60) expression -> . expression2 expressionoptional
    (63) expression2 -> . exp expression2optional
    (76) exp -> . term exp_quadruple exploop
    (82) term -> . fact term_quadruple termloop
    (89) fact -> . varconst
    (90) fact -> . O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis
    (97) varconst -> . varconstfunction
    (98) varconst -> . constants
    (99) varconstfunction -> . ID functionorlist
    (104) constants -> . INTCONST add_int_constant_to_dict
    (105) constants -> . FLOATCONST add_float_constant_to_dict
    (106) constants -> . STRINGCONST add_string_constant_to_dict
    (107) constants -> . booleanconst
    (108) booleanconst -> . TRUE add_bool_constant_to_dict
    (109) booleanconst -> . FALSE add_bool_constant_to_dict

    C_PARENTHESIS   reduce using rule 127 (parametersinput -> .)
    O_PARENTHESIS   shift and go to state 82
    ID              shift and go to state 89
    INTCONST        shift and go to state 87
    FLOATCONST      shift and go to state 81
    STRINGCONST     shift and go to state 84
    TRUE            shift and go to state 83
    FALSE           shift and go to state 92

    varconstfunction               shift and go to state 85
    exp                            shift and go to state 86
    parametersinput                shift and go to state 141
    expression2                    shift and go to state 88
    constants                      shift and go to state 90
    term                           shift and go to state 91
    varconst                       shift and go to state 93
    booleanconst                   shift and go to state 94
    expression                     shift and go to state 142
    fact                           shift and go to state 96

state 105

    (93) var_assign -> ID add_to_stack listaccess .

    EQUALS          reduce using rule 93 (var_assign -> ID add_to_stack listaccess .)


state 106

    (54) condition -> IF O_PARENTHESIS expression . C_PARENTHESIS start_condition block else end_condition

    C_PARENTHESIS   shift and go to state 143


state 107

    (48) listinit -> LIST type var . EQUALS list SEMICOLON

    EQUALS          shift and go to state 144


state 108

    (24) functionblock -> O_BRACKET statutesloop . functionreturn C_BRACKET
    (25) functionreturn -> . RETURN O_BRACKET expression C_BRACKET SEMICOLON
    (26) functionreturn -> . RETURN expression SEMICOLON

    RETURN          shift and go to state 145

    functionreturn                 shift and go to state 146

state 109

    (136) parametersloop -> COMMA parameterinit parametersloop .

    C_PARENTHESIS   reduce using rule 136 (parametersloop -> COMMA parameterinit parametersloop .)


state 110

    (105) constants -> FLOATCONST add_float_constant_to_dict .

    MULTIPLY        reduce using rule 105 (constants -> FLOATCONST add_float_constant_to_dict .)
    DIVIDE          reduce using rule 105 (constants -> FLOATCONST add_float_constant_to_dict .)
    MOD             reduce using rule 105 (constants -> FLOATCONST add_float_constant_to_dict .)
    SUM             reduce using rule 105 (constants -> FLOATCONST add_float_constant_to_dict .)
    MINUS           reduce using rule 105 (constants -> FLOATCONST add_float_constant_to_dict .)
    EQUALITY        reduce using rule 105 (constants -> FLOATCONST add_float_constant_to_dict .)
    GREATER         reduce using rule 105 (constants -> FLOATCONST add_float_constant_to_dict .)
    GREATER_EQUAL   reduce using rule 105 (constants -> FLOATCONST add_float_constant_to_dict .)
    LESS            reduce using rule 105 (constants -> FLOATCONST add_float_constant_to_dict .)
    LESS_EQUAL      reduce using rule 105 (constants -> FLOATCONST add_float_constant_to_dict .)
    DIFFERENT       reduce using rule 105 (constants -> FLOATCONST add_float_constant_to_dict .)
    AND             reduce using rule 105 (constants -> FLOATCONST add_float_constant_to_dict .)
    OR              reduce using rule 105 (constants -> FLOATCONST add_float_constant_to_dict .)
    SEMICOLON       reduce using rule 105 (constants -> FLOATCONST add_float_constant_to_dict .)
    COMMA           reduce using rule 105 (constants -> FLOATCONST add_float_constant_to_dict .)
    C_S_BRACKET     reduce using rule 105 (constants -> FLOATCONST add_float_constant_to_dict .)
    C_PARENTHESIS   reduce using rule 105 (constants -> FLOATCONST add_float_constant_to_dict .)
    C_BRACKET       reduce using rule 105 (constants -> FLOATCONST add_float_constant_to_dict .)


state 111

    (90) fact -> O_PARENTHESIS add_o_parenthesis . expression C_PARENTHESIS add_c_parenthesis
    (60) expression -> . expression2 expressionoptional
    (63) expression2 -> . exp expression2optional
    (76) exp -> . term exp_quadruple exploop
    (82) term -> . fact term_quadruple termloop
    (89) fact -> . varconst
    (90) fact -> . O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis
    (97) varconst -> . varconstfunction
    (98) varconst -> . constants
    (99) varconstfunction -> . ID functionorlist
    (104) constants -> . INTCONST add_int_constant_to_dict
    (105) constants -> . FLOATCONST add_float_constant_to_dict
    (106) constants -> . STRINGCONST add_string_constant_to_dict
    (107) constants -> . booleanconst
    (108) booleanconst -> . TRUE add_bool_constant_to_dict
    (109) booleanconst -> . FALSE add_bool_constant_to_dict

    O_PARENTHESIS   shift and go to state 82
    ID              shift and go to state 89
    INTCONST        shift and go to state 87
    FLOATCONST      shift and go to state 81
    STRINGCONST     shift and go to state 84
    TRUE            shift and go to state 83
    FALSE           shift and go to state 92

    varconstfunction               shift and go to state 85
    exp                            shift and go to state 86
    expression2                    shift and go to state 88
    constants                      shift and go to state 90
    term                           shift and go to state 91
    varconst                       shift and go to state 93
    booleanconst                   shift and go to state 94
    expression                     shift and go to state 147
    fact                           shift and go to state 96

state 112

    (108) booleanconst -> TRUE add_bool_constant_to_dict .

    MULTIPLY        reduce using rule 108 (booleanconst -> TRUE add_bool_constant_to_dict .)
    DIVIDE          reduce using rule 108 (booleanconst -> TRUE add_bool_constant_to_dict .)
    MOD             reduce using rule 108 (booleanconst -> TRUE add_bool_constant_to_dict .)
    SUM             reduce using rule 108 (booleanconst -> TRUE add_bool_constant_to_dict .)
    MINUS           reduce using rule 108 (booleanconst -> TRUE add_bool_constant_to_dict .)
    EQUALITY        reduce using rule 108 (booleanconst -> TRUE add_bool_constant_to_dict .)
    GREATER         reduce using rule 108 (booleanconst -> TRUE add_bool_constant_to_dict .)
    GREATER_EQUAL   reduce using rule 108 (booleanconst -> TRUE add_bool_constant_to_dict .)
    LESS            reduce using rule 108 (booleanconst -> TRUE add_bool_constant_to_dict .)
    LESS_EQUAL      reduce using rule 108 (booleanconst -> TRUE add_bool_constant_to_dict .)
    DIFFERENT       reduce using rule 108 (booleanconst -> TRUE add_bool_constant_to_dict .)
    AND             reduce using rule 108 (booleanconst -> TRUE add_bool_constant_to_dict .)
    OR              reduce using rule 108 (booleanconst -> TRUE add_bool_constant_to_dict .)
    SEMICOLON       reduce using rule 108 (booleanconst -> TRUE add_bool_constant_to_dict .)
    COMMA           reduce using rule 108 (booleanconst -> TRUE add_bool_constant_to_dict .)
    C_PARENTHESIS   reduce using rule 108 (booleanconst -> TRUE add_bool_constant_to_dict .)
    C_BRACKET       reduce using rule 108 (booleanconst -> TRUE add_bool_constant_to_dict .)
    C_S_BRACKET     reduce using rule 108 (booleanconst -> TRUE add_bool_constant_to_dict .)


state 113

    (106) constants -> STRINGCONST add_string_constant_to_dict .

    MULTIPLY        reduce using rule 106 (constants -> STRINGCONST add_string_constant_to_dict .)
    DIVIDE          reduce using rule 106 (constants -> STRINGCONST add_string_constant_to_dict .)
    MOD             reduce using rule 106 (constants -> STRINGCONST add_string_constant_to_dict .)
    SUM             reduce using rule 106 (constants -> STRINGCONST add_string_constant_to_dict .)
    MINUS           reduce using rule 106 (constants -> STRINGCONST add_string_constant_to_dict .)
    EQUALITY        reduce using rule 106 (constants -> STRINGCONST add_string_constant_to_dict .)
    GREATER         reduce using rule 106 (constants -> STRINGCONST add_string_constant_to_dict .)
    GREATER_EQUAL   reduce using rule 106 (constants -> STRINGCONST add_string_constant_to_dict .)
    LESS            reduce using rule 106 (constants -> STRINGCONST add_string_constant_to_dict .)
    LESS_EQUAL      reduce using rule 106 (constants -> STRINGCONST add_string_constant_to_dict .)
    DIFFERENT       reduce using rule 106 (constants -> STRINGCONST add_string_constant_to_dict .)
    AND             reduce using rule 106 (constants -> STRINGCONST add_string_constant_to_dict .)
    OR              reduce using rule 106 (constants -> STRINGCONST add_string_constant_to_dict .)
    SEMICOLON       reduce using rule 106 (constants -> STRINGCONST add_string_constant_to_dict .)
    COMMA           reduce using rule 106 (constants -> STRINGCONST add_string_constant_to_dict .)
    C_S_BRACKET     reduce using rule 106 (constants -> STRINGCONST add_string_constant_to_dict .)
    C_PARENTHESIS   reduce using rule 106 (constants -> STRINGCONST add_string_constant_to_dict .)
    C_BRACKET       reduce using rule 106 (constants -> STRINGCONST add_string_constant_to_dict .)


state 114

    (74) relop -> DIFFERENT .

    O_PARENTHESIS   reduce using rule 74 (relop -> DIFFERENT .)
    ID              reduce using rule 74 (relop -> DIFFERENT .)
    INTCONST        reduce using rule 74 (relop -> DIFFERENT .)
    FLOATCONST      reduce using rule 74 (relop -> DIFFERENT .)
    STRINGCONST     reduce using rule 74 (relop -> DIFFERENT .)
    TRUE            reduce using rule 74 (relop -> DIFFERENT .)
    FALSE           reduce using rule 74 (relop -> DIFFERENT .)


state 115

    (69) relop -> EQUALITY .

    O_PARENTHESIS   reduce using rule 69 (relop -> EQUALITY .)
    ID              reduce using rule 69 (relop -> EQUALITY .)
    INTCONST        reduce using rule 69 (relop -> EQUALITY .)
    FLOATCONST      reduce using rule 69 (relop -> EQUALITY .)
    STRINGCONST     reduce using rule 69 (relop -> EQUALITY .)
    TRUE            reduce using rule 69 (relop -> EQUALITY .)
    FALSE           reduce using rule 69 (relop -> EQUALITY .)


state 116

    (70) relop -> GREATER .

    O_PARENTHESIS   reduce using rule 70 (relop -> GREATER .)
    ID              reduce using rule 70 (relop -> GREATER .)
    INTCONST        reduce using rule 70 (relop -> GREATER .)
    FLOATCONST      reduce using rule 70 (relop -> GREATER .)
    STRINGCONST     reduce using rule 70 (relop -> GREATER .)
    TRUE            reduce using rule 70 (relop -> GREATER .)
    FALSE           reduce using rule 70 (relop -> GREATER .)


state 117

    (71) relop -> GREATER_EQUAL .

    O_PARENTHESIS   reduce using rule 71 (relop -> GREATER_EQUAL .)
    ID              reduce using rule 71 (relop -> GREATER_EQUAL .)
    INTCONST        reduce using rule 71 (relop -> GREATER_EQUAL .)
    FLOATCONST      reduce using rule 71 (relop -> GREATER_EQUAL .)
    STRINGCONST     reduce using rule 71 (relop -> GREATER_EQUAL .)
    TRUE            reduce using rule 71 (relop -> GREATER_EQUAL .)
    FALSE           reduce using rule 71 (relop -> GREATER_EQUAL .)


state 118

    (72) relop -> LESS .

    O_PARENTHESIS   reduce using rule 72 (relop -> LESS .)
    ID              reduce using rule 72 (relop -> LESS .)
    INTCONST        reduce using rule 72 (relop -> LESS .)
    FLOATCONST      reduce using rule 72 (relop -> LESS .)
    STRINGCONST     reduce using rule 72 (relop -> LESS .)
    TRUE            reduce using rule 72 (relop -> LESS .)
    FALSE           reduce using rule 72 (relop -> LESS .)


state 119

    (63) expression2 -> exp expression2optional .

    C_PARENTHESIS   reduce using rule 63 (expression2 -> exp expression2optional .)
    COMMA           reduce using rule 63 (expression2 -> exp expression2optional .)
    SEMICOLON       reduce using rule 63 (expression2 -> exp expression2optional .)
    C_BRACKET       reduce using rule 63 (expression2 -> exp expression2optional .)
    AND             reduce using rule 63 (expression2 -> exp expression2optional .)
    OR              reduce using rule 63 (expression2 -> exp expression2optional .)


state 120

    (73) relop -> LESS_EQUAL .

    O_PARENTHESIS   reduce using rule 73 (relop -> LESS_EQUAL .)
    ID              reduce using rule 73 (relop -> LESS_EQUAL .)
    INTCONST        reduce using rule 73 (relop -> LESS_EQUAL .)
    FLOATCONST      reduce using rule 73 (relop -> LESS_EQUAL .)
    STRINGCONST     reduce using rule 73 (relop -> LESS_EQUAL .)
    TRUE            reduce using rule 73 (relop -> LESS_EQUAL .)
    FALSE           reduce using rule 73 (relop -> LESS_EQUAL .)


state 121

    (64) expression2optional -> relop . exp relop_quadruple
    (76) exp -> . term exp_quadruple exploop
    (82) term -> . fact term_quadruple termloop
    (89) fact -> . varconst
    (90) fact -> . O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis
    (97) varconst -> . varconstfunction
    (98) varconst -> . constants
    (99) varconstfunction -> . ID functionorlist
    (104) constants -> . INTCONST add_int_constant_to_dict
    (105) constants -> . FLOATCONST add_float_constant_to_dict
    (106) constants -> . STRINGCONST add_string_constant_to_dict
    (107) constants -> . booleanconst
    (108) booleanconst -> . TRUE add_bool_constant_to_dict
    (109) booleanconst -> . FALSE add_bool_constant_to_dict

    O_PARENTHESIS   shift and go to state 82
    ID              shift and go to state 89
    INTCONST        shift and go to state 87
    FLOATCONST      shift and go to state 81
    STRINGCONST     shift and go to state 84
    TRUE            shift and go to state 83
    FALSE           shift and go to state 92

    term                           shift and go to state 91
    varconst                       shift and go to state 93
    constants                      shift and go to state 90
    exp                            shift and go to state 148
    booleanconst                   shift and go to state 94
    varconstfunction               shift and go to state 85
    fact                           shift and go to state 96

state 122

    (104) constants -> INTCONST add_int_constant_to_dict .

    MULTIPLY        reduce using rule 104 (constants -> INTCONST add_int_constant_to_dict .)
    DIVIDE          reduce using rule 104 (constants -> INTCONST add_int_constant_to_dict .)
    MOD             reduce using rule 104 (constants -> INTCONST add_int_constant_to_dict .)
    SUM             reduce using rule 104 (constants -> INTCONST add_int_constant_to_dict .)
    MINUS           reduce using rule 104 (constants -> INTCONST add_int_constant_to_dict .)
    EQUALITY        reduce using rule 104 (constants -> INTCONST add_int_constant_to_dict .)
    GREATER         reduce using rule 104 (constants -> INTCONST add_int_constant_to_dict .)
    GREATER_EQUAL   reduce using rule 104 (constants -> INTCONST add_int_constant_to_dict .)
    LESS            reduce using rule 104 (constants -> INTCONST add_int_constant_to_dict .)
    LESS_EQUAL      reduce using rule 104 (constants -> INTCONST add_int_constant_to_dict .)
    DIFFERENT       reduce using rule 104 (constants -> INTCONST add_int_constant_to_dict .)
    AND             reduce using rule 104 (constants -> INTCONST add_int_constant_to_dict .)
    OR              reduce using rule 104 (constants -> INTCONST add_int_constant_to_dict .)
    SEMICOLON       reduce using rule 104 (constants -> INTCONST add_int_constant_to_dict .)
    COMMA           reduce using rule 104 (constants -> INTCONST add_int_constant_to_dict .)
    C_S_BRACKET     reduce using rule 104 (constants -> INTCONST add_int_constant_to_dict .)
    C_PARENTHESIS   reduce using rule 104 (constants -> INTCONST add_int_constant_to_dict .)
    C_BRACKET       reduce using rule 104 (constants -> INTCONST add_int_constant_to_dict .)


state 123

    (66) logicop -> AND .

    O_PARENTHESIS   reduce using rule 66 (logicop -> AND .)
    ID              reduce using rule 66 (logicop -> AND .)
    INTCONST        reduce using rule 66 (logicop -> AND .)
    FLOATCONST      reduce using rule 66 (logicop -> AND .)
    STRINGCONST     reduce using rule 66 (logicop -> AND .)
    TRUE            reduce using rule 66 (logicop -> AND .)
    FALSE           reduce using rule 66 (logicop -> AND .)


state 124

    (60) expression -> expression2 expressionoptional .

    COMMA           reduce using rule 60 (expression -> expression2 expressionoptional .)
    C_PARENTHESIS   reduce using rule 60 (expression -> expression2 expressionoptional .)
    SEMICOLON       reduce using rule 60 (expression -> expression2 expressionoptional .)
    C_BRACKET       reduce using rule 60 (expression -> expression2 expressionoptional .)


state 125

    (61) expressionoptional -> logicop . expression2 logic_op_quadruple
    (63) expression2 -> . exp expression2optional
    (76) exp -> . term exp_quadruple exploop
    (82) term -> . fact term_quadruple termloop
    (89) fact -> . varconst
    (90) fact -> . O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis
    (97) varconst -> . varconstfunction
    (98) varconst -> . constants
    (99) varconstfunction -> . ID functionorlist
    (104) constants -> . INTCONST add_int_constant_to_dict
    (105) constants -> . FLOATCONST add_float_constant_to_dict
    (106) constants -> . STRINGCONST add_string_constant_to_dict
    (107) constants -> . booleanconst
    (108) booleanconst -> . TRUE add_bool_constant_to_dict
    (109) booleanconst -> . FALSE add_bool_constant_to_dict

    O_PARENTHESIS   shift and go to state 82
    ID              shift and go to state 89
    INTCONST        shift and go to state 87
    FLOATCONST      shift and go to state 81
    STRINGCONST     shift and go to state 84
    TRUE            shift and go to state 83
    FALSE           shift and go to state 92

    varconstfunction               shift and go to state 85
    exp                            shift and go to state 86
    expression2                    shift and go to state 149
    constants                      shift and go to state 90
    term                           shift and go to state 91
    varconst                       shift and go to state 93
    booleanconst                   shift and go to state 94
    fact                           shift and go to state 96

state 126

    (67) logicop -> OR .

    O_PARENTHESIS   reduce using rule 67 (logicop -> OR .)
    ID              reduce using rule 67 (logicop -> OR .)
    INTCONST        reduce using rule 67 (logicop -> OR .)
    FLOATCONST      reduce using rule 67 (logicop -> OR .)
    STRINGCONST     reduce using rule 67 (logicop -> OR .)
    TRUE            reduce using rule 67 (logicop -> OR .)
    FALSE           reduce using rule 67 (logicop -> OR .)


state 127

    (102) functionorlist -> check_function_exists . O_PARENTHESIS parametersinput C_PARENTHESIS generate_gosub

    O_PARENTHESIS   shift and go to state 150


state 128

    (103) functionorlist -> add_to_stack .

    MULTIPLY        reduce using rule 103 (functionorlist -> add_to_stack .)
    DIVIDE          reduce using rule 103 (functionorlist -> add_to_stack .)
    MOD             reduce using rule 103 (functionorlist -> add_to_stack .)
    SUM             reduce using rule 103 (functionorlist -> add_to_stack .)
    MINUS           reduce using rule 103 (functionorlist -> add_to_stack .)
    EQUALITY        reduce using rule 103 (functionorlist -> add_to_stack .)
    GREATER         reduce using rule 103 (functionorlist -> add_to_stack .)
    GREATER_EQUAL   reduce using rule 103 (functionorlist -> add_to_stack .)
    LESS            reduce using rule 103 (functionorlist -> add_to_stack .)
    LESS_EQUAL      reduce using rule 103 (functionorlist -> add_to_stack .)
    DIFFERENT       reduce using rule 103 (functionorlist -> add_to_stack .)
    AND             reduce using rule 103 (functionorlist -> add_to_stack .)
    OR              reduce using rule 103 (functionorlist -> add_to_stack .)
    C_PARENTHESIS   reduce using rule 103 (functionorlist -> add_to_stack .)
    COMMA           reduce using rule 103 (functionorlist -> add_to_stack .)
    SEMICOLON       reduce using rule 103 (functionorlist -> add_to_stack .)
    C_BRACKET       reduce using rule 103 (functionorlist -> add_to_stack .)


state 129

    (101) functionorlist -> O_S_BRACKET . INTCONST C_S_BRACKET

    INTCONST        shift and go to state 151


state 130

    (99) varconstfunction -> ID functionorlist .

    MULTIPLY        reduce using rule 99 (varconstfunction -> ID functionorlist .)
    DIVIDE          reduce using rule 99 (varconstfunction -> ID functionorlist .)
    MOD             reduce using rule 99 (varconstfunction -> ID functionorlist .)
    SUM             reduce using rule 99 (varconstfunction -> ID functionorlist .)
    MINUS           reduce using rule 99 (varconstfunction -> ID functionorlist .)
    EQUALITY        reduce using rule 99 (varconstfunction -> ID functionorlist .)
    GREATER         reduce using rule 99 (varconstfunction -> ID functionorlist .)
    GREATER_EQUAL   reduce using rule 99 (varconstfunction -> ID functionorlist .)
    LESS            reduce using rule 99 (varconstfunction -> ID functionorlist .)
    LESS_EQUAL      reduce using rule 99 (varconstfunction -> ID functionorlist .)
    DIFFERENT       reduce using rule 99 (varconstfunction -> ID functionorlist .)
    AND             reduce using rule 99 (varconstfunction -> ID functionorlist .)
    OR              reduce using rule 99 (varconstfunction -> ID functionorlist .)
    SEMICOLON       reduce using rule 99 (varconstfunction -> ID functionorlist .)
    C_PARENTHESIS   reduce using rule 99 (varconstfunction -> ID functionorlist .)
    COMMA           reduce using rule 99 (varconstfunction -> ID functionorlist .)
    C_BRACKET       reduce using rule 99 (varconstfunction -> ID functionorlist .)


state 131

    (76) exp -> term exp_quadruple . exploop
    (78) exploop -> . addsub exp
    (79) exploop -> .
    (80) addsub -> . SUM
    (81) addsub -> . MINUS

    EQUALITY        reduce using rule 79 (exploop -> .)
    GREATER         reduce using rule 79 (exploop -> .)
    GREATER_EQUAL   reduce using rule 79 (exploop -> .)
    LESS            reduce using rule 79 (exploop -> .)
    LESS_EQUAL      reduce using rule 79 (exploop -> .)
    DIFFERENT       reduce using rule 79 (exploop -> .)
    AND             reduce using rule 79 (exploop -> .)
    OR              reduce using rule 79 (exploop -> .)
    C_PARENTHESIS   reduce using rule 79 (exploop -> .)
    COMMA           reduce using rule 79 (exploop -> .)
    SEMICOLON       reduce using rule 79 (exploop -> .)
    C_BRACKET       reduce using rule 79 (exploop -> .)
    SUM             shift and go to state 152
    MINUS           shift and go to state 153

    exploop                        shift and go to state 154
    addsub                         shift and go to state 155

state 132

    (109) booleanconst -> FALSE add_bool_constant_to_dict .

    MULTIPLY        reduce using rule 109 (booleanconst -> FALSE add_bool_constant_to_dict .)
    DIVIDE          reduce using rule 109 (booleanconst -> FALSE add_bool_constant_to_dict .)
    MOD             reduce using rule 109 (booleanconst -> FALSE add_bool_constant_to_dict .)
    SUM             reduce using rule 109 (booleanconst -> FALSE add_bool_constant_to_dict .)
    MINUS           reduce using rule 109 (booleanconst -> FALSE add_bool_constant_to_dict .)
    EQUALITY        reduce using rule 109 (booleanconst -> FALSE add_bool_constant_to_dict .)
    GREATER         reduce using rule 109 (booleanconst -> FALSE add_bool_constant_to_dict .)
    GREATER_EQUAL   reduce using rule 109 (booleanconst -> FALSE add_bool_constant_to_dict .)
    LESS            reduce using rule 109 (booleanconst -> FALSE add_bool_constant_to_dict .)
    LESS_EQUAL      reduce using rule 109 (booleanconst -> FALSE add_bool_constant_to_dict .)
    DIFFERENT       reduce using rule 109 (booleanconst -> FALSE add_bool_constant_to_dict .)
    AND             reduce using rule 109 (booleanconst -> FALSE add_bool_constant_to_dict .)
    OR              reduce using rule 109 (booleanconst -> FALSE add_bool_constant_to_dict .)
    SEMICOLON       reduce using rule 109 (booleanconst -> FALSE add_bool_constant_to_dict .)
    COMMA           reduce using rule 109 (booleanconst -> FALSE add_bool_constant_to_dict .)
    C_PARENTHESIS   reduce using rule 109 (booleanconst -> FALSE add_bool_constant_to_dict .)
    C_BRACKET       reduce using rule 109 (booleanconst -> FALSE add_bool_constant_to_dict .)
    C_S_BRACKET     reduce using rule 109 (booleanconst -> FALSE add_bool_constant_to_dict .)


state 133

    (120) timesloop -> TIMES O_PARENTHESIS expression C_PARENTHESIS . start_times block end_times
    (121) start_times -> .

    O_BRACKET       reduce using rule 121 (start_times -> .)

    start_times                    shift and go to state 156

state 134

    (82) term -> fact term_quadruple . termloop
    (84) termloop -> . divmult term
    (85) termloop -> .
    (86) divmult -> . MULTIPLY
    (87) divmult -> . DIVIDE
    (88) divmult -> . MOD

    SUM             reduce using rule 85 (termloop -> .)
    MINUS           reduce using rule 85 (termloop -> .)
    EQUALITY        reduce using rule 85 (termloop -> .)
    GREATER         reduce using rule 85 (termloop -> .)
    GREATER_EQUAL   reduce using rule 85 (termloop -> .)
    LESS            reduce using rule 85 (termloop -> .)
    LESS_EQUAL      reduce using rule 85 (termloop -> .)
    DIFFERENT       reduce using rule 85 (termloop -> .)
    AND             reduce using rule 85 (termloop -> .)
    OR              reduce using rule 85 (termloop -> .)
    C_PARENTHESIS   reduce using rule 85 (termloop -> .)
    COMMA           reduce using rule 85 (termloop -> .)
    SEMICOLON       reduce using rule 85 (termloop -> .)
    C_BRACKET       reduce using rule 85 (termloop -> .)
    MULTIPLY        shift and go to state 159
    DIVIDE          shift and go to state 157
    MOD             shift and go to state 161

    termloop                       shift and go to state 158
    divmult                        shift and go to state 160

state 135

    (116) whileloop -> WHILE start_while O_PARENTHESIS expression . C_PARENTHESIS condition_while block end_while

    C_PARENTHESIS   shift and go to state 162


state 136

    (40) writtingloop -> start_printing expression . print_quadruple optionalwritting
    (39) print_quadruple -> .

    COMMA           reduce using rule 39 (print_quadruple -> .)
    C_PARENTHESIS   reduce using rule 39 (print_quadruple -> .)

    print_quadruple                shift and go to state 163

state 137

    (37) writting -> PRINT O_PARENTHESIS writtingloop C_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 164


state 138

    (36) assignation -> var_assign EQUALS add_equals expression . equals_quadruple SEMICOLON
    (46) equals_quadruple -> .

    SEMICOLON       reduce using rule 46 (equals_quadruple -> .)

    equals_quadruple               shift and go to state 165

state 139

    (45) normalinit -> type var EQUALS add_equals . expression equals_quadruple SEMICOLON
    (60) expression -> . expression2 expressionoptional
    (63) expression2 -> . exp expression2optional
    (76) exp -> . term exp_quadruple exploop
    (82) term -> . fact term_quadruple termloop
    (89) fact -> . varconst
    (90) fact -> . O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis
    (97) varconst -> . varconstfunction
    (98) varconst -> . constants
    (99) varconstfunction -> . ID functionorlist
    (104) constants -> . INTCONST add_int_constant_to_dict
    (105) constants -> . FLOATCONST add_float_constant_to_dict
    (106) constants -> . STRINGCONST add_string_constant_to_dict
    (107) constants -> . booleanconst
    (108) booleanconst -> . TRUE add_bool_constant_to_dict
    (109) booleanconst -> . FALSE add_bool_constant_to_dict

    O_PARENTHESIS   shift and go to state 82
    ID              shift and go to state 89
    INTCONST        shift and go to state 87
    FLOATCONST      shift and go to state 81
    STRINGCONST     shift and go to state 84
    TRUE            shift and go to state 83
    FALSE           shift and go to state 92

    varconstfunction               shift and go to state 85
    expression2                    shift and go to state 88
    constants                      shift and go to state 90
    term                           shift and go to state 91
    varconst                       shift and go to state 93
    exp                            shift and go to state 86
    booleanconst                   shift and go to state 94
    expression                     shift and go to state 166
    fact                           shift and go to state 96

state 140

    (95) listaccess -> O_S_BRACKET INTCONST . C_S_BRACKET

    C_S_BRACKET     shift and go to state 167


state 141

    (123) functioncall -> ID check_function_exists O_PARENTHESIS parametersinput . C_PARENTHESIS SEMICOLON generate_gosub

    C_PARENTHESIS   shift and go to state 168


state 142

    (126) parametersinput -> expression . push_type_to_function_options generate_parameter_quadruple parametersinputloop check_params_order
    (130) push_type_to_function_options -> .

    COMMA           reduce using rule 130 (push_type_to_function_options -> .)
    C_PARENTHESIS   reduce using rule 130 (push_type_to_function_options -> .)

    push_type_to_function_options  shift and go to state 169

state 143

    (54) condition -> IF O_PARENTHESIS expression C_PARENTHESIS . start_condition block else end_condition
    (57) start_condition -> .

    O_BRACKET       reduce using rule 57 (start_condition -> .)

    start_condition                shift and go to state 170

state 144

    (48) listinit -> LIST type var EQUALS . list SEMICOLON
    (49) list -> . O_S_BRACKET listelements C_S_BRACKET

    O_S_BRACKET     shift and go to state 172

    list                           shift and go to state 171

state 145

    (25) functionreturn -> RETURN . O_BRACKET expression C_BRACKET SEMICOLON
    (26) functionreturn -> RETURN . expression SEMICOLON
    (60) expression -> . expression2 expressionoptional
    (63) expression2 -> . exp expression2optional
    (76) exp -> . term exp_quadruple exploop
    (82) term -> . fact term_quadruple termloop
    (89) fact -> . varconst
    (90) fact -> . O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis
    (97) varconst -> . varconstfunction
    (98) varconst -> . constants
    (99) varconstfunction -> . ID functionorlist
    (104) constants -> . INTCONST add_int_constant_to_dict
    (105) constants -> . FLOATCONST add_float_constant_to_dict
    (106) constants -> . STRINGCONST add_string_constant_to_dict
    (107) constants -> . booleanconst
    (108) booleanconst -> . TRUE add_bool_constant_to_dict
    (109) booleanconst -> . FALSE add_bool_constant_to_dict

    O_BRACKET       shift and go to state 173
    O_PARENTHESIS   shift and go to state 82
    ID              shift and go to state 89
    INTCONST        shift and go to state 87
    FLOATCONST      shift and go to state 81
    STRINGCONST     shift and go to state 84
    TRUE            shift and go to state 83
    FALSE           shift and go to state 92

    varconstfunction               shift and go to state 85
    exp                            shift and go to state 86
    expression2                    shift and go to state 88
    constants                      shift and go to state 90
    term                           shift and go to state 91
    varconst                       shift and go to state 93
    booleanconst                   shift and go to state 94
    expression                     shift and go to state 174
    fact                           shift and go to state 96

state 146

    (24) functionblock -> O_BRACKET statutesloop functionreturn . C_BRACKET

    C_BRACKET       shift and go to state 175


state 147

    (90) fact -> O_PARENTHESIS add_o_parenthesis expression . C_PARENTHESIS add_c_parenthesis

    C_PARENTHESIS   shift and go to state 176


state 148

    (64) expression2optional -> relop exp . relop_quadruple
    (75) relop_quadruple -> .

    AND             reduce using rule 75 (relop_quadruple -> .)
    OR              reduce using rule 75 (relop_quadruple -> .)
    C_PARENTHESIS   reduce using rule 75 (relop_quadruple -> .)
    COMMA           reduce using rule 75 (relop_quadruple -> .)
    SEMICOLON       reduce using rule 75 (relop_quadruple -> .)
    C_BRACKET       reduce using rule 75 (relop_quadruple -> .)

    relop_quadruple                shift and go to state 177

state 149

    (61) expressionoptional -> logicop expression2 . logic_op_quadruple
    (68) logic_op_quadruple -> .

    C_PARENTHESIS   reduce using rule 68 (logic_op_quadruple -> .)
    COMMA           reduce using rule 68 (logic_op_quadruple -> .)
    SEMICOLON       reduce using rule 68 (logic_op_quadruple -> .)
    C_BRACKET       reduce using rule 68 (logic_op_quadruple -> .)

    logic_op_quadruple             shift and go to state 178

state 150

    (102) functionorlist -> check_function_exists O_PARENTHESIS . parametersinput C_PARENTHESIS generate_gosub
    (126) parametersinput -> . expression push_type_to_function_options generate_parameter_quadruple parametersinputloop check_params_order
    (127) parametersinput -> .
    (60) expression -> . expression2 expressionoptional
    (63) expression2 -> . exp expression2optional
    (76) exp -> . term exp_quadruple exploop
    (82) term -> . fact term_quadruple termloop
    (89) fact -> . varconst
    (90) fact -> . O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis
    (97) varconst -> . varconstfunction
    (98) varconst -> . constants
    (99) varconstfunction -> . ID functionorlist
    (104) constants -> . INTCONST add_int_constant_to_dict
    (105) constants -> . FLOATCONST add_float_constant_to_dict
    (106) constants -> . STRINGCONST add_string_constant_to_dict
    (107) constants -> . booleanconst
    (108) booleanconst -> . TRUE add_bool_constant_to_dict
    (109) booleanconst -> . FALSE add_bool_constant_to_dict

    C_PARENTHESIS   reduce using rule 127 (parametersinput -> .)
    O_PARENTHESIS   shift and go to state 82
    ID              shift and go to state 89
    INTCONST        shift and go to state 87
    FLOATCONST      shift and go to state 81
    STRINGCONST     shift and go to state 84
    TRUE            shift and go to state 83
    FALSE           shift and go to state 92

    varconstfunction               shift and go to state 85
    exp                            shift and go to state 86
    parametersinput                shift and go to state 179
    expression2                    shift and go to state 88
    constants                      shift and go to state 90
    term                           shift and go to state 91
    varconst                       shift and go to state 93
    booleanconst                   shift and go to state 94
    expression                     shift and go to state 142
    fact                           shift and go to state 96

state 151

    (101) functionorlist -> O_S_BRACKET INTCONST . C_S_BRACKET

    C_S_BRACKET     shift and go to state 180


state 152

    (80) addsub -> SUM .

    O_PARENTHESIS   reduce using rule 80 (addsub -> SUM .)
    ID              reduce using rule 80 (addsub -> SUM .)
    INTCONST        reduce using rule 80 (addsub -> SUM .)
    FLOATCONST      reduce using rule 80 (addsub -> SUM .)
    STRINGCONST     reduce using rule 80 (addsub -> SUM .)
    TRUE            reduce using rule 80 (addsub -> SUM .)
    FALSE           reduce using rule 80 (addsub -> SUM .)


state 153

    (81) addsub -> MINUS .

    O_PARENTHESIS   reduce using rule 81 (addsub -> MINUS .)
    ID              reduce using rule 81 (addsub -> MINUS .)
    INTCONST        reduce using rule 81 (addsub -> MINUS .)
    FLOATCONST      reduce using rule 81 (addsub -> MINUS .)
    STRINGCONST     reduce using rule 81 (addsub -> MINUS .)
    TRUE            reduce using rule 81 (addsub -> MINUS .)
    FALSE           reduce using rule 81 (addsub -> MINUS .)


state 154

    (76) exp -> term exp_quadruple exploop .

    EQUALITY        reduce using rule 76 (exp -> term exp_quadruple exploop .)
    GREATER         reduce using rule 76 (exp -> term exp_quadruple exploop .)
    GREATER_EQUAL   reduce using rule 76 (exp -> term exp_quadruple exploop .)
    LESS            reduce using rule 76 (exp -> term exp_quadruple exploop .)
    LESS_EQUAL      reduce using rule 76 (exp -> term exp_quadruple exploop .)
    DIFFERENT       reduce using rule 76 (exp -> term exp_quadruple exploop .)
    AND             reduce using rule 76 (exp -> term exp_quadruple exploop .)
    OR              reduce using rule 76 (exp -> term exp_quadruple exploop .)
    C_PARENTHESIS   reduce using rule 76 (exp -> term exp_quadruple exploop .)
    COMMA           reduce using rule 76 (exp -> term exp_quadruple exploop .)
    SEMICOLON       reduce using rule 76 (exp -> term exp_quadruple exploop .)
    C_BRACKET       reduce using rule 76 (exp -> term exp_quadruple exploop .)


state 155

    (78) exploop -> addsub . exp
    (76) exp -> . term exp_quadruple exploop
    (82) term -> . fact term_quadruple termloop
    (89) fact -> . varconst
    (90) fact -> . O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis
    (97) varconst -> . varconstfunction
    (98) varconst -> . constants
    (99) varconstfunction -> . ID functionorlist
    (104) constants -> . INTCONST add_int_constant_to_dict
    (105) constants -> . FLOATCONST add_float_constant_to_dict
    (106) constants -> . STRINGCONST add_string_constant_to_dict
    (107) constants -> . booleanconst
    (108) booleanconst -> . TRUE add_bool_constant_to_dict
    (109) booleanconst -> . FALSE add_bool_constant_to_dict

    O_PARENTHESIS   shift and go to state 82
    ID              shift and go to state 89
    INTCONST        shift and go to state 87
    FLOATCONST      shift and go to state 81
    STRINGCONST     shift and go to state 84
    TRUE            shift and go to state 83
    FALSE           shift and go to state 92

    term                           shift and go to state 91
    varconst                       shift and go to state 93
    constants                      shift and go to state 90
    exp                            shift and go to state 181
    booleanconst                   shift and go to state 94
    varconstfunction               shift and go to state 85
    fact                           shift and go to state 96

state 156

    (120) timesloop -> TIMES O_PARENTHESIS expression C_PARENTHESIS start_times . block end_times
    (23) block -> . O_BRACKET statutesloop C_BRACKET

    O_BRACKET       shift and go to state 26

    block                          shift and go to state 182

state 157

    (87) divmult -> DIVIDE .

    O_PARENTHESIS   reduce using rule 87 (divmult -> DIVIDE .)
    ID              reduce using rule 87 (divmult -> DIVIDE .)
    INTCONST        reduce using rule 87 (divmult -> DIVIDE .)
    FLOATCONST      reduce using rule 87 (divmult -> DIVIDE .)
    STRINGCONST     reduce using rule 87 (divmult -> DIVIDE .)
    TRUE            reduce using rule 87 (divmult -> DIVIDE .)
    FALSE           reduce using rule 87 (divmult -> DIVIDE .)


state 158

    (82) term -> fact term_quadruple termloop .

    SUM             reduce using rule 82 (term -> fact term_quadruple termloop .)
    MINUS           reduce using rule 82 (term -> fact term_quadruple termloop .)
    EQUALITY        reduce using rule 82 (term -> fact term_quadruple termloop .)
    GREATER         reduce using rule 82 (term -> fact term_quadruple termloop .)
    GREATER_EQUAL   reduce using rule 82 (term -> fact term_quadruple termloop .)
    LESS            reduce using rule 82 (term -> fact term_quadruple termloop .)
    LESS_EQUAL      reduce using rule 82 (term -> fact term_quadruple termloop .)
    DIFFERENT       reduce using rule 82 (term -> fact term_quadruple termloop .)
    AND             reduce using rule 82 (term -> fact term_quadruple termloop .)
    OR              reduce using rule 82 (term -> fact term_quadruple termloop .)
    C_PARENTHESIS   reduce using rule 82 (term -> fact term_quadruple termloop .)
    COMMA           reduce using rule 82 (term -> fact term_quadruple termloop .)
    SEMICOLON       reduce using rule 82 (term -> fact term_quadruple termloop .)
    C_BRACKET       reduce using rule 82 (term -> fact term_quadruple termloop .)


state 159

    (86) divmult -> MULTIPLY .

    O_PARENTHESIS   reduce using rule 86 (divmult -> MULTIPLY .)
    ID              reduce using rule 86 (divmult -> MULTIPLY .)
    INTCONST        reduce using rule 86 (divmult -> MULTIPLY .)
    FLOATCONST      reduce using rule 86 (divmult -> MULTIPLY .)
    STRINGCONST     reduce using rule 86 (divmult -> MULTIPLY .)
    TRUE            reduce using rule 86 (divmult -> MULTIPLY .)
    FALSE           reduce using rule 86 (divmult -> MULTIPLY .)


state 160

    (84) termloop -> divmult . term
    (82) term -> . fact term_quadruple termloop
    (89) fact -> . varconst
    (90) fact -> . O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis
    (97) varconst -> . varconstfunction
    (98) varconst -> . constants
    (99) varconstfunction -> . ID functionorlist
    (104) constants -> . INTCONST add_int_constant_to_dict
    (105) constants -> . FLOATCONST add_float_constant_to_dict
    (106) constants -> . STRINGCONST add_string_constant_to_dict
    (107) constants -> . booleanconst
    (108) booleanconst -> . TRUE add_bool_constant_to_dict
    (109) booleanconst -> . FALSE add_bool_constant_to_dict

    O_PARENTHESIS   shift and go to state 82
    ID              shift and go to state 89
    INTCONST        shift and go to state 87
    FLOATCONST      shift and go to state 81
    STRINGCONST     shift and go to state 84
    TRUE            shift and go to state 83
    FALSE           shift and go to state 92

    term                           shift and go to state 183
    varconstfunction               shift and go to state 85
    varconst                       shift and go to state 93
    constants                      shift and go to state 90
    booleanconst                   shift and go to state 94
    fact                           shift and go to state 96

state 161

    (88) divmult -> MOD .

    O_PARENTHESIS   reduce using rule 88 (divmult -> MOD .)
    ID              reduce using rule 88 (divmult -> MOD .)
    INTCONST        reduce using rule 88 (divmult -> MOD .)
    FLOATCONST      reduce using rule 88 (divmult -> MOD .)
    STRINGCONST     reduce using rule 88 (divmult -> MOD .)
    TRUE            reduce using rule 88 (divmult -> MOD .)
    FALSE           reduce using rule 88 (divmult -> MOD .)


state 162

    (116) whileloop -> WHILE start_while O_PARENTHESIS expression C_PARENTHESIS . condition_while block end_while
    (118) condition_while -> .

    O_BRACKET       reduce using rule 118 (condition_while -> .)

    condition_while                shift and go to state 184

state 163

    (40) writtingloop -> start_printing expression print_quadruple . optionalwritting
    (41) optionalwritting -> . COMMA writtingloop
    (42) optionalwritting -> .

    COMMA           shift and go to state 186
    C_PARENTHESIS   reduce using rule 42 (optionalwritting -> .)

    optionalwritting               shift and go to state 185

state 164

    (37) writting -> PRINT O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON .

    IF              reduce using rule 37 (writting -> PRINT O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON .)
    PRINT           reduce using rule 37 (writting -> PRINT O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON .)
    ID              reduce using rule 37 (writting -> PRINT O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON .)
    LIST            reduce using rule 37 (writting -> PRINT O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON .)
    WHILE           reduce using rule 37 (writting -> PRINT O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON .)
    TIMES           reduce using rule 37 (writting -> PRINT O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON .)
    BOOL            reduce using rule 37 (writting -> PRINT O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON .)
    INT             reduce using rule 37 (writting -> PRINT O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON .)
    FLOAT           reduce using rule 37 (writting -> PRINT O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON .)
    STRING          reduce using rule 37 (writting -> PRINT O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON .)
    C_BRACKET       reduce using rule 37 (writting -> PRINT O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON .)
    RETURN          reduce using rule 37 (writting -> PRINT O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON .)


state 165

    (36) assignation -> var_assign EQUALS add_equals expression equals_quadruple . SEMICOLON

    SEMICOLON       shift and go to state 187


state 166

    (45) normalinit -> type var EQUALS add_equals expression . equals_quadruple SEMICOLON
    (46) equals_quadruple -> .

    SEMICOLON       reduce using rule 46 (equals_quadruple -> .)

    equals_quadruple               shift and go to state 188

state 167

    (95) listaccess -> O_S_BRACKET INTCONST C_S_BRACKET .

    EQUALS          reduce using rule 95 (listaccess -> O_S_BRACKET INTCONST C_S_BRACKET .)


state 168

    (123) functioncall -> ID check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS . SEMICOLON generate_gosub

    SEMICOLON       shift and go to state 189


state 169

    (126) parametersinput -> expression push_type_to_function_options . generate_parameter_quadruple parametersinputloop check_params_order
    (132) generate_parameter_quadruple -> .

    COMMA           reduce using rule 132 (generate_parameter_quadruple -> .)
    C_PARENTHESIS   reduce using rule 132 (generate_parameter_quadruple -> .)

    generate_parameter_quadruple   shift and go to state 190

state 170

    (54) condition -> IF O_PARENTHESIS expression C_PARENTHESIS start_condition . block else end_condition
    (23) block -> . O_BRACKET statutesloop C_BRACKET

    O_BRACKET       shift and go to state 26

    block                          shift and go to state 191

state 171

    (48) listinit -> LIST type var EQUALS list . SEMICOLON

    SEMICOLON       shift and go to state 192


state 172

    (49) list -> O_S_BRACKET . listelements C_S_BRACKET
    (50) listelements -> . constants optionalconstants
    (51) listelements -> .
    (104) constants -> . INTCONST add_int_constant_to_dict
    (105) constants -> . FLOATCONST add_float_constant_to_dict
    (106) constants -> . STRINGCONST add_string_constant_to_dict
    (107) constants -> . booleanconst
    (108) booleanconst -> . TRUE add_bool_constant_to_dict
    (109) booleanconst -> . FALSE add_bool_constant_to_dict

    C_S_BRACKET     reduce using rule 51 (listelements -> .)
    INTCONST        shift and go to state 87
    FLOATCONST      shift and go to state 81
    STRINGCONST     shift and go to state 84
    TRUE            shift and go to state 83
    FALSE           shift and go to state 92

    listelements                   shift and go to state 193
    booleanconst                   shift and go to state 94
    constants                      shift and go to state 194

state 173

    (25) functionreturn -> RETURN O_BRACKET . expression C_BRACKET SEMICOLON
    (60) expression -> . expression2 expressionoptional
    (63) expression2 -> . exp expression2optional
    (76) exp -> . term exp_quadruple exploop
    (82) term -> . fact term_quadruple termloop
    (89) fact -> . varconst
    (90) fact -> . O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis
    (97) varconst -> . varconstfunction
    (98) varconst -> . constants
    (99) varconstfunction -> . ID functionorlist
    (104) constants -> . INTCONST add_int_constant_to_dict
    (105) constants -> . FLOATCONST add_float_constant_to_dict
    (106) constants -> . STRINGCONST add_string_constant_to_dict
    (107) constants -> . booleanconst
    (108) booleanconst -> . TRUE add_bool_constant_to_dict
    (109) booleanconst -> . FALSE add_bool_constant_to_dict

    O_PARENTHESIS   shift and go to state 82
    ID              shift and go to state 89
    INTCONST        shift and go to state 87
    FLOATCONST      shift and go to state 81
    STRINGCONST     shift and go to state 84
    TRUE            shift and go to state 83
    FALSE           shift and go to state 92

    varconstfunction               shift and go to state 85
    exp                            shift and go to state 86
    expression2                    shift and go to state 88
    constants                      shift and go to state 90
    term                           shift and go to state 91
    varconst                       shift and go to state 93
    booleanconst                   shift and go to state 94
    expression                     shift and go to state 195
    fact                           shift and go to state 96

state 174

    (26) functionreturn -> RETURN expression . SEMICOLON

    SEMICOLON       shift and go to state 196


state 175

    (24) functionblock -> O_BRACKET statutesloop functionreturn C_BRACKET .

    FUNCTION        reduce using rule 24 (functionblock -> O_BRACKET statutesloop functionreturn C_BRACKET .)
    MAIN            reduce using rule 24 (functionblock -> O_BRACKET statutesloop functionreturn C_BRACKET .)


state 176

    (90) fact -> O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS . add_c_parenthesis
    (92) add_c_parenthesis -> .

    MULTIPLY        reduce using rule 92 (add_c_parenthesis -> .)
    DIVIDE          reduce using rule 92 (add_c_parenthesis -> .)
    MOD             reduce using rule 92 (add_c_parenthesis -> .)
    SUM             reduce using rule 92 (add_c_parenthesis -> .)
    MINUS           reduce using rule 92 (add_c_parenthesis -> .)
    EQUALITY        reduce using rule 92 (add_c_parenthesis -> .)
    GREATER         reduce using rule 92 (add_c_parenthesis -> .)
    GREATER_EQUAL   reduce using rule 92 (add_c_parenthesis -> .)
    LESS            reduce using rule 92 (add_c_parenthesis -> .)
    LESS_EQUAL      reduce using rule 92 (add_c_parenthesis -> .)
    DIFFERENT       reduce using rule 92 (add_c_parenthesis -> .)
    AND             reduce using rule 92 (add_c_parenthesis -> .)
    OR              reduce using rule 92 (add_c_parenthesis -> .)
    C_PARENTHESIS   reduce using rule 92 (add_c_parenthesis -> .)
    COMMA           reduce using rule 92 (add_c_parenthesis -> .)
    SEMICOLON       reduce using rule 92 (add_c_parenthesis -> .)
    C_BRACKET       reduce using rule 92 (add_c_parenthesis -> .)

    add_c_parenthesis              shift and go to state 197

state 177

    (64) expression2optional -> relop exp relop_quadruple .

    AND             reduce using rule 64 (expression2optional -> relop exp relop_quadruple .)
    OR              reduce using rule 64 (expression2optional -> relop exp relop_quadruple .)
    C_PARENTHESIS   reduce using rule 64 (expression2optional -> relop exp relop_quadruple .)
    COMMA           reduce using rule 64 (expression2optional -> relop exp relop_quadruple .)
    SEMICOLON       reduce using rule 64 (expression2optional -> relop exp relop_quadruple .)
    C_BRACKET       reduce using rule 64 (expression2optional -> relop exp relop_quadruple .)


state 178

    (61) expressionoptional -> logicop expression2 logic_op_quadruple .

    C_PARENTHESIS   reduce using rule 61 (expressionoptional -> logicop expression2 logic_op_quadruple .)
    COMMA           reduce using rule 61 (expressionoptional -> logicop expression2 logic_op_quadruple .)
    SEMICOLON       reduce using rule 61 (expressionoptional -> logicop expression2 logic_op_quadruple .)
    C_BRACKET       reduce using rule 61 (expressionoptional -> logicop expression2 logic_op_quadruple .)


state 179

    (102) functionorlist -> check_function_exists O_PARENTHESIS parametersinput . C_PARENTHESIS generate_gosub

    C_PARENTHESIS   shift and go to state 198


state 180

    (101) functionorlist -> O_S_BRACKET INTCONST C_S_BRACKET .

    MULTIPLY        reduce using rule 101 (functionorlist -> O_S_BRACKET INTCONST C_S_BRACKET .)
    DIVIDE          reduce using rule 101 (functionorlist -> O_S_BRACKET INTCONST C_S_BRACKET .)
    MOD             reduce using rule 101 (functionorlist -> O_S_BRACKET INTCONST C_S_BRACKET .)
    SUM             reduce using rule 101 (functionorlist -> O_S_BRACKET INTCONST C_S_BRACKET .)
    MINUS           reduce using rule 101 (functionorlist -> O_S_BRACKET INTCONST C_S_BRACKET .)
    EQUALITY        reduce using rule 101 (functionorlist -> O_S_BRACKET INTCONST C_S_BRACKET .)
    GREATER         reduce using rule 101 (functionorlist -> O_S_BRACKET INTCONST C_S_BRACKET .)
    GREATER_EQUAL   reduce using rule 101 (functionorlist -> O_S_BRACKET INTCONST C_S_BRACKET .)
    LESS            reduce using rule 101 (functionorlist -> O_S_BRACKET INTCONST C_S_BRACKET .)
    LESS_EQUAL      reduce using rule 101 (functionorlist -> O_S_BRACKET INTCONST C_S_BRACKET .)
    DIFFERENT       reduce using rule 101 (functionorlist -> O_S_BRACKET INTCONST C_S_BRACKET .)
    AND             reduce using rule 101 (functionorlist -> O_S_BRACKET INTCONST C_S_BRACKET .)
    OR              reduce using rule 101 (functionorlist -> O_S_BRACKET INTCONST C_S_BRACKET .)
    C_PARENTHESIS   reduce using rule 101 (functionorlist -> O_S_BRACKET INTCONST C_S_BRACKET .)
    COMMA           reduce using rule 101 (functionorlist -> O_S_BRACKET INTCONST C_S_BRACKET .)
    SEMICOLON       reduce using rule 101 (functionorlist -> O_S_BRACKET INTCONST C_S_BRACKET .)
    C_BRACKET       reduce using rule 101 (functionorlist -> O_S_BRACKET INTCONST C_S_BRACKET .)


state 181

    (78) exploop -> addsub exp .

    EQUALITY        reduce using rule 78 (exploop -> addsub exp .)
    GREATER         reduce using rule 78 (exploop -> addsub exp .)
    GREATER_EQUAL   reduce using rule 78 (exploop -> addsub exp .)
    LESS            reduce using rule 78 (exploop -> addsub exp .)
    LESS_EQUAL      reduce using rule 78 (exploop -> addsub exp .)
    DIFFERENT       reduce using rule 78 (exploop -> addsub exp .)
    AND             reduce using rule 78 (exploop -> addsub exp .)
    OR              reduce using rule 78 (exploop -> addsub exp .)
    C_PARENTHESIS   reduce using rule 78 (exploop -> addsub exp .)
    COMMA           reduce using rule 78 (exploop -> addsub exp .)
    SEMICOLON       reduce using rule 78 (exploop -> addsub exp .)
    C_BRACKET       reduce using rule 78 (exploop -> addsub exp .)


state 182

    (120) timesloop -> TIMES O_PARENTHESIS expression C_PARENTHESIS start_times block . end_times
    (122) end_times -> .

    IF              reduce using rule 122 (end_times -> .)
    PRINT           reduce using rule 122 (end_times -> .)
    ID              reduce using rule 122 (end_times -> .)
    LIST            reduce using rule 122 (end_times -> .)
    WHILE           reduce using rule 122 (end_times -> .)
    TIMES           reduce using rule 122 (end_times -> .)
    BOOL            reduce using rule 122 (end_times -> .)
    INT             reduce using rule 122 (end_times -> .)
    FLOAT           reduce using rule 122 (end_times -> .)
    STRING          reduce using rule 122 (end_times -> .)
    C_BRACKET       reduce using rule 122 (end_times -> .)
    RETURN          reduce using rule 122 (end_times -> .)

    end_times                      shift and go to state 199

state 183

    (84) termloop -> divmult term .

    SUM             reduce using rule 84 (termloop -> divmult term .)
    MINUS           reduce using rule 84 (termloop -> divmult term .)
    EQUALITY        reduce using rule 84 (termloop -> divmult term .)
    GREATER         reduce using rule 84 (termloop -> divmult term .)
    GREATER_EQUAL   reduce using rule 84 (termloop -> divmult term .)
    LESS            reduce using rule 84 (termloop -> divmult term .)
    LESS_EQUAL      reduce using rule 84 (termloop -> divmult term .)
    DIFFERENT       reduce using rule 84 (termloop -> divmult term .)
    AND             reduce using rule 84 (termloop -> divmult term .)
    OR              reduce using rule 84 (termloop -> divmult term .)
    C_PARENTHESIS   reduce using rule 84 (termloop -> divmult term .)
    COMMA           reduce using rule 84 (termloop -> divmult term .)
    SEMICOLON       reduce using rule 84 (termloop -> divmult term .)
    C_BRACKET       reduce using rule 84 (termloop -> divmult term .)


state 184

    (116) whileloop -> WHILE start_while O_PARENTHESIS expression C_PARENTHESIS condition_while . block end_while
    (23) block -> . O_BRACKET statutesloop C_BRACKET

    O_BRACKET       shift and go to state 26

    block                          shift and go to state 200

state 185

    (40) writtingloop -> start_printing expression print_quadruple optionalwritting .

    C_PARENTHESIS   reduce using rule 40 (writtingloop -> start_printing expression print_quadruple optionalwritting .)


state 186

    (41) optionalwritting -> COMMA . writtingloop
    (40) writtingloop -> . start_printing expression print_quadruple optionalwritting
    (38) start_printing -> .

    O_PARENTHESIS   reduce using rule 38 (start_printing -> .)
    ID              reduce using rule 38 (start_printing -> .)
    INTCONST        reduce using rule 38 (start_printing -> .)
    FLOATCONST      reduce using rule 38 (start_printing -> .)
    STRINGCONST     reduce using rule 38 (start_printing -> .)
    TRUE            reduce using rule 38 (start_printing -> .)
    FALSE           reduce using rule 38 (start_printing -> .)

    writtingloop                   shift and go to state 201
    start_printing                 shift and go to state 98

state 187

    (36) assignation -> var_assign EQUALS add_equals expression equals_quadruple SEMICOLON .

    IF              reduce using rule 36 (assignation -> var_assign EQUALS add_equals expression equals_quadruple SEMICOLON .)
    PRINT           reduce using rule 36 (assignation -> var_assign EQUALS add_equals expression equals_quadruple SEMICOLON .)
    ID              reduce using rule 36 (assignation -> var_assign EQUALS add_equals expression equals_quadruple SEMICOLON .)
    LIST            reduce using rule 36 (assignation -> var_assign EQUALS add_equals expression equals_quadruple SEMICOLON .)
    WHILE           reduce using rule 36 (assignation -> var_assign EQUALS add_equals expression equals_quadruple SEMICOLON .)
    TIMES           reduce using rule 36 (assignation -> var_assign EQUALS add_equals expression equals_quadruple SEMICOLON .)
    BOOL            reduce using rule 36 (assignation -> var_assign EQUALS add_equals expression equals_quadruple SEMICOLON .)
    INT             reduce using rule 36 (assignation -> var_assign EQUALS add_equals expression equals_quadruple SEMICOLON .)
    FLOAT           reduce using rule 36 (assignation -> var_assign EQUALS add_equals expression equals_quadruple SEMICOLON .)
    STRING          reduce using rule 36 (assignation -> var_assign EQUALS add_equals expression equals_quadruple SEMICOLON .)
    RETURN          reduce using rule 36 (assignation -> var_assign EQUALS add_equals expression equals_quadruple SEMICOLON .)
    C_BRACKET       reduce using rule 36 (assignation -> var_assign EQUALS add_equals expression equals_quadruple SEMICOLON .)


state 188

    (45) normalinit -> type var EQUALS add_equals expression equals_quadruple . SEMICOLON

    SEMICOLON       shift and go to state 202


state 189

    (123) functioncall -> ID check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON . generate_gosub
    (125) generate_gosub -> .

    IF              reduce using rule 125 (generate_gosub -> .)
    PRINT           reduce using rule 125 (generate_gosub -> .)
    ID              reduce using rule 125 (generate_gosub -> .)
    LIST            reduce using rule 125 (generate_gosub -> .)
    WHILE           reduce using rule 125 (generate_gosub -> .)
    TIMES           reduce using rule 125 (generate_gosub -> .)
    BOOL            reduce using rule 125 (generate_gosub -> .)
    INT             reduce using rule 125 (generate_gosub -> .)
    FLOAT           reduce using rule 125 (generate_gosub -> .)
    STRING          reduce using rule 125 (generate_gosub -> .)
    C_BRACKET       reduce using rule 125 (generate_gosub -> .)
    RETURN          reduce using rule 125 (generate_gosub -> .)

    generate_gosub                 shift and go to state 203

state 190

    (126) parametersinput -> expression push_type_to_function_options generate_parameter_quadruple . parametersinputloop check_params_order
    (128) parametersinputloop -> . COMMA expression push_type_to_function_options generate_parameter_quadruple parametersinputloop
    (129) parametersinputloop -> .

    COMMA           shift and go to state 205
    C_PARENTHESIS   reduce using rule 129 (parametersinputloop -> .)

    parametersinputloop            shift and go to state 204

state 191

    (54) condition -> IF O_PARENTHESIS expression C_PARENTHESIS start_condition block . else end_condition
    (55) else -> . ELSE else_condition block
    (56) else -> .

    ELSE            shift and go to state 206
    IF              reduce using rule 56 (else -> .)
    PRINT           reduce using rule 56 (else -> .)
    ID              reduce using rule 56 (else -> .)
    LIST            reduce using rule 56 (else -> .)
    WHILE           reduce using rule 56 (else -> .)
    TIMES           reduce using rule 56 (else -> .)
    BOOL            reduce using rule 56 (else -> .)
    INT             reduce using rule 56 (else -> .)
    FLOAT           reduce using rule 56 (else -> .)
    STRING          reduce using rule 56 (else -> .)
    C_BRACKET       reduce using rule 56 (else -> .)
    RETURN          reduce using rule 56 (else -> .)

    else                           shift and go to state 207

state 192

    (48) listinit -> LIST type var EQUALS list SEMICOLON .

    IF              reduce using rule 48 (listinit -> LIST type var EQUALS list SEMICOLON .)
    PRINT           reduce using rule 48 (listinit -> LIST type var EQUALS list SEMICOLON .)
    ID              reduce using rule 48 (listinit -> LIST type var EQUALS list SEMICOLON .)
    LIST            reduce using rule 48 (listinit -> LIST type var EQUALS list SEMICOLON .)
    WHILE           reduce using rule 48 (listinit -> LIST type var EQUALS list SEMICOLON .)
    TIMES           reduce using rule 48 (listinit -> LIST type var EQUALS list SEMICOLON .)
    BOOL            reduce using rule 48 (listinit -> LIST type var EQUALS list SEMICOLON .)
    INT             reduce using rule 48 (listinit -> LIST type var EQUALS list SEMICOLON .)
    FLOAT           reduce using rule 48 (listinit -> LIST type var EQUALS list SEMICOLON .)
    STRING          reduce using rule 48 (listinit -> LIST type var EQUALS list SEMICOLON .)
    C_BRACKET       reduce using rule 48 (listinit -> LIST type var EQUALS list SEMICOLON .)
    RETURN          reduce using rule 48 (listinit -> LIST type var EQUALS list SEMICOLON .)


state 193

    (49) list -> O_S_BRACKET listelements . C_S_BRACKET

    C_S_BRACKET     shift and go to state 208


state 194

    (50) listelements -> constants . optionalconstants
    (52) optionalconstants -> . COMMA constants optionalconstants
    (53) optionalconstants -> .

    COMMA           shift and go to state 210
    C_S_BRACKET     reduce using rule 53 (optionalconstants -> .)

    optionalconstants              shift and go to state 209

state 195

    (25) functionreturn -> RETURN O_BRACKET expression . C_BRACKET SEMICOLON

    C_BRACKET       shift and go to state 211


state 196

    (26) functionreturn -> RETURN expression SEMICOLON .

    C_BRACKET       reduce using rule 26 (functionreturn -> RETURN expression SEMICOLON .)


state 197

    (90) fact -> O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis .

    MULTIPLY        reduce using rule 90 (fact -> O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis .)
    DIVIDE          reduce using rule 90 (fact -> O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis .)
    MOD             reduce using rule 90 (fact -> O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis .)
    SUM             reduce using rule 90 (fact -> O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis .)
    MINUS           reduce using rule 90 (fact -> O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis .)
    EQUALITY        reduce using rule 90 (fact -> O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis .)
    GREATER         reduce using rule 90 (fact -> O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis .)
    GREATER_EQUAL   reduce using rule 90 (fact -> O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis .)
    LESS            reduce using rule 90 (fact -> O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis .)
    LESS_EQUAL      reduce using rule 90 (fact -> O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis .)
    DIFFERENT       reduce using rule 90 (fact -> O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis .)
    AND             reduce using rule 90 (fact -> O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis .)
    OR              reduce using rule 90 (fact -> O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis .)
    COMMA           reduce using rule 90 (fact -> O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis .)
    C_PARENTHESIS   reduce using rule 90 (fact -> O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis .)
    SEMICOLON       reduce using rule 90 (fact -> O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis .)
    C_BRACKET       reduce using rule 90 (fact -> O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis .)


state 198

    (102) functionorlist -> check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS . generate_gosub
    (125) generate_gosub -> .

    MULTIPLY        reduce using rule 125 (generate_gosub -> .)
    DIVIDE          reduce using rule 125 (generate_gosub -> .)
    MOD             reduce using rule 125 (generate_gosub -> .)
    SUM             reduce using rule 125 (generate_gosub -> .)
    MINUS           reduce using rule 125 (generate_gosub -> .)
    EQUALITY        reduce using rule 125 (generate_gosub -> .)
    GREATER         reduce using rule 125 (generate_gosub -> .)
    GREATER_EQUAL   reduce using rule 125 (generate_gosub -> .)
    LESS            reduce using rule 125 (generate_gosub -> .)
    LESS_EQUAL      reduce using rule 125 (generate_gosub -> .)
    DIFFERENT       reduce using rule 125 (generate_gosub -> .)
    AND             reduce using rule 125 (generate_gosub -> .)
    OR              reduce using rule 125 (generate_gosub -> .)
    C_PARENTHESIS   reduce using rule 125 (generate_gosub -> .)
    COMMA           reduce using rule 125 (generate_gosub -> .)
    SEMICOLON       reduce using rule 125 (generate_gosub -> .)
    C_BRACKET       reduce using rule 125 (generate_gosub -> .)

    generate_gosub                 shift and go to state 212

state 199

    (120) timesloop -> TIMES O_PARENTHESIS expression C_PARENTHESIS start_times block end_times .

    IF              reduce using rule 120 (timesloop -> TIMES O_PARENTHESIS expression C_PARENTHESIS start_times block end_times .)
    PRINT           reduce using rule 120 (timesloop -> TIMES O_PARENTHESIS expression C_PARENTHESIS start_times block end_times .)
    ID              reduce using rule 120 (timesloop -> TIMES O_PARENTHESIS expression C_PARENTHESIS start_times block end_times .)
    LIST            reduce using rule 120 (timesloop -> TIMES O_PARENTHESIS expression C_PARENTHESIS start_times block end_times .)
    WHILE           reduce using rule 120 (timesloop -> TIMES O_PARENTHESIS expression C_PARENTHESIS start_times block end_times .)
    TIMES           reduce using rule 120 (timesloop -> TIMES O_PARENTHESIS expression C_PARENTHESIS start_times block end_times .)
    BOOL            reduce using rule 120 (timesloop -> TIMES O_PARENTHESIS expression C_PARENTHESIS start_times block end_times .)
    INT             reduce using rule 120 (timesloop -> TIMES O_PARENTHESIS expression C_PARENTHESIS start_times block end_times .)
    FLOAT           reduce using rule 120 (timesloop -> TIMES O_PARENTHESIS expression C_PARENTHESIS start_times block end_times .)
    STRING          reduce using rule 120 (timesloop -> TIMES O_PARENTHESIS expression C_PARENTHESIS start_times block end_times .)
    C_BRACKET       reduce using rule 120 (timesloop -> TIMES O_PARENTHESIS expression C_PARENTHESIS start_times block end_times .)
    RETURN          reduce using rule 120 (timesloop -> TIMES O_PARENTHESIS expression C_PARENTHESIS start_times block end_times .)


state 200

    (116) whileloop -> WHILE start_while O_PARENTHESIS expression C_PARENTHESIS condition_while block . end_while
    (119) end_while -> .

    IF              reduce using rule 119 (end_while -> .)
    PRINT           reduce using rule 119 (end_while -> .)
    ID              reduce using rule 119 (end_while -> .)
    LIST            reduce using rule 119 (end_while -> .)
    WHILE           reduce using rule 119 (end_while -> .)
    TIMES           reduce using rule 119 (end_while -> .)
    BOOL            reduce using rule 119 (end_while -> .)
    INT             reduce using rule 119 (end_while -> .)
    FLOAT           reduce using rule 119 (end_while -> .)
    STRING          reduce using rule 119 (end_while -> .)
    C_BRACKET       reduce using rule 119 (end_while -> .)
    RETURN          reduce using rule 119 (end_while -> .)

    end_while                      shift and go to state 213

state 201

    (41) optionalwritting -> COMMA writtingloop .

    C_PARENTHESIS   reduce using rule 41 (optionalwritting -> COMMA writtingloop .)


state 202

    (45) normalinit -> type var EQUALS add_equals expression equals_quadruple SEMICOLON .

    IF              reduce using rule 45 (normalinit -> type var EQUALS add_equals expression equals_quadruple SEMICOLON .)
    PRINT           reduce using rule 45 (normalinit -> type var EQUALS add_equals expression equals_quadruple SEMICOLON .)
    ID              reduce using rule 45 (normalinit -> type var EQUALS add_equals expression equals_quadruple SEMICOLON .)
    LIST            reduce using rule 45 (normalinit -> type var EQUALS add_equals expression equals_quadruple SEMICOLON .)
    WHILE           reduce using rule 45 (normalinit -> type var EQUALS add_equals expression equals_quadruple SEMICOLON .)
    TIMES           reduce using rule 45 (normalinit -> type var EQUALS add_equals expression equals_quadruple SEMICOLON .)
    BOOL            reduce using rule 45 (normalinit -> type var EQUALS add_equals expression equals_quadruple SEMICOLON .)
    INT             reduce using rule 45 (normalinit -> type var EQUALS add_equals expression equals_quadruple SEMICOLON .)
    FLOAT           reduce using rule 45 (normalinit -> type var EQUALS add_equals expression equals_quadruple SEMICOLON .)
    STRING          reduce using rule 45 (normalinit -> type var EQUALS add_equals expression equals_quadruple SEMICOLON .)
    RETURN          reduce using rule 45 (normalinit -> type var EQUALS add_equals expression equals_quadruple SEMICOLON .)
    C_BRACKET       reduce using rule 45 (normalinit -> type var EQUALS add_equals expression equals_quadruple SEMICOLON .)


state 203

    (123) functioncall -> ID check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON generate_gosub .

    IF              reduce using rule 123 (functioncall -> ID check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON generate_gosub .)
    PRINT           reduce using rule 123 (functioncall -> ID check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON generate_gosub .)
    ID              reduce using rule 123 (functioncall -> ID check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON generate_gosub .)
    LIST            reduce using rule 123 (functioncall -> ID check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON generate_gosub .)
    WHILE           reduce using rule 123 (functioncall -> ID check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON generate_gosub .)
    TIMES           reduce using rule 123 (functioncall -> ID check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON generate_gosub .)
    BOOL            reduce using rule 123 (functioncall -> ID check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON generate_gosub .)
    INT             reduce using rule 123 (functioncall -> ID check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON generate_gosub .)
    FLOAT           reduce using rule 123 (functioncall -> ID check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON generate_gosub .)
    STRING          reduce using rule 123 (functioncall -> ID check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON generate_gosub .)
    C_BRACKET       reduce using rule 123 (functioncall -> ID check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON generate_gosub .)
    RETURN          reduce using rule 123 (functioncall -> ID check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON generate_gosub .)


state 204

    (126) parametersinput -> expression push_type_to_function_options generate_parameter_quadruple parametersinputloop . check_params_order
    (131) check_params_order -> .

    C_PARENTHESIS   reduce using rule 131 (check_params_order -> .)

    check_params_order             shift and go to state 214

state 205

    (128) parametersinputloop -> COMMA . expression push_type_to_function_options generate_parameter_quadruple parametersinputloop
    (60) expression -> . expression2 expressionoptional
    (63) expression2 -> . exp expression2optional
    (76) exp -> . term exp_quadruple exploop
    (82) term -> . fact term_quadruple termloop
    (89) fact -> . varconst
    (90) fact -> . O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis
    (97) varconst -> . varconstfunction
    (98) varconst -> . constants
    (99) varconstfunction -> . ID functionorlist
    (104) constants -> . INTCONST add_int_constant_to_dict
    (105) constants -> . FLOATCONST add_float_constant_to_dict
    (106) constants -> . STRINGCONST add_string_constant_to_dict
    (107) constants -> . booleanconst
    (108) booleanconst -> . TRUE add_bool_constant_to_dict
    (109) booleanconst -> . FALSE add_bool_constant_to_dict

    O_PARENTHESIS   shift and go to state 82
    ID              shift and go to state 89
    INTCONST        shift and go to state 87
    FLOATCONST      shift and go to state 81
    STRINGCONST     shift and go to state 84
    TRUE            shift and go to state 83
    FALSE           shift and go to state 92

    varconstfunction               shift and go to state 85
    exp                            shift and go to state 86
    expression2                    shift and go to state 88
    constants                      shift and go to state 90
    term                           shift and go to state 91
    varconst                       shift and go to state 93
    booleanconst                   shift and go to state 94
    expression                     shift and go to state 215
    fact                           shift and go to state 96

state 206

    (55) else -> ELSE . else_condition block
    (58) else_condition -> .

    O_BRACKET       reduce using rule 58 (else_condition -> .)

    else_condition                 shift and go to state 216

state 207

    (54) condition -> IF O_PARENTHESIS expression C_PARENTHESIS start_condition block else . end_condition
    (59) end_condition -> .

    IF              reduce using rule 59 (end_condition -> .)
    PRINT           reduce using rule 59 (end_condition -> .)
    ID              reduce using rule 59 (end_condition -> .)
    LIST            reduce using rule 59 (end_condition -> .)
    WHILE           reduce using rule 59 (end_condition -> .)
    TIMES           reduce using rule 59 (end_condition -> .)
    BOOL            reduce using rule 59 (end_condition -> .)
    INT             reduce using rule 59 (end_condition -> .)
    FLOAT           reduce using rule 59 (end_condition -> .)
    STRING          reduce using rule 59 (end_condition -> .)
    C_BRACKET       reduce using rule 59 (end_condition -> .)
    RETURN          reduce using rule 59 (end_condition -> .)

    end_condition                  shift and go to state 217

state 208

    (49) list -> O_S_BRACKET listelements C_S_BRACKET .

    SEMICOLON       reduce using rule 49 (list -> O_S_BRACKET listelements C_S_BRACKET .)


state 209

    (50) listelements -> constants optionalconstants .

    C_S_BRACKET     reduce using rule 50 (listelements -> constants optionalconstants .)


state 210

    (52) optionalconstants -> COMMA . constants optionalconstants
    (104) constants -> . INTCONST add_int_constant_to_dict
    (105) constants -> . FLOATCONST add_float_constant_to_dict
    (106) constants -> . STRINGCONST add_string_constant_to_dict
    (107) constants -> . booleanconst
    (108) booleanconst -> . TRUE add_bool_constant_to_dict
    (109) booleanconst -> . FALSE add_bool_constant_to_dict

    INTCONST        shift and go to state 87
    FLOATCONST      shift and go to state 81
    STRINGCONST     shift and go to state 84
    TRUE            shift and go to state 83
    FALSE           shift and go to state 92

    booleanconst                   shift and go to state 94
    constants                      shift and go to state 218

state 211

    (25) functionreturn -> RETURN O_BRACKET expression C_BRACKET . SEMICOLON

    SEMICOLON       shift and go to state 219


state 212

    (102) functionorlist -> check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS generate_gosub .

    MULTIPLY        reduce using rule 102 (functionorlist -> check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS generate_gosub .)
    DIVIDE          reduce using rule 102 (functionorlist -> check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS generate_gosub .)
    MOD             reduce using rule 102 (functionorlist -> check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS generate_gosub .)
    SUM             reduce using rule 102 (functionorlist -> check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS generate_gosub .)
    MINUS           reduce using rule 102 (functionorlist -> check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS generate_gosub .)
    EQUALITY        reduce using rule 102 (functionorlist -> check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS generate_gosub .)
    GREATER         reduce using rule 102 (functionorlist -> check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS generate_gosub .)
    GREATER_EQUAL   reduce using rule 102 (functionorlist -> check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS generate_gosub .)
    LESS            reduce using rule 102 (functionorlist -> check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS generate_gosub .)
    LESS_EQUAL      reduce using rule 102 (functionorlist -> check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS generate_gosub .)
    DIFFERENT       reduce using rule 102 (functionorlist -> check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS generate_gosub .)
    AND             reduce using rule 102 (functionorlist -> check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS generate_gosub .)
    OR              reduce using rule 102 (functionorlist -> check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS generate_gosub .)
    C_PARENTHESIS   reduce using rule 102 (functionorlist -> check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS generate_gosub .)
    COMMA           reduce using rule 102 (functionorlist -> check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS generate_gosub .)
    SEMICOLON       reduce using rule 102 (functionorlist -> check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS generate_gosub .)
    C_BRACKET       reduce using rule 102 (functionorlist -> check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS generate_gosub .)


state 213

    (116) whileloop -> WHILE start_while O_PARENTHESIS expression C_PARENTHESIS condition_while block end_while .

    IF              reduce using rule 116 (whileloop -> WHILE start_while O_PARENTHESIS expression C_PARENTHESIS condition_while block end_while .)
    PRINT           reduce using rule 116 (whileloop -> WHILE start_while O_PARENTHESIS expression C_PARENTHESIS condition_while block end_while .)
    ID              reduce using rule 116 (whileloop -> WHILE start_while O_PARENTHESIS expression C_PARENTHESIS condition_while block end_while .)
    LIST            reduce using rule 116 (whileloop -> WHILE start_while O_PARENTHESIS expression C_PARENTHESIS condition_while block end_while .)
    WHILE           reduce using rule 116 (whileloop -> WHILE start_while O_PARENTHESIS expression C_PARENTHESIS condition_while block end_while .)
    TIMES           reduce using rule 116 (whileloop -> WHILE start_while O_PARENTHESIS expression C_PARENTHESIS condition_while block end_while .)
    BOOL            reduce using rule 116 (whileloop -> WHILE start_while O_PARENTHESIS expression C_PARENTHESIS condition_while block end_while .)
    INT             reduce using rule 116 (whileloop -> WHILE start_while O_PARENTHESIS expression C_PARENTHESIS condition_while block end_while .)
    FLOAT           reduce using rule 116 (whileloop -> WHILE start_while O_PARENTHESIS expression C_PARENTHESIS condition_while block end_while .)
    STRING          reduce using rule 116 (whileloop -> WHILE start_while O_PARENTHESIS expression C_PARENTHESIS condition_while block end_while .)
    C_BRACKET       reduce using rule 116 (whileloop -> WHILE start_while O_PARENTHESIS expression C_PARENTHESIS condition_while block end_while .)
    RETURN          reduce using rule 116 (whileloop -> WHILE start_while O_PARENTHESIS expression C_PARENTHESIS condition_while block end_while .)


state 214

    (126) parametersinput -> expression push_type_to_function_options generate_parameter_quadruple parametersinputloop check_params_order .

    C_PARENTHESIS   reduce using rule 126 (parametersinput -> expression push_type_to_function_options generate_parameter_quadruple parametersinputloop check_params_order .)


state 215

    (128) parametersinputloop -> COMMA expression . push_type_to_function_options generate_parameter_quadruple parametersinputloop
    (130) push_type_to_function_options -> .

    COMMA           reduce using rule 130 (push_type_to_function_options -> .)
    C_PARENTHESIS   reduce using rule 130 (push_type_to_function_options -> .)

    push_type_to_function_options  shift and go to state 220

state 216

    (55) else -> ELSE else_condition . block
    (23) block -> . O_BRACKET statutesloop C_BRACKET

    O_BRACKET       shift and go to state 26

    block                          shift and go to state 221

state 217

    (54) condition -> IF O_PARENTHESIS expression C_PARENTHESIS start_condition block else end_condition .

    IF              reduce using rule 54 (condition -> IF O_PARENTHESIS expression C_PARENTHESIS start_condition block else end_condition .)
    PRINT           reduce using rule 54 (condition -> IF O_PARENTHESIS expression C_PARENTHESIS start_condition block else end_condition .)
    ID              reduce using rule 54 (condition -> IF O_PARENTHESIS expression C_PARENTHESIS start_condition block else end_condition .)
    LIST            reduce using rule 54 (condition -> IF O_PARENTHESIS expression C_PARENTHESIS start_condition block else end_condition .)
    WHILE           reduce using rule 54 (condition -> IF O_PARENTHESIS expression C_PARENTHESIS start_condition block else end_condition .)
    TIMES           reduce using rule 54 (condition -> IF O_PARENTHESIS expression C_PARENTHESIS start_condition block else end_condition .)
    BOOL            reduce using rule 54 (condition -> IF O_PARENTHESIS expression C_PARENTHESIS start_condition block else end_condition .)
    INT             reduce using rule 54 (condition -> IF O_PARENTHESIS expression C_PARENTHESIS start_condition block else end_condition .)
    FLOAT           reduce using rule 54 (condition -> IF O_PARENTHESIS expression C_PARENTHESIS start_condition block else end_condition .)
    STRING          reduce using rule 54 (condition -> IF O_PARENTHESIS expression C_PARENTHESIS start_condition block else end_condition .)
    C_BRACKET       reduce using rule 54 (condition -> IF O_PARENTHESIS expression C_PARENTHESIS start_condition block else end_condition .)
    RETURN          reduce using rule 54 (condition -> IF O_PARENTHESIS expression C_PARENTHESIS start_condition block else end_condition .)


state 218

    (52) optionalconstants -> COMMA constants . optionalconstants
    (52) optionalconstants -> . COMMA constants optionalconstants
    (53) optionalconstants -> .

    COMMA           shift and go to state 210
    C_S_BRACKET     reduce using rule 53 (optionalconstants -> .)

    optionalconstants              shift and go to state 222

state 219

    (25) functionreturn -> RETURN O_BRACKET expression C_BRACKET SEMICOLON .

    C_BRACKET       reduce using rule 25 (functionreturn -> RETURN O_BRACKET expression C_BRACKET SEMICOLON .)


state 220

    (128) parametersinputloop -> COMMA expression push_type_to_function_options . generate_parameter_quadruple parametersinputloop
    (132) generate_parameter_quadruple -> .

    COMMA           reduce using rule 132 (generate_parameter_quadruple -> .)
    C_PARENTHESIS   reduce using rule 132 (generate_parameter_quadruple -> .)

    generate_parameter_quadruple   shift and go to state 223

state 221

    (55) else -> ELSE else_condition block .

    IF              reduce using rule 55 (else -> ELSE else_condition block .)
    PRINT           reduce using rule 55 (else -> ELSE else_condition block .)
    ID              reduce using rule 55 (else -> ELSE else_condition block .)
    LIST            reduce using rule 55 (else -> ELSE else_condition block .)
    WHILE           reduce using rule 55 (else -> ELSE else_condition block .)
    TIMES           reduce using rule 55 (else -> ELSE else_condition block .)
    BOOL            reduce using rule 55 (else -> ELSE else_condition block .)
    INT             reduce using rule 55 (else -> ELSE else_condition block .)
    FLOAT           reduce using rule 55 (else -> ELSE else_condition block .)
    STRING          reduce using rule 55 (else -> ELSE else_condition block .)
    C_BRACKET       reduce using rule 55 (else -> ELSE else_condition block .)
    RETURN          reduce using rule 55 (else -> ELSE else_condition block .)


state 222

    (52) optionalconstants -> COMMA constants optionalconstants .

    C_S_BRACKET     reduce using rule 52 (optionalconstants -> COMMA constants optionalconstants .)


state 223

    (128) parametersinputloop -> COMMA expression push_type_to_function_options generate_parameter_quadruple . parametersinputloop
    (128) parametersinputloop -> . COMMA expression push_type_to_function_options generate_parameter_quadruple parametersinputloop
    (129) parametersinputloop -> .

    COMMA           shift and go to state 205
    C_PARENTHESIS   reduce using rule 129 (parametersinputloop -> .)

    parametersinputloop            shift and go to state 224

state 224

    (128) parametersinputloop -> COMMA expression push_type_to_function_options generate_parameter_quadruple parametersinputloop .

    C_PARENTHESIS   reduce using rule 128 (parametersinputloop -> COMMA expression push_type_to_function_options generate_parameter_quadruple parametersinputloop .)

