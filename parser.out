Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> generate_main_goto functionloop fill_main_goto main generate_end_all global_memory_needed
Rule 2     global_memory_needed -> <empty>
Rule 3     generate_end_all -> <empty>
Rule 4     generate_main_goto -> <empty>
Rule 5     fill_main_goto -> <empty>
Rule 6     main -> MAIN start_main block
Rule 7     start_main -> <empty>
Rule 8     functionloop -> function functionloop
Rule 9     functionloop -> <empty>
Rule 10    function -> FUNCTION function_head function_end
Rule 11    add_function_init_to_dict -> <empty>
Rule 12    function_head -> VOID add_function_type_to_options function_def
Rule 13    function_head -> BOOL add_function_type_to_options function_with_return_def
Rule 14    function_head -> INT add_function_type_to_options function_with_return_def
Rule 15    function_head -> FLOAT add_function_type_to_options function_with_return_def
Rule 16    function_head -> STRING add_function_type_to_options function_with_return_def
Rule 17    add_function_type_to_options -> <empty>
Rule 18    function_with_return_def -> ID add_function_id_to_options add_function_to_global_variables check_current_quadruple O_PARENTHESIS parameters C_PARENTHESIS add_function_init_to_dict functionblock
Rule 19    add_function_to_global_variables -> <empty>
Rule 20    function_def -> ID add_function_id_to_options check_current_quadruple O_PARENTHESIS parameters C_PARENTHESIS add_function_init_to_dict block
Rule 21    check_current_quadruple -> <empty>
Rule 22    add_function_id_to_options -> <empty>
Rule 23    type -> BOOL
Rule 24    type -> INT
Rule 25    type -> FLOAT
Rule 26    type -> STRING
Rule 27    parametertype -> BOOL
Rule 28    parametertype -> INT
Rule 29    parametertype -> FLOAT
Rule 30    parametertype -> STRING
Rule 31    block -> O_BRACKET statutesloop C_BRACKET
Rule 32    functionblock -> O_BRACKET functionstatutesloop C_BRACKET
Rule 33    functionreturn -> RETURN add_function_var_to_stack expression SEMICOLON
Rule 34    add_function_var_to_stack -> <empty>
Rule 35    function_end -> <empty>
Rule 36    statutesloop -> statute statutesloop
Rule 37    statutesloop -> <empty>
Rule 38    functionstatutesloop -> functionstatute functionstatutesloop
Rule 39    functionstatutesloop -> functionreturn
Rule 40    functionstatutesloop -> <empty>
Rule 41    statute -> init
Rule 42    statute -> condition
Rule 43    statute -> writting
Rule 44    statute -> loop
Rule 45    statute -> assignation
Rule 46    statute -> functioncall
Rule 47    functionstatute -> init
Rule 48    functionstatute -> functioncondition
Rule 49    functionstatute -> writting
Rule 50    functionstatute -> functionloops
Rule 51    functionstatute -> assignation
Rule 52    functionstatute -> functioncall
Rule 53    assignation -> var_assign EQUALS add_equals expression equals_quadruple SEMICOLON
Rule 54    writting -> PRINT O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON
Rule 55    start_printing -> <empty>
Rule 56    print_quadruple -> <empty>
Rule 57    writtingloop -> start_printing expression print_quadruple optionalwritting
Rule 58    optionalwritting -> COMMA writtingloop
Rule 59    optionalwritting -> <empty>
Rule 60    init -> listinit
Rule 61    init -> normalinit
Rule 62    normalinit -> type var EQUALS add_equals expression equals_quadruple SEMICOLON
Rule 63    equals_quadruple -> <empty>
Rule 64    add_equals -> <empty>
Rule 65    listinit -> LIST type ID EQUALS start_list list SEMICOLON
Rule 66    list -> O_S_BRACKET listelements C_S_BRACKET
Rule 67    start_list -> <empty>
Rule 68    listelements -> expression generate_list_assignation optionallist
Rule 69    optionallist -> COMMA expression generate_list_assignation optionallist
Rule 70    optionallist -> <empty>
Rule 71    generate_list_assignation -> <empty>
Rule 72    condition -> IF O_PARENTHESIS expression C_PARENTHESIS start_condition block else end_condition
Rule 73    functioncondition -> IF O_PARENTHESIS expression C_PARENTHESIS start_condition functionblock functionelse end_condition
Rule 74    else -> ELSE else_condition block
Rule 75    else -> <empty>
Rule 76    functionelse -> ELSE else_condition functionblock
Rule 77    functionelse -> <empty>
Rule 78    start_condition -> <empty>
Rule 79    else_condition -> <empty>
Rule 80    end_condition -> <empty>
Rule 81    expression -> expression2 expressionoptional
Rule 82    expressionoptional -> logicop expression2 logic_op_quadruple
Rule 83    expressionoptional -> <empty>
Rule 84    expression2 -> exp expression2optional
Rule 85    expression2optional -> relop exp relop_quadruple
Rule 86    expression2optional -> <empty>
Rule 87    logicop -> AND
Rule 88    logicop -> OR
Rule 89    logic_op_quadruple -> <empty>
Rule 90    relop -> EQUALITY
Rule 91    relop -> GREATER
Rule 92    relop -> GREATER_EQUAL
Rule 93    relop -> LESS
Rule 94    relop -> LESS_EQUAL
Rule 95    relop -> DIFFERENT
Rule 96    relop_quadruple -> <empty>
Rule 97    exp -> term exp_quadruple exploop
Rule 98    exp_quadruple -> <empty>
Rule 99    exploop -> addsub exp
Rule 100   exploop -> <empty>
Rule 101   addsub -> SUM
Rule 102   addsub -> MINUS
Rule 103   term -> fact term_quadruple termloop
Rule 104   term_quadruple -> <empty>
Rule 105   termloop -> divmult term
Rule 106   termloop -> <empty>
Rule 107   divmult -> MULTIPLY
Rule 108   divmult -> DIVIDE
Rule 109   divmult -> MOD
Rule 110   fact -> varconst
Rule 111   fact -> O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis
Rule 112   add_o_parenthesis -> <empty>
Rule 113   add_c_parenthesis -> <empty>
Rule 114   var_assign -> ID listaccess
Rule 115   var -> ID
Rule 116   listaccess -> add_list_variable add_o_parenthesis O_S_BRACKET expression C_S_BRACKET add_c_parenthesis add_list_index_to_stack
Rule 117   listaccess -> add_to_stack
Rule 118   add_list_index_to_stack -> <empty>
Rule 119   varconst -> varconstfunction
Rule 120   varconst -> constants
Rule 121   varconstfunction -> ID functionorlist
Rule 122   add_to_stack -> <empty>
Rule 123   functionorlist -> add_list_variable add_o_parenthesis O_S_BRACKET expression C_S_BRACKET add_c_parenthesis add_list_index_to_stack
Rule 124   functionorlist -> add_o_parenthesis check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS generate_gosub add_c_parenthesis
Rule 125   functionorlist -> add_to_stack
Rule 126   add_list_variable -> <empty>
Rule 127   constants -> INTCONST add_int_constant_to_dict
Rule 128   constants -> FLOATCONST add_float_constant_to_dict
Rule 129   constants -> STRINGCONST add_string_constant_to_dict
Rule 130   constants -> booleanconst
Rule 131   booleanconst -> TRUE add_bool_constant_to_dict
Rule 132   booleanconst -> FALSE add_bool_constant_to_dict
Rule 133   add_int_constant_to_dict -> <empty>
Rule 134   add_float_constant_to_dict -> <empty>
Rule 135   add_string_constant_to_dict -> <empty>
Rule 136   add_bool_constant_to_dict -> <empty>
Rule 137   loop -> whileloop
Rule 138   loop -> timesloop
Rule 139   functionloops -> functionwhileloop
Rule 140   functionloops -> functiontimesloop
Rule 141   whileloop -> WHILE start_while O_PARENTHESIS expression C_PARENTHESIS condition_while block end_while
Rule 142   functionwhileloop -> WHILE start_while O_PARENTHESIS expression C_PARENTHESIS condition_while functionblock end_while
Rule 143   start_while -> <empty>
Rule 144   condition_while -> <empty>
Rule 145   end_while -> <empty>
Rule 146   timesloop -> TIMES O_PARENTHESIS expression C_PARENTHESIS start_times block end_times
Rule 147   functiontimesloop -> TIMES O_PARENTHESIS expression C_PARENTHESIS start_times functionblock end_times
Rule 148   start_times -> <empty>
Rule 149   end_times -> <empty>
Rule 150   functioncall -> ID add_o_parenthesis check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON generate_gosub add_c_parenthesis
Rule 151   check_function_exists -> <empty>
Rule 152   generate_gosub -> <empty>
Rule 153   parametersinput -> expression push_type_to_function_options generate_parameter_quadruple parametersinputloop check_params_order
Rule 154   parametersinput -> <empty>
Rule 155   parametersinputloop -> COMMA expression push_type_to_function_options generate_parameter_quadruple parametersinputloop
Rule 156   parametersinputloop -> <empty>
Rule 157   push_type_to_function_options -> <empty>
Rule 158   check_params_order -> <empty>
Rule 159   generate_parameter_quadruple -> <empty>
Rule 160   parameters -> parameterinit parametersloop
Rule 161   parameters -> <empty>
Rule 162   parameterinit -> parametertype ID
Rule 163   parametersloop -> COMMA parameterinit parametersloop
Rule 164   parametersloop -> <empty>

Terminals, with rules where they appear

AND                  : 87
BOOL                 : 13 23 27
COMMA                : 58 69 155 163
C_BRACKET            : 31 32
C_PARENTHESIS        : 18 20 54 72 73 111 124 141 142 146 147 150
C_S_BRACKET          : 66 116 123
DIFFERENT            : 95
DIVIDE               : 108
ELSE                 : 74 76
EQUALITY             : 90
EQUALS               : 53 62 65
FALSE                : 132
FLOAT                : 15 25 29
FLOATCONST           : 128
FUNCTION             : 10
GREATER              : 91
GREATER_EQUAL        : 92
ID                   : 18 20 65 114 115 121 150 162
IF                   : 72 73
INT                  : 14 24 28
INTCONST             : 127
LESS                 : 93
LESS_EQUAL           : 94
LIST                 : 65
MAIN                 : 6
MINUS                : 102
MOD                  : 109
MULTIPLY             : 107
OR                   : 88
O_BRACKET            : 31 32
O_PARENTHESIS        : 18 20 54 72 73 111 124 141 142 146 147 150
O_S_BRACKET          : 66 116 123
PRINT                : 54
RETURN               : 33
SEMICOLON            : 33 53 54 62 65 150
STRING               : 16 26 30
STRINGCONST          : 129
SUM                  : 101
TIMES                : 146 147
TRUE                 : 131
VOID                 : 12
WHILE                : 141 142
error                : 

Nonterminals, with rules where they appear

add_bool_constant_to_dict : 131 132
add_c_parenthesis    : 111 116 123 124 150
add_equals           : 53 62
add_float_constant_to_dict : 128
add_function_id_to_options : 18 20
add_function_init_to_dict : 18 20
add_function_to_global_variables : 18
add_function_type_to_options : 12 13 14 15 16
add_function_var_to_stack : 33
add_int_constant_to_dict : 127
add_list_index_to_stack : 116 123
add_list_variable    : 116 123
add_o_parenthesis    : 111 116 123 124 150
add_string_constant_to_dict : 129
add_to_stack         : 117 125
addsub               : 99
assignation          : 45 51
block                : 6 20 72 74 141 146
booleanconst         : 130
check_current_quadruple : 18 20
check_function_exists : 124 150
check_params_order   : 153
condition            : 42
condition_while      : 141 142
constants            : 120
divmult              : 105
else                 : 72
else_condition       : 74 76
end_condition        : 72 73
end_times            : 146 147
end_while            : 141 142
equals_quadruple     : 53 62
exp                  : 84 85 99
exp_quadruple        : 97
exploop              : 97
expression           : 33 53 57 62 68 69 72 73 111 116 123 141 142 146 147 153 155
expression2          : 81 82
expression2optional  : 84
expressionoptional   : 81
fact                 : 103
fill_main_goto       : 1
function             : 8
function_def         : 12
function_end         : 10
function_head        : 10
function_with_return_def : 13 14 15 16
functionblock        : 18 73 76 142 147
functioncall         : 46 52
functioncondition    : 48
functionelse         : 73
functionloop         : 1 8
functionloops        : 50
functionorlist       : 121
functionreturn       : 39
functionstatute      : 38
functionstatutesloop : 32 38
functiontimesloop    : 140
functionwhileloop    : 139
generate_end_all     : 1
generate_gosub       : 124 150
generate_list_assignation : 68 69
generate_main_goto   : 1
generate_parameter_quadruple : 153 155
global_memory_needed : 1
init                 : 41 47
list                 : 65
listaccess           : 114
listelements         : 66
listinit             : 60
logic_op_quadruple   : 82
logicop              : 82
loop                 : 44
main                 : 1
normalinit           : 61
optionallist         : 68 69
optionalwritting     : 57
parameterinit        : 160 163
parameters           : 18 20
parametersinput      : 124 150
parametersinputloop  : 153 155
parametersloop       : 160 163
parametertype        : 162
print_quadruple      : 57
program              : 0
push_type_to_function_options : 153 155
relop                : 85
relop_quadruple      : 85
start_condition      : 72 73
start_list           : 65
start_main           : 6
start_printing       : 57
start_times          : 146 147
start_while          : 141 142
statute              : 36
statutesloop         : 31 36
term                 : 97 105
term_quadruple       : 103
termloop             : 103
timesloop            : 138
type                 : 62 65
var                  : 62
var_assign           : 53
varconst             : 110
varconstfunction     : 119
whileloop            : 137
writting             : 43 49
writtingloop         : 54 58

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . generate_main_goto functionloop fill_main_goto main generate_end_all global_memory_needed
    (4) generate_main_goto -> .

    FUNCTION        reduce using rule 4 (generate_main_goto -> .)
    MAIN            reduce using rule 4 (generate_main_goto -> .)

    generate_main_goto             shift and go to state 1
    program                        shift and go to state 2

state 1

    (1) program -> generate_main_goto . functionloop fill_main_goto main generate_end_all global_memory_needed
    (8) functionloop -> . function functionloop
    (9) functionloop -> .
    (10) function -> . FUNCTION function_head function_end

    MAIN            reduce using rule 9 (functionloop -> .)
    FUNCTION        shift and go to state 4

    function                       shift and go to state 3
    functionloop                   shift and go to state 5

state 2

    (0) S' -> program .



state 3

    (8) functionloop -> function . functionloop
    (8) functionloop -> . function functionloop
    (9) functionloop -> .
    (10) function -> . FUNCTION function_head function_end

    MAIN            reduce using rule 9 (functionloop -> .)
    FUNCTION        shift and go to state 4

    function                       shift and go to state 3
    functionloop                   shift and go to state 6

state 4

    (10) function -> FUNCTION . function_head function_end
    (12) function_head -> . VOID add_function_type_to_options function_def
    (13) function_head -> . BOOL add_function_type_to_options function_with_return_def
    (14) function_head -> . INT add_function_type_to_options function_with_return_def
    (15) function_head -> . FLOAT add_function_type_to_options function_with_return_def
    (16) function_head -> . STRING add_function_type_to_options function_with_return_def

    VOID            shift and go to state 8
    BOOL            shift and go to state 11
    INT             shift and go to state 12
    FLOAT           shift and go to state 9
    STRING          shift and go to state 7

    function_head                  shift and go to state 10

state 5

    (1) program -> generate_main_goto functionloop . fill_main_goto main generate_end_all global_memory_needed
    (5) fill_main_goto -> .

    MAIN            reduce using rule 5 (fill_main_goto -> .)

    fill_main_goto                 shift and go to state 13

state 6

    (8) functionloop -> function functionloop .

    MAIN            reduce using rule 8 (functionloop -> function functionloop .)


state 7

    (16) function_head -> STRING . add_function_type_to_options function_with_return_def
    (17) add_function_type_to_options -> .

    ID              reduce using rule 17 (add_function_type_to_options -> .)

    add_function_type_to_options   shift and go to state 14

state 8

    (12) function_head -> VOID . add_function_type_to_options function_def
    (17) add_function_type_to_options -> .

    ID              reduce using rule 17 (add_function_type_to_options -> .)

    add_function_type_to_options   shift and go to state 15

state 9

    (15) function_head -> FLOAT . add_function_type_to_options function_with_return_def
    (17) add_function_type_to_options -> .

    ID              reduce using rule 17 (add_function_type_to_options -> .)

    add_function_type_to_options   shift and go to state 16

state 10

    (10) function -> FUNCTION function_head . function_end
    (35) function_end -> .

    FUNCTION        reduce using rule 35 (function_end -> .)
    MAIN            reduce using rule 35 (function_end -> .)

    function_end                   shift and go to state 17

state 11

    (13) function_head -> BOOL . add_function_type_to_options function_with_return_def
    (17) add_function_type_to_options -> .

    ID              reduce using rule 17 (add_function_type_to_options -> .)

    add_function_type_to_options   shift and go to state 18

state 12

    (14) function_head -> INT . add_function_type_to_options function_with_return_def
    (17) add_function_type_to_options -> .

    ID              reduce using rule 17 (add_function_type_to_options -> .)

    add_function_type_to_options   shift and go to state 19

state 13

    (1) program -> generate_main_goto functionloop fill_main_goto . main generate_end_all global_memory_needed
    (6) main -> . MAIN start_main block

    MAIN            shift and go to state 20

    main                           shift and go to state 21

state 14

    (16) function_head -> STRING add_function_type_to_options . function_with_return_def
    (18) function_with_return_def -> . ID add_function_id_to_options add_function_to_global_variables check_current_quadruple O_PARENTHESIS parameters C_PARENTHESIS add_function_init_to_dict functionblock

    ID              shift and go to state 23

    function_with_return_def       shift and go to state 22

state 15

    (12) function_head -> VOID add_function_type_to_options . function_def
    (20) function_def -> . ID add_function_id_to_options check_current_quadruple O_PARENTHESIS parameters C_PARENTHESIS add_function_init_to_dict block

    ID              shift and go to state 25

    function_def                   shift and go to state 24

state 16

    (15) function_head -> FLOAT add_function_type_to_options . function_with_return_def
    (18) function_with_return_def -> . ID add_function_id_to_options add_function_to_global_variables check_current_quadruple O_PARENTHESIS parameters C_PARENTHESIS add_function_init_to_dict functionblock

    ID              shift and go to state 23

    function_with_return_def       shift and go to state 26

state 17

    (10) function -> FUNCTION function_head function_end .

    FUNCTION        reduce using rule 10 (function -> FUNCTION function_head function_end .)
    MAIN            reduce using rule 10 (function -> FUNCTION function_head function_end .)


state 18

    (13) function_head -> BOOL add_function_type_to_options . function_with_return_def
    (18) function_with_return_def -> . ID add_function_id_to_options add_function_to_global_variables check_current_quadruple O_PARENTHESIS parameters C_PARENTHESIS add_function_init_to_dict functionblock

    ID              shift and go to state 23

    function_with_return_def       shift and go to state 27

state 19

    (14) function_head -> INT add_function_type_to_options . function_with_return_def
    (18) function_with_return_def -> . ID add_function_id_to_options add_function_to_global_variables check_current_quadruple O_PARENTHESIS parameters C_PARENTHESIS add_function_init_to_dict functionblock

    ID              shift and go to state 23

    function_with_return_def       shift and go to state 28

state 20

    (6) main -> MAIN . start_main block
    (7) start_main -> .

    O_BRACKET       reduce using rule 7 (start_main -> .)

    start_main                     shift and go to state 29

state 21

    (1) program -> generate_main_goto functionloop fill_main_goto main . generate_end_all global_memory_needed
    (3) generate_end_all -> .

    $end            reduce using rule 3 (generate_end_all -> .)

    generate_end_all               shift and go to state 30

state 22

    (16) function_head -> STRING add_function_type_to_options function_with_return_def .

    FUNCTION        reduce using rule 16 (function_head -> STRING add_function_type_to_options function_with_return_def .)
    MAIN            reduce using rule 16 (function_head -> STRING add_function_type_to_options function_with_return_def .)


state 23

    (18) function_with_return_def -> ID . add_function_id_to_options add_function_to_global_variables check_current_quadruple O_PARENTHESIS parameters C_PARENTHESIS add_function_init_to_dict functionblock
    (22) add_function_id_to_options -> .

    O_PARENTHESIS   reduce using rule 22 (add_function_id_to_options -> .)

    add_function_id_to_options     shift and go to state 31

state 24

    (12) function_head -> VOID add_function_type_to_options function_def .

    FUNCTION        reduce using rule 12 (function_head -> VOID add_function_type_to_options function_def .)
    MAIN            reduce using rule 12 (function_head -> VOID add_function_type_to_options function_def .)


state 25

    (20) function_def -> ID . add_function_id_to_options check_current_quadruple O_PARENTHESIS parameters C_PARENTHESIS add_function_init_to_dict block
    (22) add_function_id_to_options -> .

    O_PARENTHESIS   reduce using rule 22 (add_function_id_to_options -> .)

    add_function_id_to_options     shift and go to state 32

state 26

    (15) function_head -> FLOAT add_function_type_to_options function_with_return_def .

    FUNCTION        reduce using rule 15 (function_head -> FLOAT add_function_type_to_options function_with_return_def .)
    MAIN            reduce using rule 15 (function_head -> FLOAT add_function_type_to_options function_with_return_def .)


state 27

    (13) function_head -> BOOL add_function_type_to_options function_with_return_def .

    FUNCTION        reduce using rule 13 (function_head -> BOOL add_function_type_to_options function_with_return_def .)
    MAIN            reduce using rule 13 (function_head -> BOOL add_function_type_to_options function_with_return_def .)


state 28

    (14) function_head -> INT add_function_type_to_options function_with_return_def .

    FUNCTION        reduce using rule 14 (function_head -> INT add_function_type_to_options function_with_return_def .)
    MAIN            reduce using rule 14 (function_head -> INT add_function_type_to_options function_with_return_def .)


state 29

    (6) main -> MAIN start_main . block
    (31) block -> . O_BRACKET statutesloop C_BRACKET

    O_BRACKET       shift and go to state 33

    block                          shift and go to state 34

state 30

    (1) program -> generate_main_goto functionloop fill_main_goto main generate_end_all . global_memory_needed
    (2) global_memory_needed -> .

    $end            reduce using rule 2 (global_memory_needed -> .)

    global_memory_needed           shift and go to state 35

state 31

    (18) function_with_return_def -> ID add_function_id_to_options . add_function_to_global_variables check_current_quadruple O_PARENTHESIS parameters C_PARENTHESIS add_function_init_to_dict functionblock
    (19) add_function_to_global_variables -> .

    O_PARENTHESIS   reduce using rule 19 (add_function_to_global_variables -> .)

    add_function_to_global_variables shift and go to state 36

state 32

    (20) function_def -> ID add_function_id_to_options . check_current_quadruple O_PARENTHESIS parameters C_PARENTHESIS add_function_init_to_dict block
    (21) check_current_quadruple -> .

    O_PARENTHESIS   reduce using rule 21 (check_current_quadruple -> .)

    check_current_quadruple        shift and go to state 37

state 33

    (31) block -> O_BRACKET . statutesloop C_BRACKET
    (36) statutesloop -> . statute statutesloop
    (37) statutesloop -> .
    (41) statute -> . init
    (42) statute -> . condition
    (43) statute -> . writting
    (44) statute -> . loop
    (45) statute -> . assignation
    (46) statute -> . functioncall
    (60) init -> . listinit
    (61) init -> . normalinit
    (72) condition -> . IF O_PARENTHESIS expression C_PARENTHESIS start_condition block else end_condition
    (54) writting -> . PRINT O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON
    (137) loop -> . whileloop
    (138) loop -> . timesloop
    (53) assignation -> . var_assign EQUALS add_equals expression equals_quadruple SEMICOLON
    (150) functioncall -> . ID add_o_parenthesis check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON generate_gosub add_c_parenthesis
    (65) listinit -> . LIST type ID EQUALS start_list list SEMICOLON
    (62) normalinit -> . type var EQUALS add_equals expression equals_quadruple SEMICOLON
    (141) whileloop -> . WHILE start_while O_PARENTHESIS expression C_PARENTHESIS condition_while block end_while
    (146) timesloop -> . TIMES O_PARENTHESIS expression C_PARENTHESIS start_times block end_times
    (114) var_assign -> . ID listaccess
    (23) type -> . BOOL
    (24) type -> . INT
    (25) type -> . FLOAT
    (26) type -> . STRING

    C_BRACKET       reduce using rule 37 (statutesloop -> .)
    IF              shift and go to state 53
    PRINT           shift and go to state 40
    ID              shift and go to state 51
    LIST            shift and go to state 59
    WHILE           shift and go to state 39
    TIMES           shift and go to state 38
    BOOL            shift and go to state 43
    INT             shift and go to state 57
    FLOAT           shift and go to state 58
    STRING          shift and go to state 47

    whileloop                      shift and go to state 41
    init                           shift and go to state 42
    var_assign                     shift and go to state 44
    type                           shift and go to state 45
    normalinit                     shift and go to state 46
    listinit                       shift and go to state 48
    writting                       shift and go to state 49
    timesloop                      shift and go to state 50
    condition                      shift and go to state 52
    statute                        shift and go to state 54
    assignation                    shift and go to state 55
    statutesloop                   shift and go to state 56
    functioncall                   shift and go to state 60
    loop                           shift and go to state 61

state 34

    (6) main -> MAIN start_main block .

    $end            reduce using rule 6 (main -> MAIN start_main block .)


state 35

    (1) program -> generate_main_goto functionloop fill_main_goto main generate_end_all global_memory_needed .

    $end            reduce using rule 1 (program -> generate_main_goto functionloop fill_main_goto main generate_end_all global_memory_needed .)


state 36

    (18) function_with_return_def -> ID add_function_id_to_options add_function_to_global_variables . check_current_quadruple O_PARENTHESIS parameters C_PARENTHESIS add_function_init_to_dict functionblock
    (21) check_current_quadruple -> .

    O_PARENTHESIS   reduce using rule 21 (check_current_quadruple -> .)

    check_current_quadruple        shift and go to state 62

state 37

    (20) function_def -> ID add_function_id_to_options check_current_quadruple . O_PARENTHESIS parameters C_PARENTHESIS add_function_init_to_dict block

    O_PARENTHESIS   shift and go to state 63


state 38

    (146) timesloop -> TIMES . O_PARENTHESIS expression C_PARENTHESIS start_times block end_times

    O_PARENTHESIS   shift and go to state 64


state 39

    (141) whileloop -> WHILE . start_while O_PARENTHESIS expression C_PARENTHESIS condition_while block end_while
    (143) start_while -> .

    O_PARENTHESIS   reduce using rule 143 (start_while -> .)

    start_while                    shift and go to state 65

state 40

    (54) writting -> PRINT . O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON

    O_PARENTHESIS   shift and go to state 66


state 41

    (137) loop -> whileloop .

    IF              reduce using rule 137 (loop -> whileloop .)
    PRINT           reduce using rule 137 (loop -> whileloop .)
    ID              reduce using rule 137 (loop -> whileloop .)
    LIST            reduce using rule 137 (loop -> whileloop .)
    WHILE           reduce using rule 137 (loop -> whileloop .)
    TIMES           reduce using rule 137 (loop -> whileloop .)
    BOOL            reduce using rule 137 (loop -> whileloop .)
    INT             reduce using rule 137 (loop -> whileloop .)
    FLOAT           reduce using rule 137 (loop -> whileloop .)
    STRING          reduce using rule 137 (loop -> whileloop .)
    C_BRACKET       reduce using rule 137 (loop -> whileloop .)


state 42

    (41) statute -> init .

    IF              reduce using rule 41 (statute -> init .)
    PRINT           reduce using rule 41 (statute -> init .)
    ID              reduce using rule 41 (statute -> init .)
    LIST            reduce using rule 41 (statute -> init .)
    WHILE           reduce using rule 41 (statute -> init .)
    TIMES           reduce using rule 41 (statute -> init .)
    BOOL            reduce using rule 41 (statute -> init .)
    INT             reduce using rule 41 (statute -> init .)
    FLOAT           reduce using rule 41 (statute -> init .)
    STRING          reduce using rule 41 (statute -> init .)
    C_BRACKET       reduce using rule 41 (statute -> init .)


state 43

    (23) type -> BOOL .

    ID              reduce using rule 23 (type -> BOOL .)


state 44

    (53) assignation -> var_assign . EQUALS add_equals expression equals_quadruple SEMICOLON

    EQUALS          shift and go to state 67


state 45

    (62) normalinit -> type . var EQUALS add_equals expression equals_quadruple SEMICOLON
    (115) var -> . ID

    ID              shift and go to state 69

    var                            shift and go to state 68

state 46

    (61) init -> normalinit .

    RETURN          reduce using rule 61 (init -> normalinit .)
    IF              reduce using rule 61 (init -> normalinit .)
    PRINT           reduce using rule 61 (init -> normalinit .)
    ID              reduce using rule 61 (init -> normalinit .)
    LIST            reduce using rule 61 (init -> normalinit .)
    WHILE           reduce using rule 61 (init -> normalinit .)
    TIMES           reduce using rule 61 (init -> normalinit .)
    BOOL            reduce using rule 61 (init -> normalinit .)
    INT             reduce using rule 61 (init -> normalinit .)
    FLOAT           reduce using rule 61 (init -> normalinit .)
    STRING          reduce using rule 61 (init -> normalinit .)
    C_BRACKET       reduce using rule 61 (init -> normalinit .)


state 47

    (26) type -> STRING .

    ID              reduce using rule 26 (type -> STRING .)


state 48

    (60) init -> listinit .

    RETURN          reduce using rule 60 (init -> listinit .)
    IF              reduce using rule 60 (init -> listinit .)
    PRINT           reduce using rule 60 (init -> listinit .)
    ID              reduce using rule 60 (init -> listinit .)
    LIST            reduce using rule 60 (init -> listinit .)
    WHILE           reduce using rule 60 (init -> listinit .)
    TIMES           reduce using rule 60 (init -> listinit .)
    BOOL            reduce using rule 60 (init -> listinit .)
    INT             reduce using rule 60 (init -> listinit .)
    FLOAT           reduce using rule 60 (init -> listinit .)
    STRING          reduce using rule 60 (init -> listinit .)
    C_BRACKET       reduce using rule 60 (init -> listinit .)


state 49

    (43) statute -> writting .

    IF              reduce using rule 43 (statute -> writting .)
    PRINT           reduce using rule 43 (statute -> writting .)
    ID              reduce using rule 43 (statute -> writting .)
    LIST            reduce using rule 43 (statute -> writting .)
    WHILE           reduce using rule 43 (statute -> writting .)
    TIMES           reduce using rule 43 (statute -> writting .)
    BOOL            reduce using rule 43 (statute -> writting .)
    INT             reduce using rule 43 (statute -> writting .)
    FLOAT           reduce using rule 43 (statute -> writting .)
    STRING          reduce using rule 43 (statute -> writting .)
    C_BRACKET       reduce using rule 43 (statute -> writting .)


state 50

    (138) loop -> timesloop .

    IF              reduce using rule 138 (loop -> timesloop .)
    PRINT           reduce using rule 138 (loop -> timesloop .)
    ID              reduce using rule 138 (loop -> timesloop .)
    LIST            reduce using rule 138 (loop -> timesloop .)
    WHILE           reduce using rule 138 (loop -> timesloop .)
    TIMES           reduce using rule 138 (loop -> timesloop .)
    BOOL            reduce using rule 138 (loop -> timesloop .)
    INT             reduce using rule 138 (loop -> timesloop .)
    FLOAT           reduce using rule 138 (loop -> timesloop .)
    STRING          reduce using rule 138 (loop -> timesloop .)
    C_BRACKET       reduce using rule 138 (loop -> timesloop .)


state 51

    (150) functioncall -> ID . add_o_parenthesis check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON generate_gosub add_c_parenthesis
    (114) var_assign -> ID . listaccess
    (112) add_o_parenthesis -> .
    (116) listaccess -> . add_list_variable add_o_parenthesis O_S_BRACKET expression C_S_BRACKET add_c_parenthesis add_list_index_to_stack
    (117) listaccess -> . add_to_stack
    (126) add_list_variable -> .
    (122) add_to_stack -> .

    O_PARENTHESIS   reduce using rule 112 (add_o_parenthesis -> .)
    O_S_BRACKET     reduce using rule 126 (add_list_variable -> .)
    EQUALS          reduce using rule 122 (add_to_stack -> .)

    add_to_stack                   shift and go to state 70
    add_o_parenthesis              shift and go to state 71
    listaccess                     shift and go to state 72
    add_list_variable              shift and go to state 73

state 52

    (42) statute -> condition .

    IF              reduce using rule 42 (statute -> condition .)
    PRINT           reduce using rule 42 (statute -> condition .)
    ID              reduce using rule 42 (statute -> condition .)
    LIST            reduce using rule 42 (statute -> condition .)
    WHILE           reduce using rule 42 (statute -> condition .)
    TIMES           reduce using rule 42 (statute -> condition .)
    BOOL            reduce using rule 42 (statute -> condition .)
    INT             reduce using rule 42 (statute -> condition .)
    FLOAT           reduce using rule 42 (statute -> condition .)
    STRING          reduce using rule 42 (statute -> condition .)
    C_BRACKET       reduce using rule 42 (statute -> condition .)


state 53

    (72) condition -> IF . O_PARENTHESIS expression C_PARENTHESIS start_condition block else end_condition

    O_PARENTHESIS   shift and go to state 74


state 54

    (36) statutesloop -> statute . statutesloop
    (36) statutesloop -> . statute statutesloop
    (37) statutesloop -> .
    (41) statute -> . init
    (42) statute -> . condition
    (43) statute -> . writting
    (44) statute -> . loop
    (45) statute -> . assignation
    (46) statute -> . functioncall
    (60) init -> . listinit
    (61) init -> . normalinit
    (72) condition -> . IF O_PARENTHESIS expression C_PARENTHESIS start_condition block else end_condition
    (54) writting -> . PRINT O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON
    (137) loop -> . whileloop
    (138) loop -> . timesloop
    (53) assignation -> . var_assign EQUALS add_equals expression equals_quadruple SEMICOLON
    (150) functioncall -> . ID add_o_parenthesis check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON generate_gosub add_c_parenthesis
    (65) listinit -> . LIST type ID EQUALS start_list list SEMICOLON
    (62) normalinit -> . type var EQUALS add_equals expression equals_quadruple SEMICOLON
    (141) whileloop -> . WHILE start_while O_PARENTHESIS expression C_PARENTHESIS condition_while block end_while
    (146) timesloop -> . TIMES O_PARENTHESIS expression C_PARENTHESIS start_times block end_times
    (114) var_assign -> . ID listaccess
    (23) type -> . BOOL
    (24) type -> . INT
    (25) type -> . FLOAT
    (26) type -> . STRING

    C_BRACKET       reduce using rule 37 (statutesloop -> .)
    IF              shift and go to state 53
    PRINT           shift and go to state 40
    ID              shift and go to state 51
    LIST            shift and go to state 59
    WHILE           shift and go to state 39
    TIMES           shift and go to state 38
    BOOL            shift and go to state 43
    INT             shift and go to state 57
    FLOAT           shift and go to state 58
    STRING          shift and go to state 47

    whileloop                      shift and go to state 41
    init                           shift and go to state 42
    var_assign                     shift and go to state 44
    type                           shift and go to state 45
    normalinit                     shift and go to state 46
    listinit                       shift and go to state 48
    writting                       shift and go to state 49
    timesloop                      shift and go to state 50
    condition                      shift and go to state 52
    statute                        shift and go to state 54
    assignation                    shift and go to state 55
    statutesloop                   shift and go to state 75
    functioncall                   shift and go to state 60
    loop                           shift and go to state 61

state 55

    (45) statute -> assignation .

    IF              reduce using rule 45 (statute -> assignation .)
    PRINT           reduce using rule 45 (statute -> assignation .)
    ID              reduce using rule 45 (statute -> assignation .)
    LIST            reduce using rule 45 (statute -> assignation .)
    WHILE           reduce using rule 45 (statute -> assignation .)
    TIMES           reduce using rule 45 (statute -> assignation .)
    BOOL            reduce using rule 45 (statute -> assignation .)
    INT             reduce using rule 45 (statute -> assignation .)
    FLOAT           reduce using rule 45 (statute -> assignation .)
    STRING          reduce using rule 45 (statute -> assignation .)
    C_BRACKET       reduce using rule 45 (statute -> assignation .)


state 56

    (31) block -> O_BRACKET statutesloop . C_BRACKET

    C_BRACKET       shift and go to state 76


state 57

    (24) type -> INT .

    ID              reduce using rule 24 (type -> INT .)


state 58

    (25) type -> FLOAT .

    ID              reduce using rule 25 (type -> FLOAT .)


state 59

    (65) listinit -> LIST . type ID EQUALS start_list list SEMICOLON
    (23) type -> . BOOL
    (24) type -> . INT
    (25) type -> . FLOAT
    (26) type -> . STRING

    BOOL            shift and go to state 43
    INT             shift and go to state 57
    FLOAT           shift and go to state 58
    STRING          shift and go to state 47

    type                           shift and go to state 77

state 60

    (46) statute -> functioncall .

    IF              reduce using rule 46 (statute -> functioncall .)
    PRINT           reduce using rule 46 (statute -> functioncall .)
    ID              reduce using rule 46 (statute -> functioncall .)
    LIST            reduce using rule 46 (statute -> functioncall .)
    WHILE           reduce using rule 46 (statute -> functioncall .)
    TIMES           reduce using rule 46 (statute -> functioncall .)
    BOOL            reduce using rule 46 (statute -> functioncall .)
    INT             reduce using rule 46 (statute -> functioncall .)
    FLOAT           reduce using rule 46 (statute -> functioncall .)
    STRING          reduce using rule 46 (statute -> functioncall .)
    C_BRACKET       reduce using rule 46 (statute -> functioncall .)


state 61

    (44) statute -> loop .

    IF              reduce using rule 44 (statute -> loop .)
    PRINT           reduce using rule 44 (statute -> loop .)
    ID              reduce using rule 44 (statute -> loop .)
    LIST            reduce using rule 44 (statute -> loop .)
    WHILE           reduce using rule 44 (statute -> loop .)
    TIMES           reduce using rule 44 (statute -> loop .)
    BOOL            reduce using rule 44 (statute -> loop .)
    INT             reduce using rule 44 (statute -> loop .)
    FLOAT           reduce using rule 44 (statute -> loop .)
    STRING          reduce using rule 44 (statute -> loop .)
    C_BRACKET       reduce using rule 44 (statute -> loop .)


state 62

    (18) function_with_return_def -> ID add_function_id_to_options add_function_to_global_variables check_current_quadruple . O_PARENTHESIS parameters C_PARENTHESIS add_function_init_to_dict functionblock

    O_PARENTHESIS   shift and go to state 78


state 63

    (20) function_def -> ID add_function_id_to_options check_current_quadruple O_PARENTHESIS . parameters C_PARENTHESIS add_function_init_to_dict block
    (160) parameters -> . parameterinit parametersloop
    (161) parameters -> .
    (162) parameterinit -> . parametertype ID
    (27) parametertype -> . BOOL
    (28) parametertype -> . INT
    (29) parametertype -> . FLOAT
    (30) parametertype -> . STRING

    C_PARENTHESIS   reduce using rule 161 (parameters -> .)
    BOOL            shift and go to state 84
    INT             shift and go to state 83
    FLOAT           shift and go to state 80
    STRING          shift and go to state 81

    parametertype                  shift and go to state 79
    parameters                     shift and go to state 82
    parameterinit                  shift and go to state 85

state 64

    (146) timesloop -> TIMES O_PARENTHESIS . expression C_PARENTHESIS start_times block end_times
    (81) expression -> . expression2 expressionoptional
    (84) expression2 -> . exp expression2optional
    (97) exp -> . term exp_quadruple exploop
    (103) term -> . fact term_quadruple termloop
    (110) fact -> . varconst
    (111) fact -> . O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis
    (119) varconst -> . varconstfunction
    (120) varconst -> . constants
    (121) varconstfunction -> . ID functionorlist
    (127) constants -> . INTCONST add_int_constant_to_dict
    (128) constants -> . FLOATCONST add_float_constant_to_dict
    (129) constants -> . STRINGCONST add_string_constant_to_dict
    (130) constants -> . booleanconst
    (131) booleanconst -> . TRUE add_bool_constant_to_dict
    (132) booleanconst -> . FALSE add_bool_constant_to_dict

    O_PARENTHESIS   shift and go to state 87
    ID              shift and go to state 94
    INTCONST        shift and go to state 92
    FLOATCONST      shift and go to state 86
    STRINGCONST     shift and go to state 89
    TRUE            shift and go to state 88
    FALSE           shift and go to state 97

    varconstfunction               shift and go to state 90
    exp                            shift and go to state 91
    expression2                    shift and go to state 93
    constants                      shift and go to state 95
    term                           shift and go to state 96
    varconst                       shift and go to state 98
    booleanconst                   shift and go to state 99
    expression                     shift and go to state 100
    fact                           shift and go to state 101

state 65

    (141) whileloop -> WHILE start_while . O_PARENTHESIS expression C_PARENTHESIS condition_while block end_while

    O_PARENTHESIS   shift and go to state 102


state 66

    (54) writting -> PRINT O_PARENTHESIS . writtingloop C_PARENTHESIS SEMICOLON
    (57) writtingloop -> . start_printing expression print_quadruple optionalwritting
    (55) start_printing -> .

    O_PARENTHESIS   reduce using rule 55 (start_printing -> .)
    ID              reduce using rule 55 (start_printing -> .)
    INTCONST        reduce using rule 55 (start_printing -> .)
    FLOATCONST      reduce using rule 55 (start_printing -> .)
    STRINGCONST     reduce using rule 55 (start_printing -> .)
    TRUE            reduce using rule 55 (start_printing -> .)
    FALSE           reduce using rule 55 (start_printing -> .)

    writtingloop                   shift and go to state 104
    start_printing                 shift and go to state 103

state 67

    (53) assignation -> var_assign EQUALS . add_equals expression equals_quadruple SEMICOLON
    (64) add_equals -> .

    O_PARENTHESIS   reduce using rule 64 (add_equals -> .)
    ID              reduce using rule 64 (add_equals -> .)
    INTCONST        reduce using rule 64 (add_equals -> .)
    FLOATCONST      reduce using rule 64 (add_equals -> .)
    STRINGCONST     reduce using rule 64 (add_equals -> .)
    TRUE            reduce using rule 64 (add_equals -> .)
    FALSE           reduce using rule 64 (add_equals -> .)

    add_equals                     shift and go to state 105

state 68

    (62) normalinit -> type var . EQUALS add_equals expression equals_quadruple SEMICOLON

    EQUALS          shift and go to state 106


state 69

    (115) var -> ID .

    EQUALS          reduce using rule 115 (var -> ID .)


state 70

    (117) listaccess -> add_to_stack .

    EQUALS          reduce using rule 117 (listaccess -> add_to_stack .)


state 71

    (150) functioncall -> ID add_o_parenthesis . check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON generate_gosub add_c_parenthesis
    (151) check_function_exists -> .

    O_PARENTHESIS   reduce using rule 151 (check_function_exists -> .)

    check_function_exists          shift and go to state 107

state 72

    (114) var_assign -> ID listaccess .

    EQUALS          reduce using rule 114 (var_assign -> ID listaccess .)


state 73

    (116) listaccess -> add_list_variable . add_o_parenthesis O_S_BRACKET expression C_S_BRACKET add_c_parenthesis add_list_index_to_stack
    (112) add_o_parenthesis -> .

    O_S_BRACKET     reduce using rule 112 (add_o_parenthesis -> .)

    add_o_parenthesis              shift and go to state 108

state 74

    (72) condition -> IF O_PARENTHESIS . expression C_PARENTHESIS start_condition block else end_condition
    (81) expression -> . expression2 expressionoptional
    (84) expression2 -> . exp expression2optional
    (97) exp -> . term exp_quadruple exploop
    (103) term -> . fact term_quadruple termloop
    (110) fact -> . varconst
    (111) fact -> . O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis
    (119) varconst -> . varconstfunction
    (120) varconst -> . constants
    (121) varconstfunction -> . ID functionorlist
    (127) constants -> . INTCONST add_int_constant_to_dict
    (128) constants -> . FLOATCONST add_float_constant_to_dict
    (129) constants -> . STRINGCONST add_string_constant_to_dict
    (130) constants -> . booleanconst
    (131) booleanconst -> . TRUE add_bool_constant_to_dict
    (132) booleanconst -> . FALSE add_bool_constant_to_dict

    O_PARENTHESIS   shift and go to state 87
    ID              shift and go to state 94
    INTCONST        shift and go to state 92
    FLOATCONST      shift and go to state 86
    STRINGCONST     shift and go to state 89
    TRUE            shift and go to state 88
    FALSE           shift and go to state 97

    varconstfunction               shift and go to state 90
    exp                            shift and go to state 91
    expression2                    shift and go to state 93
    constants                      shift and go to state 95
    term                           shift and go to state 96
    varconst                       shift and go to state 98
    booleanconst                   shift and go to state 99
    expression                     shift and go to state 109
    fact                           shift and go to state 101

state 75

    (36) statutesloop -> statute statutesloop .

    C_BRACKET       reduce using rule 36 (statutesloop -> statute statutesloop .)


state 76

    (31) block -> O_BRACKET statutesloop C_BRACKET .

    IF              reduce using rule 31 (block -> O_BRACKET statutesloop C_BRACKET .)
    PRINT           reduce using rule 31 (block -> O_BRACKET statutesloop C_BRACKET .)
    ID              reduce using rule 31 (block -> O_BRACKET statutesloop C_BRACKET .)
    LIST            reduce using rule 31 (block -> O_BRACKET statutesloop C_BRACKET .)
    WHILE           reduce using rule 31 (block -> O_BRACKET statutesloop C_BRACKET .)
    TIMES           reduce using rule 31 (block -> O_BRACKET statutesloop C_BRACKET .)
    BOOL            reduce using rule 31 (block -> O_BRACKET statutesloop C_BRACKET .)
    INT             reduce using rule 31 (block -> O_BRACKET statutesloop C_BRACKET .)
    FLOAT           reduce using rule 31 (block -> O_BRACKET statutesloop C_BRACKET .)
    STRING          reduce using rule 31 (block -> O_BRACKET statutesloop C_BRACKET .)
    C_BRACKET       reduce using rule 31 (block -> O_BRACKET statutesloop C_BRACKET .)
    $end            reduce using rule 31 (block -> O_BRACKET statutesloop C_BRACKET .)
    ELSE            reduce using rule 31 (block -> O_BRACKET statutesloop C_BRACKET .)
    FUNCTION        reduce using rule 31 (block -> O_BRACKET statutesloop C_BRACKET .)
    MAIN            reduce using rule 31 (block -> O_BRACKET statutesloop C_BRACKET .)


state 77

    (65) listinit -> LIST type . ID EQUALS start_list list SEMICOLON

    ID              shift and go to state 110


state 78

    (18) function_with_return_def -> ID add_function_id_to_options add_function_to_global_variables check_current_quadruple O_PARENTHESIS . parameters C_PARENTHESIS add_function_init_to_dict functionblock
    (160) parameters -> . parameterinit parametersloop
    (161) parameters -> .
    (162) parameterinit -> . parametertype ID
    (27) parametertype -> . BOOL
    (28) parametertype -> . INT
    (29) parametertype -> . FLOAT
    (30) parametertype -> . STRING

    C_PARENTHESIS   reduce using rule 161 (parameters -> .)
    BOOL            shift and go to state 84
    INT             shift and go to state 83
    FLOAT           shift and go to state 80
    STRING          shift and go to state 81

    parametertype                  shift and go to state 79
    parameters                     shift and go to state 111
    parameterinit                  shift and go to state 85

state 79

    (162) parameterinit -> parametertype . ID

    ID              shift and go to state 112


state 80

    (29) parametertype -> FLOAT .

    ID              reduce using rule 29 (parametertype -> FLOAT .)


state 81

    (30) parametertype -> STRING .

    ID              reduce using rule 30 (parametertype -> STRING .)


state 82

    (20) function_def -> ID add_function_id_to_options check_current_quadruple O_PARENTHESIS parameters . C_PARENTHESIS add_function_init_to_dict block

    C_PARENTHESIS   shift and go to state 113


state 83

    (28) parametertype -> INT .

    ID              reduce using rule 28 (parametertype -> INT .)


state 84

    (27) parametertype -> BOOL .

    ID              reduce using rule 27 (parametertype -> BOOL .)


state 85

    (160) parameters -> parameterinit . parametersloop
    (163) parametersloop -> . COMMA parameterinit parametersloop
    (164) parametersloop -> .

    COMMA           shift and go to state 115
    C_PARENTHESIS   reduce using rule 164 (parametersloop -> .)

    parametersloop                 shift and go to state 114

state 86

    (128) constants -> FLOATCONST . add_float_constant_to_dict
    (134) add_float_constant_to_dict -> .

    MULTIPLY        reduce using rule 134 (add_float_constant_to_dict -> .)
    DIVIDE          reduce using rule 134 (add_float_constant_to_dict -> .)
    MOD             reduce using rule 134 (add_float_constant_to_dict -> .)
    SUM             reduce using rule 134 (add_float_constant_to_dict -> .)
    MINUS           reduce using rule 134 (add_float_constant_to_dict -> .)
    EQUALITY        reduce using rule 134 (add_float_constant_to_dict -> .)
    GREATER         reduce using rule 134 (add_float_constant_to_dict -> .)
    GREATER_EQUAL   reduce using rule 134 (add_float_constant_to_dict -> .)
    LESS            reduce using rule 134 (add_float_constant_to_dict -> .)
    LESS_EQUAL      reduce using rule 134 (add_float_constant_to_dict -> .)
    DIFFERENT       reduce using rule 134 (add_float_constant_to_dict -> .)
    AND             reduce using rule 134 (add_float_constant_to_dict -> .)
    OR              reduce using rule 134 (add_float_constant_to_dict -> .)
    C_PARENTHESIS   reduce using rule 134 (add_float_constant_to_dict -> .)
    COMMA           reduce using rule 134 (add_float_constant_to_dict -> .)
    SEMICOLON       reduce using rule 134 (add_float_constant_to_dict -> .)
    C_S_BRACKET     reduce using rule 134 (add_float_constant_to_dict -> .)

    add_float_constant_to_dict     shift and go to state 116

state 87

    (111) fact -> O_PARENTHESIS . add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis
    (112) add_o_parenthesis -> .

    O_PARENTHESIS   reduce using rule 112 (add_o_parenthesis -> .)
    ID              reduce using rule 112 (add_o_parenthesis -> .)
    INTCONST        reduce using rule 112 (add_o_parenthesis -> .)
    FLOATCONST      reduce using rule 112 (add_o_parenthesis -> .)
    STRINGCONST     reduce using rule 112 (add_o_parenthesis -> .)
    TRUE            reduce using rule 112 (add_o_parenthesis -> .)
    FALSE           reduce using rule 112 (add_o_parenthesis -> .)

    add_o_parenthesis              shift and go to state 117

state 88

    (131) booleanconst -> TRUE . add_bool_constant_to_dict
    (136) add_bool_constant_to_dict -> .

    MULTIPLY        reduce using rule 136 (add_bool_constant_to_dict -> .)
    DIVIDE          reduce using rule 136 (add_bool_constant_to_dict -> .)
    MOD             reduce using rule 136 (add_bool_constant_to_dict -> .)
    SUM             reduce using rule 136 (add_bool_constant_to_dict -> .)
    MINUS           reduce using rule 136 (add_bool_constant_to_dict -> .)
    EQUALITY        reduce using rule 136 (add_bool_constant_to_dict -> .)
    GREATER         reduce using rule 136 (add_bool_constant_to_dict -> .)
    GREATER_EQUAL   reduce using rule 136 (add_bool_constant_to_dict -> .)
    LESS            reduce using rule 136 (add_bool_constant_to_dict -> .)
    LESS_EQUAL      reduce using rule 136 (add_bool_constant_to_dict -> .)
    DIFFERENT       reduce using rule 136 (add_bool_constant_to_dict -> .)
    AND             reduce using rule 136 (add_bool_constant_to_dict -> .)
    OR              reduce using rule 136 (add_bool_constant_to_dict -> .)
    C_PARENTHESIS   reduce using rule 136 (add_bool_constant_to_dict -> .)
    COMMA           reduce using rule 136 (add_bool_constant_to_dict -> .)
    SEMICOLON       reduce using rule 136 (add_bool_constant_to_dict -> .)
    C_S_BRACKET     reduce using rule 136 (add_bool_constant_to_dict -> .)

    add_bool_constant_to_dict      shift and go to state 118

state 89

    (129) constants -> STRINGCONST . add_string_constant_to_dict
    (135) add_string_constant_to_dict -> .

    MULTIPLY        reduce using rule 135 (add_string_constant_to_dict -> .)
    DIVIDE          reduce using rule 135 (add_string_constant_to_dict -> .)
    MOD             reduce using rule 135 (add_string_constant_to_dict -> .)
    SUM             reduce using rule 135 (add_string_constant_to_dict -> .)
    MINUS           reduce using rule 135 (add_string_constant_to_dict -> .)
    EQUALITY        reduce using rule 135 (add_string_constant_to_dict -> .)
    GREATER         reduce using rule 135 (add_string_constant_to_dict -> .)
    GREATER_EQUAL   reduce using rule 135 (add_string_constant_to_dict -> .)
    LESS            reduce using rule 135 (add_string_constant_to_dict -> .)
    LESS_EQUAL      reduce using rule 135 (add_string_constant_to_dict -> .)
    DIFFERENT       reduce using rule 135 (add_string_constant_to_dict -> .)
    AND             reduce using rule 135 (add_string_constant_to_dict -> .)
    OR              reduce using rule 135 (add_string_constant_to_dict -> .)
    C_PARENTHESIS   reduce using rule 135 (add_string_constant_to_dict -> .)
    COMMA           reduce using rule 135 (add_string_constant_to_dict -> .)
    SEMICOLON       reduce using rule 135 (add_string_constant_to_dict -> .)
    C_S_BRACKET     reduce using rule 135 (add_string_constant_to_dict -> .)

    add_string_constant_to_dict    shift and go to state 119

state 90

    (119) varconst -> varconstfunction .

    MULTIPLY        reduce using rule 119 (varconst -> varconstfunction .)
    DIVIDE          reduce using rule 119 (varconst -> varconstfunction .)
    MOD             reduce using rule 119 (varconst -> varconstfunction .)
    SUM             reduce using rule 119 (varconst -> varconstfunction .)
    MINUS           reduce using rule 119 (varconst -> varconstfunction .)
    EQUALITY        reduce using rule 119 (varconst -> varconstfunction .)
    GREATER         reduce using rule 119 (varconst -> varconstfunction .)
    GREATER_EQUAL   reduce using rule 119 (varconst -> varconstfunction .)
    LESS            reduce using rule 119 (varconst -> varconstfunction .)
    LESS_EQUAL      reduce using rule 119 (varconst -> varconstfunction .)
    DIFFERENT       reduce using rule 119 (varconst -> varconstfunction .)
    C_PARENTHESIS   reduce using rule 119 (varconst -> varconstfunction .)
    COMMA           reduce using rule 119 (varconst -> varconstfunction .)
    SEMICOLON       reduce using rule 119 (varconst -> varconstfunction .)
    C_S_BRACKET     reduce using rule 119 (varconst -> varconstfunction .)
    AND             reduce using rule 119 (varconst -> varconstfunction .)
    OR              reduce using rule 119 (varconst -> varconstfunction .)


state 91

    (84) expression2 -> exp . expression2optional
    (85) expression2optional -> . relop exp relop_quadruple
    (86) expression2optional -> .
    (90) relop -> . EQUALITY
    (91) relop -> . GREATER
    (92) relop -> . GREATER_EQUAL
    (93) relop -> . LESS
    (94) relop -> . LESS_EQUAL
    (95) relop -> . DIFFERENT

    AND             reduce using rule 86 (expression2optional -> .)
    OR              reduce using rule 86 (expression2optional -> .)
    C_PARENTHESIS   reduce using rule 86 (expression2optional -> .)
    COMMA           reduce using rule 86 (expression2optional -> .)
    SEMICOLON       reduce using rule 86 (expression2optional -> .)
    C_S_BRACKET     reduce using rule 86 (expression2optional -> .)
    EQUALITY        shift and go to state 121
    GREATER         shift and go to state 122
    GREATER_EQUAL   shift and go to state 123
    LESS            shift and go to state 124
    LESS_EQUAL      shift and go to state 126
    DIFFERENT       shift and go to state 120

    relop                          shift and go to state 127
    expression2optional            shift and go to state 125

state 92

    (127) constants -> INTCONST . add_int_constant_to_dict
    (133) add_int_constant_to_dict -> .

    MULTIPLY        reduce using rule 133 (add_int_constant_to_dict -> .)
    DIVIDE          reduce using rule 133 (add_int_constant_to_dict -> .)
    MOD             reduce using rule 133 (add_int_constant_to_dict -> .)
    SUM             reduce using rule 133 (add_int_constant_to_dict -> .)
    MINUS           reduce using rule 133 (add_int_constant_to_dict -> .)
    EQUALITY        reduce using rule 133 (add_int_constant_to_dict -> .)
    GREATER         reduce using rule 133 (add_int_constant_to_dict -> .)
    GREATER_EQUAL   reduce using rule 133 (add_int_constant_to_dict -> .)
    LESS            reduce using rule 133 (add_int_constant_to_dict -> .)
    LESS_EQUAL      reduce using rule 133 (add_int_constant_to_dict -> .)
    DIFFERENT       reduce using rule 133 (add_int_constant_to_dict -> .)
    AND             reduce using rule 133 (add_int_constant_to_dict -> .)
    OR              reduce using rule 133 (add_int_constant_to_dict -> .)
    C_PARENTHESIS   reduce using rule 133 (add_int_constant_to_dict -> .)
    COMMA           reduce using rule 133 (add_int_constant_to_dict -> .)
    SEMICOLON       reduce using rule 133 (add_int_constant_to_dict -> .)
    C_S_BRACKET     reduce using rule 133 (add_int_constant_to_dict -> .)

    add_int_constant_to_dict       shift and go to state 128

state 93

    (81) expression -> expression2 . expressionoptional
    (82) expressionoptional -> . logicop expression2 logic_op_quadruple
    (83) expressionoptional -> .
    (87) logicop -> . AND
    (88) logicop -> . OR

    C_PARENTHESIS   reduce using rule 83 (expressionoptional -> .)
    COMMA           reduce using rule 83 (expressionoptional -> .)
    SEMICOLON       reduce using rule 83 (expressionoptional -> .)
    C_S_BRACKET     reduce using rule 83 (expressionoptional -> .)
    AND             shift and go to state 129
    OR              shift and go to state 132

    logicop                        shift and go to state 131
    expressionoptional             shift and go to state 130

state 94

    (121) varconstfunction -> ID . functionorlist
    (123) functionorlist -> . add_list_variable add_o_parenthesis O_S_BRACKET expression C_S_BRACKET add_c_parenthesis add_list_index_to_stack
    (124) functionorlist -> . add_o_parenthesis check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS generate_gosub add_c_parenthesis
    (125) functionorlist -> . add_to_stack
    (126) add_list_variable -> .
    (112) add_o_parenthesis -> .
    (122) add_to_stack -> .

    O_S_BRACKET     reduce using rule 126 (add_list_variable -> .)
    O_PARENTHESIS   reduce using rule 112 (add_o_parenthesis -> .)
    MULTIPLY        reduce using rule 122 (add_to_stack -> .)
    DIVIDE          reduce using rule 122 (add_to_stack -> .)
    MOD             reduce using rule 122 (add_to_stack -> .)
    SUM             reduce using rule 122 (add_to_stack -> .)
    MINUS           reduce using rule 122 (add_to_stack -> .)
    EQUALITY        reduce using rule 122 (add_to_stack -> .)
    GREATER         reduce using rule 122 (add_to_stack -> .)
    GREATER_EQUAL   reduce using rule 122 (add_to_stack -> .)
    LESS            reduce using rule 122 (add_to_stack -> .)
    LESS_EQUAL      reduce using rule 122 (add_to_stack -> .)
    DIFFERENT       reduce using rule 122 (add_to_stack -> .)
    AND             reduce using rule 122 (add_to_stack -> .)
    OR              reduce using rule 122 (add_to_stack -> .)
    C_PARENTHESIS   reduce using rule 122 (add_to_stack -> .)
    COMMA           reduce using rule 122 (add_to_stack -> .)
    SEMICOLON       reduce using rule 122 (add_to_stack -> .)
    C_S_BRACKET     reduce using rule 122 (add_to_stack -> .)

    add_to_stack                   shift and go to state 133
    add_o_parenthesis              shift and go to state 134
    functionorlist                 shift and go to state 135
    add_list_variable              shift and go to state 136

state 95

    (120) varconst -> constants .

    MULTIPLY        reduce using rule 120 (varconst -> constants .)
    DIVIDE          reduce using rule 120 (varconst -> constants .)
    MOD             reduce using rule 120 (varconst -> constants .)
    SUM             reduce using rule 120 (varconst -> constants .)
    MINUS           reduce using rule 120 (varconst -> constants .)
    EQUALITY        reduce using rule 120 (varconst -> constants .)
    GREATER         reduce using rule 120 (varconst -> constants .)
    GREATER_EQUAL   reduce using rule 120 (varconst -> constants .)
    LESS            reduce using rule 120 (varconst -> constants .)
    LESS_EQUAL      reduce using rule 120 (varconst -> constants .)
    DIFFERENT       reduce using rule 120 (varconst -> constants .)
    C_PARENTHESIS   reduce using rule 120 (varconst -> constants .)
    COMMA           reduce using rule 120 (varconst -> constants .)
    SEMICOLON       reduce using rule 120 (varconst -> constants .)
    C_S_BRACKET     reduce using rule 120 (varconst -> constants .)
    AND             reduce using rule 120 (varconst -> constants .)
    OR              reduce using rule 120 (varconst -> constants .)


state 96

    (97) exp -> term . exp_quadruple exploop
    (98) exp_quadruple -> .

    SUM             reduce using rule 98 (exp_quadruple -> .)
    MINUS           reduce using rule 98 (exp_quadruple -> .)
    EQUALITY        reduce using rule 98 (exp_quadruple -> .)
    GREATER         reduce using rule 98 (exp_quadruple -> .)
    GREATER_EQUAL   reduce using rule 98 (exp_quadruple -> .)
    LESS            reduce using rule 98 (exp_quadruple -> .)
    LESS_EQUAL      reduce using rule 98 (exp_quadruple -> .)
    DIFFERENT       reduce using rule 98 (exp_quadruple -> .)
    AND             reduce using rule 98 (exp_quadruple -> .)
    OR              reduce using rule 98 (exp_quadruple -> .)
    C_PARENTHESIS   reduce using rule 98 (exp_quadruple -> .)
    COMMA           reduce using rule 98 (exp_quadruple -> .)
    SEMICOLON       reduce using rule 98 (exp_quadruple -> .)
    C_S_BRACKET     reduce using rule 98 (exp_quadruple -> .)

    exp_quadruple                  shift and go to state 137

state 97

    (132) booleanconst -> FALSE . add_bool_constant_to_dict
    (136) add_bool_constant_to_dict -> .

    MULTIPLY        reduce using rule 136 (add_bool_constant_to_dict -> .)
    DIVIDE          reduce using rule 136 (add_bool_constant_to_dict -> .)
    MOD             reduce using rule 136 (add_bool_constant_to_dict -> .)
    SUM             reduce using rule 136 (add_bool_constant_to_dict -> .)
    MINUS           reduce using rule 136 (add_bool_constant_to_dict -> .)
    EQUALITY        reduce using rule 136 (add_bool_constant_to_dict -> .)
    GREATER         reduce using rule 136 (add_bool_constant_to_dict -> .)
    GREATER_EQUAL   reduce using rule 136 (add_bool_constant_to_dict -> .)
    LESS            reduce using rule 136 (add_bool_constant_to_dict -> .)
    LESS_EQUAL      reduce using rule 136 (add_bool_constant_to_dict -> .)
    DIFFERENT       reduce using rule 136 (add_bool_constant_to_dict -> .)
    AND             reduce using rule 136 (add_bool_constant_to_dict -> .)
    OR              reduce using rule 136 (add_bool_constant_to_dict -> .)
    C_PARENTHESIS   reduce using rule 136 (add_bool_constant_to_dict -> .)
    COMMA           reduce using rule 136 (add_bool_constant_to_dict -> .)
    SEMICOLON       reduce using rule 136 (add_bool_constant_to_dict -> .)
    C_S_BRACKET     reduce using rule 136 (add_bool_constant_to_dict -> .)

    add_bool_constant_to_dict      shift and go to state 138

state 98

    (110) fact -> varconst .

    MULTIPLY        reduce using rule 110 (fact -> varconst .)
    DIVIDE          reduce using rule 110 (fact -> varconst .)
    MOD             reduce using rule 110 (fact -> varconst .)
    SUM             reduce using rule 110 (fact -> varconst .)
    MINUS           reduce using rule 110 (fact -> varconst .)
    EQUALITY        reduce using rule 110 (fact -> varconst .)
    GREATER         reduce using rule 110 (fact -> varconst .)
    GREATER_EQUAL   reduce using rule 110 (fact -> varconst .)
    LESS            reduce using rule 110 (fact -> varconst .)
    LESS_EQUAL      reduce using rule 110 (fact -> varconst .)
    DIFFERENT       reduce using rule 110 (fact -> varconst .)
    AND             reduce using rule 110 (fact -> varconst .)
    OR              reduce using rule 110 (fact -> varconst .)
    C_PARENTHESIS   reduce using rule 110 (fact -> varconst .)
    COMMA           reduce using rule 110 (fact -> varconst .)
    SEMICOLON       reduce using rule 110 (fact -> varconst .)
    C_S_BRACKET     reduce using rule 110 (fact -> varconst .)


state 99

    (130) constants -> booleanconst .

    MULTIPLY        reduce using rule 130 (constants -> booleanconst .)
    DIVIDE          reduce using rule 130 (constants -> booleanconst .)
    MOD             reduce using rule 130 (constants -> booleanconst .)
    SUM             reduce using rule 130 (constants -> booleanconst .)
    MINUS           reduce using rule 130 (constants -> booleanconst .)
    EQUALITY        reduce using rule 130 (constants -> booleanconst .)
    GREATER         reduce using rule 130 (constants -> booleanconst .)
    GREATER_EQUAL   reduce using rule 130 (constants -> booleanconst .)
    LESS            reduce using rule 130 (constants -> booleanconst .)
    LESS_EQUAL      reduce using rule 130 (constants -> booleanconst .)
    DIFFERENT       reduce using rule 130 (constants -> booleanconst .)
    AND             reduce using rule 130 (constants -> booleanconst .)
    OR              reduce using rule 130 (constants -> booleanconst .)
    SEMICOLON       reduce using rule 130 (constants -> booleanconst .)
    COMMA           reduce using rule 130 (constants -> booleanconst .)
    C_PARENTHESIS   reduce using rule 130 (constants -> booleanconst .)
    C_S_BRACKET     reduce using rule 130 (constants -> booleanconst .)


state 100

    (146) timesloop -> TIMES O_PARENTHESIS expression . C_PARENTHESIS start_times block end_times

    C_PARENTHESIS   shift and go to state 139


state 101

    (103) term -> fact . term_quadruple termloop
    (104) term_quadruple -> .

    MULTIPLY        reduce using rule 104 (term_quadruple -> .)
    DIVIDE          reduce using rule 104 (term_quadruple -> .)
    MOD             reduce using rule 104 (term_quadruple -> .)
    SUM             reduce using rule 104 (term_quadruple -> .)
    MINUS           reduce using rule 104 (term_quadruple -> .)
    EQUALITY        reduce using rule 104 (term_quadruple -> .)
    GREATER         reduce using rule 104 (term_quadruple -> .)
    GREATER_EQUAL   reduce using rule 104 (term_quadruple -> .)
    LESS            reduce using rule 104 (term_quadruple -> .)
    LESS_EQUAL      reduce using rule 104 (term_quadruple -> .)
    DIFFERENT       reduce using rule 104 (term_quadruple -> .)
    AND             reduce using rule 104 (term_quadruple -> .)
    OR              reduce using rule 104 (term_quadruple -> .)
    C_PARENTHESIS   reduce using rule 104 (term_quadruple -> .)
    COMMA           reduce using rule 104 (term_quadruple -> .)
    SEMICOLON       reduce using rule 104 (term_quadruple -> .)
    C_S_BRACKET     reduce using rule 104 (term_quadruple -> .)

    term_quadruple                 shift and go to state 140

state 102

    (141) whileloop -> WHILE start_while O_PARENTHESIS . expression C_PARENTHESIS condition_while block end_while
    (81) expression -> . expression2 expressionoptional
    (84) expression2 -> . exp expression2optional
    (97) exp -> . term exp_quadruple exploop
    (103) term -> . fact term_quadruple termloop
    (110) fact -> . varconst
    (111) fact -> . O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis
    (119) varconst -> . varconstfunction
    (120) varconst -> . constants
    (121) varconstfunction -> . ID functionorlist
    (127) constants -> . INTCONST add_int_constant_to_dict
    (128) constants -> . FLOATCONST add_float_constant_to_dict
    (129) constants -> . STRINGCONST add_string_constant_to_dict
    (130) constants -> . booleanconst
    (131) booleanconst -> . TRUE add_bool_constant_to_dict
    (132) booleanconst -> . FALSE add_bool_constant_to_dict

    O_PARENTHESIS   shift and go to state 87
    ID              shift and go to state 94
    INTCONST        shift and go to state 92
    FLOATCONST      shift and go to state 86
    STRINGCONST     shift and go to state 89
    TRUE            shift and go to state 88
    FALSE           shift and go to state 97

    varconstfunction               shift and go to state 90
    exp                            shift and go to state 91
    expression2                    shift and go to state 93
    constants                      shift and go to state 95
    term                           shift and go to state 96
    varconst                       shift and go to state 98
    booleanconst                   shift and go to state 99
    expression                     shift and go to state 141
    fact                           shift and go to state 101

state 103

    (57) writtingloop -> start_printing . expression print_quadruple optionalwritting
    (81) expression -> . expression2 expressionoptional
    (84) expression2 -> . exp expression2optional
    (97) exp -> . term exp_quadruple exploop
    (103) term -> . fact term_quadruple termloop
    (110) fact -> . varconst
    (111) fact -> . O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis
    (119) varconst -> . varconstfunction
    (120) varconst -> . constants
    (121) varconstfunction -> . ID functionorlist
    (127) constants -> . INTCONST add_int_constant_to_dict
    (128) constants -> . FLOATCONST add_float_constant_to_dict
    (129) constants -> . STRINGCONST add_string_constant_to_dict
    (130) constants -> . booleanconst
    (131) booleanconst -> . TRUE add_bool_constant_to_dict
    (132) booleanconst -> . FALSE add_bool_constant_to_dict

    O_PARENTHESIS   shift and go to state 87
    ID              shift and go to state 94
    INTCONST        shift and go to state 92
    FLOATCONST      shift and go to state 86
    STRINGCONST     shift and go to state 89
    TRUE            shift and go to state 88
    FALSE           shift and go to state 97

    varconstfunction               shift and go to state 90
    exp                            shift and go to state 91
    expression2                    shift and go to state 93
    constants                      shift and go to state 95
    term                           shift and go to state 96
    varconst                       shift and go to state 98
    booleanconst                   shift and go to state 99
    expression                     shift and go to state 142
    fact                           shift and go to state 101

state 104

    (54) writting -> PRINT O_PARENTHESIS writtingloop . C_PARENTHESIS SEMICOLON

    C_PARENTHESIS   shift and go to state 143


state 105

    (53) assignation -> var_assign EQUALS add_equals . expression equals_quadruple SEMICOLON
    (81) expression -> . expression2 expressionoptional
    (84) expression2 -> . exp expression2optional
    (97) exp -> . term exp_quadruple exploop
    (103) term -> . fact term_quadruple termloop
    (110) fact -> . varconst
    (111) fact -> . O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis
    (119) varconst -> . varconstfunction
    (120) varconst -> . constants
    (121) varconstfunction -> . ID functionorlist
    (127) constants -> . INTCONST add_int_constant_to_dict
    (128) constants -> . FLOATCONST add_float_constant_to_dict
    (129) constants -> . STRINGCONST add_string_constant_to_dict
    (130) constants -> . booleanconst
    (131) booleanconst -> . TRUE add_bool_constant_to_dict
    (132) booleanconst -> . FALSE add_bool_constant_to_dict

    O_PARENTHESIS   shift and go to state 87
    ID              shift and go to state 94
    INTCONST        shift and go to state 92
    FLOATCONST      shift and go to state 86
    STRINGCONST     shift and go to state 89
    TRUE            shift and go to state 88
    FALSE           shift and go to state 97

    varconstfunction               shift and go to state 90
    expression2                    shift and go to state 93
    constants                      shift and go to state 95
    term                           shift and go to state 96
    varconst                       shift and go to state 98
    exp                            shift and go to state 91
    booleanconst                   shift and go to state 99
    expression                     shift and go to state 144
    fact                           shift and go to state 101

state 106

    (62) normalinit -> type var EQUALS . add_equals expression equals_quadruple SEMICOLON
    (64) add_equals -> .

    O_PARENTHESIS   reduce using rule 64 (add_equals -> .)
    ID              reduce using rule 64 (add_equals -> .)
    INTCONST        reduce using rule 64 (add_equals -> .)
    FLOATCONST      reduce using rule 64 (add_equals -> .)
    STRINGCONST     reduce using rule 64 (add_equals -> .)
    TRUE            reduce using rule 64 (add_equals -> .)
    FALSE           reduce using rule 64 (add_equals -> .)

    add_equals                     shift and go to state 145

state 107

    (150) functioncall -> ID add_o_parenthesis check_function_exists . O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON generate_gosub add_c_parenthesis

    O_PARENTHESIS   shift and go to state 146


state 108

    (116) listaccess -> add_list_variable add_o_parenthesis . O_S_BRACKET expression C_S_BRACKET add_c_parenthesis add_list_index_to_stack

    O_S_BRACKET     shift and go to state 147


state 109

    (72) condition -> IF O_PARENTHESIS expression . C_PARENTHESIS start_condition block else end_condition

    C_PARENTHESIS   shift and go to state 148


state 110

    (65) listinit -> LIST type ID . EQUALS start_list list SEMICOLON

    EQUALS          shift and go to state 149


state 111

    (18) function_with_return_def -> ID add_function_id_to_options add_function_to_global_variables check_current_quadruple O_PARENTHESIS parameters . C_PARENTHESIS add_function_init_to_dict functionblock

    C_PARENTHESIS   shift and go to state 150


state 112

    (162) parameterinit -> parametertype ID .

    COMMA           reduce using rule 162 (parameterinit -> parametertype ID .)
    C_PARENTHESIS   reduce using rule 162 (parameterinit -> parametertype ID .)


state 113

    (20) function_def -> ID add_function_id_to_options check_current_quadruple O_PARENTHESIS parameters C_PARENTHESIS . add_function_init_to_dict block
    (11) add_function_init_to_dict -> .

    O_BRACKET       reduce using rule 11 (add_function_init_to_dict -> .)

    add_function_init_to_dict      shift and go to state 151

state 114

    (160) parameters -> parameterinit parametersloop .

    C_PARENTHESIS   reduce using rule 160 (parameters -> parameterinit parametersloop .)


state 115

    (163) parametersloop -> COMMA . parameterinit parametersloop
    (162) parameterinit -> . parametertype ID
    (27) parametertype -> . BOOL
    (28) parametertype -> . INT
    (29) parametertype -> . FLOAT
    (30) parametertype -> . STRING

    BOOL            shift and go to state 84
    INT             shift and go to state 83
    FLOAT           shift and go to state 80
    STRING          shift and go to state 81

    parametertype                  shift and go to state 79
    parameterinit                  shift and go to state 152

state 116

    (128) constants -> FLOATCONST add_float_constant_to_dict .

    MULTIPLY        reduce using rule 128 (constants -> FLOATCONST add_float_constant_to_dict .)
    DIVIDE          reduce using rule 128 (constants -> FLOATCONST add_float_constant_to_dict .)
    MOD             reduce using rule 128 (constants -> FLOATCONST add_float_constant_to_dict .)
    SUM             reduce using rule 128 (constants -> FLOATCONST add_float_constant_to_dict .)
    MINUS           reduce using rule 128 (constants -> FLOATCONST add_float_constant_to_dict .)
    EQUALITY        reduce using rule 128 (constants -> FLOATCONST add_float_constant_to_dict .)
    GREATER         reduce using rule 128 (constants -> FLOATCONST add_float_constant_to_dict .)
    GREATER_EQUAL   reduce using rule 128 (constants -> FLOATCONST add_float_constant_to_dict .)
    LESS            reduce using rule 128 (constants -> FLOATCONST add_float_constant_to_dict .)
    LESS_EQUAL      reduce using rule 128 (constants -> FLOATCONST add_float_constant_to_dict .)
    DIFFERENT       reduce using rule 128 (constants -> FLOATCONST add_float_constant_to_dict .)
    AND             reduce using rule 128 (constants -> FLOATCONST add_float_constant_to_dict .)
    OR              reduce using rule 128 (constants -> FLOATCONST add_float_constant_to_dict .)
    SEMICOLON       reduce using rule 128 (constants -> FLOATCONST add_float_constant_to_dict .)
    COMMA           reduce using rule 128 (constants -> FLOATCONST add_float_constant_to_dict .)
    C_PARENTHESIS   reduce using rule 128 (constants -> FLOATCONST add_float_constant_to_dict .)
    C_S_BRACKET     reduce using rule 128 (constants -> FLOATCONST add_float_constant_to_dict .)


state 117

    (111) fact -> O_PARENTHESIS add_o_parenthesis . expression C_PARENTHESIS add_c_parenthesis
    (81) expression -> . expression2 expressionoptional
    (84) expression2 -> . exp expression2optional
    (97) exp -> . term exp_quadruple exploop
    (103) term -> . fact term_quadruple termloop
    (110) fact -> . varconst
    (111) fact -> . O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis
    (119) varconst -> . varconstfunction
    (120) varconst -> . constants
    (121) varconstfunction -> . ID functionorlist
    (127) constants -> . INTCONST add_int_constant_to_dict
    (128) constants -> . FLOATCONST add_float_constant_to_dict
    (129) constants -> . STRINGCONST add_string_constant_to_dict
    (130) constants -> . booleanconst
    (131) booleanconst -> . TRUE add_bool_constant_to_dict
    (132) booleanconst -> . FALSE add_bool_constant_to_dict

    O_PARENTHESIS   shift and go to state 87
    ID              shift and go to state 94
    INTCONST        shift and go to state 92
    FLOATCONST      shift and go to state 86
    STRINGCONST     shift and go to state 89
    TRUE            shift and go to state 88
    FALSE           shift and go to state 97

    varconstfunction               shift and go to state 90
    exp                            shift and go to state 91
    expression2                    shift and go to state 93
    constants                      shift and go to state 95
    term                           shift and go to state 96
    varconst                       shift and go to state 98
    booleanconst                   shift and go to state 99
    expression                     shift and go to state 153
    fact                           shift and go to state 101

state 118

    (131) booleanconst -> TRUE add_bool_constant_to_dict .

    MULTIPLY        reduce using rule 131 (booleanconst -> TRUE add_bool_constant_to_dict .)
    DIVIDE          reduce using rule 131 (booleanconst -> TRUE add_bool_constant_to_dict .)
    MOD             reduce using rule 131 (booleanconst -> TRUE add_bool_constant_to_dict .)
    SUM             reduce using rule 131 (booleanconst -> TRUE add_bool_constant_to_dict .)
    MINUS           reduce using rule 131 (booleanconst -> TRUE add_bool_constant_to_dict .)
    EQUALITY        reduce using rule 131 (booleanconst -> TRUE add_bool_constant_to_dict .)
    GREATER         reduce using rule 131 (booleanconst -> TRUE add_bool_constant_to_dict .)
    GREATER_EQUAL   reduce using rule 131 (booleanconst -> TRUE add_bool_constant_to_dict .)
    LESS            reduce using rule 131 (booleanconst -> TRUE add_bool_constant_to_dict .)
    LESS_EQUAL      reduce using rule 131 (booleanconst -> TRUE add_bool_constant_to_dict .)
    DIFFERENT       reduce using rule 131 (booleanconst -> TRUE add_bool_constant_to_dict .)
    AND             reduce using rule 131 (booleanconst -> TRUE add_bool_constant_to_dict .)
    OR              reduce using rule 131 (booleanconst -> TRUE add_bool_constant_to_dict .)
    C_PARENTHESIS   reduce using rule 131 (booleanconst -> TRUE add_bool_constant_to_dict .)
    COMMA           reduce using rule 131 (booleanconst -> TRUE add_bool_constant_to_dict .)
    SEMICOLON       reduce using rule 131 (booleanconst -> TRUE add_bool_constant_to_dict .)
    C_S_BRACKET     reduce using rule 131 (booleanconst -> TRUE add_bool_constant_to_dict .)


state 119

    (129) constants -> STRINGCONST add_string_constant_to_dict .

    MULTIPLY        reduce using rule 129 (constants -> STRINGCONST add_string_constant_to_dict .)
    DIVIDE          reduce using rule 129 (constants -> STRINGCONST add_string_constant_to_dict .)
    MOD             reduce using rule 129 (constants -> STRINGCONST add_string_constant_to_dict .)
    SUM             reduce using rule 129 (constants -> STRINGCONST add_string_constant_to_dict .)
    MINUS           reduce using rule 129 (constants -> STRINGCONST add_string_constant_to_dict .)
    EQUALITY        reduce using rule 129 (constants -> STRINGCONST add_string_constant_to_dict .)
    GREATER         reduce using rule 129 (constants -> STRINGCONST add_string_constant_to_dict .)
    GREATER_EQUAL   reduce using rule 129 (constants -> STRINGCONST add_string_constant_to_dict .)
    LESS            reduce using rule 129 (constants -> STRINGCONST add_string_constant_to_dict .)
    LESS_EQUAL      reduce using rule 129 (constants -> STRINGCONST add_string_constant_to_dict .)
    DIFFERENT       reduce using rule 129 (constants -> STRINGCONST add_string_constant_to_dict .)
    AND             reduce using rule 129 (constants -> STRINGCONST add_string_constant_to_dict .)
    OR              reduce using rule 129 (constants -> STRINGCONST add_string_constant_to_dict .)
    SEMICOLON       reduce using rule 129 (constants -> STRINGCONST add_string_constant_to_dict .)
    COMMA           reduce using rule 129 (constants -> STRINGCONST add_string_constant_to_dict .)
    C_PARENTHESIS   reduce using rule 129 (constants -> STRINGCONST add_string_constant_to_dict .)
    C_S_BRACKET     reduce using rule 129 (constants -> STRINGCONST add_string_constant_to_dict .)


state 120

    (95) relop -> DIFFERENT .

    O_PARENTHESIS   reduce using rule 95 (relop -> DIFFERENT .)
    ID              reduce using rule 95 (relop -> DIFFERENT .)
    INTCONST        reduce using rule 95 (relop -> DIFFERENT .)
    FLOATCONST      reduce using rule 95 (relop -> DIFFERENT .)
    STRINGCONST     reduce using rule 95 (relop -> DIFFERENT .)
    TRUE            reduce using rule 95 (relop -> DIFFERENT .)
    FALSE           reduce using rule 95 (relop -> DIFFERENT .)


state 121

    (90) relop -> EQUALITY .

    O_PARENTHESIS   reduce using rule 90 (relop -> EQUALITY .)
    ID              reduce using rule 90 (relop -> EQUALITY .)
    INTCONST        reduce using rule 90 (relop -> EQUALITY .)
    FLOATCONST      reduce using rule 90 (relop -> EQUALITY .)
    STRINGCONST     reduce using rule 90 (relop -> EQUALITY .)
    TRUE            reduce using rule 90 (relop -> EQUALITY .)
    FALSE           reduce using rule 90 (relop -> EQUALITY .)


state 122

    (91) relop -> GREATER .

    O_PARENTHESIS   reduce using rule 91 (relop -> GREATER .)
    ID              reduce using rule 91 (relop -> GREATER .)
    INTCONST        reduce using rule 91 (relop -> GREATER .)
    FLOATCONST      reduce using rule 91 (relop -> GREATER .)
    STRINGCONST     reduce using rule 91 (relop -> GREATER .)
    TRUE            reduce using rule 91 (relop -> GREATER .)
    FALSE           reduce using rule 91 (relop -> GREATER .)


state 123

    (92) relop -> GREATER_EQUAL .

    O_PARENTHESIS   reduce using rule 92 (relop -> GREATER_EQUAL .)
    ID              reduce using rule 92 (relop -> GREATER_EQUAL .)
    INTCONST        reduce using rule 92 (relop -> GREATER_EQUAL .)
    FLOATCONST      reduce using rule 92 (relop -> GREATER_EQUAL .)
    STRINGCONST     reduce using rule 92 (relop -> GREATER_EQUAL .)
    TRUE            reduce using rule 92 (relop -> GREATER_EQUAL .)
    FALSE           reduce using rule 92 (relop -> GREATER_EQUAL .)


state 124

    (93) relop -> LESS .

    O_PARENTHESIS   reduce using rule 93 (relop -> LESS .)
    ID              reduce using rule 93 (relop -> LESS .)
    INTCONST        reduce using rule 93 (relop -> LESS .)
    FLOATCONST      reduce using rule 93 (relop -> LESS .)
    STRINGCONST     reduce using rule 93 (relop -> LESS .)
    TRUE            reduce using rule 93 (relop -> LESS .)
    FALSE           reduce using rule 93 (relop -> LESS .)


state 125

    (84) expression2 -> exp expression2optional .

    AND             reduce using rule 84 (expression2 -> exp expression2optional .)
    OR              reduce using rule 84 (expression2 -> exp expression2optional .)
    C_PARENTHESIS   reduce using rule 84 (expression2 -> exp expression2optional .)
    COMMA           reduce using rule 84 (expression2 -> exp expression2optional .)
    SEMICOLON       reduce using rule 84 (expression2 -> exp expression2optional .)
    C_S_BRACKET     reduce using rule 84 (expression2 -> exp expression2optional .)


state 126

    (94) relop -> LESS_EQUAL .

    O_PARENTHESIS   reduce using rule 94 (relop -> LESS_EQUAL .)
    ID              reduce using rule 94 (relop -> LESS_EQUAL .)
    INTCONST        reduce using rule 94 (relop -> LESS_EQUAL .)
    FLOATCONST      reduce using rule 94 (relop -> LESS_EQUAL .)
    STRINGCONST     reduce using rule 94 (relop -> LESS_EQUAL .)
    TRUE            reduce using rule 94 (relop -> LESS_EQUAL .)
    FALSE           reduce using rule 94 (relop -> LESS_EQUAL .)


state 127

    (85) expression2optional -> relop . exp relop_quadruple
    (97) exp -> . term exp_quadruple exploop
    (103) term -> . fact term_quadruple termloop
    (110) fact -> . varconst
    (111) fact -> . O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis
    (119) varconst -> . varconstfunction
    (120) varconst -> . constants
    (121) varconstfunction -> . ID functionorlist
    (127) constants -> . INTCONST add_int_constant_to_dict
    (128) constants -> . FLOATCONST add_float_constant_to_dict
    (129) constants -> . STRINGCONST add_string_constant_to_dict
    (130) constants -> . booleanconst
    (131) booleanconst -> . TRUE add_bool_constant_to_dict
    (132) booleanconst -> . FALSE add_bool_constant_to_dict

    O_PARENTHESIS   shift and go to state 87
    ID              shift and go to state 94
    INTCONST        shift and go to state 92
    FLOATCONST      shift and go to state 86
    STRINGCONST     shift and go to state 89
    TRUE            shift and go to state 88
    FALSE           shift and go to state 97

    term                           shift and go to state 96
    varconst                       shift and go to state 98
    constants                      shift and go to state 95
    exp                            shift and go to state 154
    booleanconst                   shift and go to state 99
    varconstfunction               shift and go to state 90
    fact                           shift and go to state 101

state 128

    (127) constants -> INTCONST add_int_constant_to_dict .

    MULTIPLY        reduce using rule 127 (constants -> INTCONST add_int_constant_to_dict .)
    DIVIDE          reduce using rule 127 (constants -> INTCONST add_int_constant_to_dict .)
    MOD             reduce using rule 127 (constants -> INTCONST add_int_constant_to_dict .)
    SUM             reduce using rule 127 (constants -> INTCONST add_int_constant_to_dict .)
    MINUS           reduce using rule 127 (constants -> INTCONST add_int_constant_to_dict .)
    EQUALITY        reduce using rule 127 (constants -> INTCONST add_int_constant_to_dict .)
    GREATER         reduce using rule 127 (constants -> INTCONST add_int_constant_to_dict .)
    GREATER_EQUAL   reduce using rule 127 (constants -> INTCONST add_int_constant_to_dict .)
    LESS            reduce using rule 127 (constants -> INTCONST add_int_constant_to_dict .)
    LESS_EQUAL      reduce using rule 127 (constants -> INTCONST add_int_constant_to_dict .)
    DIFFERENT       reduce using rule 127 (constants -> INTCONST add_int_constant_to_dict .)
    AND             reduce using rule 127 (constants -> INTCONST add_int_constant_to_dict .)
    OR              reduce using rule 127 (constants -> INTCONST add_int_constant_to_dict .)
    SEMICOLON       reduce using rule 127 (constants -> INTCONST add_int_constant_to_dict .)
    COMMA           reduce using rule 127 (constants -> INTCONST add_int_constant_to_dict .)
    C_PARENTHESIS   reduce using rule 127 (constants -> INTCONST add_int_constant_to_dict .)
    C_S_BRACKET     reduce using rule 127 (constants -> INTCONST add_int_constant_to_dict .)


state 129

    (87) logicop -> AND .

    O_PARENTHESIS   reduce using rule 87 (logicop -> AND .)
    ID              reduce using rule 87 (logicop -> AND .)
    INTCONST        reduce using rule 87 (logicop -> AND .)
    FLOATCONST      reduce using rule 87 (logicop -> AND .)
    STRINGCONST     reduce using rule 87 (logicop -> AND .)
    TRUE            reduce using rule 87 (logicop -> AND .)
    FALSE           reduce using rule 87 (logicop -> AND .)


state 130

    (81) expression -> expression2 expressionoptional .

    COMMA           reduce using rule 81 (expression -> expression2 expressionoptional .)
    C_PARENTHESIS   reduce using rule 81 (expression -> expression2 expressionoptional .)
    SEMICOLON       reduce using rule 81 (expression -> expression2 expressionoptional .)
    C_S_BRACKET     reduce using rule 81 (expression -> expression2 expressionoptional .)


state 131

    (82) expressionoptional -> logicop . expression2 logic_op_quadruple
    (84) expression2 -> . exp expression2optional
    (97) exp -> . term exp_quadruple exploop
    (103) term -> . fact term_quadruple termloop
    (110) fact -> . varconst
    (111) fact -> . O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis
    (119) varconst -> . varconstfunction
    (120) varconst -> . constants
    (121) varconstfunction -> . ID functionorlist
    (127) constants -> . INTCONST add_int_constant_to_dict
    (128) constants -> . FLOATCONST add_float_constant_to_dict
    (129) constants -> . STRINGCONST add_string_constant_to_dict
    (130) constants -> . booleanconst
    (131) booleanconst -> . TRUE add_bool_constant_to_dict
    (132) booleanconst -> . FALSE add_bool_constant_to_dict

    O_PARENTHESIS   shift and go to state 87
    ID              shift and go to state 94
    INTCONST        shift and go to state 92
    FLOATCONST      shift and go to state 86
    STRINGCONST     shift and go to state 89
    TRUE            shift and go to state 88
    FALSE           shift and go to state 97

    varconstfunction               shift and go to state 90
    exp                            shift and go to state 91
    expression2                    shift and go to state 155
    constants                      shift and go to state 95
    term                           shift and go to state 96
    varconst                       shift and go to state 98
    booleanconst                   shift and go to state 99
    fact                           shift and go to state 101

state 132

    (88) logicop -> OR .

    O_PARENTHESIS   reduce using rule 88 (logicop -> OR .)
    ID              reduce using rule 88 (logicop -> OR .)
    INTCONST        reduce using rule 88 (logicop -> OR .)
    FLOATCONST      reduce using rule 88 (logicop -> OR .)
    STRINGCONST     reduce using rule 88 (logicop -> OR .)
    TRUE            reduce using rule 88 (logicop -> OR .)
    FALSE           reduce using rule 88 (logicop -> OR .)


state 133

    (125) functionorlist -> add_to_stack .

    MULTIPLY        reduce using rule 125 (functionorlist -> add_to_stack .)
    DIVIDE          reduce using rule 125 (functionorlist -> add_to_stack .)
    MOD             reduce using rule 125 (functionorlist -> add_to_stack .)
    SUM             reduce using rule 125 (functionorlist -> add_to_stack .)
    MINUS           reduce using rule 125 (functionorlist -> add_to_stack .)
    EQUALITY        reduce using rule 125 (functionorlist -> add_to_stack .)
    GREATER         reduce using rule 125 (functionorlist -> add_to_stack .)
    GREATER_EQUAL   reduce using rule 125 (functionorlist -> add_to_stack .)
    LESS            reduce using rule 125 (functionorlist -> add_to_stack .)
    LESS_EQUAL      reduce using rule 125 (functionorlist -> add_to_stack .)
    DIFFERENT       reduce using rule 125 (functionorlist -> add_to_stack .)
    AND             reduce using rule 125 (functionorlist -> add_to_stack .)
    OR              reduce using rule 125 (functionorlist -> add_to_stack .)
    C_PARENTHESIS   reduce using rule 125 (functionorlist -> add_to_stack .)
    COMMA           reduce using rule 125 (functionorlist -> add_to_stack .)
    SEMICOLON       reduce using rule 125 (functionorlist -> add_to_stack .)
    C_S_BRACKET     reduce using rule 125 (functionorlist -> add_to_stack .)


state 134

    (124) functionorlist -> add_o_parenthesis . check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS generate_gosub add_c_parenthesis
    (151) check_function_exists -> .

    O_PARENTHESIS   reduce using rule 151 (check_function_exists -> .)

    check_function_exists          shift and go to state 156

state 135

    (121) varconstfunction -> ID functionorlist .

    MULTIPLY        reduce using rule 121 (varconstfunction -> ID functionorlist .)
    DIVIDE          reduce using rule 121 (varconstfunction -> ID functionorlist .)
    MOD             reduce using rule 121 (varconstfunction -> ID functionorlist .)
    SUM             reduce using rule 121 (varconstfunction -> ID functionorlist .)
    MINUS           reduce using rule 121 (varconstfunction -> ID functionorlist .)
    EQUALITY        reduce using rule 121 (varconstfunction -> ID functionorlist .)
    GREATER         reduce using rule 121 (varconstfunction -> ID functionorlist .)
    GREATER_EQUAL   reduce using rule 121 (varconstfunction -> ID functionorlist .)
    LESS            reduce using rule 121 (varconstfunction -> ID functionorlist .)
    LESS_EQUAL      reduce using rule 121 (varconstfunction -> ID functionorlist .)
    DIFFERENT       reduce using rule 121 (varconstfunction -> ID functionorlist .)
    AND             reduce using rule 121 (varconstfunction -> ID functionorlist .)
    OR              reduce using rule 121 (varconstfunction -> ID functionorlist .)
    COMMA           reduce using rule 121 (varconstfunction -> ID functionorlist .)
    C_PARENTHESIS   reduce using rule 121 (varconstfunction -> ID functionorlist .)
    C_S_BRACKET     reduce using rule 121 (varconstfunction -> ID functionorlist .)
    SEMICOLON       reduce using rule 121 (varconstfunction -> ID functionorlist .)


state 136

    (123) functionorlist -> add_list_variable . add_o_parenthesis O_S_BRACKET expression C_S_BRACKET add_c_parenthesis add_list_index_to_stack
    (112) add_o_parenthesis -> .

    O_S_BRACKET     reduce using rule 112 (add_o_parenthesis -> .)

    add_o_parenthesis              shift and go to state 157

state 137

    (97) exp -> term exp_quadruple . exploop
    (99) exploop -> . addsub exp
    (100) exploop -> .
    (101) addsub -> . SUM
    (102) addsub -> . MINUS

    EQUALITY        reduce using rule 100 (exploop -> .)
    GREATER         reduce using rule 100 (exploop -> .)
    GREATER_EQUAL   reduce using rule 100 (exploop -> .)
    LESS            reduce using rule 100 (exploop -> .)
    LESS_EQUAL      reduce using rule 100 (exploop -> .)
    DIFFERENT       reduce using rule 100 (exploop -> .)
    AND             reduce using rule 100 (exploop -> .)
    OR              reduce using rule 100 (exploop -> .)
    C_PARENTHESIS   reduce using rule 100 (exploop -> .)
    COMMA           reduce using rule 100 (exploop -> .)
    SEMICOLON       reduce using rule 100 (exploop -> .)
    C_S_BRACKET     reduce using rule 100 (exploop -> .)
    SUM             shift and go to state 158
    MINUS           shift and go to state 159

    exploop                        shift and go to state 160
    addsub                         shift and go to state 161

state 138

    (132) booleanconst -> FALSE add_bool_constant_to_dict .

    MULTIPLY        reduce using rule 132 (booleanconst -> FALSE add_bool_constant_to_dict .)
    DIVIDE          reduce using rule 132 (booleanconst -> FALSE add_bool_constant_to_dict .)
    MOD             reduce using rule 132 (booleanconst -> FALSE add_bool_constant_to_dict .)
    SUM             reduce using rule 132 (booleanconst -> FALSE add_bool_constant_to_dict .)
    MINUS           reduce using rule 132 (booleanconst -> FALSE add_bool_constant_to_dict .)
    EQUALITY        reduce using rule 132 (booleanconst -> FALSE add_bool_constant_to_dict .)
    GREATER         reduce using rule 132 (booleanconst -> FALSE add_bool_constant_to_dict .)
    GREATER_EQUAL   reduce using rule 132 (booleanconst -> FALSE add_bool_constant_to_dict .)
    LESS            reduce using rule 132 (booleanconst -> FALSE add_bool_constant_to_dict .)
    LESS_EQUAL      reduce using rule 132 (booleanconst -> FALSE add_bool_constant_to_dict .)
    DIFFERENT       reduce using rule 132 (booleanconst -> FALSE add_bool_constant_to_dict .)
    AND             reduce using rule 132 (booleanconst -> FALSE add_bool_constant_to_dict .)
    OR              reduce using rule 132 (booleanconst -> FALSE add_bool_constant_to_dict .)
    C_PARENTHESIS   reduce using rule 132 (booleanconst -> FALSE add_bool_constant_to_dict .)
    COMMA           reduce using rule 132 (booleanconst -> FALSE add_bool_constant_to_dict .)
    SEMICOLON       reduce using rule 132 (booleanconst -> FALSE add_bool_constant_to_dict .)
    C_S_BRACKET     reduce using rule 132 (booleanconst -> FALSE add_bool_constant_to_dict .)


state 139

    (146) timesloop -> TIMES O_PARENTHESIS expression C_PARENTHESIS . start_times block end_times
    (148) start_times -> .

    O_BRACKET       reduce using rule 148 (start_times -> .)

    start_times                    shift and go to state 162

state 140

    (103) term -> fact term_quadruple . termloop
    (105) termloop -> . divmult term
    (106) termloop -> .
    (107) divmult -> . MULTIPLY
    (108) divmult -> . DIVIDE
    (109) divmult -> . MOD

    SUM             reduce using rule 106 (termloop -> .)
    MINUS           reduce using rule 106 (termloop -> .)
    EQUALITY        reduce using rule 106 (termloop -> .)
    GREATER         reduce using rule 106 (termloop -> .)
    GREATER_EQUAL   reduce using rule 106 (termloop -> .)
    LESS            reduce using rule 106 (termloop -> .)
    LESS_EQUAL      reduce using rule 106 (termloop -> .)
    DIFFERENT       reduce using rule 106 (termloop -> .)
    AND             reduce using rule 106 (termloop -> .)
    OR              reduce using rule 106 (termloop -> .)
    C_PARENTHESIS   reduce using rule 106 (termloop -> .)
    COMMA           reduce using rule 106 (termloop -> .)
    SEMICOLON       reduce using rule 106 (termloop -> .)
    C_S_BRACKET     reduce using rule 106 (termloop -> .)
    MULTIPLY        shift and go to state 165
    DIVIDE          shift and go to state 163
    MOD             shift and go to state 167

    termloop                       shift and go to state 164
    divmult                        shift and go to state 166

state 141

    (141) whileloop -> WHILE start_while O_PARENTHESIS expression . C_PARENTHESIS condition_while block end_while

    C_PARENTHESIS   shift and go to state 168


state 142

    (57) writtingloop -> start_printing expression . print_quadruple optionalwritting
    (56) print_quadruple -> .

    COMMA           reduce using rule 56 (print_quadruple -> .)
    C_PARENTHESIS   reduce using rule 56 (print_quadruple -> .)

    print_quadruple                shift and go to state 169

state 143

    (54) writting -> PRINT O_PARENTHESIS writtingloop C_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 170


state 144

    (53) assignation -> var_assign EQUALS add_equals expression . equals_quadruple SEMICOLON
    (63) equals_quadruple -> .

    SEMICOLON       reduce using rule 63 (equals_quadruple -> .)

    equals_quadruple               shift and go to state 171

state 145

    (62) normalinit -> type var EQUALS add_equals . expression equals_quadruple SEMICOLON
    (81) expression -> . expression2 expressionoptional
    (84) expression2 -> . exp expression2optional
    (97) exp -> . term exp_quadruple exploop
    (103) term -> . fact term_quadruple termloop
    (110) fact -> . varconst
    (111) fact -> . O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis
    (119) varconst -> . varconstfunction
    (120) varconst -> . constants
    (121) varconstfunction -> . ID functionorlist
    (127) constants -> . INTCONST add_int_constant_to_dict
    (128) constants -> . FLOATCONST add_float_constant_to_dict
    (129) constants -> . STRINGCONST add_string_constant_to_dict
    (130) constants -> . booleanconst
    (131) booleanconst -> . TRUE add_bool_constant_to_dict
    (132) booleanconst -> . FALSE add_bool_constant_to_dict

    O_PARENTHESIS   shift and go to state 87
    ID              shift and go to state 94
    INTCONST        shift and go to state 92
    FLOATCONST      shift and go to state 86
    STRINGCONST     shift and go to state 89
    TRUE            shift and go to state 88
    FALSE           shift and go to state 97

    varconstfunction               shift and go to state 90
    expression2                    shift and go to state 93
    constants                      shift and go to state 95
    term                           shift and go to state 96
    varconst                       shift and go to state 98
    exp                            shift and go to state 91
    booleanconst                   shift and go to state 99
    expression                     shift and go to state 172
    fact                           shift and go to state 101

state 146

    (150) functioncall -> ID add_o_parenthesis check_function_exists O_PARENTHESIS . parametersinput C_PARENTHESIS SEMICOLON generate_gosub add_c_parenthesis
    (153) parametersinput -> . expression push_type_to_function_options generate_parameter_quadruple parametersinputloop check_params_order
    (154) parametersinput -> .
    (81) expression -> . expression2 expressionoptional
    (84) expression2 -> . exp expression2optional
    (97) exp -> . term exp_quadruple exploop
    (103) term -> . fact term_quadruple termloop
    (110) fact -> . varconst
    (111) fact -> . O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis
    (119) varconst -> . varconstfunction
    (120) varconst -> . constants
    (121) varconstfunction -> . ID functionorlist
    (127) constants -> . INTCONST add_int_constant_to_dict
    (128) constants -> . FLOATCONST add_float_constant_to_dict
    (129) constants -> . STRINGCONST add_string_constant_to_dict
    (130) constants -> . booleanconst
    (131) booleanconst -> . TRUE add_bool_constant_to_dict
    (132) booleanconst -> . FALSE add_bool_constant_to_dict

    C_PARENTHESIS   reduce using rule 154 (parametersinput -> .)
    O_PARENTHESIS   shift and go to state 87
    ID              shift and go to state 94
    INTCONST        shift and go to state 92
    FLOATCONST      shift and go to state 86
    STRINGCONST     shift and go to state 89
    TRUE            shift and go to state 88
    FALSE           shift and go to state 97

    varconstfunction               shift and go to state 90
    exp                            shift and go to state 91
    parametersinput                shift and go to state 173
    expression2                    shift and go to state 93
    constants                      shift and go to state 95
    term                           shift and go to state 96
    varconst                       shift and go to state 98
    booleanconst                   shift and go to state 99
    expression                     shift and go to state 174
    fact                           shift and go to state 101

state 147

    (116) listaccess -> add_list_variable add_o_parenthesis O_S_BRACKET . expression C_S_BRACKET add_c_parenthesis add_list_index_to_stack
    (81) expression -> . expression2 expressionoptional
    (84) expression2 -> . exp expression2optional
    (97) exp -> . term exp_quadruple exploop
    (103) term -> . fact term_quadruple termloop
    (110) fact -> . varconst
    (111) fact -> . O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis
    (119) varconst -> . varconstfunction
    (120) varconst -> . constants
    (121) varconstfunction -> . ID functionorlist
    (127) constants -> . INTCONST add_int_constant_to_dict
    (128) constants -> . FLOATCONST add_float_constant_to_dict
    (129) constants -> . STRINGCONST add_string_constant_to_dict
    (130) constants -> . booleanconst
    (131) booleanconst -> . TRUE add_bool_constant_to_dict
    (132) booleanconst -> . FALSE add_bool_constant_to_dict

    O_PARENTHESIS   shift and go to state 87
    ID              shift and go to state 94
    INTCONST        shift and go to state 92
    FLOATCONST      shift and go to state 86
    STRINGCONST     shift and go to state 89
    TRUE            shift and go to state 88
    FALSE           shift and go to state 97

    varconstfunction               shift and go to state 90
    exp                            shift and go to state 91
    expression2                    shift and go to state 93
    constants                      shift and go to state 95
    term                           shift and go to state 96
    varconst                       shift and go to state 98
    booleanconst                   shift and go to state 99
    expression                     shift and go to state 175
    fact                           shift and go to state 101

state 148

    (72) condition -> IF O_PARENTHESIS expression C_PARENTHESIS . start_condition block else end_condition
    (78) start_condition -> .

    O_BRACKET       reduce using rule 78 (start_condition -> .)

    start_condition                shift and go to state 176

state 149

    (65) listinit -> LIST type ID EQUALS . start_list list SEMICOLON
    (67) start_list -> .

    O_S_BRACKET     reduce using rule 67 (start_list -> .)

    start_list                     shift and go to state 177

state 150

    (18) function_with_return_def -> ID add_function_id_to_options add_function_to_global_variables check_current_quadruple O_PARENTHESIS parameters C_PARENTHESIS . add_function_init_to_dict functionblock
    (11) add_function_init_to_dict -> .

    O_BRACKET       reduce using rule 11 (add_function_init_to_dict -> .)

    add_function_init_to_dict      shift and go to state 178

state 151

    (20) function_def -> ID add_function_id_to_options check_current_quadruple O_PARENTHESIS parameters C_PARENTHESIS add_function_init_to_dict . block
    (31) block -> . O_BRACKET statutesloop C_BRACKET

    O_BRACKET       shift and go to state 33

    block                          shift and go to state 179

state 152

    (163) parametersloop -> COMMA parameterinit . parametersloop
    (163) parametersloop -> . COMMA parameterinit parametersloop
    (164) parametersloop -> .

    COMMA           shift and go to state 115
    C_PARENTHESIS   reduce using rule 164 (parametersloop -> .)

    parametersloop                 shift and go to state 180

state 153

    (111) fact -> O_PARENTHESIS add_o_parenthesis expression . C_PARENTHESIS add_c_parenthesis

    C_PARENTHESIS   shift and go to state 181


state 154

    (85) expression2optional -> relop exp . relop_quadruple
    (96) relop_quadruple -> .

    AND             reduce using rule 96 (relop_quadruple -> .)
    OR              reduce using rule 96 (relop_quadruple -> .)
    C_PARENTHESIS   reduce using rule 96 (relop_quadruple -> .)
    COMMA           reduce using rule 96 (relop_quadruple -> .)
    SEMICOLON       reduce using rule 96 (relop_quadruple -> .)
    C_S_BRACKET     reduce using rule 96 (relop_quadruple -> .)

    relop_quadruple                shift and go to state 182

state 155

    (82) expressionoptional -> logicop expression2 . logic_op_quadruple
    (89) logic_op_quadruple -> .

    C_PARENTHESIS   reduce using rule 89 (logic_op_quadruple -> .)
    COMMA           reduce using rule 89 (logic_op_quadruple -> .)
    SEMICOLON       reduce using rule 89 (logic_op_quadruple -> .)
    C_S_BRACKET     reduce using rule 89 (logic_op_quadruple -> .)

    logic_op_quadruple             shift and go to state 183

state 156

    (124) functionorlist -> add_o_parenthesis check_function_exists . O_PARENTHESIS parametersinput C_PARENTHESIS generate_gosub add_c_parenthesis

    O_PARENTHESIS   shift and go to state 184


state 157

    (123) functionorlist -> add_list_variable add_o_parenthesis . O_S_BRACKET expression C_S_BRACKET add_c_parenthesis add_list_index_to_stack

    O_S_BRACKET     shift and go to state 185


state 158

    (101) addsub -> SUM .

    O_PARENTHESIS   reduce using rule 101 (addsub -> SUM .)
    ID              reduce using rule 101 (addsub -> SUM .)
    INTCONST        reduce using rule 101 (addsub -> SUM .)
    FLOATCONST      reduce using rule 101 (addsub -> SUM .)
    STRINGCONST     reduce using rule 101 (addsub -> SUM .)
    TRUE            reduce using rule 101 (addsub -> SUM .)
    FALSE           reduce using rule 101 (addsub -> SUM .)


state 159

    (102) addsub -> MINUS .

    O_PARENTHESIS   reduce using rule 102 (addsub -> MINUS .)
    ID              reduce using rule 102 (addsub -> MINUS .)
    INTCONST        reduce using rule 102 (addsub -> MINUS .)
    FLOATCONST      reduce using rule 102 (addsub -> MINUS .)
    STRINGCONST     reduce using rule 102 (addsub -> MINUS .)
    TRUE            reduce using rule 102 (addsub -> MINUS .)
    FALSE           reduce using rule 102 (addsub -> MINUS .)


state 160

    (97) exp -> term exp_quadruple exploop .

    EQUALITY        reduce using rule 97 (exp -> term exp_quadruple exploop .)
    GREATER         reduce using rule 97 (exp -> term exp_quadruple exploop .)
    GREATER_EQUAL   reduce using rule 97 (exp -> term exp_quadruple exploop .)
    LESS            reduce using rule 97 (exp -> term exp_quadruple exploop .)
    LESS_EQUAL      reduce using rule 97 (exp -> term exp_quadruple exploop .)
    DIFFERENT       reduce using rule 97 (exp -> term exp_quadruple exploop .)
    AND             reduce using rule 97 (exp -> term exp_quadruple exploop .)
    OR              reduce using rule 97 (exp -> term exp_quadruple exploop .)
    COMMA           reduce using rule 97 (exp -> term exp_quadruple exploop .)
    C_PARENTHESIS   reduce using rule 97 (exp -> term exp_quadruple exploop .)
    SEMICOLON       reduce using rule 97 (exp -> term exp_quadruple exploop .)
    C_S_BRACKET     reduce using rule 97 (exp -> term exp_quadruple exploop .)


state 161

    (99) exploop -> addsub . exp
    (97) exp -> . term exp_quadruple exploop
    (103) term -> . fact term_quadruple termloop
    (110) fact -> . varconst
    (111) fact -> . O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis
    (119) varconst -> . varconstfunction
    (120) varconst -> . constants
    (121) varconstfunction -> . ID functionorlist
    (127) constants -> . INTCONST add_int_constant_to_dict
    (128) constants -> . FLOATCONST add_float_constant_to_dict
    (129) constants -> . STRINGCONST add_string_constant_to_dict
    (130) constants -> . booleanconst
    (131) booleanconst -> . TRUE add_bool_constant_to_dict
    (132) booleanconst -> . FALSE add_bool_constant_to_dict

    O_PARENTHESIS   shift and go to state 87
    ID              shift and go to state 94
    INTCONST        shift and go to state 92
    FLOATCONST      shift and go to state 86
    STRINGCONST     shift and go to state 89
    TRUE            shift and go to state 88
    FALSE           shift and go to state 97

    term                           shift and go to state 96
    varconst                       shift and go to state 98
    constants                      shift and go to state 95
    exp                            shift and go to state 186
    booleanconst                   shift and go to state 99
    varconstfunction               shift and go to state 90
    fact                           shift and go to state 101

state 162

    (146) timesloop -> TIMES O_PARENTHESIS expression C_PARENTHESIS start_times . block end_times
    (31) block -> . O_BRACKET statutesloop C_BRACKET

    O_BRACKET       shift and go to state 33

    block                          shift and go to state 187

state 163

    (108) divmult -> DIVIDE .

    O_PARENTHESIS   reduce using rule 108 (divmult -> DIVIDE .)
    ID              reduce using rule 108 (divmult -> DIVIDE .)
    INTCONST        reduce using rule 108 (divmult -> DIVIDE .)
    FLOATCONST      reduce using rule 108 (divmult -> DIVIDE .)
    STRINGCONST     reduce using rule 108 (divmult -> DIVIDE .)
    TRUE            reduce using rule 108 (divmult -> DIVIDE .)
    FALSE           reduce using rule 108 (divmult -> DIVIDE .)


state 164

    (103) term -> fact term_quadruple termloop .

    SUM             reduce using rule 103 (term -> fact term_quadruple termloop .)
    MINUS           reduce using rule 103 (term -> fact term_quadruple termloop .)
    AND             reduce using rule 103 (term -> fact term_quadruple termloop .)
    OR              reduce using rule 103 (term -> fact term_quadruple termloop .)
    C_PARENTHESIS   reduce using rule 103 (term -> fact term_quadruple termloop .)
    COMMA           reduce using rule 103 (term -> fact term_quadruple termloop .)
    SEMICOLON       reduce using rule 103 (term -> fact term_quadruple termloop .)
    C_S_BRACKET     reduce using rule 103 (term -> fact term_quadruple termloop .)
    EQUALITY        reduce using rule 103 (term -> fact term_quadruple termloop .)
    GREATER         reduce using rule 103 (term -> fact term_quadruple termloop .)
    GREATER_EQUAL   reduce using rule 103 (term -> fact term_quadruple termloop .)
    LESS            reduce using rule 103 (term -> fact term_quadruple termloop .)
    LESS_EQUAL      reduce using rule 103 (term -> fact term_quadruple termloop .)
    DIFFERENT       reduce using rule 103 (term -> fact term_quadruple termloop .)


state 165

    (107) divmult -> MULTIPLY .

    O_PARENTHESIS   reduce using rule 107 (divmult -> MULTIPLY .)
    ID              reduce using rule 107 (divmult -> MULTIPLY .)
    INTCONST        reduce using rule 107 (divmult -> MULTIPLY .)
    FLOATCONST      reduce using rule 107 (divmult -> MULTIPLY .)
    STRINGCONST     reduce using rule 107 (divmult -> MULTIPLY .)
    TRUE            reduce using rule 107 (divmult -> MULTIPLY .)
    FALSE           reduce using rule 107 (divmult -> MULTIPLY .)


state 166

    (105) termloop -> divmult . term
    (103) term -> . fact term_quadruple termloop
    (110) fact -> . varconst
    (111) fact -> . O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis
    (119) varconst -> . varconstfunction
    (120) varconst -> . constants
    (121) varconstfunction -> . ID functionorlist
    (127) constants -> . INTCONST add_int_constant_to_dict
    (128) constants -> . FLOATCONST add_float_constant_to_dict
    (129) constants -> . STRINGCONST add_string_constant_to_dict
    (130) constants -> . booleanconst
    (131) booleanconst -> . TRUE add_bool_constant_to_dict
    (132) booleanconst -> . FALSE add_bool_constant_to_dict

    O_PARENTHESIS   shift and go to state 87
    ID              shift and go to state 94
    INTCONST        shift and go to state 92
    FLOATCONST      shift and go to state 86
    STRINGCONST     shift and go to state 89
    TRUE            shift and go to state 88
    FALSE           shift and go to state 97

    term                           shift and go to state 188
    varconstfunction               shift and go to state 90
    varconst                       shift and go to state 98
    constants                      shift and go to state 95
    booleanconst                   shift and go to state 99
    fact                           shift and go to state 101

state 167

    (109) divmult -> MOD .

    O_PARENTHESIS   reduce using rule 109 (divmult -> MOD .)
    ID              reduce using rule 109 (divmult -> MOD .)
    INTCONST        reduce using rule 109 (divmult -> MOD .)
    FLOATCONST      reduce using rule 109 (divmult -> MOD .)
    STRINGCONST     reduce using rule 109 (divmult -> MOD .)
    TRUE            reduce using rule 109 (divmult -> MOD .)
    FALSE           reduce using rule 109 (divmult -> MOD .)


state 168

    (141) whileloop -> WHILE start_while O_PARENTHESIS expression C_PARENTHESIS . condition_while block end_while
    (144) condition_while -> .

    O_BRACKET       reduce using rule 144 (condition_while -> .)

    condition_while                shift and go to state 189

state 169

    (57) writtingloop -> start_printing expression print_quadruple . optionalwritting
    (58) optionalwritting -> . COMMA writtingloop
    (59) optionalwritting -> .

    COMMA           shift and go to state 191
    C_PARENTHESIS   reduce using rule 59 (optionalwritting -> .)

    optionalwritting               shift and go to state 190

state 170

    (54) writting -> PRINT O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON .

    RETURN          reduce using rule 54 (writting -> PRINT O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON .)
    IF              reduce using rule 54 (writting -> PRINT O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON .)
    PRINT           reduce using rule 54 (writting -> PRINT O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON .)
    ID              reduce using rule 54 (writting -> PRINT O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON .)
    LIST            reduce using rule 54 (writting -> PRINT O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON .)
    WHILE           reduce using rule 54 (writting -> PRINT O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON .)
    TIMES           reduce using rule 54 (writting -> PRINT O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON .)
    BOOL            reduce using rule 54 (writting -> PRINT O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON .)
    INT             reduce using rule 54 (writting -> PRINT O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON .)
    FLOAT           reduce using rule 54 (writting -> PRINT O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON .)
    STRING          reduce using rule 54 (writting -> PRINT O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON .)
    C_BRACKET       reduce using rule 54 (writting -> PRINT O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON .)


state 171

    (53) assignation -> var_assign EQUALS add_equals expression equals_quadruple . SEMICOLON

    SEMICOLON       shift and go to state 192


state 172

    (62) normalinit -> type var EQUALS add_equals expression . equals_quadruple SEMICOLON
    (63) equals_quadruple -> .

    SEMICOLON       reduce using rule 63 (equals_quadruple -> .)

    equals_quadruple               shift and go to state 193

state 173

    (150) functioncall -> ID add_o_parenthesis check_function_exists O_PARENTHESIS parametersinput . C_PARENTHESIS SEMICOLON generate_gosub add_c_parenthesis

    C_PARENTHESIS   shift and go to state 194


state 174

    (153) parametersinput -> expression . push_type_to_function_options generate_parameter_quadruple parametersinputloop check_params_order
    (157) push_type_to_function_options -> .

    COMMA           reduce using rule 157 (push_type_to_function_options -> .)
    C_PARENTHESIS   reduce using rule 157 (push_type_to_function_options -> .)

    push_type_to_function_options  shift and go to state 195

state 175

    (116) listaccess -> add_list_variable add_o_parenthesis O_S_BRACKET expression . C_S_BRACKET add_c_parenthesis add_list_index_to_stack

    C_S_BRACKET     shift and go to state 196


state 176

    (72) condition -> IF O_PARENTHESIS expression C_PARENTHESIS start_condition . block else end_condition
    (31) block -> . O_BRACKET statutesloop C_BRACKET

    O_BRACKET       shift and go to state 33

    block                          shift and go to state 197

state 177

    (65) listinit -> LIST type ID EQUALS start_list . list SEMICOLON
    (66) list -> . O_S_BRACKET listelements C_S_BRACKET

    O_S_BRACKET     shift and go to state 199

    list                           shift and go to state 198

state 178

    (18) function_with_return_def -> ID add_function_id_to_options add_function_to_global_variables check_current_quadruple O_PARENTHESIS parameters C_PARENTHESIS add_function_init_to_dict . functionblock
    (32) functionblock -> . O_BRACKET functionstatutesloop C_BRACKET

    O_BRACKET       shift and go to state 200

    functionblock                  shift and go to state 201

state 179

    (20) function_def -> ID add_function_id_to_options check_current_quadruple O_PARENTHESIS parameters C_PARENTHESIS add_function_init_to_dict block .

    FUNCTION        reduce using rule 20 (function_def -> ID add_function_id_to_options check_current_quadruple O_PARENTHESIS parameters C_PARENTHESIS add_function_init_to_dict block .)
    MAIN            reduce using rule 20 (function_def -> ID add_function_id_to_options check_current_quadruple O_PARENTHESIS parameters C_PARENTHESIS add_function_init_to_dict block .)


state 180

    (163) parametersloop -> COMMA parameterinit parametersloop .

    C_PARENTHESIS   reduce using rule 163 (parametersloop -> COMMA parameterinit parametersloop .)


state 181

    (111) fact -> O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS . add_c_parenthesis
    (113) add_c_parenthesis -> .

    MULTIPLY        reduce using rule 113 (add_c_parenthesis -> .)
    DIVIDE          reduce using rule 113 (add_c_parenthesis -> .)
    MOD             reduce using rule 113 (add_c_parenthesis -> .)
    SUM             reduce using rule 113 (add_c_parenthesis -> .)
    MINUS           reduce using rule 113 (add_c_parenthesis -> .)
    EQUALITY        reduce using rule 113 (add_c_parenthesis -> .)
    GREATER         reduce using rule 113 (add_c_parenthesis -> .)
    GREATER_EQUAL   reduce using rule 113 (add_c_parenthesis -> .)
    LESS            reduce using rule 113 (add_c_parenthesis -> .)
    LESS_EQUAL      reduce using rule 113 (add_c_parenthesis -> .)
    DIFFERENT       reduce using rule 113 (add_c_parenthesis -> .)
    AND             reduce using rule 113 (add_c_parenthesis -> .)
    OR              reduce using rule 113 (add_c_parenthesis -> .)
    C_PARENTHESIS   reduce using rule 113 (add_c_parenthesis -> .)
    COMMA           reduce using rule 113 (add_c_parenthesis -> .)
    SEMICOLON       reduce using rule 113 (add_c_parenthesis -> .)
    C_S_BRACKET     reduce using rule 113 (add_c_parenthesis -> .)

    add_c_parenthesis              shift and go to state 202

state 182

    (85) expression2optional -> relop exp relop_quadruple .

    AND             reduce using rule 85 (expression2optional -> relop exp relop_quadruple .)
    OR              reduce using rule 85 (expression2optional -> relop exp relop_quadruple .)
    C_PARENTHESIS   reduce using rule 85 (expression2optional -> relop exp relop_quadruple .)
    COMMA           reduce using rule 85 (expression2optional -> relop exp relop_quadruple .)
    SEMICOLON       reduce using rule 85 (expression2optional -> relop exp relop_quadruple .)
    C_S_BRACKET     reduce using rule 85 (expression2optional -> relop exp relop_quadruple .)


state 183

    (82) expressionoptional -> logicop expression2 logic_op_quadruple .

    C_PARENTHESIS   reduce using rule 82 (expressionoptional -> logicop expression2 logic_op_quadruple .)
    COMMA           reduce using rule 82 (expressionoptional -> logicop expression2 logic_op_quadruple .)
    SEMICOLON       reduce using rule 82 (expressionoptional -> logicop expression2 logic_op_quadruple .)
    C_S_BRACKET     reduce using rule 82 (expressionoptional -> logicop expression2 logic_op_quadruple .)


state 184

    (124) functionorlist -> add_o_parenthesis check_function_exists O_PARENTHESIS . parametersinput C_PARENTHESIS generate_gosub add_c_parenthesis
    (153) parametersinput -> . expression push_type_to_function_options generate_parameter_quadruple parametersinputloop check_params_order
    (154) parametersinput -> .
    (81) expression -> . expression2 expressionoptional
    (84) expression2 -> . exp expression2optional
    (97) exp -> . term exp_quadruple exploop
    (103) term -> . fact term_quadruple termloop
    (110) fact -> . varconst
    (111) fact -> . O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis
    (119) varconst -> . varconstfunction
    (120) varconst -> . constants
    (121) varconstfunction -> . ID functionorlist
    (127) constants -> . INTCONST add_int_constant_to_dict
    (128) constants -> . FLOATCONST add_float_constant_to_dict
    (129) constants -> . STRINGCONST add_string_constant_to_dict
    (130) constants -> . booleanconst
    (131) booleanconst -> . TRUE add_bool_constant_to_dict
    (132) booleanconst -> . FALSE add_bool_constant_to_dict

    C_PARENTHESIS   reduce using rule 154 (parametersinput -> .)
    O_PARENTHESIS   shift and go to state 87
    ID              shift and go to state 94
    INTCONST        shift and go to state 92
    FLOATCONST      shift and go to state 86
    STRINGCONST     shift and go to state 89
    TRUE            shift and go to state 88
    FALSE           shift and go to state 97

    varconstfunction               shift and go to state 90
    exp                            shift and go to state 91
    parametersinput                shift and go to state 203
    expression2                    shift and go to state 93
    constants                      shift and go to state 95
    term                           shift and go to state 96
    varconst                       shift and go to state 98
    booleanconst                   shift and go to state 99
    expression                     shift and go to state 174
    fact                           shift and go to state 101

state 185

    (123) functionorlist -> add_list_variable add_o_parenthesis O_S_BRACKET . expression C_S_BRACKET add_c_parenthesis add_list_index_to_stack
    (81) expression -> . expression2 expressionoptional
    (84) expression2 -> . exp expression2optional
    (97) exp -> . term exp_quadruple exploop
    (103) term -> . fact term_quadruple termloop
    (110) fact -> . varconst
    (111) fact -> . O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis
    (119) varconst -> . varconstfunction
    (120) varconst -> . constants
    (121) varconstfunction -> . ID functionorlist
    (127) constants -> . INTCONST add_int_constant_to_dict
    (128) constants -> . FLOATCONST add_float_constant_to_dict
    (129) constants -> . STRINGCONST add_string_constant_to_dict
    (130) constants -> . booleanconst
    (131) booleanconst -> . TRUE add_bool_constant_to_dict
    (132) booleanconst -> . FALSE add_bool_constant_to_dict

    O_PARENTHESIS   shift and go to state 87
    ID              shift and go to state 94
    INTCONST        shift and go to state 92
    FLOATCONST      shift and go to state 86
    STRINGCONST     shift and go to state 89
    TRUE            shift and go to state 88
    FALSE           shift and go to state 97

    varconstfunction               shift and go to state 90
    exp                            shift and go to state 91
    expression2                    shift and go to state 93
    constants                      shift and go to state 95
    term                           shift and go to state 96
    varconst                       shift and go to state 98
    booleanconst                   shift and go to state 99
    expression                     shift and go to state 204
    fact                           shift and go to state 101

state 186

    (99) exploop -> addsub exp .

    EQUALITY        reduce using rule 99 (exploop -> addsub exp .)
    GREATER         reduce using rule 99 (exploop -> addsub exp .)
    GREATER_EQUAL   reduce using rule 99 (exploop -> addsub exp .)
    LESS            reduce using rule 99 (exploop -> addsub exp .)
    LESS_EQUAL      reduce using rule 99 (exploop -> addsub exp .)
    DIFFERENT       reduce using rule 99 (exploop -> addsub exp .)
    AND             reduce using rule 99 (exploop -> addsub exp .)
    OR              reduce using rule 99 (exploop -> addsub exp .)
    C_PARENTHESIS   reduce using rule 99 (exploop -> addsub exp .)
    COMMA           reduce using rule 99 (exploop -> addsub exp .)
    SEMICOLON       reduce using rule 99 (exploop -> addsub exp .)
    C_S_BRACKET     reduce using rule 99 (exploop -> addsub exp .)


state 187

    (146) timesloop -> TIMES O_PARENTHESIS expression C_PARENTHESIS start_times block . end_times
    (149) end_times -> .

    IF              reduce using rule 149 (end_times -> .)
    PRINT           reduce using rule 149 (end_times -> .)
    ID              reduce using rule 149 (end_times -> .)
    LIST            reduce using rule 149 (end_times -> .)
    WHILE           reduce using rule 149 (end_times -> .)
    TIMES           reduce using rule 149 (end_times -> .)
    BOOL            reduce using rule 149 (end_times -> .)
    INT             reduce using rule 149 (end_times -> .)
    FLOAT           reduce using rule 149 (end_times -> .)
    STRING          reduce using rule 149 (end_times -> .)
    C_BRACKET       reduce using rule 149 (end_times -> .)

    end_times                      shift and go to state 205

state 188

    (105) termloop -> divmult term .

    SUM             reduce using rule 105 (termloop -> divmult term .)
    MINUS           reduce using rule 105 (termloop -> divmult term .)
    EQUALITY        reduce using rule 105 (termloop -> divmult term .)
    GREATER         reduce using rule 105 (termloop -> divmult term .)
    GREATER_EQUAL   reduce using rule 105 (termloop -> divmult term .)
    LESS            reduce using rule 105 (termloop -> divmult term .)
    LESS_EQUAL      reduce using rule 105 (termloop -> divmult term .)
    DIFFERENT       reduce using rule 105 (termloop -> divmult term .)
    AND             reduce using rule 105 (termloop -> divmult term .)
    OR              reduce using rule 105 (termloop -> divmult term .)
    C_PARENTHESIS   reduce using rule 105 (termloop -> divmult term .)
    COMMA           reduce using rule 105 (termloop -> divmult term .)
    SEMICOLON       reduce using rule 105 (termloop -> divmult term .)
    C_S_BRACKET     reduce using rule 105 (termloop -> divmult term .)


state 189

    (141) whileloop -> WHILE start_while O_PARENTHESIS expression C_PARENTHESIS condition_while . block end_while
    (31) block -> . O_BRACKET statutesloop C_BRACKET

    O_BRACKET       shift and go to state 33

    block                          shift and go to state 206

state 190

    (57) writtingloop -> start_printing expression print_quadruple optionalwritting .

    C_PARENTHESIS   reduce using rule 57 (writtingloop -> start_printing expression print_quadruple optionalwritting .)


state 191

    (58) optionalwritting -> COMMA . writtingloop
    (57) writtingloop -> . start_printing expression print_quadruple optionalwritting
    (55) start_printing -> .

    O_PARENTHESIS   reduce using rule 55 (start_printing -> .)
    ID              reduce using rule 55 (start_printing -> .)
    INTCONST        reduce using rule 55 (start_printing -> .)
    FLOATCONST      reduce using rule 55 (start_printing -> .)
    STRINGCONST     reduce using rule 55 (start_printing -> .)
    TRUE            reduce using rule 55 (start_printing -> .)
    FALSE           reduce using rule 55 (start_printing -> .)

    writtingloop                   shift and go to state 207
    start_printing                 shift and go to state 103

state 192

    (53) assignation -> var_assign EQUALS add_equals expression equals_quadruple SEMICOLON .

    RETURN          reduce using rule 53 (assignation -> var_assign EQUALS add_equals expression equals_quadruple SEMICOLON .)
    IF              reduce using rule 53 (assignation -> var_assign EQUALS add_equals expression equals_quadruple SEMICOLON .)
    PRINT           reduce using rule 53 (assignation -> var_assign EQUALS add_equals expression equals_quadruple SEMICOLON .)
    ID              reduce using rule 53 (assignation -> var_assign EQUALS add_equals expression equals_quadruple SEMICOLON .)
    LIST            reduce using rule 53 (assignation -> var_assign EQUALS add_equals expression equals_quadruple SEMICOLON .)
    WHILE           reduce using rule 53 (assignation -> var_assign EQUALS add_equals expression equals_quadruple SEMICOLON .)
    TIMES           reduce using rule 53 (assignation -> var_assign EQUALS add_equals expression equals_quadruple SEMICOLON .)
    BOOL            reduce using rule 53 (assignation -> var_assign EQUALS add_equals expression equals_quadruple SEMICOLON .)
    INT             reduce using rule 53 (assignation -> var_assign EQUALS add_equals expression equals_quadruple SEMICOLON .)
    FLOAT           reduce using rule 53 (assignation -> var_assign EQUALS add_equals expression equals_quadruple SEMICOLON .)
    STRING          reduce using rule 53 (assignation -> var_assign EQUALS add_equals expression equals_quadruple SEMICOLON .)
    C_BRACKET       reduce using rule 53 (assignation -> var_assign EQUALS add_equals expression equals_quadruple SEMICOLON .)


state 193

    (62) normalinit -> type var EQUALS add_equals expression equals_quadruple . SEMICOLON

    SEMICOLON       shift and go to state 208


state 194

    (150) functioncall -> ID add_o_parenthesis check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS . SEMICOLON generate_gosub add_c_parenthesis

    SEMICOLON       shift and go to state 209


state 195

    (153) parametersinput -> expression push_type_to_function_options . generate_parameter_quadruple parametersinputloop check_params_order
    (159) generate_parameter_quadruple -> .

    COMMA           reduce using rule 159 (generate_parameter_quadruple -> .)
    C_PARENTHESIS   reduce using rule 159 (generate_parameter_quadruple -> .)

    generate_parameter_quadruple   shift and go to state 210

state 196

    (116) listaccess -> add_list_variable add_o_parenthesis O_S_BRACKET expression C_S_BRACKET . add_c_parenthesis add_list_index_to_stack
    (113) add_c_parenthesis -> .

    EQUALS          reduce using rule 113 (add_c_parenthesis -> .)

    add_c_parenthesis              shift and go to state 211

state 197

    (72) condition -> IF O_PARENTHESIS expression C_PARENTHESIS start_condition block . else end_condition
    (74) else -> . ELSE else_condition block
    (75) else -> .

    ELSE            shift and go to state 212
    IF              reduce using rule 75 (else -> .)
    PRINT           reduce using rule 75 (else -> .)
    ID              reduce using rule 75 (else -> .)
    LIST            reduce using rule 75 (else -> .)
    WHILE           reduce using rule 75 (else -> .)
    TIMES           reduce using rule 75 (else -> .)
    BOOL            reduce using rule 75 (else -> .)
    INT             reduce using rule 75 (else -> .)
    FLOAT           reduce using rule 75 (else -> .)
    STRING          reduce using rule 75 (else -> .)
    C_BRACKET       reduce using rule 75 (else -> .)

    else                           shift and go to state 213

state 198

    (65) listinit -> LIST type ID EQUALS start_list list . SEMICOLON

    SEMICOLON       shift and go to state 214


state 199

    (66) list -> O_S_BRACKET . listelements C_S_BRACKET
    (68) listelements -> . expression generate_list_assignation optionallist
    (81) expression -> . expression2 expressionoptional
    (84) expression2 -> . exp expression2optional
    (97) exp -> . term exp_quadruple exploop
    (103) term -> . fact term_quadruple termloop
    (110) fact -> . varconst
    (111) fact -> . O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis
    (119) varconst -> . varconstfunction
    (120) varconst -> . constants
    (121) varconstfunction -> . ID functionorlist
    (127) constants -> . INTCONST add_int_constant_to_dict
    (128) constants -> . FLOATCONST add_float_constant_to_dict
    (129) constants -> . STRINGCONST add_string_constant_to_dict
    (130) constants -> . booleanconst
    (131) booleanconst -> . TRUE add_bool_constant_to_dict
    (132) booleanconst -> . FALSE add_bool_constant_to_dict

    O_PARENTHESIS   shift and go to state 87
    ID              shift and go to state 94
    INTCONST        shift and go to state 92
    FLOATCONST      shift and go to state 86
    STRINGCONST     shift and go to state 89
    TRUE            shift and go to state 88
    FALSE           shift and go to state 97

    varconstfunction               shift and go to state 90
    exp                            shift and go to state 91
    expression2                    shift and go to state 93
    constants                      shift and go to state 95
    term                           shift and go to state 96
    varconst                       shift and go to state 98
    listelements                   shift and go to state 215
    booleanconst                   shift and go to state 99
    expression                     shift and go to state 216
    fact                           shift and go to state 101

state 200

    (32) functionblock -> O_BRACKET . functionstatutesloop C_BRACKET
    (38) functionstatutesloop -> . functionstatute functionstatutesloop
    (39) functionstatutesloop -> . functionreturn
    (40) functionstatutesloop -> .
    (47) functionstatute -> . init
    (48) functionstatute -> . functioncondition
    (49) functionstatute -> . writting
    (50) functionstatute -> . functionloops
    (51) functionstatute -> . assignation
    (52) functionstatute -> . functioncall
    (33) functionreturn -> . RETURN add_function_var_to_stack expression SEMICOLON
    (60) init -> . listinit
    (61) init -> . normalinit
    (73) functioncondition -> . IF O_PARENTHESIS expression C_PARENTHESIS start_condition functionblock functionelse end_condition
    (54) writting -> . PRINT O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON
    (139) functionloops -> . functionwhileloop
    (140) functionloops -> . functiontimesloop
    (53) assignation -> . var_assign EQUALS add_equals expression equals_quadruple SEMICOLON
    (150) functioncall -> . ID add_o_parenthesis check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON generate_gosub add_c_parenthesis
    (65) listinit -> . LIST type ID EQUALS start_list list SEMICOLON
    (62) normalinit -> . type var EQUALS add_equals expression equals_quadruple SEMICOLON
    (142) functionwhileloop -> . WHILE start_while O_PARENTHESIS expression C_PARENTHESIS condition_while functionblock end_while
    (147) functiontimesloop -> . TIMES O_PARENTHESIS expression C_PARENTHESIS start_times functionblock end_times
    (114) var_assign -> . ID listaccess
    (23) type -> . BOOL
    (24) type -> . INT
    (25) type -> . FLOAT
    (26) type -> . STRING

    C_BRACKET       reduce using rule 40 (functionstatutesloop -> .)
    RETURN          shift and go to state 218
    IF              shift and go to state 229
    PRINT           shift and go to state 40
    ID              shift and go to state 51
    LIST            shift and go to state 59
    WHILE           shift and go to state 220
    TIMES           shift and go to state 217
    BOOL            shift and go to state 43
    INT             shift and go to state 57
    FLOAT           shift and go to state 58
    STRING          shift and go to state 47

    functionstatute                shift and go to state 219
    functiontimesloop              shift and go to state 221
    functionstatutesloop           shift and go to state 222
    functionwhileloop              shift and go to state 223
    init                           shift and go to state 224
    var_assign                     shift and go to state 44
    type                           shift and go to state 45
    listinit                       shift and go to state 48
    functionloops                  shift and go to state 225
    writting                       shift and go to state 226
    functionreturn                 shift and go to state 227
    functioncondition              shift and go to state 228
    assignation                    shift and go to state 230
    functioncall                   shift and go to state 231
    normalinit                     shift and go to state 46

state 201

    (18) function_with_return_def -> ID add_function_id_to_options add_function_to_global_variables check_current_quadruple O_PARENTHESIS parameters C_PARENTHESIS add_function_init_to_dict functionblock .

    FUNCTION        reduce using rule 18 (function_with_return_def -> ID add_function_id_to_options add_function_to_global_variables check_current_quadruple O_PARENTHESIS parameters C_PARENTHESIS add_function_init_to_dict functionblock .)
    MAIN            reduce using rule 18 (function_with_return_def -> ID add_function_id_to_options add_function_to_global_variables check_current_quadruple O_PARENTHESIS parameters C_PARENTHESIS add_function_init_to_dict functionblock .)


state 202

    (111) fact -> O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis .

    MULTIPLY        reduce using rule 111 (fact -> O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis .)
    DIVIDE          reduce using rule 111 (fact -> O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis .)
    MOD             reduce using rule 111 (fact -> O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis .)
    SUM             reduce using rule 111 (fact -> O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis .)
    MINUS           reduce using rule 111 (fact -> O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis .)
    EQUALITY        reduce using rule 111 (fact -> O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis .)
    GREATER         reduce using rule 111 (fact -> O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis .)
    GREATER_EQUAL   reduce using rule 111 (fact -> O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis .)
    LESS            reduce using rule 111 (fact -> O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis .)
    LESS_EQUAL      reduce using rule 111 (fact -> O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis .)
    DIFFERENT       reduce using rule 111 (fact -> O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis .)
    AND             reduce using rule 111 (fact -> O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis .)
    OR              reduce using rule 111 (fact -> O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis .)
    C_PARENTHESIS   reduce using rule 111 (fact -> O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis .)
    COMMA           reduce using rule 111 (fact -> O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis .)
    SEMICOLON       reduce using rule 111 (fact -> O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis .)
    C_S_BRACKET     reduce using rule 111 (fact -> O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis .)


state 203

    (124) functionorlist -> add_o_parenthesis check_function_exists O_PARENTHESIS parametersinput . C_PARENTHESIS generate_gosub add_c_parenthesis

    C_PARENTHESIS   shift and go to state 232


state 204

    (123) functionorlist -> add_list_variable add_o_parenthesis O_S_BRACKET expression . C_S_BRACKET add_c_parenthesis add_list_index_to_stack

    C_S_BRACKET     shift and go to state 233


state 205

    (146) timesloop -> TIMES O_PARENTHESIS expression C_PARENTHESIS start_times block end_times .

    IF              reduce using rule 146 (timesloop -> TIMES O_PARENTHESIS expression C_PARENTHESIS start_times block end_times .)
    PRINT           reduce using rule 146 (timesloop -> TIMES O_PARENTHESIS expression C_PARENTHESIS start_times block end_times .)
    ID              reduce using rule 146 (timesloop -> TIMES O_PARENTHESIS expression C_PARENTHESIS start_times block end_times .)
    LIST            reduce using rule 146 (timesloop -> TIMES O_PARENTHESIS expression C_PARENTHESIS start_times block end_times .)
    WHILE           reduce using rule 146 (timesloop -> TIMES O_PARENTHESIS expression C_PARENTHESIS start_times block end_times .)
    TIMES           reduce using rule 146 (timesloop -> TIMES O_PARENTHESIS expression C_PARENTHESIS start_times block end_times .)
    BOOL            reduce using rule 146 (timesloop -> TIMES O_PARENTHESIS expression C_PARENTHESIS start_times block end_times .)
    INT             reduce using rule 146 (timesloop -> TIMES O_PARENTHESIS expression C_PARENTHESIS start_times block end_times .)
    FLOAT           reduce using rule 146 (timesloop -> TIMES O_PARENTHESIS expression C_PARENTHESIS start_times block end_times .)
    STRING          reduce using rule 146 (timesloop -> TIMES O_PARENTHESIS expression C_PARENTHESIS start_times block end_times .)
    C_BRACKET       reduce using rule 146 (timesloop -> TIMES O_PARENTHESIS expression C_PARENTHESIS start_times block end_times .)


state 206

    (141) whileloop -> WHILE start_while O_PARENTHESIS expression C_PARENTHESIS condition_while block . end_while
    (145) end_while -> .

    IF              reduce using rule 145 (end_while -> .)
    PRINT           reduce using rule 145 (end_while -> .)
    ID              reduce using rule 145 (end_while -> .)
    LIST            reduce using rule 145 (end_while -> .)
    WHILE           reduce using rule 145 (end_while -> .)
    TIMES           reduce using rule 145 (end_while -> .)
    BOOL            reduce using rule 145 (end_while -> .)
    INT             reduce using rule 145 (end_while -> .)
    FLOAT           reduce using rule 145 (end_while -> .)
    STRING          reduce using rule 145 (end_while -> .)
    C_BRACKET       reduce using rule 145 (end_while -> .)

    end_while                      shift and go to state 234

state 207

    (58) optionalwritting -> COMMA writtingloop .

    C_PARENTHESIS   reduce using rule 58 (optionalwritting -> COMMA writtingloop .)


state 208

    (62) normalinit -> type var EQUALS add_equals expression equals_quadruple SEMICOLON .

    IF              reduce using rule 62 (normalinit -> type var EQUALS add_equals expression equals_quadruple SEMICOLON .)
    PRINT           reduce using rule 62 (normalinit -> type var EQUALS add_equals expression equals_quadruple SEMICOLON .)
    ID              reduce using rule 62 (normalinit -> type var EQUALS add_equals expression equals_quadruple SEMICOLON .)
    LIST            reduce using rule 62 (normalinit -> type var EQUALS add_equals expression equals_quadruple SEMICOLON .)
    WHILE           reduce using rule 62 (normalinit -> type var EQUALS add_equals expression equals_quadruple SEMICOLON .)
    TIMES           reduce using rule 62 (normalinit -> type var EQUALS add_equals expression equals_quadruple SEMICOLON .)
    BOOL            reduce using rule 62 (normalinit -> type var EQUALS add_equals expression equals_quadruple SEMICOLON .)
    INT             reduce using rule 62 (normalinit -> type var EQUALS add_equals expression equals_quadruple SEMICOLON .)
    FLOAT           reduce using rule 62 (normalinit -> type var EQUALS add_equals expression equals_quadruple SEMICOLON .)
    STRING          reduce using rule 62 (normalinit -> type var EQUALS add_equals expression equals_quadruple SEMICOLON .)
    C_BRACKET       reduce using rule 62 (normalinit -> type var EQUALS add_equals expression equals_quadruple SEMICOLON .)
    RETURN          reduce using rule 62 (normalinit -> type var EQUALS add_equals expression equals_quadruple SEMICOLON .)


state 209

    (150) functioncall -> ID add_o_parenthesis check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON . generate_gosub add_c_parenthesis
    (152) generate_gosub -> .

    IF              reduce using rule 152 (generate_gosub -> .)
    PRINT           reduce using rule 152 (generate_gosub -> .)
    ID              reduce using rule 152 (generate_gosub -> .)
    LIST            reduce using rule 152 (generate_gosub -> .)
    WHILE           reduce using rule 152 (generate_gosub -> .)
    TIMES           reduce using rule 152 (generate_gosub -> .)
    BOOL            reduce using rule 152 (generate_gosub -> .)
    INT             reduce using rule 152 (generate_gosub -> .)
    FLOAT           reduce using rule 152 (generate_gosub -> .)
    STRING          reduce using rule 152 (generate_gosub -> .)
    C_BRACKET       reduce using rule 152 (generate_gosub -> .)
    RETURN          reduce using rule 152 (generate_gosub -> .)

    generate_gosub                 shift and go to state 235

state 210

    (153) parametersinput -> expression push_type_to_function_options generate_parameter_quadruple . parametersinputloop check_params_order
    (155) parametersinputloop -> . COMMA expression push_type_to_function_options generate_parameter_quadruple parametersinputloop
    (156) parametersinputloop -> .

    COMMA           shift and go to state 237
    C_PARENTHESIS   reduce using rule 156 (parametersinputloop -> .)

    parametersinputloop            shift and go to state 236

state 211

    (116) listaccess -> add_list_variable add_o_parenthesis O_S_BRACKET expression C_S_BRACKET add_c_parenthesis . add_list_index_to_stack
    (118) add_list_index_to_stack -> .

    EQUALS          reduce using rule 118 (add_list_index_to_stack -> .)

    add_list_index_to_stack        shift and go to state 238

state 212

    (74) else -> ELSE . else_condition block
    (79) else_condition -> .

    O_BRACKET       reduce using rule 79 (else_condition -> .)

    else_condition                 shift and go to state 239

state 213

    (72) condition -> IF O_PARENTHESIS expression C_PARENTHESIS start_condition block else . end_condition
    (80) end_condition -> .

    IF              reduce using rule 80 (end_condition -> .)
    PRINT           reduce using rule 80 (end_condition -> .)
    ID              reduce using rule 80 (end_condition -> .)
    LIST            reduce using rule 80 (end_condition -> .)
    WHILE           reduce using rule 80 (end_condition -> .)
    TIMES           reduce using rule 80 (end_condition -> .)
    BOOL            reduce using rule 80 (end_condition -> .)
    INT             reduce using rule 80 (end_condition -> .)
    FLOAT           reduce using rule 80 (end_condition -> .)
    STRING          reduce using rule 80 (end_condition -> .)
    C_BRACKET       reduce using rule 80 (end_condition -> .)

    end_condition                  shift and go to state 240

state 214

    (65) listinit -> LIST type ID EQUALS start_list list SEMICOLON .

    RETURN          reduce using rule 65 (listinit -> LIST type ID EQUALS start_list list SEMICOLON .)
    IF              reduce using rule 65 (listinit -> LIST type ID EQUALS start_list list SEMICOLON .)
    PRINT           reduce using rule 65 (listinit -> LIST type ID EQUALS start_list list SEMICOLON .)
    ID              reduce using rule 65 (listinit -> LIST type ID EQUALS start_list list SEMICOLON .)
    LIST            reduce using rule 65 (listinit -> LIST type ID EQUALS start_list list SEMICOLON .)
    WHILE           reduce using rule 65 (listinit -> LIST type ID EQUALS start_list list SEMICOLON .)
    TIMES           reduce using rule 65 (listinit -> LIST type ID EQUALS start_list list SEMICOLON .)
    BOOL            reduce using rule 65 (listinit -> LIST type ID EQUALS start_list list SEMICOLON .)
    INT             reduce using rule 65 (listinit -> LIST type ID EQUALS start_list list SEMICOLON .)
    FLOAT           reduce using rule 65 (listinit -> LIST type ID EQUALS start_list list SEMICOLON .)
    STRING          reduce using rule 65 (listinit -> LIST type ID EQUALS start_list list SEMICOLON .)
    C_BRACKET       reduce using rule 65 (listinit -> LIST type ID EQUALS start_list list SEMICOLON .)


state 215

    (66) list -> O_S_BRACKET listelements . C_S_BRACKET

    C_S_BRACKET     shift and go to state 241


state 216

    (68) listelements -> expression . generate_list_assignation optionallist
    (71) generate_list_assignation -> .

    COMMA           reduce using rule 71 (generate_list_assignation -> .)
    C_S_BRACKET     reduce using rule 71 (generate_list_assignation -> .)

    generate_list_assignation      shift and go to state 242

state 217

    (147) functiontimesloop -> TIMES . O_PARENTHESIS expression C_PARENTHESIS start_times functionblock end_times

    O_PARENTHESIS   shift and go to state 243


state 218

    (33) functionreturn -> RETURN . add_function_var_to_stack expression SEMICOLON
    (34) add_function_var_to_stack -> .

    O_PARENTHESIS   reduce using rule 34 (add_function_var_to_stack -> .)
    ID              reduce using rule 34 (add_function_var_to_stack -> .)
    INTCONST        reduce using rule 34 (add_function_var_to_stack -> .)
    FLOATCONST      reduce using rule 34 (add_function_var_to_stack -> .)
    STRINGCONST     reduce using rule 34 (add_function_var_to_stack -> .)
    TRUE            reduce using rule 34 (add_function_var_to_stack -> .)
    FALSE           reduce using rule 34 (add_function_var_to_stack -> .)

    add_function_var_to_stack      shift and go to state 244

state 219

    (38) functionstatutesloop -> functionstatute . functionstatutesloop
    (38) functionstatutesloop -> . functionstatute functionstatutesloop
    (39) functionstatutesloop -> . functionreturn
    (40) functionstatutesloop -> .
    (47) functionstatute -> . init
    (48) functionstatute -> . functioncondition
    (49) functionstatute -> . writting
    (50) functionstatute -> . functionloops
    (51) functionstatute -> . assignation
    (52) functionstatute -> . functioncall
    (33) functionreturn -> . RETURN add_function_var_to_stack expression SEMICOLON
    (60) init -> . listinit
    (61) init -> . normalinit
    (73) functioncondition -> . IF O_PARENTHESIS expression C_PARENTHESIS start_condition functionblock functionelse end_condition
    (54) writting -> . PRINT O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON
    (139) functionloops -> . functionwhileloop
    (140) functionloops -> . functiontimesloop
    (53) assignation -> . var_assign EQUALS add_equals expression equals_quadruple SEMICOLON
    (150) functioncall -> . ID add_o_parenthesis check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON generate_gosub add_c_parenthesis
    (65) listinit -> . LIST type ID EQUALS start_list list SEMICOLON
    (62) normalinit -> . type var EQUALS add_equals expression equals_quadruple SEMICOLON
    (142) functionwhileloop -> . WHILE start_while O_PARENTHESIS expression C_PARENTHESIS condition_while functionblock end_while
    (147) functiontimesloop -> . TIMES O_PARENTHESIS expression C_PARENTHESIS start_times functionblock end_times
    (114) var_assign -> . ID listaccess
    (23) type -> . BOOL
    (24) type -> . INT
    (25) type -> . FLOAT
    (26) type -> . STRING

    C_BRACKET       reduce using rule 40 (functionstatutesloop -> .)
    RETURN          shift and go to state 218
    IF              shift and go to state 229
    PRINT           shift and go to state 40
    ID              shift and go to state 51
    LIST            shift and go to state 59
    WHILE           shift and go to state 220
    TIMES           shift and go to state 217
    BOOL            shift and go to state 43
    INT             shift and go to state 57
    FLOAT           shift and go to state 58
    STRING          shift and go to state 47

    functionstatute                shift and go to state 219
    functiontimesloop              shift and go to state 221
    functionstatutesloop           shift and go to state 245
    functionwhileloop              shift and go to state 223
    init                           shift and go to state 224
    var_assign                     shift and go to state 44
    type                           shift and go to state 45
    listinit                       shift and go to state 48
    functionloops                  shift and go to state 225
    writting                       shift and go to state 226
    functionreturn                 shift and go to state 227
    functioncondition              shift and go to state 228
    assignation                    shift and go to state 230
    functioncall                   shift and go to state 231
    normalinit                     shift and go to state 46

state 220

    (142) functionwhileloop -> WHILE . start_while O_PARENTHESIS expression C_PARENTHESIS condition_while functionblock end_while
    (143) start_while -> .

    O_PARENTHESIS   reduce using rule 143 (start_while -> .)

    start_while                    shift and go to state 246

state 221

    (140) functionloops -> functiontimesloop .

    RETURN          reduce using rule 140 (functionloops -> functiontimesloop .)
    IF              reduce using rule 140 (functionloops -> functiontimesloop .)
    PRINT           reduce using rule 140 (functionloops -> functiontimesloop .)
    ID              reduce using rule 140 (functionloops -> functiontimesloop .)
    LIST            reduce using rule 140 (functionloops -> functiontimesloop .)
    WHILE           reduce using rule 140 (functionloops -> functiontimesloop .)
    TIMES           reduce using rule 140 (functionloops -> functiontimesloop .)
    BOOL            reduce using rule 140 (functionloops -> functiontimesloop .)
    INT             reduce using rule 140 (functionloops -> functiontimesloop .)
    FLOAT           reduce using rule 140 (functionloops -> functiontimesloop .)
    STRING          reduce using rule 140 (functionloops -> functiontimesloop .)
    C_BRACKET       reduce using rule 140 (functionloops -> functiontimesloop .)


state 222

    (32) functionblock -> O_BRACKET functionstatutesloop . C_BRACKET

    C_BRACKET       shift and go to state 247


state 223

    (139) functionloops -> functionwhileloop .

    RETURN          reduce using rule 139 (functionloops -> functionwhileloop .)
    IF              reduce using rule 139 (functionloops -> functionwhileloop .)
    PRINT           reduce using rule 139 (functionloops -> functionwhileloop .)
    ID              reduce using rule 139 (functionloops -> functionwhileloop .)
    LIST            reduce using rule 139 (functionloops -> functionwhileloop .)
    WHILE           reduce using rule 139 (functionloops -> functionwhileloop .)
    TIMES           reduce using rule 139 (functionloops -> functionwhileloop .)
    BOOL            reduce using rule 139 (functionloops -> functionwhileloop .)
    INT             reduce using rule 139 (functionloops -> functionwhileloop .)
    FLOAT           reduce using rule 139 (functionloops -> functionwhileloop .)
    STRING          reduce using rule 139 (functionloops -> functionwhileloop .)
    C_BRACKET       reduce using rule 139 (functionloops -> functionwhileloop .)


state 224

    (47) functionstatute -> init .

    RETURN          reduce using rule 47 (functionstatute -> init .)
    IF              reduce using rule 47 (functionstatute -> init .)
    PRINT           reduce using rule 47 (functionstatute -> init .)
    ID              reduce using rule 47 (functionstatute -> init .)
    LIST            reduce using rule 47 (functionstatute -> init .)
    WHILE           reduce using rule 47 (functionstatute -> init .)
    TIMES           reduce using rule 47 (functionstatute -> init .)
    BOOL            reduce using rule 47 (functionstatute -> init .)
    INT             reduce using rule 47 (functionstatute -> init .)
    FLOAT           reduce using rule 47 (functionstatute -> init .)
    STRING          reduce using rule 47 (functionstatute -> init .)
    C_BRACKET       reduce using rule 47 (functionstatute -> init .)


state 225

    (50) functionstatute -> functionloops .

    RETURN          reduce using rule 50 (functionstatute -> functionloops .)
    IF              reduce using rule 50 (functionstatute -> functionloops .)
    PRINT           reduce using rule 50 (functionstatute -> functionloops .)
    ID              reduce using rule 50 (functionstatute -> functionloops .)
    LIST            reduce using rule 50 (functionstatute -> functionloops .)
    WHILE           reduce using rule 50 (functionstatute -> functionloops .)
    TIMES           reduce using rule 50 (functionstatute -> functionloops .)
    BOOL            reduce using rule 50 (functionstatute -> functionloops .)
    INT             reduce using rule 50 (functionstatute -> functionloops .)
    FLOAT           reduce using rule 50 (functionstatute -> functionloops .)
    STRING          reduce using rule 50 (functionstatute -> functionloops .)
    C_BRACKET       reduce using rule 50 (functionstatute -> functionloops .)


state 226

    (49) functionstatute -> writting .

    RETURN          reduce using rule 49 (functionstatute -> writting .)
    IF              reduce using rule 49 (functionstatute -> writting .)
    PRINT           reduce using rule 49 (functionstatute -> writting .)
    ID              reduce using rule 49 (functionstatute -> writting .)
    LIST            reduce using rule 49 (functionstatute -> writting .)
    WHILE           reduce using rule 49 (functionstatute -> writting .)
    TIMES           reduce using rule 49 (functionstatute -> writting .)
    BOOL            reduce using rule 49 (functionstatute -> writting .)
    INT             reduce using rule 49 (functionstatute -> writting .)
    FLOAT           reduce using rule 49 (functionstatute -> writting .)
    STRING          reduce using rule 49 (functionstatute -> writting .)
    C_BRACKET       reduce using rule 49 (functionstatute -> writting .)


state 227

    (39) functionstatutesloop -> functionreturn .

    C_BRACKET       reduce using rule 39 (functionstatutesloop -> functionreturn .)


state 228

    (48) functionstatute -> functioncondition .

    RETURN          reduce using rule 48 (functionstatute -> functioncondition .)
    IF              reduce using rule 48 (functionstatute -> functioncondition .)
    PRINT           reduce using rule 48 (functionstatute -> functioncondition .)
    ID              reduce using rule 48 (functionstatute -> functioncondition .)
    LIST            reduce using rule 48 (functionstatute -> functioncondition .)
    WHILE           reduce using rule 48 (functionstatute -> functioncondition .)
    TIMES           reduce using rule 48 (functionstatute -> functioncondition .)
    BOOL            reduce using rule 48 (functionstatute -> functioncondition .)
    INT             reduce using rule 48 (functionstatute -> functioncondition .)
    FLOAT           reduce using rule 48 (functionstatute -> functioncondition .)
    STRING          reduce using rule 48 (functionstatute -> functioncondition .)
    C_BRACKET       reduce using rule 48 (functionstatute -> functioncondition .)


state 229

    (73) functioncondition -> IF . O_PARENTHESIS expression C_PARENTHESIS start_condition functionblock functionelse end_condition

    O_PARENTHESIS   shift and go to state 248


state 230

    (51) functionstatute -> assignation .

    RETURN          reduce using rule 51 (functionstatute -> assignation .)
    IF              reduce using rule 51 (functionstatute -> assignation .)
    PRINT           reduce using rule 51 (functionstatute -> assignation .)
    ID              reduce using rule 51 (functionstatute -> assignation .)
    LIST            reduce using rule 51 (functionstatute -> assignation .)
    WHILE           reduce using rule 51 (functionstatute -> assignation .)
    TIMES           reduce using rule 51 (functionstatute -> assignation .)
    BOOL            reduce using rule 51 (functionstatute -> assignation .)
    INT             reduce using rule 51 (functionstatute -> assignation .)
    FLOAT           reduce using rule 51 (functionstatute -> assignation .)
    STRING          reduce using rule 51 (functionstatute -> assignation .)
    C_BRACKET       reduce using rule 51 (functionstatute -> assignation .)


state 231

    (52) functionstatute -> functioncall .

    RETURN          reduce using rule 52 (functionstatute -> functioncall .)
    IF              reduce using rule 52 (functionstatute -> functioncall .)
    PRINT           reduce using rule 52 (functionstatute -> functioncall .)
    ID              reduce using rule 52 (functionstatute -> functioncall .)
    LIST            reduce using rule 52 (functionstatute -> functioncall .)
    WHILE           reduce using rule 52 (functionstatute -> functioncall .)
    TIMES           reduce using rule 52 (functionstatute -> functioncall .)
    BOOL            reduce using rule 52 (functionstatute -> functioncall .)
    INT             reduce using rule 52 (functionstatute -> functioncall .)
    FLOAT           reduce using rule 52 (functionstatute -> functioncall .)
    STRING          reduce using rule 52 (functionstatute -> functioncall .)
    C_BRACKET       reduce using rule 52 (functionstatute -> functioncall .)


state 232

    (124) functionorlist -> add_o_parenthesis check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS . generate_gosub add_c_parenthesis
    (152) generate_gosub -> .

    MULTIPLY        reduce using rule 152 (generate_gosub -> .)
    DIVIDE          reduce using rule 152 (generate_gosub -> .)
    MOD             reduce using rule 152 (generate_gosub -> .)
    SUM             reduce using rule 152 (generate_gosub -> .)
    MINUS           reduce using rule 152 (generate_gosub -> .)
    EQUALITY        reduce using rule 152 (generate_gosub -> .)
    GREATER         reduce using rule 152 (generate_gosub -> .)
    GREATER_EQUAL   reduce using rule 152 (generate_gosub -> .)
    LESS            reduce using rule 152 (generate_gosub -> .)
    LESS_EQUAL      reduce using rule 152 (generate_gosub -> .)
    DIFFERENT       reduce using rule 152 (generate_gosub -> .)
    AND             reduce using rule 152 (generate_gosub -> .)
    OR              reduce using rule 152 (generate_gosub -> .)
    C_PARENTHESIS   reduce using rule 152 (generate_gosub -> .)
    COMMA           reduce using rule 152 (generate_gosub -> .)
    SEMICOLON       reduce using rule 152 (generate_gosub -> .)
    C_S_BRACKET     reduce using rule 152 (generate_gosub -> .)

    generate_gosub                 shift and go to state 249

state 233

    (123) functionorlist -> add_list_variable add_o_parenthesis O_S_BRACKET expression C_S_BRACKET . add_c_parenthesis add_list_index_to_stack
    (113) add_c_parenthesis -> .

    MULTIPLY        reduce using rule 113 (add_c_parenthesis -> .)
    DIVIDE          reduce using rule 113 (add_c_parenthesis -> .)
    MOD             reduce using rule 113 (add_c_parenthesis -> .)
    SUM             reduce using rule 113 (add_c_parenthesis -> .)
    MINUS           reduce using rule 113 (add_c_parenthesis -> .)
    EQUALITY        reduce using rule 113 (add_c_parenthesis -> .)
    GREATER         reduce using rule 113 (add_c_parenthesis -> .)
    GREATER_EQUAL   reduce using rule 113 (add_c_parenthesis -> .)
    LESS            reduce using rule 113 (add_c_parenthesis -> .)
    LESS_EQUAL      reduce using rule 113 (add_c_parenthesis -> .)
    DIFFERENT       reduce using rule 113 (add_c_parenthesis -> .)
    AND             reduce using rule 113 (add_c_parenthesis -> .)
    OR              reduce using rule 113 (add_c_parenthesis -> .)
    C_PARENTHESIS   reduce using rule 113 (add_c_parenthesis -> .)
    COMMA           reduce using rule 113 (add_c_parenthesis -> .)
    SEMICOLON       reduce using rule 113 (add_c_parenthesis -> .)
    C_S_BRACKET     reduce using rule 113 (add_c_parenthesis -> .)

    add_c_parenthesis              shift and go to state 250

state 234

    (141) whileloop -> WHILE start_while O_PARENTHESIS expression C_PARENTHESIS condition_while block end_while .

    IF              reduce using rule 141 (whileloop -> WHILE start_while O_PARENTHESIS expression C_PARENTHESIS condition_while block end_while .)
    PRINT           reduce using rule 141 (whileloop -> WHILE start_while O_PARENTHESIS expression C_PARENTHESIS condition_while block end_while .)
    ID              reduce using rule 141 (whileloop -> WHILE start_while O_PARENTHESIS expression C_PARENTHESIS condition_while block end_while .)
    LIST            reduce using rule 141 (whileloop -> WHILE start_while O_PARENTHESIS expression C_PARENTHESIS condition_while block end_while .)
    WHILE           reduce using rule 141 (whileloop -> WHILE start_while O_PARENTHESIS expression C_PARENTHESIS condition_while block end_while .)
    TIMES           reduce using rule 141 (whileloop -> WHILE start_while O_PARENTHESIS expression C_PARENTHESIS condition_while block end_while .)
    BOOL            reduce using rule 141 (whileloop -> WHILE start_while O_PARENTHESIS expression C_PARENTHESIS condition_while block end_while .)
    INT             reduce using rule 141 (whileloop -> WHILE start_while O_PARENTHESIS expression C_PARENTHESIS condition_while block end_while .)
    FLOAT           reduce using rule 141 (whileloop -> WHILE start_while O_PARENTHESIS expression C_PARENTHESIS condition_while block end_while .)
    STRING          reduce using rule 141 (whileloop -> WHILE start_while O_PARENTHESIS expression C_PARENTHESIS condition_while block end_while .)
    C_BRACKET       reduce using rule 141 (whileloop -> WHILE start_while O_PARENTHESIS expression C_PARENTHESIS condition_while block end_while .)


state 235

    (150) functioncall -> ID add_o_parenthesis check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON generate_gosub . add_c_parenthesis
    (113) add_c_parenthesis -> .

    IF              reduce using rule 113 (add_c_parenthesis -> .)
    PRINT           reduce using rule 113 (add_c_parenthesis -> .)
    ID              reduce using rule 113 (add_c_parenthesis -> .)
    LIST            reduce using rule 113 (add_c_parenthesis -> .)
    WHILE           reduce using rule 113 (add_c_parenthesis -> .)
    TIMES           reduce using rule 113 (add_c_parenthesis -> .)
    BOOL            reduce using rule 113 (add_c_parenthesis -> .)
    INT             reduce using rule 113 (add_c_parenthesis -> .)
    FLOAT           reduce using rule 113 (add_c_parenthesis -> .)
    STRING          reduce using rule 113 (add_c_parenthesis -> .)
    C_BRACKET       reduce using rule 113 (add_c_parenthesis -> .)
    RETURN          reduce using rule 113 (add_c_parenthesis -> .)

    add_c_parenthesis              shift and go to state 251

state 236

    (153) parametersinput -> expression push_type_to_function_options generate_parameter_quadruple parametersinputloop . check_params_order
    (158) check_params_order -> .

    C_PARENTHESIS   reduce using rule 158 (check_params_order -> .)

    check_params_order             shift and go to state 252

state 237

    (155) parametersinputloop -> COMMA . expression push_type_to_function_options generate_parameter_quadruple parametersinputloop
    (81) expression -> . expression2 expressionoptional
    (84) expression2 -> . exp expression2optional
    (97) exp -> . term exp_quadruple exploop
    (103) term -> . fact term_quadruple termloop
    (110) fact -> . varconst
    (111) fact -> . O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis
    (119) varconst -> . varconstfunction
    (120) varconst -> . constants
    (121) varconstfunction -> . ID functionorlist
    (127) constants -> . INTCONST add_int_constant_to_dict
    (128) constants -> . FLOATCONST add_float_constant_to_dict
    (129) constants -> . STRINGCONST add_string_constant_to_dict
    (130) constants -> . booleanconst
    (131) booleanconst -> . TRUE add_bool_constant_to_dict
    (132) booleanconst -> . FALSE add_bool_constant_to_dict

    O_PARENTHESIS   shift and go to state 87
    ID              shift and go to state 94
    INTCONST        shift and go to state 92
    FLOATCONST      shift and go to state 86
    STRINGCONST     shift and go to state 89
    TRUE            shift and go to state 88
    FALSE           shift and go to state 97

    varconstfunction               shift and go to state 90
    exp                            shift and go to state 91
    expression2                    shift and go to state 93
    constants                      shift and go to state 95
    term                           shift and go to state 96
    varconst                       shift and go to state 98
    booleanconst                   shift and go to state 99
    expression                     shift and go to state 253
    fact                           shift and go to state 101

state 238

    (116) listaccess -> add_list_variable add_o_parenthesis O_S_BRACKET expression C_S_BRACKET add_c_parenthesis add_list_index_to_stack .

    EQUALS          reduce using rule 116 (listaccess -> add_list_variable add_o_parenthesis O_S_BRACKET expression C_S_BRACKET add_c_parenthesis add_list_index_to_stack .)


state 239

    (74) else -> ELSE else_condition . block
    (31) block -> . O_BRACKET statutesloop C_BRACKET

    O_BRACKET       shift and go to state 33

    block                          shift and go to state 254

state 240

    (72) condition -> IF O_PARENTHESIS expression C_PARENTHESIS start_condition block else end_condition .

    IF              reduce using rule 72 (condition -> IF O_PARENTHESIS expression C_PARENTHESIS start_condition block else end_condition .)
    PRINT           reduce using rule 72 (condition -> IF O_PARENTHESIS expression C_PARENTHESIS start_condition block else end_condition .)
    ID              reduce using rule 72 (condition -> IF O_PARENTHESIS expression C_PARENTHESIS start_condition block else end_condition .)
    LIST            reduce using rule 72 (condition -> IF O_PARENTHESIS expression C_PARENTHESIS start_condition block else end_condition .)
    WHILE           reduce using rule 72 (condition -> IF O_PARENTHESIS expression C_PARENTHESIS start_condition block else end_condition .)
    TIMES           reduce using rule 72 (condition -> IF O_PARENTHESIS expression C_PARENTHESIS start_condition block else end_condition .)
    BOOL            reduce using rule 72 (condition -> IF O_PARENTHESIS expression C_PARENTHESIS start_condition block else end_condition .)
    INT             reduce using rule 72 (condition -> IF O_PARENTHESIS expression C_PARENTHESIS start_condition block else end_condition .)
    FLOAT           reduce using rule 72 (condition -> IF O_PARENTHESIS expression C_PARENTHESIS start_condition block else end_condition .)
    STRING          reduce using rule 72 (condition -> IF O_PARENTHESIS expression C_PARENTHESIS start_condition block else end_condition .)
    C_BRACKET       reduce using rule 72 (condition -> IF O_PARENTHESIS expression C_PARENTHESIS start_condition block else end_condition .)


state 241

    (66) list -> O_S_BRACKET listelements C_S_BRACKET .

    SEMICOLON       reduce using rule 66 (list -> O_S_BRACKET listelements C_S_BRACKET .)


state 242

    (68) listelements -> expression generate_list_assignation . optionallist
    (69) optionallist -> . COMMA expression generate_list_assignation optionallist
    (70) optionallist -> .

    COMMA           shift and go to state 256
    C_S_BRACKET     reduce using rule 70 (optionallist -> .)

    optionallist                   shift and go to state 255

state 243

    (147) functiontimesloop -> TIMES O_PARENTHESIS . expression C_PARENTHESIS start_times functionblock end_times
    (81) expression -> . expression2 expressionoptional
    (84) expression2 -> . exp expression2optional
    (97) exp -> . term exp_quadruple exploop
    (103) term -> . fact term_quadruple termloop
    (110) fact -> . varconst
    (111) fact -> . O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis
    (119) varconst -> . varconstfunction
    (120) varconst -> . constants
    (121) varconstfunction -> . ID functionorlist
    (127) constants -> . INTCONST add_int_constant_to_dict
    (128) constants -> . FLOATCONST add_float_constant_to_dict
    (129) constants -> . STRINGCONST add_string_constant_to_dict
    (130) constants -> . booleanconst
    (131) booleanconst -> . TRUE add_bool_constant_to_dict
    (132) booleanconst -> . FALSE add_bool_constant_to_dict

    O_PARENTHESIS   shift and go to state 87
    ID              shift and go to state 94
    INTCONST        shift and go to state 92
    FLOATCONST      shift and go to state 86
    STRINGCONST     shift and go to state 89
    TRUE            shift and go to state 88
    FALSE           shift and go to state 97

    varconstfunction               shift and go to state 90
    exp                            shift and go to state 91
    expression2                    shift and go to state 93
    constants                      shift and go to state 95
    term                           shift and go to state 96
    varconst                       shift and go to state 98
    booleanconst                   shift and go to state 99
    expression                     shift and go to state 257
    fact                           shift and go to state 101

state 244

    (33) functionreturn -> RETURN add_function_var_to_stack . expression SEMICOLON
    (81) expression -> . expression2 expressionoptional
    (84) expression2 -> . exp expression2optional
    (97) exp -> . term exp_quadruple exploop
    (103) term -> . fact term_quadruple termloop
    (110) fact -> . varconst
    (111) fact -> . O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis
    (119) varconst -> . varconstfunction
    (120) varconst -> . constants
    (121) varconstfunction -> . ID functionorlist
    (127) constants -> . INTCONST add_int_constant_to_dict
    (128) constants -> . FLOATCONST add_float_constant_to_dict
    (129) constants -> . STRINGCONST add_string_constant_to_dict
    (130) constants -> . booleanconst
    (131) booleanconst -> . TRUE add_bool_constant_to_dict
    (132) booleanconst -> . FALSE add_bool_constant_to_dict

    O_PARENTHESIS   shift and go to state 87
    ID              shift and go to state 94
    INTCONST        shift and go to state 92
    FLOATCONST      shift and go to state 86
    STRINGCONST     shift and go to state 89
    TRUE            shift and go to state 88
    FALSE           shift and go to state 97

    varconstfunction               shift and go to state 90
    exp                            shift and go to state 91
    expression2                    shift and go to state 93
    constants                      shift and go to state 95
    term                           shift and go to state 96
    varconst                       shift and go to state 98
    booleanconst                   shift and go to state 99
    expression                     shift and go to state 258
    fact                           shift and go to state 101

state 245

    (38) functionstatutesloop -> functionstatute functionstatutesloop .

    C_BRACKET       reduce using rule 38 (functionstatutesloop -> functionstatute functionstatutesloop .)


state 246

    (142) functionwhileloop -> WHILE start_while . O_PARENTHESIS expression C_PARENTHESIS condition_while functionblock end_while

    O_PARENTHESIS   shift and go to state 259


state 247

    (32) functionblock -> O_BRACKET functionstatutesloop C_BRACKET .

    RETURN          reduce using rule 32 (functionblock -> O_BRACKET functionstatutesloop C_BRACKET .)
    IF              reduce using rule 32 (functionblock -> O_BRACKET functionstatutesloop C_BRACKET .)
    PRINT           reduce using rule 32 (functionblock -> O_BRACKET functionstatutesloop C_BRACKET .)
    ID              reduce using rule 32 (functionblock -> O_BRACKET functionstatutesloop C_BRACKET .)
    LIST            reduce using rule 32 (functionblock -> O_BRACKET functionstatutesloop C_BRACKET .)
    WHILE           reduce using rule 32 (functionblock -> O_BRACKET functionstatutesloop C_BRACKET .)
    TIMES           reduce using rule 32 (functionblock -> O_BRACKET functionstatutesloop C_BRACKET .)
    BOOL            reduce using rule 32 (functionblock -> O_BRACKET functionstatutesloop C_BRACKET .)
    INT             reduce using rule 32 (functionblock -> O_BRACKET functionstatutesloop C_BRACKET .)
    FLOAT           reduce using rule 32 (functionblock -> O_BRACKET functionstatutesloop C_BRACKET .)
    STRING          reduce using rule 32 (functionblock -> O_BRACKET functionstatutesloop C_BRACKET .)
    C_BRACKET       reduce using rule 32 (functionblock -> O_BRACKET functionstatutesloop C_BRACKET .)
    FUNCTION        reduce using rule 32 (functionblock -> O_BRACKET functionstatutesloop C_BRACKET .)
    MAIN            reduce using rule 32 (functionblock -> O_BRACKET functionstatutesloop C_BRACKET .)
    ELSE            reduce using rule 32 (functionblock -> O_BRACKET functionstatutesloop C_BRACKET .)


state 248

    (73) functioncondition -> IF O_PARENTHESIS . expression C_PARENTHESIS start_condition functionblock functionelse end_condition
    (81) expression -> . expression2 expressionoptional
    (84) expression2 -> . exp expression2optional
    (97) exp -> . term exp_quadruple exploop
    (103) term -> . fact term_quadruple termloop
    (110) fact -> . varconst
    (111) fact -> . O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis
    (119) varconst -> . varconstfunction
    (120) varconst -> . constants
    (121) varconstfunction -> . ID functionorlist
    (127) constants -> . INTCONST add_int_constant_to_dict
    (128) constants -> . FLOATCONST add_float_constant_to_dict
    (129) constants -> . STRINGCONST add_string_constant_to_dict
    (130) constants -> . booleanconst
    (131) booleanconst -> . TRUE add_bool_constant_to_dict
    (132) booleanconst -> . FALSE add_bool_constant_to_dict

    O_PARENTHESIS   shift and go to state 87
    ID              shift and go to state 94
    INTCONST        shift and go to state 92
    FLOATCONST      shift and go to state 86
    STRINGCONST     shift and go to state 89
    TRUE            shift and go to state 88
    FALSE           shift and go to state 97

    varconstfunction               shift and go to state 90
    exp                            shift and go to state 91
    expression2                    shift and go to state 93
    constants                      shift and go to state 95
    term                           shift and go to state 96
    varconst                       shift and go to state 98
    booleanconst                   shift and go to state 99
    expression                     shift and go to state 260
    fact                           shift and go to state 101

state 249

    (124) functionorlist -> add_o_parenthesis check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS generate_gosub . add_c_parenthesis
    (113) add_c_parenthesis -> .

    MULTIPLY        reduce using rule 113 (add_c_parenthesis -> .)
    DIVIDE          reduce using rule 113 (add_c_parenthesis -> .)
    MOD             reduce using rule 113 (add_c_parenthesis -> .)
    SUM             reduce using rule 113 (add_c_parenthesis -> .)
    MINUS           reduce using rule 113 (add_c_parenthesis -> .)
    EQUALITY        reduce using rule 113 (add_c_parenthesis -> .)
    GREATER         reduce using rule 113 (add_c_parenthesis -> .)
    GREATER_EQUAL   reduce using rule 113 (add_c_parenthesis -> .)
    LESS            reduce using rule 113 (add_c_parenthesis -> .)
    LESS_EQUAL      reduce using rule 113 (add_c_parenthesis -> .)
    DIFFERENT       reduce using rule 113 (add_c_parenthesis -> .)
    AND             reduce using rule 113 (add_c_parenthesis -> .)
    OR              reduce using rule 113 (add_c_parenthesis -> .)
    C_PARENTHESIS   reduce using rule 113 (add_c_parenthesis -> .)
    COMMA           reduce using rule 113 (add_c_parenthesis -> .)
    SEMICOLON       reduce using rule 113 (add_c_parenthesis -> .)
    C_S_BRACKET     reduce using rule 113 (add_c_parenthesis -> .)

    add_c_parenthesis              shift and go to state 261

state 250

    (123) functionorlist -> add_list_variable add_o_parenthesis O_S_BRACKET expression C_S_BRACKET add_c_parenthesis . add_list_index_to_stack
    (118) add_list_index_to_stack -> .

    MULTIPLY        reduce using rule 118 (add_list_index_to_stack -> .)
    DIVIDE          reduce using rule 118 (add_list_index_to_stack -> .)
    MOD             reduce using rule 118 (add_list_index_to_stack -> .)
    SUM             reduce using rule 118 (add_list_index_to_stack -> .)
    MINUS           reduce using rule 118 (add_list_index_to_stack -> .)
    EQUALITY        reduce using rule 118 (add_list_index_to_stack -> .)
    GREATER         reduce using rule 118 (add_list_index_to_stack -> .)
    GREATER_EQUAL   reduce using rule 118 (add_list_index_to_stack -> .)
    LESS            reduce using rule 118 (add_list_index_to_stack -> .)
    LESS_EQUAL      reduce using rule 118 (add_list_index_to_stack -> .)
    DIFFERENT       reduce using rule 118 (add_list_index_to_stack -> .)
    AND             reduce using rule 118 (add_list_index_to_stack -> .)
    OR              reduce using rule 118 (add_list_index_to_stack -> .)
    C_PARENTHESIS   reduce using rule 118 (add_list_index_to_stack -> .)
    COMMA           reduce using rule 118 (add_list_index_to_stack -> .)
    SEMICOLON       reduce using rule 118 (add_list_index_to_stack -> .)
    C_S_BRACKET     reduce using rule 118 (add_list_index_to_stack -> .)

    add_list_index_to_stack        shift and go to state 262

state 251

    (150) functioncall -> ID add_o_parenthesis check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON generate_gosub add_c_parenthesis .

    IF              reduce using rule 150 (functioncall -> ID add_o_parenthesis check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON generate_gosub add_c_parenthesis .)
    PRINT           reduce using rule 150 (functioncall -> ID add_o_parenthesis check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON generate_gosub add_c_parenthesis .)
    ID              reduce using rule 150 (functioncall -> ID add_o_parenthesis check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON generate_gosub add_c_parenthesis .)
    LIST            reduce using rule 150 (functioncall -> ID add_o_parenthesis check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON generate_gosub add_c_parenthesis .)
    WHILE           reduce using rule 150 (functioncall -> ID add_o_parenthesis check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON generate_gosub add_c_parenthesis .)
    TIMES           reduce using rule 150 (functioncall -> ID add_o_parenthesis check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON generate_gosub add_c_parenthesis .)
    BOOL            reduce using rule 150 (functioncall -> ID add_o_parenthesis check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON generate_gosub add_c_parenthesis .)
    INT             reduce using rule 150 (functioncall -> ID add_o_parenthesis check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON generate_gosub add_c_parenthesis .)
    FLOAT           reduce using rule 150 (functioncall -> ID add_o_parenthesis check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON generate_gosub add_c_parenthesis .)
    STRING          reduce using rule 150 (functioncall -> ID add_o_parenthesis check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON generate_gosub add_c_parenthesis .)
    C_BRACKET       reduce using rule 150 (functioncall -> ID add_o_parenthesis check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON generate_gosub add_c_parenthesis .)
    RETURN          reduce using rule 150 (functioncall -> ID add_o_parenthesis check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON generate_gosub add_c_parenthesis .)


state 252

    (153) parametersinput -> expression push_type_to_function_options generate_parameter_quadruple parametersinputloop check_params_order .

    C_PARENTHESIS   reduce using rule 153 (parametersinput -> expression push_type_to_function_options generate_parameter_quadruple parametersinputloop check_params_order .)


state 253

    (155) parametersinputloop -> COMMA expression . push_type_to_function_options generate_parameter_quadruple parametersinputloop
    (157) push_type_to_function_options -> .

    COMMA           reduce using rule 157 (push_type_to_function_options -> .)
    C_PARENTHESIS   reduce using rule 157 (push_type_to_function_options -> .)

    push_type_to_function_options  shift and go to state 263

state 254

    (74) else -> ELSE else_condition block .

    IF              reduce using rule 74 (else -> ELSE else_condition block .)
    PRINT           reduce using rule 74 (else -> ELSE else_condition block .)
    ID              reduce using rule 74 (else -> ELSE else_condition block .)
    LIST            reduce using rule 74 (else -> ELSE else_condition block .)
    WHILE           reduce using rule 74 (else -> ELSE else_condition block .)
    TIMES           reduce using rule 74 (else -> ELSE else_condition block .)
    BOOL            reduce using rule 74 (else -> ELSE else_condition block .)
    INT             reduce using rule 74 (else -> ELSE else_condition block .)
    FLOAT           reduce using rule 74 (else -> ELSE else_condition block .)
    STRING          reduce using rule 74 (else -> ELSE else_condition block .)
    C_BRACKET       reduce using rule 74 (else -> ELSE else_condition block .)


state 255

    (68) listelements -> expression generate_list_assignation optionallist .

    C_S_BRACKET     reduce using rule 68 (listelements -> expression generate_list_assignation optionallist .)


state 256

    (69) optionallist -> COMMA . expression generate_list_assignation optionallist
    (81) expression -> . expression2 expressionoptional
    (84) expression2 -> . exp expression2optional
    (97) exp -> . term exp_quadruple exploop
    (103) term -> . fact term_quadruple termloop
    (110) fact -> . varconst
    (111) fact -> . O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis
    (119) varconst -> . varconstfunction
    (120) varconst -> . constants
    (121) varconstfunction -> . ID functionorlist
    (127) constants -> . INTCONST add_int_constant_to_dict
    (128) constants -> . FLOATCONST add_float_constant_to_dict
    (129) constants -> . STRINGCONST add_string_constant_to_dict
    (130) constants -> . booleanconst
    (131) booleanconst -> . TRUE add_bool_constant_to_dict
    (132) booleanconst -> . FALSE add_bool_constant_to_dict

    O_PARENTHESIS   shift and go to state 87
    ID              shift and go to state 94
    INTCONST        shift and go to state 92
    FLOATCONST      shift and go to state 86
    STRINGCONST     shift and go to state 89
    TRUE            shift and go to state 88
    FALSE           shift and go to state 97

    varconstfunction               shift and go to state 90
    exp                            shift and go to state 91
    expression2                    shift and go to state 93
    constants                      shift and go to state 95
    term                           shift and go to state 96
    varconst                       shift and go to state 98
    booleanconst                   shift and go to state 99
    expression                     shift and go to state 264
    fact                           shift and go to state 101

state 257

    (147) functiontimesloop -> TIMES O_PARENTHESIS expression . C_PARENTHESIS start_times functionblock end_times

    C_PARENTHESIS   shift and go to state 265


state 258

    (33) functionreturn -> RETURN add_function_var_to_stack expression . SEMICOLON

    SEMICOLON       shift and go to state 266


state 259

    (142) functionwhileloop -> WHILE start_while O_PARENTHESIS . expression C_PARENTHESIS condition_while functionblock end_while
    (81) expression -> . expression2 expressionoptional
    (84) expression2 -> . exp expression2optional
    (97) exp -> . term exp_quadruple exploop
    (103) term -> . fact term_quadruple termloop
    (110) fact -> . varconst
    (111) fact -> . O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis
    (119) varconst -> . varconstfunction
    (120) varconst -> . constants
    (121) varconstfunction -> . ID functionorlist
    (127) constants -> . INTCONST add_int_constant_to_dict
    (128) constants -> . FLOATCONST add_float_constant_to_dict
    (129) constants -> . STRINGCONST add_string_constant_to_dict
    (130) constants -> . booleanconst
    (131) booleanconst -> . TRUE add_bool_constant_to_dict
    (132) booleanconst -> . FALSE add_bool_constant_to_dict

    O_PARENTHESIS   shift and go to state 87
    ID              shift and go to state 94
    INTCONST        shift and go to state 92
    FLOATCONST      shift and go to state 86
    STRINGCONST     shift and go to state 89
    TRUE            shift and go to state 88
    FALSE           shift and go to state 97

    varconstfunction               shift and go to state 90
    exp                            shift and go to state 91
    expression2                    shift and go to state 93
    constants                      shift and go to state 95
    term                           shift and go to state 96
    varconst                       shift and go to state 98
    booleanconst                   shift and go to state 99
    expression                     shift and go to state 267
    fact                           shift and go to state 101

state 260

    (73) functioncondition -> IF O_PARENTHESIS expression . C_PARENTHESIS start_condition functionblock functionelse end_condition

    C_PARENTHESIS   shift and go to state 268


state 261

    (124) functionorlist -> add_o_parenthesis check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS generate_gosub add_c_parenthesis .

    MULTIPLY        reduce using rule 124 (functionorlist -> add_o_parenthesis check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS generate_gosub add_c_parenthesis .)
    DIVIDE          reduce using rule 124 (functionorlist -> add_o_parenthesis check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS generate_gosub add_c_parenthesis .)
    MOD             reduce using rule 124 (functionorlist -> add_o_parenthesis check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS generate_gosub add_c_parenthesis .)
    SUM             reduce using rule 124 (functionorlist -> add_o_parenthesis check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS generate_gosub add_c_parenthesis .)
    MINUS           reduce using rule 124 (functionorlist -> add_o_parenthesis check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS generate_gosub add_c_parenthesis .)
    EQUALITY        reduce using rule 124 (functionorlist -> add_o_parenthesis check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS generate_gosub add_c_parenthesis .)
    GREATER         reduce using rule 124 (functionorlist -> add_o_parenthesis check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS generate_gosub add_c_parenthesis .)
    GREATER_EQUAL   reduce using rule 124 (functionorlist -> add_o_parenthesis check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS generate_gosub add_c_parenthesis .)
    LESS            reduce using rule 124 (functionorlist -> add_o_parenthesis check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS generate_gosub add_c_parenthesis .)
    LESS_EQUAL      reduce using rule 124 (functionorlist -> add_o_parenthesis check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS generate_gosub add_c_parenthesis .)
    DIFFERENT       reduce using rule 124 (functionorlist -> add_o_parenthesis check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS generate_gosub add_c_parenthesis .)
    AND             reduce using rule 124 (functionorlist -> add_o_parenthesis check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS generate_gosub add_c_parenthesis .)
    OR              reduce using rule 124 (functionorlist -> add_o_parenthesis check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS generate_gosub add_c_parenthesis .)
    C_PARENTHESIS   reduce using rule 124 (functionorlist -> add_o_parenthesis check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS generate_gosub add_c_parenthesis .)
    COMMA           reduce using rule 124 (functionorlist -> add_o_parenthesis check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS generate_gosub add_c_parenthesis .)
    SEMICOLON       reduce using rule 124 (functionorlist -> add_o_parenthesis check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS generate_gosub add_c_parenthesis .)
    C_S_BRACKET     reduce using rule 124 (functionorlist -> add_o_parenthesis check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS generate_gosub add_c_parenthesis .)


state 262

    (123) functionorlist -> add_list_variable add_o_parenthesis O_S_BRACKET expression C_S_BRACKET add_c_parenthesis add_list_index_to_stack .

    MULTIPLY        reduce using rule 123 (functionorlist -> add_list_variable add_o_parenthesis O_S_BRACKET expression C_S_BRACKET add_c_parenthesis add_list_index_to_stack .)
    DIVIDE          reduce using rule 123 (functionorlist -> add_list_variable add_o_parenthesis O_S_BRACKET expression C_S_BRACKET add_c_parenthesis add_list_index_to_stack .)
    MOD             reduce using rule 123 (functionorlist -> add_list_variable add_o_parenthesis O_S_BRACKET expression C_S_BRACKET add_c_parenthesis add_list_index_to_stack .)
    SUM             reduce using rule 123 (functionorlist -> add_list_variable add_o_parenthesis O_S_BRACKET expression C_S_BRACKET add_c_parenthesis add_list_index_to_stack .)
    MINUS           reduce using rule 123 (functionorlist -> add_list_variable add_o_parenthesis O_S_BRACKET expression C_S_BRACKET add_c_parenthesis add_list_index_to_stack .)
    EQUALITY        reduce using rule 123 (functionorlist -> add_list_variable add_o_parenthesis O_S_BRACKET expression C_S_BRACKET add_c_parenthesis add_list_index_to_stack .)
    GREATER         reduce using rule 123 (functionorlist -> add_list_variable add_o_parenthesis O_S_BRACKET expression C_S_BRACKET add_c_parenthesis add_list_index_to_stack .)
    GREATER_EQUAL   reduce using rule 123 (functionorlist -> add_list_variable add_o_parenthesis O_S_BRACKET expression C_S_BRACKET add_c_parenthesis add_list_index_to_stack .)
    LESS            reduce using rule 123 (functionorlist -> add_list_variable add_o_parenthesis O_S_BRACKET expression C_S_BRACKET add_c_parenthesis add_list_index_to_stack .)
    LESS_EQUAL      reduce using rule 123 (functionorlist -> add_list_variable add_o_parenthesis O_S_BRACKET expression C_S_BRACKET add_c_parenthesis add_list_index_to_stack .)
    DIFFERENT       reduce using rule 123 (functionorlist -> add_list_variable add_o_parenthesis O_S_BRACKET expression C_S_BRACKET add_c_parenthesis add_list_index_to_stack .)
    AND             reduce using rule 123 (functionorlist -> add_list_variable add_o_parenthesis O_S_BRACKET expression C_S_BRACKET add_c_parenthesis add_list_index_to_stack .)
    OR              reduce using rule 123 (functionorlist -> add_list_variable add_o_parenthesis O_S_BRACKET expression C_S_BRACKET add_c_parenthesis add_list_index_to_stack .)
    C_PARENTHESIS   reduce using rule 123 (functionorlist -> add_list_variable add_o_parenthesis O_S_BRACKET expression C_S_BRACKET add_c_parenthesis add_list_index_to_stack .)
    COMMA           reduce using rule 123 (functionorlist -> add_list_variable add_o_parenthesis O_S_BRACKET expression C_S_BRACKET add_c_parenthesis add_list_index_to_stack .)
    SEMICOLON       reduce using rule 123 (functionorlist -> add_list_variable add_o_parenthesis O_S_BRACKET expression C_S_BRACKET add_c_parenthesis add_list_index_to_stack .)
    C_S_BRACKET     reduce using rule 123 (functionorlist -> add_list_variable add_o_parenthesis O_S_BRACKET expression C_S_BRACKET add_c_parenthesis add_list_index_to_stack .)


state 263

    (155) parametersinputloop -> COMMA expression push_type_to_function_options . generate_parameter_quadruple parametersinputloop
    (159) generate_parameter_quadruple -> .

    COMMA           reduce using rule 159 (generate_parameter_quadruple -> .)
    C_PARENTHESIS   reduce using rule 159 (generate_parameter_quadruple -> .)

    generate_parameter_quadruple   shift and go to state 269

state 264

    (69) optionallist -> COMMA expression . generate_list_assignation optionallist
    (71) generate_list_assignation -> .

    COMMA           reduce using rule 71 (generate_list_assignation -> .)
    C_S_BRACKET     reduce using rule 71 (generate_list_assignation -> .)

    generate_list_assignation      shift and go to state 270

state 265

    (147) functiontimesloop -> TIMES O_PARENTHESIS expression C_PARENTHESIS . start_times functionblock end_times
    (148) start_times -> .

    O_BRACKET       reduce using rule 148 (start_times -> .)

    start_times                    shift and go to state 271

state 266

    (33) functionreturn -> RETURN add_function_var_to_stack expression SEMICOLON .

    C_BRACKET       reduce using rule 33 (functionreturn -> RETURN add_function_var_to_stack expression SEMICOLON .)


state 267

    (142) functionwhileloop -> WHILE start_while O_PARENTHESIS expression . C_PARENTHESIS condition_while functionblock end_while

    C_PARENTHESIS   shift and go to state 272


state 268

    (73) functioncondition -> IF O_PARENTHESIS expression C_PARENTHESIS . start_condition functionblock functionelse end_condition
    (78) start_condition -> .

    O_BRACKET       reduce using rule 78 (start_condition -> .)

    start_condition                shift and go to state 273

state 269

    (155) parametersinputloop -> COMMA expression push_type_to_function_options generate_parameter_quadruple . parametersinputloop
    (155) parametersinputloop -> . COMMA expression push_type_to_function_options generate_parameter_quadruple parametersinputloop
    (156) parametersinputloop -> .

    COMMA           shift and go to state 237
    C_PARENTHESIS   reduce using rule 156 (parametersinputloop -> .)

    parametersinputloop            shift and go to state 274

state 270

    (69) optionallist -> COMMA expression generate_list_assignation . optionallist
    (69) optionallist -> . COMMA expression generate_list_assignation optionallist
    (70) optionallist -> .

    COMMA           shift and go to state 256
    C_S_BRACKET     reduce using rule 70 (optionallist -> .)

    optionallist                   shift and go to state 275

state 271

    (147) functiontimesloop -> TIMES O_PARENTHESIS expression C_PARENTHESIS start_times . functionblock end_times
    (32) functionblock -> . O_BRACKET functionstatutesloop C_BRACKET

    O_BRACKET       shift and go to state 200

    functionblock                  shift and go to state 276

state 272

    (142) functionwhileloop -> WHILE start_while O_PARENTHESIS expression C_PARENTHESIS . condition_while functionblock end_while
    (144) condition_while -> .

    O_BRACKET       reduce using rule 144 (condition_while -> .)

    condition_while                shift and go to state 277

state 273

    (73) functioncondition -> IF O_PARENTHESIS expression C_PARENTHESIS start_condition . functionblock functionelse end_condition
    (32) functionblock -> . O_BRACKET functionstatutesloop C_BRACKET

    O_BRACKET       shift and go to state 200

    functionblock                  shift and go to state 278

state 274

    (155) parametersinputloop -> COMMA expression push_type_to_function_options generate_parameter_quadruple parametersinputloop .

    C_PARENTHESIS   reduce using rule 155 (parametersinputloop -> COMMA expression push_type_to_function_options generate_parameter_quadruple parametersinputloop .)


state 275

    (69) optionallist -> COMMA expression generate_list_assignation optionallist .

    C_S_BRACKET     reduce using rule 69 (optionallist -> COMMA expression generate_list_assignation optionallist .)


state 276

    (147) functiontimesloop -> TIMES O_PARENTHESIS expression C_PARENTHESIS start_times functionblock . end_times
    (149) end_times -> .

    RETURN          reduce using rule 149 (end_times -> .)
    IF              reduce using rule 149 (end_times -> .)
    PRINT           reduce using rule 149 (end_times -> .)
    ID              reduce using rule 149 (end_times -> .)
    LIST            reduce using rule 149 (end_times -> .)
    WHILE           reduce using rule 149 (end_times -> .)
    TIMES           reduce using rule 149 (end_times -> .)
    BOOL            reduce using rule 149 (end_times -> .)
    INT             reduce using rule 149 (end_times -> .)
    FLOAT           reduce using rule 149 (end_times -> .)
    STRING          reduce using rule 149 (end_times -> .)
    C_BRACKET       reduce using rule 149 (end_times -> .)

    end_times                      shift and go to state 279

state 277

    (142) functionwhileloop -> WHILE start_while O_PARENTHESIS expression C_PARENTHESIS condition_while . functionblock end_while
    (32) functionblock -> . O_BRACKET functionstatutesloop C_BRACKET

    O_BRACKET       shift and go to state 200

    functionblock                  shift and go to state 280

state 278

    (73) functioncondition -> IF O_PARENTHESIS expression C_PARENTHESIS start_condition functionblock . functionelse end_condition
    (76) functionelse -> . ELSE else_condition functionblock
    (77) functionelse -> .

    ELSE            shift and go to state 282
    RETURN          reduce using rule 77 (functionelse -> .)
    IF              reduce using rule 77 (functionelse -> .)
    PRINT           reduce using rule 77 (functionelse -> .)
    ID              reduce using rule 77 (functionelse -> .)
    LIST            reduce using rule 77 (functionelse -> .)
    WHILE           reduce using rule 77 (functionelse -> .)
    TIMES           reduce using rule 77 (functionelse -> .)
    BOOL            reduce using rule 77 (functionelse -> .)
    INT             reduce using rule 77 (functionelse -> .)
    FLOAT           reduce using rule 77 (functionelse -> .)
    STRING          reduce using rule 77 (functionelse -> .)
    C_BRACKET       reduce using rule 77 (functionelse -> .)

    functionelse                   shift and go to state 281

state 279

    (147) functiontimesloop -> TIMES O_PARENTHESIS expression C_PARENTHESIS start_times functionblock end_times .

    RETURN          reduce using rule 147 (functiontimesloop -> TIMES O_PARENTHESIS expression C_PARENTHESIS start_times functionblock end_times .)
    IF              reduce using rule 147 (functiontimesloop -> TIMES O_PARENTHESIS expression C_PARENTHESIS start_times functionblock end_times .)
    PRINT           reduce using rule 147 (functiontimesloop -> TIMES O_PARENTHESIS expression C_PARENTHESIS start_times functionblock end_times .)
    ID              reduce using rule 147 (functiontimesloop -> TIMES O_PARENTHESIS expression C_PARENTHESIS start_times functionblock end_times .)
    LIST            reduce using rule 147 (functiontimesloop -> TIMES O_PARENTHESIS expression C_PARENTHESIS start_times functionblock end_times .)
    WHILE           reduce using rule 147 (functiontimesloop -> TIMES O_PARENTHESIS expression C_PARENTHESIS start_times functionblock end_times .)
    TIMES           reduce using rule 147 (functiontimesloop -> TIMES O_PARENTHESIS expression C_PARENTHESIS start_times functionblock end_times .)
    BOOL            reduce using rule 147 (functiontimesloop -> TIMES O_PARENTHESIS expression C_PARENTHESIS start_times functionblock end_times .)
    INT             reduce using rule 147 (functiontimesloop -> TIMES O_PARENTHESIS expression C_PARENTHESIS start_times functionblock end_times .)
    FLOAT           reduce using rule 147 (functiontimesloop -> TIMES O_PARENTHESIS expression C_PARENTHESIS start_times functionblock end_times .)
    STRING          reduce using rule 147 (functiontimesloop -> TIMES O_PARENTHESIS expression C_PARENTHESIS start_times functionblock end_times .)
    C_BRACKET       reduce using rule 147 (functiontimesloop -> TIMES O_PARENTHESIS expression C_PARENTHESIS start_times functionblock end_times .)


state 280

    (142) functionwhileloop -> WHILE start_while O_PARENTHESIS expression C_PARENTHESIS condition_while functionblock . end_while
    (145) end_while -> .

    RETURN          reduce using rule 145 (end_while -> .)
    IF              reduce using rule 145 (end_while -> .)
    PRINT           reduce using rule 145 (end_while -> .)
    ID              reduce using rule 145 (end_while -> .)
    LIST            reduce using rule 145 (end_while -> .)
    WHILE           reduce using rule 145 (end_while -> .)
    TIMES           reduce using rule 145 (end_while -> .)
    BOOL            reduce using rule 145 (end_while -> .)
    INT             reduce using rule 145 (end_while -> .)
    FLOAT           reduce using rule 145 (end_while -> .)
    STRING          reduce using rule 145 (end_while -> .)
    C_BRACKET       reduce using rule 145 (end_while -> .)

    end_while                      shift and go to state 283

state 281

    (73) functioncondition -> IF O_PARENTHESIS expression C_PARENTHESIS start_condition functionblock functionelse . end_condition
    (80) end_condition -> .

    RETURN          reduce using rule 80 (end_condition -> .)
    IF              reduce using rule 80 (end_condition -> .)
    PRINT           reduce using rule 80 (end_condition -> .)
    ID              reduce using rule 80 (end_condition -> .)
    LIST            reduce using rule 80 (end_condition -> .)
    WHILE           reduce using rule 80 (end_condition -> .)
    TIMES           reduce using rule 80 (end_condition -> .)
    BOOL            reduce using rule 80 (end_condition -> .)
    INT             reduce using rule 80 (end_condition -> .)
    FLOAT           reduce using rule 80 (end_condition -> .)
    STRING          reduce using rule 80 (end_condition -> .)
    C_BRACKET       reduce using rule 80 (end_condition -> .)

    end_condition                  shift and go to state 284

state 282

    (76) functionelse -> ELSE . else_condition functionblock
    (79) else_condition -> .

    O_BRACKET       reduce using rule 79 (else_condition -> .)

    else_condition                 shift and go to state 285

state 283

    (142) functionwhileloop -> WHILE start_while O_PARENTHESIS expression C_PARENTHESIS condition_while functionblock end_while .

    RETURN          reduce using rule 142 (functionwhileloop -> WHILE start_while O_PARENTHESIS expression C_PARENTHESIS condition_while functionblock end_while .)
    IF              reduce using rule 142 (functionwhileloop -> WHILE start_while O_PARENTHESIS expression C_PARENTHESIS condition_while functionblock end_while .)
    PRINT           reduce using rule 142 (functionwhileloop -> WHILE start_while O_PARENTHESIS expression C_PARENTHESIS condition_while functionblock end_while .)
    ID              reduce using rule 142 (functionwhileloop -> WHILE start_while O_PARENTHESIS expression C_PARENTHESIS condition_while functionblock end_while .)
    LIST            reduce using rule 142 (functionwhileloop -> WHILE start_while O_PARENTHESIS expression C_PARENTHESIS condition_while functionblock end_while .)
    WHILE           reduce using rule 142 (functionwhileloop -> WHILE start_while O_PARENTHESIS expression C_PARENTHESIS condition_while functionblock end_while .)
    TIMES           reduce using rule 142 (functionwhileloop -> WHILE start_while O_PARENTHESIS expression C_PARENTHESIS condition_while functionblock end_while .)
    BOOL            reduce using rule 142 (functionwhileloop -> WHILE start_while O_PARENTHESIS expression C_PARENTHESIS condition_while functionblock end_while .)
    INT             reduce using rule 142 (functionwhileloop -> WHILE start_while O_PARENTHESIS expression C_PARENTHESIS condition_while functionblock end_while .)
    FLOAT           reduce using rule 142 (functionwhileloop -> WHILE start_while O_PARENTHESIS expression C_PARENTHESIS condition_while functionblock end_while .)
    STRING          reduce using rule 142 (functionwhileloop -> WHILE start_while O_PARENTHESIS expression C_PARENTHESIS condition_while functionblock end_while .)
    C_BRACKET       reduce using rule 142 (functionwhileloop -> WHILE start_while O_PARENTHESIS expression C_PARENTHESIS condition_while functionblock end_while .)


state 284

    (73) functioncondition -> IF O_PARENTHESIS expression C_PARENTHESIS start_condition functionblock functionelse end_condition .

    RETURN          reduce using rule 73 (functioncondition -> IF O_PARENTHESIS expression C_PARENTHESIS start_condition functionblock functionelse end_condition .)
    IF              reduce using rule 73 (functioncondition -> IF O_PARENTHESIS expression C_PARENTHESIS start_condition functionblock functionelse end_condition .)
    PRINT           reduce using rule 73 (functioncondition -> IF O_PARENTHESIS expression C_PARENTHESIS start_condition functionblock functionelse end_condition .)
    ID              reduce using rule 73 (functioncondition -> IF O_PARENTHESIS expression C_PARENTHESIS start_condition functionblock functionelse end_condition .)
    LIST            reduce using rule 73 (functioncondition -> IF O_PARENTHESIS expression C_PARENTHESIS start_condition functionblock functionelse end_condition .)
    WHILE           reduce using rule 73 (functioncondition -> IF O_PARENTHESIS expression C_PARENTHESIS start_condition functionblock functionelse end_condition .)
    TIMES           reduce using rule 73 (functioncondition -> IF O_PARENTHESIS expression C_PARENTHESIS start_condition functionblock functionelse end_condition .)
    BOOL            reduce using rule 73 (functioncondition -> IF O_PARENTHESIS expression C_PARENTHESIS start_condition functionblock functionelse end_condition .)
    INT             reduce using rule 73 (functioncondition -> IF O_PARENTHESIS expression C_PARENTHESIS start_condition functionblock functionelse end_condition .)
    FLOAT           reduce using rule 73 (functioncondition -> IF O_PARENTHESIS expression C_PARENTHESIS start_condition functionblock functionelse end_condition .)
    STRING          reduce using rule 73 (functioncondition -> IF O_PARENTHESIS expression C_PARENTHESIS start_condition functionblock functionelse end_condition .)
    C_BRACKET       reduce using rule 73 (functioncondition -> IF O_PARENTHESIS expression C_PARENTHESIS start_condition functionblock functionelse end_condition .)


state 285

    (76) functionelse -> ELSE else_condition . functionblock
    (32) functionblock -> . O_BRACKET functionstatutesloop C_BRACKET

    O_BRACKET       shift and go to state 200

    functionblock                  shift and go to state 286

state 286

    (76) functionelse -> ELSE else_condition functionblock .

    RETURN          reduce using rule 76 (functionelse -> ELSE else_condition functionblock .)
    IF              reduce using rule 76 (functionelse -> ELSE else_condition functionblock .)
    PRINT           reduce using rule 76 (functionelse -> ELSE else_condition functionblock .)
    ID              reduce using rule 76 (functionelse -> ELSE else_condition functionblock .)
    LIST            reduce using rule 76 (functionelse -> ELSE else_condition functionblock .)
    WHILE           reduce using rule 76 (functionelse -> ELSE else_condition functionblock .)
    TIMES           reduce using rule 76 (functionelse -> ELSE else_condition functionblock .)
    BOOL            reduce using rule 76 (functionelse -> ELSE else_condition functionblock .)
    INT             reduce using rule 76 (functionelse -> ELSE else_condition functionblock .)
    FLOAT           reduce using rule 76 (functionelse -> ELSE else_condition functionblock .)
    STRING          reduce using rule 76 (functionelse -> ELSE else_condition functionblock .)
    C_BRACKET       reduce using rule 76 (functionelse -> ELSE else_condition functionblock .)

