Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> main functionloop
Rule 2     main -> MAIN block
Rule 3     functionloop -> function functionloop
Rule 4     functionloop -> <empty>
Rule 5     function -> FUNCTION function_head function_end
Rule 6     function_head -> VOID function_def
Rule 7     function_head -> BOOL function_with_return_def
Rule 8     function_head -> INT function_with_return_def
Rule 9     function_head -> FLOAT function_with_return_def
Rule 10    function_head -> STRING function_with_return_def
Rule 11    function_with_return_def -> ID O_PARENTHESIS parameters C_PARENTHESIS functionblock
Rule 12    function_def -> ID O_PARENTHESIS parameters C_PARENTHESIS block
Rule 13    type -> BOOL
Rule 14    type -> INT
Rule 15    type -> FLOAT
Rule 16    type -> STRING
Rule 17    parametertype -> BOOL
Rule 18    parametertype -> INT
Rule 19    parametertype -> FLOAT
Rule 20    parametertype -> STRING
Rule 21    block -> O_BRACKET statutesloop C_BRACKET
Rule 22    functionblock -> O_BRACKET statutesloop functionreturn C_BRACKET
Rule 23    functionreturn -> RETURN O_BRACKET expression C_BRACKET SEMICOLON
Rule 24    functionreturn -> RETURN expression SEMICOLON
Rule 25    function_end -> <empty>
Rule 26    statutesloop -> statute statutesloop
Rule 27    statutesloop -> <empty>
Rule 28    statute -> init
Rule 29    statute -> condition
Rule 30    statute -> writting
Rule 31    statute -> loop
Rule 32    statute -> assignation
Rule 33    statute -> functioncall
Rule 34    assignation -> var_assign EQUALS add_equals expression equals_quadruple SEMICOLON
Rule 35    writting -> PRINT O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON
Rule 36    start_printing -> <empty>
Rule 37    print_quadruple -> <empty>
Rule 38    writtingloop -> start_printing expression print_quadruple optionalwritting
Rule 39    optionalwritting -> COMMA writtingloop
Rule 40    optionalwritting -> <empty>
Rule 41    init -> listinit
Rule 42    init -> normalinit
Rule 43    normalinit -> type var EQUALS add_equals expression equals_quadruple SEMICOLON
Rule 44    equals_quadruple -> <empty>
Rule 45    add_equals -> <empty>
Rule 46    listinit -> LIST type var EQUALS list SEMICOLON
Rule 47    list -> O_S_BRACKET listelements C_S_BRACKET
Rule 48    listelements -> constants optionalconstants
Rule 49    listelements -> <empty>
Rule 50    optionalconstants -> COMMA constants optionalconstants
Rule 51    optionalconstants -> <empty>
Rule 52    condition -> IF O_PARENTHESIS expression C_PARENTHESIS start_condition block else end_condition
Rule 53    else -> ELSE else_condition block
Rule 54    else -> <empty>
Rule 55    start_condition -> <empty>
Rule 56    else_condition -> <empty>
Rule 57    end_condition -> <empty>
Rule 58    expression -> expression2 expressionoptional
Rule 59    expressionoptional -> logicop expression2 logic_op_quadruple
Rule 60    expressionoptional -> <empty>
Rule 61    expression2 -> exp expression2optional
Rule 62    expression2optional -> relop exp relop_quadruple
Rule 63    expression2optional -> <empty>
Rule 64    logicop -> AND
Rule 65    logicop -> OR
Rule 66    logic_op_quadruple -> <empty>
Rule 67    relop -> EQUALITY
Rule 68    relop -> GREATER
Rule 69    relop -> GREATER_EQUAL
Rule 70    relop -> LESS
Rule 71    relop -> LESS_EQUAL
Rule 72    relop -> DIFFERENT
Rule 73    relop_quadruple -> <empty>
Rule 74    exp -> term exp_quadruple exploop
Rule 75    exp_quadruple -> <empty>
Rule 76    exploop -> addsub exp
Rule 77    exploop -> <empty>
Rule 78    addsub -> SUM
Rule 79    addsub -> MINUS
Rule 80    term -> fact term_quadruple termloop
Rule 81    term_quadruple -> <empty>
Rule 82    termloop -> divmult term
Rule 83    termloop -> <empty>
Rule 84    divmult -> MULTIPLY
Rule 85    divmult -> DIVIDE
Rule 86    divmult -> MOD
Rule 87    fact -> varconst
Rule 88    fact -> O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis
Rule 89    add_o_parenthesis -> <empty>
Rule 90    add_c_parenthesis -> <empty>
Rule 91    var_assign -> ID add_to_stack listaccess
Rule 92    var -> ID listaccess
Rule 93    listaccess -> O_S_BRACKET INTCONST C_S_BRACKET
Rule 94    listaccess -> <empty>
Rule 95    varconst -> varconstfunction
Rule 96    varconst -> constants
Rule 97    varconstfunction -> ID functionorlist
Rule 98    add_to_stack -> <empty>
Rule 99    functionorlist -> O_S_BRACKET INTCONST C_S_BRACKET
Rule 100   functionorlist -> O_PARENTHESIS parametersinput C_PARENTHESIS
Rule 101   functionorlist -> add_to_stack
Rule 102   constants -> INTCONST add_int_constant_to_dict
Rule 103   constants -> FLOATCONST add_float_constant_to_dict
Rule 104   constants -> STRINGCONST add_string_constant_to_dict
Rule 105   constants -> booleanconst
Rule 106   booleanconst -> TRUE add_bool_constant_to_dict
Rule 107   booleanconst -> FALSE add_bool_constant_to_dict
Rule 108   add_int_constant_to_dict -> <empty>
Rule 109   add_float_constant_to_dict -> <empty>
Rule 110   add_string_constant_to_dict -> <empty>
Rule 111   add_bool_constant_to_dict -> <empty>
Rule 112   loop -> whileloop
Rule 113   loop -> timesloop
Rule 114   whileloop -> WHILE start_while O_PARENTHESIS expression C_PARENTHESIS condition_while block end_while
Rule 115   start_while -> <empty>
Rule 116   condition_while -> <empty>
Rule 117   end_while -> <empty>
Rule 118   timesloop -> TIMES O_PARENTHESIS INTCONST C_PARENTHESIS block
Rule 119   functioncall -> ID O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON
Rule 120   parametersinput -> expression parametersinputloop
Rule 121   parametersinput -> <empty>
Rule 122   parametersinputloop -> COMMA expression parametersinputloop
Rule 123   parametersinputloop -> <empty>
Rule 124   parameters -> parameterinit parametersloop
Rule 125   parameters -> <empty>
Rule 126   parameterinit -> parametertype ID
Rule 127   parametersloop -> COMMA parameterinit parametersloop
Rule 128   parametersloop -> <empty>

Terminals, with rules where they appear

AND                  : 64
BOOL                 : 7 13 17
COMMA                : 39 50 122 127
C_BRACKET            : 21 22 23
C_PARENTHESIS        : 11 12 35 52 88 100 114 118 119
C_S_BRACKET          : 47 93 99
DIFFERENT            : 72
DIVIDE               : 85
ELSE                 : 53
EQUALITY             : 67
EQUALS               : 34 43 46
FALSE                : 107
FLOAT                : 9 15 19
FLOATCONST           : 103
FUNCTION             : 5
GREATER              : 68
GREATER_EQUAL        : 69
ID                   : 11 12 91 92 97 119 126
IF                   : 52
INT                  : 8 14 18
INTCONST             : 93 99 102 118
LESS                 : 70
LESS_EQUAL           : 71
LIST                 : 46
MAIN                 : 2
MINUS                : 79
MOD                  : 86
MULTIPLY             : 84
OR                   : 65
O_BRACKET            : 21 22 23
O_PARENTHESIS        : 11 12 35 52 88 100 114 118 119
O_S_BRACKET          : 47 93 99
PRINT                : 35
RETURN               : 23 24
SEMICOLON            : 23 24 34 35 43 46 119
STRING               : 10 16 20
STRINGCONST          : 104
SUM                  : 78
TIMES                : 118
TRUE                 : 106
VOID                 : 6
WHILE                : 114
error                : 

Nonterminals, with rules where they appear

add_bool_constant_to_dict : 106 107
add_c_parenthesis    : 88
add_equals           : 34 43
add_float_constant_to_dict : 103
add_int_constant_to_dict : 102
add_o_parenthesis    : 88
add_string_constant_to_dict : 104
add_to_stack         : 91 101
addsub               : 76
assignation          : 32
block                : 2 12 52 53 114 118
booleanconst         : 105
condition            : 29
condition_while      : 114
constants            : 48 50 96
divmult              : 82
else                 : 52
else_condition       : 53
end_condition        : 52
end_while            : 114
equals_quadruple     : 34 43
exp                  : 61 62 76
exp_quadruple        : 74
exploop              : 74
expression           : 23 24 34 38 43 52 88 114 120 122
expression2          : 58 59
expression2optional  : 61
expressionoptional   : 58
fact                 : 80
function             : 3
function_def         : 6
function_end         : 5
function_head        : 5
function_with_return_def : 7 8 9 10
functionblock        : 11
functioncall         : 33
functionloop         : 1 3
functionorlist       : 97
functionreturn       : 22
init                 : 28
list                 : 46
listaccess           : 91 92
listelements         : 47
listinit             : 41
logic_op_quadruple   : 59
logicop              : 59
loop                 : 31
main                 : 1
normalinit           : 42
optionalconstants    : 48 50
optionalwritting     : 38
parameterinit        : 124 127
parameters           : 11 12
parametersinput      : 100 119
parametersinputloop  : 120 122
parametersloop       : 124 127
parametertype        : 126
print_quadruple      : 38
program              : 0
relop                : 62
relop_quadruple      : 62
start_condition      : 52
start_printing       : 38
start_while          : 114
statute              : 26
statutesloop         : 21 22 26
term                 : 74 82
term_quadruple       : 80
termloop             : 80
timesloop            : 113
type                 : 43 46
var                  : 43 46
var_assign           : 34
varconst             : 87
varconstfunction     : 95
whileloop            : 112
writting             : 30
writtingloop         : 35 39

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . main functionloop
    (2) main -> . MAIN block

    MAIN            shift and go to state 3

    main                           shift and go to state 1
    program                        shift and go to state 2

state 1

    (1) program -> main . functionloop
    (3) functionloop -> . function functionloop
    (4) functionloop -> .
    (5) function -> . FUNCTION function_head function_end

    $end            reduce using rule 4 (functionloop -> .)
    FUNCTION        shift and go to state 5

    function                       shift and go to state 4
    functionloop                   shift and go to state 6

state 2

    (0) S' -> program .



state 3

    (2) main -> MAIN . block
    (21) block -> . O_BRACKET statutesloop C_BRACKET

    O_BRACKET       shift and go to state 7

    block                          shift and go to state 8

state 4

    (3) functionloop -> function . functionloop
    (3) functionloop -> . function functionloop
    (4) functionloop -> .
    (5) function -> . FUNCTION function_head function_end

    $end            reduce using rule 4 (functionloop -> .)
    FUNCTION        shift and go to state 5

    function                       shift and go to state 4
    functionloop                   shift and go to state 9

state 5

    (5) function -> FUNCTION . function_head function_end
    (6) function_head -> . VOID function_def
    (7) function_head -> . BOOL function_with_return_def
    (8) function_head -> . INT function_with_return_def
    (9) function_head -> . FLOAT function_with_return_def
    (10) function_head -> . STRING function_with_return_def

    VOID            shift and go to state 11
    BOOL            shift and go to state 14
    INT             shift and go to state 15
    FLOAT           shift and go to state 12
    STRING          shift and go to state 10

    function_head                  shift and go to state 13

state 6

    (1) program -> main functionloop .

    $end            reduce using rule 1 (program -> main functionloop .)


state 7

    (21) block -> O_BRACKET . statutesloop C_BRACKET
    (26) statutesloop -> . statute statutesloop
    (27) statutesloop -> .
    (28) statute -> . init
    (29) statute -> . condition
    (30) statute -> . writting
    (31) statute -> . loop
    (32) statute -> . assignation
    (33) statute -> . functioncall
    (41) init -> . listinit
    (42) init -> . normalinit
    (52) condition -> . IF O_PARENTHESIS expression C_PARENTHESIS start_condition block else end_condition
    (35) writting -> . PRINT O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON
    (112) loop -> . whileloop
    (113) loop -> . timesloop
    (34) assignation -> . var_assign EQUALS add_equals expression equals_quadruple SEMICOLON
    (119) functioncall -> . ID O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON
    (46) listinit -> . LIST type var EQUALS list SEMICOLON
    (43) normalinit -> . type var EQUALS add_equals expression equals_quadruple SEMICOLON
    (114) whileloop -> . WHILE start_while O_PARENTHESIS expression C_PARENTHESIS condition_while block end_while
    (118) timesloop -> . TIMES O_PARENTHESIS INTCONST C_PARENTHESIS block
    (91) var_assign -> . ID add_to_stack listaccess
    (13) type -> . BOOL
    (14) type -> . INT
    (15) type -> . FLOAT
    (16) type -> . STRING

    C_BRACKET       reduce using rule 27 (statutesloop -> .)
    IF              shift and go to state 31
    PRINT           shift and go to state 18
    ID              shift and go to state 29
    LIST            shift and go to state 37
    WHILE           shift and go to state 17
    TIMES           shift and go to state 16
    BOOL            shift and go to state 21
    INT             shift and go to state 35
    FLOAT           shift and go to state 36
    STRING          shift and go to state 25

    whileloop                      shift and go to state 19
    init                           shift and go to state 20
    var_assign                     shift and go to state 22
    type                           shift and go to state 23
    normalinit                     shift and go to state 24
    listinit                       shift and go to state 26
    writting                       shift and go to state 27
    timesloop                      shift and go to state 28
    condition                      shift and go to state 30
    statute                        shift and go to state 32
    assignation                    shift and go to state 33
    statutesloop                   shift and go to state 34
    functioncall                   shift and go to state 38
    loop                           shift and go to state 39

state 8

    (2) main -> MAIN block .

    FUNCTION        reduce using rule 2 (main -> MAIN block .)
    $end            reduce using rule 2 (main -> MAIN block .)


state 9

    (3) functionloop -> function functionloop .

    $end            reduce using rule 3 (functionloop -> function functionloop .)


state 10

    (10) function_head -> STRING . function_with_return_def
    (11) function_with_return_def -> . ID O_PARENTHESIS parameters C_PARENTHESIS functionblock

    ID              shift and go to state 41

    function_with_return_def       shift and go to state 40

state 11

    (6) function_head -> VOID . function_def
    (12) function_def -> . ID O_PARENTHESIS parameters C_PARENTHESIS block

    ID              shift and go to state 43

    function_def                   shift and go to state 42

state 12

    (9) function_head -> FLOAT . function_with_return_def
    (11) function_with_return_def -> . ID O_PARENTHESIS parameters C_PARENTHESIS functionblock

    ID              shift and go to state 41

    function_with_return_def       shift and go to state 44

state 13

    (5) function -> FUNCTION function_head . function_end
    (25) function_end -> .

    FUNCTION        reduce using rule 25 (function_end -> .)
    $end            reduce using rule 25 (function_end -> .)

    function_end                   shift and go to state 45

state 14

    (7) function_head -> BOOL . function_with_return_def
    (11) function_with_return_def -> . ID O_PARENTHESIS parameters C_PARENTHESIS functionblock

    ID              shift and go to state 41

    function_with_return_def       shift and go to state 46

state 15

    (8) function_head -> INT . function_with_return_def
    (11) function_with_return_def -> . ID O_PARENTHESIS parameters C_PARENTHESIS functionblock

    ID              shift and go to state 41

    function_with_return_def       shift and go to state 47

state 16

    (118) timesloop -> TIMES . O_PARENTHESIS INTCONST C_PARENTHESIS block

    O_PARENTHESIS   shift and go to state 48


state 17

    (114) whileloop -> WHILE . start_while O_PARENTHESIS expression C_PARENTHESIS condition_while block end_while
    (115) start_while -> .

    O_PARENTHESIS   reduce using rule 115 (start_while -> .)

    start_while                    shift and go to state 49

state 18

    (35) writting -> PRINT . O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON

    O_PARENTHESIS   shift and go to state 50


state 19

    (112) loop -> whileloop .

    IF              reduce using rule 112 (loop -> whileloop .)
    PRINT           reduce using rule 112 (loop -> whileloop .)
    ID              reduce using rule 112 (loop -> whileloop .)
    LIST            reduce using rule 112 (loop -> whileloop .)
    WHILE           reduce using rule 112 (loop -> whileloop .)
    TIMES           reduce using rule 112 (loop -> whileloop .)
    BOOL            reduce using rule 112 (loop -> whileloop .)
    INT             reduce using rule 112 (loop -> whileloop .)
    FLOAT           reduce using rule 112 (loop -> whileloop .)
    STRING          reduce using rule 112 (loop -> whileloop .)
    C_BRACKET       reduce using rule 112 (loop -> whileloop .)
    RETURN          reduce using rule 112 (loop -> whileloop .)


state 20

    (28) statute -> init .

    IF              reduce using rule 28 (statute -> init .)
    PRINT           reduce using rule 28 (statute -> init .)
    ID              reduce using rule 28 (statute -> init .)
    LIST            reduce using rule 28 (statute -> init .)
    WHILE           reduce using rule 28 (statute -> init .)
    TIMES           reduce using rule 28 (statute -> init .)
    BOOL            reduce using rule 28 (statute -> init .)
    INT             reduce using rule 28 (statute -> init .)
    FLOAT           reduce using rule 28 (statute -> init .)
    STRING          reduce using rule 28 (statute -> init .)
    RETURN          reduce using rule 28 (statute -> init .)
    C_BRACKET       reduce using rule 28 (statute -> init .)


state 21

    (13) type -> BOOL .

    ID              reduce using rule 13 (type -> BOOL .)


state 22

    (34) assignation -> var_assign . EQUALS add_equals expression equals_quadruple SEMICOLON

    EQUALS          shift and go to state 51


state 23

    (43) normalinit -> type . var EQUALS add_equals expression equals_quadruple SEMICOLON
    (92) var -> . ID listaccess

    ID              shift and go to state 53

    var                            shift and go to state 52

state 24

    (42) init -> normalinit .

    IF              reduce using rule 42 (init -> normalinit .)
    PRINT           reduce using rule 42 (init -> normalinit .)
    ID              reduce using rule 42 (init -> normalinit .)
    LIST            reduce using rule 42 (init -> normalinit .)
    WHILE           reduce using rule 42 (init -> normalinit .)
    TIMES           reduce using rule 42 (init -> normalinit .)
    BOOL            reduce using rule 42 (init -> normalinit .)
    INT             reduce using rule 42 (init -> normalinit .)
    FLOAT           reduce using rule 42 (init -> normalinit .)
    STRING          reduce using rule 42 (init -> normalinit .)
    RETURN          reduce using rule 42 (init -> normalinit .)
    C_BRACKET       reduce using rule 42 (init -> normalinit .)


state 25

    (16) type -> STRING .

    ID              reduce using rule 16 (type -> STRING .)


state 26

    (41) init -> listinit .

    IF              reduce using rule 41 (init -> listinit .)
    PRINT           reduce using rule 41 (init -> listinit .)
    ID              reduce using rule 41 (init -> listinit .)
    LIST            reduce using rule 41 (init -> listinit .)
    WHILE           reduce using rule 41 (init -> listinit .)
    TIMES           reduce using rule 41 (init -> listinit .)
    BOOL            reduce using rule 41 (init -> listinit .)
    INT             reduce using rule 41 (init -> listinit .)
    FLOAT           reduce using rule 41 (init -> listinit .)
    STRING          reduce using rule 41 (init -> listinit .)
    RETURN          reduce using rule 41 (init -> listinit .)
    C_BRACKET       reduce using rule 41 (init -> listinit .)


state 27

    (30) statute -> writting .

    IF              reduce using rule 30 (statute -> writting .)
    PRINT           reduce using rule 30 (statute -> writting .)
    ID              reduce using rule 30 (statute -> writting .)
    LIST            reduce using rule 30 (statute -> writting .)
    WHILE           reduce using rule 30 (statute -> writting .)
    TIMES           reduce using rule 30 (statute -> writting .)
    BOOL            reduce using rule 30 (statute -> writting .)
    INT             reduce using rule 30 (statute -> writting .)
    FLOAT           reduce using rule 30 (statute -> writting .)
    STRING          reduce using rule 30 (statute -> writting .)
    RETURN          reduce using rule 30 (statute -> writting .)
    C_BRACKET       reduce using rule 30 (statute -> writting .)


state 28

    (113) loop -> timesloop .

    IF              reduce using rule 113 (loop -> timesloop .)
    PRINT           reduce using rule 113 (loop -> timesloop .)
    ID              reduce using rule 113 (loop -> timesloop .)
    LIST            reduce using rule 113 (loop -> timesloop .)
    WHILE           reduce using rule 113 (loop -> timesloop .)
    TIMES           reduce using rule 113 (loop -> timesloop .)
    BOOL            reduce using rule 113 (loop -> timesloop .)
    INT             reduce using rule 113 (loop -> timesloop .)
    FLOAT           reduce using rule 113 (loop -> timesloop .)
    STRING          reduce using rule 113 (loop -> timesloop .)
    C_BRACKET       reduce using rule 113 (loop -> timesloop .)
    RETURN          reduce using rule 113 (loop -> timesloop .)


state 29

    (119) functioncall -> ID . O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON
    (91) var_assign -> ID . add_to_stack listaccess
    (98) add_to_stack -> .

    O_PARENTHESIS   shift and go to state 55
    O_S_BRACKET     reduce using rule 98 (add_to_stack -> .)
    EQUALS          reduce using rule 98 (add_to_stack -> .)

    add_to_stack                   shift and go to state 54

state 30

    (29) statute -> condition .

    IF              reduce using rule 29 (statute -> condition .)
    PRINT           reduce using rule 29 (statute -> condition .)
    ID              reduce using rule 29 (statute -> condition .)
    LIST            reduce using rule 29 (statute -> condition .)
    WHILE           reduce using rule 29 (statute -> condition .)
    TIMES           reduce using rule 29 (statute -> condition .)
    BOOL            reduce using rule 29 (statute -> condition .)
    INT             reduce using rule 29 (statute -> condition .)
    FLOAT           reduce using rule 29 (statute -> condition .)
    STRING          reduce using rule 29 (statute -> condition .)
    RETURN          reduce using rule 29 (statute -> condition .)
    C_BRACKET       reduce using rule 29 (statute -> condition .)


state 31

    (52) condition -> IF . O_PARENTHESIS expression C_PARENTHESIS start_condition block else end_condition

    O_PARENTHESIS   shift and go to state 56


state 32

    (26) statutesloop -> statute . statutesloop
    (26) statutesloop -> . statute statutesloop
    (27) statutesloop -> .
    (28) statute -> . init
    (29) statute -> . condition
    (30) statute -> . writting
    (31) statute -> . loop
    (32) statute -> . assignation
    (33) statute -> . functioncall
    (41) init -> . listinit
    (42) init -> . normalinit
    (52) condition -> . IF O_PARENTHESIS expression C_PARENTHESIS start_condition block else end_condition
    (35) writting -> . PRINT O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON
    (112) loop -> . whileloop
    (113) loop -> . timesloop
    (34) assignation -> . var_assign EQUALS add_equals expression equals_quadruple SEMICOLON
    (119) functioncall -> . ID O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON
    (46) listinit -> . LIST type var EQUALS list SEMICOLON
    (43) normalinit -> . type var EQUALS add_equals expression equals_quadruple SEMICOLON
    (114) whileloop -> . WHILE start_while O_PARENTHESIS expression C_PARENTHESIS condition_while block end_while
    (118) timesloop -> . TIMES O_PARENTHESIS INTCONST C_PARENTHESIS block
    (91) var_assign -> . ID add_to_stack listaccess
    (13) type -> . BOOL
    (14) type -> . INT
    (15) type -> . FLOAT
    (16) type -> . STRING

    C_BRACKET       reduce using rule 27 (statutesloop -> .)
    RETURN          reduce using rule 27 (statutesloop -> .)
    IF              shift and go to state 31
    PRINT           shift and go to state 18
    ID              shift and go to state 29
    LIST            shift and go to state 37
    WHILE           shift and go to state 17
    TIMES           shift and go to state 16
    BOOL            shift and go to state 21
    INT             shift and go to state 35
    FLOAT           shift and go to state 36
    STRING          shift and go to state 25

    whileloop                      shift and go to state 19
    init                           shift and go to state 20
    var_assign                     shift and go to state 22
    type                           shift and go to state 23
    normalinit                     shift and go to state 24
    listinit                       shift and go to state 26
    writting                       shift and go to state 27
    timesloop                      shift and go to state 28
    condition                      shift and go to state 30
    statute                        shift and go to state 32
    assignation                    shift and go to state 33
    statutesloop                   shift and go to state 57
    functioncall                   shift and go to state 38
    loop                           shift and go to state 39

state 33

    (32) statute -> assignation .

    IF              reduce using rule 32 (statute -> assignation .)
    PRINT           reduce using rule 32 (statute -> assignation .)
    ID              reduce using rule 32 (statute -> assignation .)
    LIST            reduce using rule 32 (statute -> assignation .)
    WHILE           reduce using rule 32 (statute -> assignation .)
    TIMES           reduce using rule 32 (statute -> assignation .)
    BOOL            reduce using rule 32 (statute -> assignation .)
    INT             reduce using rule 32 (statute -> assignation .)
    FLOAT           reduce using rule 32 (statute -> assignation .)
    STRING          reduce using rule 32 (statute -> assignation .)
    RETURN          reduce using rule 32 (statute -> assignation .)
    C_BRACKET       reduce using rule 32 (statute -> assignation .)


state 34

    (21) block -> O_BRACKET statutesloop . C_BRACKET

    C_BRACKET       shift and go to state 58


state 35

    (14) type -> INT .

    ID              reduce using rule 14 (type -> INT .)


state 36

    (15) type -> FLOAT .

    ID              reduce using rule 15 (type -> FLOAT .)


state 37

    (46) listinit -> LIST . type var EQUALS list SEMICOLON
    (13) type -> . BOOL
    (14) type -> . INT
    (15) type -> . FLOAT
    (16) type -> . STRING

    BOOL            shift and go to state 21
    INT             shift and go to state 35
    FLOAT           shift and go to state 36
    STRING          shift and go to state 25

    type                           shift and go to state 59

state 38

    (33) statute -> functioncall .

    IF              reduce using rule 33 (statute -> functioncall .)
    PRINT           reduce using rule 33 (statute -> functioncall .)
    ID              reduce using rule 33 (statute -> functioncall .)
    LIST            reduce using rule 33 (statute -> functioncall .)
    WHILE           reduce using rule 33 (statute -> functioncall .)
    TIMES           reduce using rule 33 (statute -> functioncall .)
    BOOL            reduce using rule 33 (statute -> functioncall .)
    INT             reduce using rule 33 (statute -> functioncall .)
    FLOAT           reduce using rule 33 (statute -> functioncall .)
    STRING          reduce using rule 33 (statute -> functioncall .)
    RETURN          reduce using rule 33 (statute -> functioncall .)
    C_BRACKET       reduce using rule 33 (statute -> functioncall .)


state 39

    (31) statute -> loop .

    IF              reduce using rule 31 (statute -> loop .)
    PRINT           reduce using rule 31 (statute -> loop .)
    ID              reduce using rule 31 (statute -> loop .)
    LIST            reduce using rule 31 (statute -> loop .)
    WHILE           reduce using rule 31 (statute -> loop .)
    TIMES           reduce using rule 31 (statute -> loop .)
    BOOL            reduce using rule 31 (statute -> loop .)
    INT             reduce using rule 31 (statute -> loop .)
    FLOAT           reduce using rule 31 (statute -> loop .)
    STRING          reduce using rule 31 (statute -> loop .)
    RETURN          reduce using rule 31 (statute -> loop .)
    C_BRACKET       reduce using rule 31 (statute -> loop .)


state 40

    (10) function_head -> STRING function_with_return_def .

    FUNCTION        reduce using rule 10 (function_head -> STRING function_with_return_def .)
    $end            reduce using rule 10 (function_head -> STRING function_with_return_def .)


state 41

    (11) function_with_return_def -> ID . O_PARENTHESIS parameters C_PARENTHESIS functionblock

    O_PARENTHESIS   shift and go to state 60


state 42

    (6) function_head -> VOID function_def .

    FUNCTION        reduce using rule 6 (function_head -> VOID function_def .)
    $end            reduce using rule 6 (function_head -> VOID function_def .)


state 43

    (12) function_def -> ID . O_PARENTHESIS parameters C_PARENTHESIS block

    O_PARENTHESIS   shift and go to state 61


state 44

    (9) function_head -> FLOAT function_with_return_def .

    FUNCTION        reduce using rule 9 (function_head -> FLOAT function_with_return_def .)
    $end            reduce using rule 9 (function_head -> FLOAT function_with_return_def .)


state 45

    (5) function -> FUNCTION function_head function_end .

    FUNCTION        reduce using rule 5 (function -> FUNCTION function_head function_end .)
    $end            reduce using rule 5 (function -> FUNCTION function_head function_end .)


state 46

    (7) function_head -> BOOL function_with_return_def .

    FUNCTION        reduce using rule 7 (function_head -> BOOL function_with_return_def .)
    $end            reduce using rule 7 (function_head -> BOOL function_with_return_def .)


state 47

    (8) function_head -> INT function_with_return_def .

    FUNCTION        reduce using rule 8 (function_head -> INT function_with_return_def .)
    $end            reduce using rule 8 (function_head -> INT function_with_return_def .)


state 48

    (118) timesloop -> TIMES O_PARENTHESIS . INTCONST C_PARENTHESIS block

    INTCONST        shift and go to state 62


state 49

    (114) whileloop -> WHILE start_while . O_PARENTHESIS expression C_PARENTHESIS condition_while block end_while

    O_PARENTHESIS   shift and go to state 63


state 50

    (35) writting -> PRINT O_PARENTHESIS . writtingloop C_PARENTHESIS SEMICOLON
    (38) writtingloop -> . start_printing expression print_quadruple optionalwritting
    (36) start_printing -> .

    O_PARENTHESIS   reduce using rule 36 (start_printing -> .)
    ID              reduce using rule 36 (start_printing -> .)
    INTCONST        reduce using rule 36 (start_printing -> .)
    FLOATCONST      reduce using rule 36 (start_printing -> .)
    STRINGCONST     reduce using rule 36 (start_printing -> .)
    TRUE            reduce using rule 36 (start_printing -> .)
    FALSE           reduce using rule 36 (start_printing -> .)

    writtingloop                   shift and go to state 65
    start_printing                 shift and go to state 64

state 51

    (34) assignation -> var_assign EQUALS . add_equals expression equals_quadruple SEMICOLON
    (45) add_equals -> .

    O_PARENTHESIS   reduce using rule 45 (add_equals -> .)
    ID              reduce using rule 45 (add_equals -> .)
    INTCONST        reduce using rule 45 (add_equals -> .)
    FLOATCONST      reduce using rule 45 (add_equals -> .)
    STRINGCONST     reduce using rule 45 (add_equals -> .)
    TRUE            reduce using rule 45 (add_equals -> .)
    FALSE           reduce using rule 45 (add_equals -> .)

    add_equals                     shift and go to state 66

state 52

    (43) normalinit -> type var . EQUALS add_equals expression equals_quadruple SEMICOLON

    EQUALS          shift and go to state 67


state 53

    (92) var -> ID . listaccess
    (93) listaccess -> . O_S_BRACKET INTCONST C_S_BRACKET
    (94) listaccess -> .

    O_S_BRACKET     shift and go to state 69
    EQUALS          reduce using rule 94 (listaccess -> .)

    listaccess                     shift and go to state 68

state 54

    (91) var_assign -> ID add_to_stack . listaccess
    (93) listaccess -> . O_S_BRACKET INTCONST C_S_BRACKET
    (94) listaccess -> .

    O_S_BRACKET     shift and go to state 69
    EQUALS          reduce using rule 94 (listaccess -> .)

    listaccess                     shift and go to state 70

state 55

    (119) functioncall -> ID O_PARENTHESIS . parametersinput C_PARENTHESIS SEMICOLON
    (120) parametersinput -> . expression parametersinputloop
    (121) parametersinput -> .
    (58) expression -> . expression2 expressionoptional
    (61) expression2 -> . exp expression2optional
    (74) exp -> . term exp_quadruple exploop
    (80) term -> . fact term_quadruple termloop
    (87) fact -> . varconst
    (88) fact -> . O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis
    (95) varconst -> . varconstfunction
    (96) varconst -> . constants
    (97) varconstfunction -> . ID functionorlist
    (102) constants -> . INTCONST add_int_constant_to_dict
    (103) constants -> . FLOATCONST add_float_constant_to_dict
    (104) constants -> . STRINGCONST add_string_constant_to_dict
    (105) constants -> . booleanconst
    (106) booleanconst -> . TRUE add_bool_constant_to_dict
    (107) booleanconst -> . FALSE add_bool_constant_to_dict

    C_PARENTHESIS   reduce using rule 121 (parametersinput -> .)
    O_PARENTHESIS   shift and go to state 72
    ID              shift and go to state 80
    INTCONST        shift and go to state 78
    FLOATCONST      shift and go to state 71
    STRINGCONST     shift and go to state 74
    TRUE            shift and go to state 73
    FALSE           shift and go to state 83

    varconstfunction               shift and go to state 75
    exp                            shift and go to state 76
    parametersinput                shift and go to state 77
    expression2                    shift and go to state 79
    constants                      shift and go to state 81
    term                           shift and go to state 82
    varconst                       shift and go to state 84
    booleanconst                   shift and go to state 85
    expression                     shift and go to state 86
    fact                           shift and go to state 87

state 56

    (52) condition -> IF O_PARENTHESIS . expression C_PARENTHESIS start_condition block else end_condition
    (58) expression -> . expression2 expressionoptional
    (61) expression2 -> . exp expression2optional
    (74) exp -> . term exp_quadruple exploop
    (80) term -> . fact term_quadruple termloop
    (87) fact -> . varconst
    (88) fact -> . O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis
    (95) varconst -> . varconstfunction
    (96) varconst -> . constants
    (97) varconstfunction -> . ID functionorlist
    (102) constants -> . INTCONST add_int_constant_to_dict
    (103) constants -> . FLOATCONST add_float_constant_to_dict
    (104) constants -> . STRINGCONST add_string_constant_to_dict
    (105) constants -> . booleanconst
    (106) booleanconst -> . TRUE add_bool_constant_to_dict
    (107) booleanconst -> . FALSE add_bool_constant_to_dict

    O_PARENTHESIS   shift and go to state 72
    ID              shift and go to state 80
    INTCONST        shift and go to state 78
    FLOATCONST      shift and go to state 71
    STRINGCONST     shift and go to state 74
    TRUE            shift and go to state 73
    FALSE           shift and go to state 83

    varconstfunction               shift and go to state 75
    exp                            shift and go to state 76
    expression2                    shift and go to state 79
    constants                      shift and go to state 81
    term                           shift and go to state 82
    varconst                       shift and go to state 84
    booleanconst                   shift and go to state 85
    expression                     shift and go to state 88
    fact                           shift and go to state 87

state 57

    (26) statutesloop -> statute statutesloop .

    C_BRACKET       reduce using rule 26 (statutesloop -> statute statutesloop .)
    RETURN          reduce using rule 26 (statutesloop -> statute statutesloop .)


state 58

    (21) block -> O_BRACKET statutesloop C_BRACKET .

    FUNCTION        reduce using rule 21 (block -> O_BRACKET statutesloop C_BRACKET .)
    $end            reduce using rule 21 (block -> O_BRACKET statutesloop C_BRACKET .)
    IF              reduce using rule 21 (block -> O_BRACKET statutesloop C_BRACKET .)
    PRINT           reduce using rule 21 (block -> O_BRACKET statutesloop C_BRACKET .)
    ID              reduce using rule 21 (block -> O_BRACKET statutesloop C_BRACKET .)
    LIST            reduce using rule 21 (block -> O_BRACKET statutesloop C_BRACKET .)
    WHILE           reduce using rule 21 (block -> O_BRACKET statutesloop C_BRACKET .)
    TIMES           reduce using rule 21 (block -> O_BRACKET statutesloop C_BRACKET .)
    BOOL            reduce using rule 21 (block -> O_BRACKET statutesloop C_BRACKET .)
    INT             reduce using rule 21 (block -> O_BRACKET statutesloop C_BRACKET .)
    FLOAT           reduce using rule 21 (block -> O_BRACKET statutesloop C_BRACKET .)
    STRING          reduce using rule 21 (block -> O_BRACKET statutesloop C_BRACKET .)
    C_BRACKET       reduce using rule 21 (block -> O_BRACKET statutesloop C_BRACKET .)
    RETURN          reduce using rule 21 (block -> O_BRACKET statutesloop C_BRACKET .)
    ELSE            reduce using rule 21 (block -> O_BRACKET statutesloop C_BRACKET .)


state 59

    (46) listinit -> LIST type . var EQUALS list SEMICOLON
    (92) var -> . ID listaccess

    ID              shift and go to state 53

    var                            shift and go to state 89

state 60

    (11) function_with_return_def -> ID O_PARENTHESIS . parameters C_PARENTHESIS functionblock
    (124) parameters -> . parameterinit parametersloop
    (125) parameters -> .
    (126) parameterinit -> . parametertype ID
    (17) parametertype -> . BOOL
    (18) parametertype -> . INT
    (19) parametertype -> . FLOAT
    (20) parametertype -> . STRING

    C_PARENTHESIS   reduce using rule 125 (parameters -> .)
    BOOL            shift and go to state 95
    INT             shift and go to state 93
    FLOAT           shift and go to state 94
    STRING          shift and go to state 91

    parameterinit                  shift and go to state 96
    parametertype                  shift and go to state 90
    parameters                     shift and go to state 92

state 61

    (12) function_def -> ID O_PARENTHESIS . parameters C_PARENTHESIS block
    (124) parameters -> . parameterinit parametersloop
    (125) parameters -> .
    (126) parameterinit -> . parametertype ID
    (17) parametertype -> . BOOL
    (18) parametertype -> . INT
    (19) parametertype -> . FLOAT
    (20) parametertype -> . STRING

    C_PARENTHESIS   reduce using rule 125 (parameters -> .)
    BOOL            shift and go to state 95
    INT             shift and go to state 93
    FLOAT           shift and go to state 94
    STRING          shift and go to state 91

    parameterinit                  shift and go to state 96
    parametertype                  shift and go to state 90
    parameters                     shift and go to state 97

state 62

    (118) timesloop -> TIMES O_PARENTHESIS INTCONST . C_PARENTHESIS block

    C_PARENTHESIS   shift and go to state 98


state 63

    (114) whileloop -> WHILE start_while O_PARENTHESIS . expression C_PARENTHESIS condition_while block end_while
    (58) expression -> . expression2 expressionoptional
    (61) expression2 -> . exp expression2optional
    (74) exp -> . term exp_quadruple exploop
    (80) term -> . fact term_quadruple termloop
    (87) fact -> . varconst
    (88) fact -> . O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis
    (95) varconst -> . varconstfunction
    (96) varconst -> . constants
    (97) varconstfunction -> . ID functionorlist
    (102) constants -> . INTCONST add_int_constant_to_dict
    (103) constants -> . FLOATCONST add_float_constant_to_dict
    (104) constants -> . STRINGCONST add_string_constant_to_dict
    (105) constants -> . booleanconst
    (106) booleanconst -> . TRUE add_bool_constant_to_dict
    (107) booleanconst -> . FALSE add_bool_constant_to_dict

    O_PARENTHESIS   shift and go to state 72
    ID              shift and go to state 80
    INTCONST        shift and go to state 78
    FLOATCONST      shift and go to state 71
    STRINGCONST     shift and go to state 74
    TRUE            shift and go to state 73
    FALSE           shift and go to state 83

    varconstfunction               shift and go to state 75
    exp                            shift and go to state 76
    expression2                    shift and go to state 79
    constants                      shift and go to state 81
    term                           shift and go to state 82
    varconst                       shift and go to state 84
    booleanconst                   shift and go to state 85
    expression                     shift and go to state 99
    fact                           shift and go to state 87

state 64

    (38) writtingloop -> start_printing . expression print_quadruple optionalwritting
    (58) expression -> . expression2 expressionoptional
    (61) expression2 -> . exp expression2optional
    (74) exp -> . term exp_quadruple exploop
    (80) term -> . fact term_quadruple termloop
    (87) fact -> . varconst
    (88) fact -> . O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis
    (95) varconst -> . varconstfunction
    (96) varconst -> . constants
    (97) varconstfunction -> . ID functionorlist
    (102) constants -> . INTCONST add_int_constant_to_dict
    (103) constants -> . FLOATCONST add_float_constant_to_dict
    (104) constants -> . STRINGCONST add_string_constant_to_dict
    (105) constants -> . booleanconst
    (106) booleanconst -> . TRUE add_bool_constant_to_dict
    (107) booleanconst -> . FALSE add_bool_constant_to_dict

    O_PARENTHESIS   shift and go to state 72
    ID              shift and go to state 80
    INTCONST        shift and go to state 78
    FLOATCONST      shift and go to state 71
    STRINGCONST     shift and go to state 74
    TRUE            shift and go to state 73
    FALSE           shift and go to state 83

    varconstfunction               shift and go to state 75
    exp                            shift and go to state 76
    expression2                    shift and go to state 79
    constants                      shift and go to state 81
    term                           shift and go to state 82
    varconst                       shift and go to state 84
    booleanconst                   shift and go to state 85
    expression                     shift and go to state 100
    fact                           shift and go to state 87

state 65

    (35) writting -> PRINT O_PARENTHESIS writtingloop . C_PARENTHESIS SEMICOLON

    C_PARENTHESIS   shift and go to state 101


state 66

    (34) assignation -> var_assign EQUALS add_equals . expression equals_quadruple SEMICOLON
    (58) expression -> . expression2 expressionoptional
    (61) expression2 -> . exp expression2optional
    (74) exp -> . term exp_quadruple exploop
    (80) term -> . fact term_quadruple termloop
    (87) fact -> . varconst
    (88) fact -> . O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis
    (95) varconst -> . varconstfunction
    (96) varconst -> . constants
    (97) varconstfunction -> . ID functionorlist
    (102) constants -> . INTCONST add_int_constant_to_dict
    (103) constants -> . FLOATCONST add_float_constant_to_dict
    (104) constants -> . STRINGCONST add_string_constant_to_dict
    (105) constants -> . booleanconst
    (106) booleanconst -> . TRUE add_bool_constant_to_dict
    (107) booleanconst -> . FALSE add_bool_constant_to_dict

    O_PARENTHESIS   shift and go to state 72
    ID              shift and go to state 80
    INTCONST        shift and go to state 78
    FLOATCONST      shift and go to state 71
    STRINGCONST     shift and go to state 74
    TRUE            shift and go to state 73
    FALSE           shift and go to state 83

    varconstfunction               shift and go to state 75
    expression2                    shift and go to state 79
    constants                      shift and go to state 81
    term                           shift and go to state 82
    varconst                       shift and go to state 84
    exp                            shift and go to state 76
    booleanconst                   shift and go to state 85
    expression                     shift and go to state 102
    fact                           shift and go to state 87

state 67

    (43) normalinit -> type var EQUALS . add_equals expression equals_quadruple SEMICOLON
    (45) add_equals -> .

    O_PARENTHESIS   reduce using rule 45 (add_equals -> .)
    ID              reduce using rule 45 (add_equals -> .)
    INTCONST        reduce using rule 45 (add_equals -> .)
    FLOATCONST      reduce using rule 45 (add_equals -> .)
    STRINGCONST     reduce using rule 45 (add_equals -> .)
    TRUE            reduce using rule 45 (add_equals -> .)
    FALSE           reduce using rule 45 (add_equals -> .)

    add_equals                     shift and go to state 103

state 68

    (92) var -> ID listaccess .

    EQUALS          reduce using rule 92 (var -> ID listaccess .)


state 69

    (93) listaccess -> O_S_BRACKET . INTCONST C_S_BRACKET

    INTCONST        shift and go to state 104


state 70

    (91) var_assign -> ID add_to_stack listaccess .

    EQUALS          reduce using rule 91 (var_assign -> ID add_to_stack listaccess .)


state 71

    (103) constants -> FLOATCONST . add_float_constant_to_dict
    (109) add_float_constant_to_dict -> .

    MULTIPLY        reduce using rule 109 (add_float_constant_to_dict -> .)
    DIVIDE          reduce using rule 109 (add_float_constant_to_dict -> .)
    MOD             reduce using rule 109 (add_float_constant_to_dict -> .)
    SUM             reduce using rule 109 (add_float_constant_to_dict -> .)
    MINUS           reduce using rule 109 (add_float_constant_to_dict -> .)
    EQUALITY        reduce using rule 109 (add_float_constant_to_dict -> .)
    GREATER         reduce using rule 109 (add_float_constant_to_dict -> .)
    GREATER_EQUAL   reduce using rule 109 (add_float_constant_to_dict -> .)
    LESS            reduce using rule 109 (add_float_constant_to_dict -> .)
    LESS_EQUAL      reduce using rule 109 (add_float_constant_to_dict -> .)
    DIFFERENT       reduce using rule 109 (add_float_constant_to_dict -> .)
    AND             reduce using rule 109 (add_float_constant_to_dict -> .)
    OR              reduce using rule 109 (add_float_constant_to_dict -> .)
    COMMA           reduce using rule 109 (add_float_constant_to_dict -> .)
    C_PARENTHESIS   reduce using rule 109 (add_float_constant_to_dict -> .)
    SEMICOLON       reduce using rule 109 (add_float_constant_to_dict -> .)
    C_BRACKET       reduce using rule 109 (add_float_constant_to_dict -> .)
    C_S_BRACKET     reduce using rule 109 (add_float_constant_to_dict -> .)

    add_float_constant_to_dict     shift and go to state 105

state 72

    (88) fact -> O_PARENTHESIS . add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis
    (89) add_o_parenthesis -> .

    O_PARENTHESIS   reduce using rule 89 (add_o_parenthesis -> .)
    ID              reduce using rule 89 (add_o_parenthesis -> .)
    INTCONST        reduce using rule 89 (add_o_parenthesis -> .)
    FLOATCONST      reduce using rule 89 (add_o_parenthesis -> .)
    STRINGCONST     reduce using rule 89 (add_o_parenthesis -> .)
    TRUE            reduce using rule 89 (add_o_parenthesis -> .)
    FALSE           reduce using rule 89 (add_o_parenthesis -> .)

    add_o_parenthesis              shift and go to state 106

state 73

    (106) booleanconst -> TRUE . add_bool_constant_to_dict
    (111) add_bool_constant_to_dict -> .

    MULTIPLY        reduce using rule 111 (add_bool_constant_to_dict -> .)
    DIVIDE          reduce using rule 111 (add_bool_constant_to_dict -> .)
    MOD             reduce using rule 111 (add_bool_constant_to_dict -> .)
    SUM             reduce using rule 111 (add_bool_constant_to_dict -> .)
    MINUS           reduce using rule 111 (add_bool_constant_to_dict -> .)
    EQUALITY        reduce using rule 111 (add_bool_constant_to_dict -> .)
    GREATER         reduce using rule 111 (add_bool_constant_to_dict -> .)
    GREATER_EQUAL   reduce using rule 111 (add_bool_constant_to_dict -> .)
    LESS            reduce using rule 111 (add_bool_constant_to_dict -> .)
    LESS_EQUAL      reduce using rule 111 (add_bool_constant_to_dict -> .)
    DIFFERENT       reduce using rule 111 (add_bool_constant_to_dict -> .)
    AND             reduce using rule 111 (add_bool_constant_to_dict -> .)
    OR              reduce using rule 111 (add_bool_constant_to_dict -> .)
    COMMA           reduce using rule 111 (add_bool_constant_to_dict -> .)
    C_PARENTHESIS   reduce using rule 111 (add_bool_constant_to_dict -> .)
    SEMICOLON       reduce using rule 111 (add_bool_constant_to_dict -> .)
    C_BRACKET       reduce using rule 111 (add_bool_constant_to_dict -> .)
    C_S_BRACKET     reduce using rule 111 (add_bool_constant_to_dict -> .)

    add_bool_constant_to_dict      shift and go to state 107

state 74

    (104) constants -> STRINGCONST . add_string_constant_to_dict
    (110) add_string_constant_to_dict -> .

    MULTIPLY        reduce using rule 110 (add_string_constant_to_dict -> .)
    DIVIDE          reduce using rule 110 (add_string_constant_to_dict -> .)
    MOD             reduce using rule 110 (add_string_constant_to_dict -> .)
    SUM             reduce using rule 110 (add_string_constant_to_dict -> .)
    MINUS           reduce using rule 110 (add_string_constant_to_dict -> .)
    EQUALITY        reduce using rule 110 (add_string_constant_to_dict -> .)
    GREATER         reduce using rule 110 (add_string_constant_to_dict -> .)
    GREATER_EQUAL   reduce using rule 110 (add_string_constant_to_dict -> .)
    LESS            reduce using rule 110 (add_string_constant_to_dict -> .)
    LESS_EQUAL      reduce using rule 110 (add_string_constant_to_dict -> .)
    DIFFERENT       reduce using rule 110 (add_string_constant_to_dict -> .)
    AND             reduce using rule 110 (add_string_constant_to_dict -> .)
    OR              reduce using rule 110 (add_string_constant_to_dict -> .)
    COMMA           reduce using rule 110 (add_string_constant_to_dict -> .)
    C_PARENTHESIS   reduce using rule 110 (add_string_constant_to_dict -> .)
    SEMICOLON       reduce using rule 110 (add_string_constant_to_dict -> .)
    C_BRACKET       reduce using rule 110 (add_string_constant_to_dict -> .)
    C_S_BRACKET     reduce using rule 110 (add_string_constant_to_dict -> .)

    add_string_constant_to_dict    shift and go to state 108

state 75

    (95) varconst -> varconstfunction .

    MULTIPLY        reduce using rule 95 (varconst -> varconstfunction .)
    DIVIDE          reduce using rule 95 (varconst -> varconstfunction .)
    MOD             reduce using rule 95 (varconst -> varconstfunction .)
    SUM             reduce using rule 95 (varconst -> varconstfunction .)
    MINUS           reduce using rule 95 (varconst -> varconstfunction .)
    EQUALITY        reduce using rule 95 (varconst -> varconstfunction .)
    GREATER         reduce using rule 95 (varconst -> varconstfunction .)
    GREATER_EQUAL   reduce using rule 95 (varconst -> varconstfunction .)
    LESS            reduce using rule 95 (varconst -> varconstfunction .)
    LESS_EQUAL      reduce using rule 95 (varconst -> varconstfunction .)
    DIFFERENT       reduce using rule 95 (varconst -> varconstfunction .)
    AND             reduce using rule 95 (varconst -> varconstfunction .)
    OR              reduce using rule 95 (varconst -> varconstfunction .)
    C_PARENTHESIS   reduce using rule 95 (varconst -> varconstfunction .)
    COMMA           reduce using rule 95 (varconst -> varconstfunction .)
    SEMICOLON       reduce using rule 95 (varconst -> varconstfunction .)
    C_BRACKET       reduce using rule 95 (varconst -> varconstfunction .)


state 76

    (61) expression2 -> exp . expression2optional
    (62) expression2optional -> . relop exp relop_quadruple
    (63) expression2optional -> .
    (67) relop -> . EQUALITY
    (68) relop -> . GREATER
    (69) relop -> . GREATER_EQUAL
    (70) relop -> . LESS
    (71) relop -> . LESS_EQUAL
    (72) relop -> . DIFFERENT

    AND             reduce using rule 63 (expression2optional -> .)
    OR              reduce using rule 63 (expression2optional -> .)
    COMMA           reduce using rule 63 (expression2optional -> .)
    C_PARENTHESIS   reduce using rule 63 (expression2optional -> .)
    SEMICOLON       reduce using rule 63 (expression2optional -> .)
    C_BRACKET       reduce using rule 63 (expression2optional -> .)
    EQUALITY        shift and go to state 110
    GREATER         shift and go to state 111
    GREATER_EQUAL   shift and go to state 112
    LESS            shift and go to state 113
    LESS_EQUAL      shift and go to state 115
    DIFFERENT       shift and go to state 109

    relop                          shift and go to state 116
    expression2optional            shift and go to state 114

state 77

    (119) functioncall -> ID O_PARENTHESIS parametersinput . C_PARENTHESIS SEMICOLON

    C_PARENTHESIS   shift and go to state 117


state 78

    (102) constants -> INTCONST . add_int_constant_to_dict
    (108) add_int_constant_to_dict -> .

    MULTIPLY        reduce using rule 108 (add_int_constant_to_dict -> .)
    DIVIDE          reduce using rule 108 (add_int_constant_to_dict -> .)
    MOD             reduce using rule 108 (add_int_constant_to_dict -> .)
    SUM             reduce using rule 108 (add_int_constant_to_dict -> .)
    MINUS           reduce using rule 108 (add_int_constant_to_dict -> .)
    EQUALITY        reduce using rule 108 (add_int_constant_to_dict -> .)
    GREATER         reduce using rule 108 (add_int_constant_to_dict -> .)
    GREATER_EQUAL   reduce using rule 108 (add_int_constant_to_dict -> .)
    LESS            reduce using rule 108 (add_int_constant_to_dict -> .)
    LESS_EQUAL      reduce using rule 108 (add_int_constant_to_dict -> .)
    DIFFERENT       reduce using rule 108 (add_int_constant_to_dict -> .)
    AND             reduce using rule 108 (add_int_constant_to_dict -> .)
    OR              reduce using rule 108 (add_int_constant_to_dict -> .)
    COMMA           reduce using rule 108 (add_int_constant_to_dict -> .)
    C_PARENTHESIS   reduce using rule 108 (add_int_constant_to_dict -> .)
    SEMICOLON       reduce using rule 108 (add_int_constant_to_dict -> .)
    C_BRACKET       reduce using rule 108 (add_int_constant_to_dict -> .)
    C_S_BRACKET     reduce using rule 108 (add_int_constant_to_dict -> .)

    add_int_constant_to_dict       shift and go to state 118

state 79

    (58) expression -> expression2 . expressionoptional
    (59) expressionoptional -> . logicop expression2 logic_op_quadruple
    (60) expressionoptional -> .
    (64) logicop -> . AND
    (65) logicop -> . OR

    COMMA           reduce using rule 60 (expressionoptional -> .)
    C_PARENTHESIS   reduce using rule 60 (expressionoptional -> .)
    SEMICOLON       reduce using rule 60 (expressionoptional -> .)
    C_BRACKET       reduce using rule 60 (expressionoptional -> .)
    AND             shift and go to state 119
    OR              shift and go to state 122

    logicop                        shift and go to state 121
    expressionoptional             shift and go to state 120

state 80

    (97) varconstfunction -> ID . functionorlist
    (99) functionorlist -> . O_S_BRACKET INTCONST C_S_BRACKET
    (100) functionorlist -> . O_PARENTHESIS parametersinput C_PARENTHESIS
    (101) functionorlist -> . add_to_stack
    (98) add_to_stack -> .

    O_S_BRACKET     shift and go to state 124
    O_PARENTHESIS   shift and go to state 126
    MULTIPLY        reduce using rule 98 (add_to_stack -> .)
    DIVIDE          reduce using rule 98 (add_to_stack -> .)
    MOD             reduce using rule 98 (add_to_stack -> .)
    SUM             reduce using rule 98 (add_to_stack -> .)
    MINUS           reduce using rule 98 (add_to_stack -> .)
    EQUALITY        reduce using rule 98 (add_to_stack -> .)
    GREATER         reduce using rule 98 (add_to_stack -> .)
    GREATER_EQUAL   reduce using rule 98 (add_to_stack -> .)
    LESS            reduce using rule 98 (add_to_stack -> .)
    LESS_EQUAL      reduce using rule 98 (add_to_stack -> .)
    DIFFERENT       reduce using rule 98 (add_to_stack -> .)
    AND             reduce using rule 98 (add_to_stack -> .)
    OR              reduce using rule 98 (add_to_stack -> .)
    COMMA           reduce using rule 98 (add_to_stack -> .)
    C_PARENTHESIS   reduce using rule 98 (add_to_stack -> .)
    SEMICOLON       reduce using rule 98 (add_to_stack -> .)
    C_BRACKET       reduce using rule 98 (add_to_stack -> .)

    functionorlist                 shift and go to state 125
    add_to_stack                   shift and go to state 123

state 81

    (96) varconst -> constants .

    MULTIPLY        reduce using rule 96 (varconst -> constants .)
    DIVIDE          reduce using rule 96 (varconst -> constants .)
    MOD             reduce using rule 96 (varconst -> constants .)
    SUM             reduce using rule 96 (varconst -> constants .)
    MINUS           reduce using rule 96 (varconst -> constants .)
    EQUALITY        reduce using rule 96 (varconst -> constants .)
    GREATER         reduce using rule 96 (varconst -> constants .)
    GREATER_EQUAL   reduce using rule 96 (varconst -> constants .)
    LESS            reduce using rule 96 (varconst -> constants .)
    LESS_EQUAL      reduce using rule 96 (varconst -> constants .)
    DIFFERENT       reduce using rule 96 (varconst -> constants .)
    AND             reduce using rule 96 (varconst -> constants .)
    OR              reduce using rule 96 (varconst -> constants .)
    C_PARENTHESIS   reduce using rule 96 (varconst -> constants .)
    COMMA           reduce using rule 96 (varconst -> constants .)
    SEMICOLON       reduce using rule 96 (varconst -> constants .)
    C_BRACKET       reduce using rule 96 (varconst -> constants .)


state 82

    (74) exp -> term . exp_quadruple exploop
    (75) exp_quadruple -> .

    SUM             reduce using rule 75 (exp_quadruple -> .)
    MINUS           reduce using rule 75 (exp_quadruple -> .)
    EQUALITY        reduce using rule 75 (exp_quadruple -> .)
    GREATER         reduce using rule 75 (exp_quadruple -> .)
    GREATER_EQUAL   reduce using rule 75 (exp_quadruple -> .)
    LESS            reduce using rule 75 (exp_quadruple -> .)
    LESS_EQUAL      reduce using rule 75 (exp_quadruple -> .)
    DIFFERENT       reduce using rule 75 (exp_quadruple -> .)
    AND             reduce using rule 75 (exp_quadruple -> .)
    OR              reduce using rule 75 (exp_quadruple -> .)
    COMMA           reduce using rule 75 (exp_quadruple -> .)
    C_PARENTHESIS   reduce using rule 75 (exp_quadruple -> .)
    SEMICOLON       reduce using rule 75 (exp_quadruple -> .)
    C_BRACKET       reduce using rule 75 (exp_quadruple -> .)

    exp_quadruple                  shift and go to state 127

state 83

    (107) booleanconst -> FALSE . add_bool_constant_to_dict
    (111) add_bool_constant_to_dict -> .

    MULTIPLY        reduce using rule 111 (add_bool_constant_to_dict -> .)
    DIVIDE          reduce using rule 111 (add_bool_constant_to_dict -> .)
    MOD             reduce using rule 111 (add_bool_constant_to_dict -> .)
    SUM             reduce using rule 111 (add_bool_constant_to_dict -> .)
    MINUS           reduce using rule 111 (add_bool_constant_to_dict -> .)
    EQUALITY        reduce using rule 111 (add_bool_constant_to_dict -> .)
    GREATER         reduce using rule 111 (add_bool_constant_to_dict -> .)
    GREATER_EQUAL   reduce using rule 111 (add_bool_constant_to_dict -> .)
    LESS            reduce using rule 111 (add_bool_constant_to_dict -> .)
    LESS_EQUAL      reduce using rule 111 (add_bool_constant_to_dict -> .)
    DIFFERENT       reduce using rule 111 (add_bool_constant_to_dict -> .)
    AND             reduce using rule 111 (add_bool_constant_to_dict -> .)
    OR              reduce using rule 111 (add_bool_constant_to_dict -> .)
    COMMA           reduce using rule 111 (add_bool_constant_to_dict -> .)
    C_PARENTHESIS   reduce using rule 111 (add_bool_constant_to_dict -> .)
    SEMICOLON       reduce using rule 111 (add_bool_constant_to_dict -> .)
    C_BRACKET       reduce using rule 111 (add_bool_constant_to_dict -> .)
    C_S_BRACKET     reduce using rule 111 (add_bool_constant_to_dict -> .)

    add_bool_constant_to_dict      shift and go to state 128

state 84

    (87) fact -> varconst .

    MULTIPLY        reduce using rule 87 (fact -> varconst .)
    DIVIDE          reduce using rule 87 (fact -> varconst .)
    MOD             reduce using rule 87 (fact -> varconst .)
    SUM             reduce using rule 87 (fact -> varconst .)
    MINUS           reduce using rule 87 (fact -> varconst .)
    EQUALITY        reduce using rule 87 (fact -> varconst .)
    GREATER         reduce using rule 87 (fact -> varconst .)
    GREATER_EQUAL   reduce using rule 87 (fact -> varconst .)
    LESS            reduce using rule 87 (fact -> varconst .)
    LESS_EQUAL      reduce using rule 87 (fact -> varconst .)
    DIFFERENT       reduce using rule 87 (fact -> varconst .)
    AND             reduce using rule 87 (fact -> varconst .)
    OR              reduce using rule 87 (fact -> varconst .)
    C_PARENTHESIS   reduce using rule 87 (fact -> varconst .)
    COMMA           reduce using rule 87 (fact -> varconst .)
    SEMICOLON       reduce using rule 87 (fact -> varconst .)
    C_BRACKET       reduce using rule 87 (fact -> varconst .)


state 85

    (105) constants -> booleanconst .

    MULTIPLY        reduce using rule 105 (constants -> booleanconst .)
    DIVIDE          reduce using rule 105 (constants -> booleanconst .)
    MOD             reduce using rule 105 (constants -> booleanconst .)
    SUM             reduce using rule 105 (constants -> booleanconst .)
    MINUS           reduce using rule 105 (constants -> booleanconst .)
    EQUALITY        reduce using rule 105 (constants -> booleanconst .)
    GREATER         reduce using rule 105 (constants -> booleanconst .)
    GREATER_EQUAL   reduce using rule 105 (constants -> booleanconst .)
    LESS            reduce using rule 105 (constants -> booleanconst .)
    LESS_EQUAL      reduce using rule 105 (constants -> booleanconst .)
    DIFFERENT       reduce using rule 105 (constants -> booleanconst .)
    AND             reduce using rule 105 (constants -> booleanconst .)
    OR              reduce using rule 105 (constants -> booleanconst .)
    SEMICOLON       reduce using rule 105 (constants -> booleanconst .)
    COMMA           reduce using rule 105 (constants -> booleanconst .)
    C_S_BRACKET     reduce using rule 105 (constants -> booleanconst .)
    C_PARENTHESIS   reduce using rule 105 (constants -> booleanconst .)
    C_BRACKET       reduce using rule 105 (constants -> booleanconst .)


state 86

    (120) parametersinput -> expression . parametersinputloop
    (122) parametersinputloop -> . COMMA expression parametersinputloop
    (123) parametersinputloop -> .

    COMMA           shift and go to state 130
    C_PARENTHESIS   reduce using rule 123 (parametersinputloop -> .)

    parametersinputloop            shift and go to state 129

state 87

    (80) term -> fact . term_quadruple termloop
    (81) term_quadruple -> .

    MULTIPLY        reduce using rule 81 (term_quadruple -> .)
    DIVIDE          reduce using rule 81 (term_quadruple -> .)
    MOD             reduce using rule 81 (term_quadruple -> .)
    SUM             reduce using rule 81 (term_quadruple -> .)
    MINUS           reduce using rule 81 (term_quadruple -> .)
    EQUALITY        reduce using rule 81 (term_quadruple -> .)
    GREATER         reduce using rule 81 (term_quadruple -> .)
    GREATER_EQUAL   reduce using rule 81 (term_quadruple -> .)
    LESS            reduce using rule 81 (term_quadruple -> .)
    LESS_EQUAL      reduce using rule 81 (term_quadruple -> .)
    DIFFERENT       reduce using rule 81 (term_quadruple -> .)
    AND             reduce using rule 81 (term_quadruple -> .)
    OR              reduce using rule 81 (term_quadruple -> .)
    COMMA           reduce using rule 81 (term_quadruple -> .)
    C_PARENTHESIS   reduce using rule 81 (term_quadruple -> .)
    SEMICOLON       reduce using rule 81 (term_quadruple -> .)
    C_BRACKET       reduce using rule 81 (term_quadruple -> .)

    term_quadruple                 shift and go to state 131

state 88

    (52) condition -> IF O_PARENTHESIS expression . C_PARENTHESIS start_condition block else end_condition

    C_PARENTHESIS   shift and go to state 132


state 89

    (46) listinit -> LIST type var . EQUALS list SEMICOLON

    EQUALS          shift and go to state 133


state 90

    (126) parameterinit -> parametertype . ID

    ID              shift and go to state 134


state 91

    (20) parametertype -> STRING .

    ID              reduce using rule 20 (parametertype -> STRING .)


state 92

    (11) function_with_return_def -> ID O_PARENTHESIS parameters . C_PARENTHESIS functionblock

    C_PARENTHESIS   shift and go to state 135


state 93

    (18) parametertype -> INT .

    ID              reduce using rule 18 (parametertype -> INT .)


state 94

    (19) parametertype -> FLOAT .

    ID              reduce using rule 19 (parametertype -> FLOAT .)


state 95

    (17) parametertype -> BOOL .

    ID              reduce using rule 17 (parametertype -> BOOL .)


state 96

    (124) parameters -> parameterinit . parametersloop
    (127) parametersloop -> . COMMA parameterinit parametersloop
    (128) parametersloop -> .

    COMMA           shift and go to state 137
    C_PARENTHESIS   reduce using rule 128 (parametersloop -> .)

    parametersloop                 shift and go to state 136

state 97

    (12) function_def -> ID O_PARENTHESIS parameters . C_PARENTHESIS block

    C_PARENTHESIS   shift and go to state 138


state 98

    (118) timesloop -> TIMES O_PARENTHESIS INTCONST C_PARENTHESIS . block
    (21) block -> . O_BRACKET statutesloop C_BRACKET

    O_BRACKET       shift and go to state 7

    block                          shift and go to state 139

state 99

    (114) whileloop -> WHILE start_while O_PARENTHESIS expression . C_PARENTHESIS condition_while block end_while

    C_PARENTHESIS   shift and go to state 140


state 100

    (38) writtingloop -> start_printing expression . print_quadruple optionalwritting
    (37) print_quadruple -> .

    COMMA           reduce using rule 37 (print_quadruple -> .)
    C_PARENTHESIS   reduce using rule 37 (print_quadruple -> .)

    print_quadruple                shift and go to state 141

state 101

    (35) writting -> PRINT O_PARENTHESIS writtingloop C_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 142


state 102

    (34) assignation -> var_assign EQUALS add_equals expression . equals_quadruple SEMICOLON
    (44) equals_quadruple -> .

    SEMICOLON       reduce using rule 44 (equals_quadruple -> .)

    equals_quadruple               shift and go to state 143

state 103

    (43) normalinit -> type var EQUALS add_equals . expression equals_quadruple SEMICOLON
    (58) expression -> . expression2 expressionoptional
    (61) expression2 -> . exp expression2optional
    (74) exp -> . term exp_quadruple exploop
    (80) term -> . fact term_quadruple termloop
    (87) fact -> . varconst
    (88) fact -> . O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis
    (95) varconst -> . varconstfunction
    (96) varconst -> . constants
    (97) varconstfunction -> . ID functionorlist
    (102) constants -> . INTCONST add_int_constant_to_dict
    (103) constants -> . FLOATCONST add_float_constant_to_dict
    (104) constants -> . STRINGCONST add_string_constant_to_dict
    (105) constants -> . booleanconst
    (106) booleanconst -> . TRUE add_bool_constant_to_dict
    (107) booleanconst -> . FALSE add_bool_constant_to_dict

    O_PARENTHESIS   shift and go to state 72
    ID              shift and go to state 80
    INTCONST        shift and go to state 78
    FLOATCONST      shift and go to state 71
    STRINGCONST     shift and go to state 74
    TRUE            shift and go to state 73
    FALSE           shift and go to state 83

    varconstfunction               shift and go to state 75
    expression2                    shift and go to state 79
    constants                      shift and go to state 81
    term                           shift and go to state 82
    varconst                       shift and go to state 84
    exp                            shift and go to state 76
    booleanconst                   shift and go to state 85
    expression                     shift and go to state 144
    fact                           shift and go to state 87

state 104

    (93) listaccess -> O_S_BRACKET INTCONST . C_S_BRACKET

    C_S_BRACKET     shift and go to state 145


state 105

    (103) constants -> FLOATCONST add_float_constant_to_dict .

    MULTIPLY        reduce using rule 103 (constants -> FLOATCONST add_float_constant_to_dict .)
    DIVIDE          reduce using rule 103 (constants -> FLOATCONST add_float_constant_to_dict .)
    MOD             reduce using rule 103 (constants -> FLOATCONST add_float_constant_to_dict .)
    SUM             reduce using rule 103 (constants -> FLOATCONST add_float_constant_to_dict .)
    MINUS           reduce using rule 103 (constants -> FLOATCONST add_float_constant_to_dict .)
    EQUALITY        reduce using rule 103 (constants -> FLOATCONST add_float_constant_to_dict .)
    GREATER         reduce using rule 103 (constants -> FLOATCONST add_float_constant_to_dict .)
    GREATER_EQUAL   reduce using rule 103 (constants -> FLOATCONST add_float_constant_to_dict .)
    LESS            reduce using rule 103 (constants -> FLOATCONST add_float_constant_to_dict .)
    LESS_EQUAL      reduce using rule 103 (constants -> FLOATCONST add_float_constant_to_dict .)
    DIFFERENT       reduce using rule 103 (constants -> FLOATCONST add_float_constant_to_dict .)
    AND             reduce using rule 103 (constants -> FLOATCONST add_float_constant_to_dict .)
    OR              reduce using rule 103 (constants -> FLOATCONST add_float_constant_to_dict .)
    SEMICOLON       reduce using rule 103 (constants -> FLOATCONST add_float_constant_to_dict .)
    COMMA           reduce using rule 103 (constants -> FLOATCONST add_float_constant_to_dict .)
    C_S_BRACKET     reduce using rule 103 (constants -> FLOATCONST add_float_constant_to_dict .)
    C_PARENTHESIS   reduce using rule 103 (constants -> FLOATCONST add_float_constant_to_dict .)
    C_BRACKET       reduce using rule 103 (constants -> FLOATCONST add_float_constant_to_dict .)


state 106

    (88) fact -> O_PARENTHESIS add_o_parenthesis . expression C_PARENTHESIS add_c_parenthesis
    (58) expression -> . expression2 expressionoptional
    (61) expression2 -> . exp expression2optional
    (74) exp -> . term exp_quadruple exploop
    (80) term -> . fact term_quadruple termloop
    (87) fact -> . varconst
    (88) fact -> . O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis
    (95) varconst -> . varconstfunction
    (96) varconst -> . constants
    (97) varconstfunction -> . ID functionorlist
    (102) constants -> . INTCONST add_int_constant_to_dict
    (103) constants -> . FLOATCONST add_float_constant_to_dict
    (104) constants -> . STRINGCONST add_string_constant_to_dict
    (105) constants -> . booleanconst
    (106) booleanconst -> . TRUE add_bool_constant_to_dict
    (107) booleanconst -> . FALSE add_bool_constant_to_dict

    O_PARENTHESIS   shift and go to state 72
    ID              shift and go to state 80
    INTCONST        shift and go to state 78
    FLOATCONST      shift and go to state 71
    STRINGCONST     shift and go to state 74
    TRUE            shift and go to state 73
    FALSE           shift and go to state 83

    varconstfunction               shift and go to state 75
    exp                            shift and go to state 76
    expression2                    shift and go to state 79
    constants                      shift and go to state 81
    term                           shift and go to state 82
    varconst                       shift and go to state 84
    booleanconst                   shift and go to state 85
    expression                     shift and go to state 146
    fact                           shift and go to state 87

state 107

    (106) booleanconst -> TRUE add_bool_constant_to_dict .

    MULTIPLY        reduce using rule 106 (booleanconst -> TRUE add_bool_constant_to_dict .)
    DIVIDE          reduce using rule 106 (booleanconst -> TRUE add_bool_constant_to_dict .)
    MOD             reduce using rule 106 (booleanconst -> TRUE add_bool_constant_to_dict .)
    SUM             reduce using rule 106 (booleanconst -> TRUE add_bool_constant_to_dict .)
    MINUS           reduce using rule 106 (booleanconst -> TRUE add_bool_constant_to_dict .)
    EQUALITY        reduce using rule 106 (booleanconst -> TRUE add_bool_constant_to_dict .)
    GREATER         reduce using rule 106 (booleanconst -> TRUE add_bool_constant_to_dict .)
    GREATER_EQUAL   reduce using rule 106 (booleanconst -> TRUE add_bool_constant_to_dict .)
    LESS            reduce using rule 106 (booleanconst -> TRUE add_bool_constant_to_dict .)
    LESS_EQUAL      reduce using rule 106 (booleanconst -> TRUE add_bool_constant_to_dict .)
    DIFFERENT       reduce using rule 106 (booleanconst -> TRUE add_bool_constant_to_dict .)
    AND             reduce using rule 106 (booleanconst -> TRUE add_bool_constant_to_dict .)
    OR              reduce using rule 106 (booleanconst -> TRUE add_bool_constant_to_dict .)
    SEMICOLON       reduce using rule 106 (booleanconst -> TRUE add_bool_constant_to_dict .)
    COMMA           reduce using rule 106 (booleanconst -> TRUE add_bool_constant_to_dict .)
    C_PARENTHESIS   reduce using rule 106 (booleanconst -> TRUE add_bool_constant_to_dict .)
    C_BRACKET       reduce using rule 106 (booleanconst -> TRUE add_bool_constant_to_dict .)
    C_S_BRACKET     reduce using rule 106 (booleanconst -> TRUE add_bool_constant_to_dict .)


state 108

    (104) constants -> STRINGCONST add_string_constant_to_dict .

    MULTIPLY        reduce using rule 104 (constants -> STRINGCONST add_string_constant_to_dict .)
    DIVIDE          reduce using rule 104 (constants -> STRINGCONST add_string_constant_to_dict .)
    MOD             reduce using rule 104 (constants -> STRINGCONST add_string_constant_to_dict .)
    SUM             reduce using rule 104 (constants -> STRINGCONST add_string_constant_to_dict .)
    MINUS           reduce using rule 104 (constants -> STRINGCONST add_string_constant_to_dict .)
    EQUALITY        reduce using rule 104 (constants -> STRINGCONST add_string_constant_to_dict .)
    GREATER         reduce using rule 104 (constants -> STRINGCONST add_string_constant_to_dict .)
    GREATER_EQUAL   reduce using rule 104 (constants -> STRINGCONST add_string_constant_to_dict .)
    LESS            reduce using rule 104 (constants -> STRINGCONST add_string_constant_to_dict .)
    LESS_EQUAL      reduce using rule 104 (constants -> STRINGCONST add_string_constant_to_dict .)
    DIFFERENT       reduce using rule 104 (constants -> STRINGCONST add_string_constant_to_dict .)
    AND             reduce using rule 104 (constants -> STRINGCONST add_string_constant_to_dict .)
    OR              reduce using rule 104 (constants -> STRINGCONST add_string_constant_to_dict .)
    SEMICOLON       reduce using rule 104 (constants -> STRINGCONST add_string_constant_to_dict .)
    COMMA           reduce using rule 104 (constants -> STRINGCONST add_string_constant_to_dict .)
    C_S_BRACKET     reduce using rule 104 (constants -> STRINGCONST add_string_constant_to_dict .)
    C_PARENTHESIS   reduce using rule 104 (constants -> STRINGCONST add_string_constant_to_dict .)
    C_BRACKET       reduce using rule 104 (constants -> STRINGCONST add_string_constant_to_dict .)


state 109

    (72) relop -> DIFFERENT .

    O_PARENTHESIS   reduce using rule 72 (relop -> DIFFERENT .)
    ID              reduce using rule 72 (relop -> DIFFERENT .)
    INTCONST        reduce using rule 72 (relop -> DIFFERENT .)
    FLOATCONST      reduce using rule 72 (relop -> DIFFERENT .)
    STRINGCONST     reduce using rule 72 (relop -> DIFFERENT .)
    TRUE            reduce using rule 72 (relop -> DIFFERENT .)
    FALSE           reduce using rule 72 (relop -> DIFFERENT .)


state 110

    (67) relop -> EQUALITY .

    O_PARENTHESIS   reduce using rule 67 (relop -> EQUALITY .)
    ID              reduce using rule 67 (relop -> EQUALITY .)
    INTCONST        reduce using rule 67 (relop -> EQUALITY .)
    FLOATCONST      reduce using rule 67 (relop -> EQUALITY .)
    STRINGCONST     reduce using rule 67 (relop -> EQUALITY .)
    TRUE            reduce using rule 67 (relop -> EQUALITY .)
    FALSE           reduce using rule 67 (relop -> EQUALITY .)


state 111

    (68) relop -> GREATER .

    O_PARENTHESIS   reduce using rule 68 (relop -> GREATER .)
    ID              reduce using rule 68 (relop -> GREATER .)
    INTCONST        reduce using rule 68 (relop -> GREATER .)
    FLOATCONST      reduce using rule 68 (relop -> GREATER .)
    STRINGCONST     reduce using rule 68 (relop -> GREATER .)
    TRUE            reduce using rule 68 (relop -> GREATER .)
    FALSE           reduce using rule 68 (relop -> GREATER .)


state 112

    (69) relop -> GREATER_EQUAL .

    O_PARENTHESIS   reduce using rule 69 (relop -> GREATER_EQUAL .)
    ID              reduce using rule 69 (relop -> GREATER_EQUAL .)
    INTCONST        reduce using rule 69 (relop -> GREATER_EQUAL .)
    FLOATCONST      reduce using rule 69 (relop -> GREATER_EQUAL .)
    STRINGCONST     reduce using rule 69 (relop -> GREATER_EQUAL .)
    TRUE            reduce using rule 69 (relop -> GREATER_EQUAL .)
    FALSE           reduce using rule 69 (relop -> GREATER_EQUAL .)


state 113

    (70) relop -> LESS .

    O_PARENTHESIS   reduce using rule 70 (relop -> LESS .)
    ID              reduce using rule 70 (relop -> LESS .)
    INTCONST        reduce using rule 70 (relop -> LESS .)
    FLOATCONST      reduce using rule 70 (relop -> LESS .)
    STRINGCONST     reduce using rule 70 (relop -> LESS .)
    TRUE            reduce using rule 70 (relop -> LESS .)
    FALSE           reduce using rule 70 (relop -> LESS .)


state 114

    (61) expression2 -> exp expression2optional .

    AND             reduce using rule 61 (expression2 -> exp expression2optional .)
    OR              reduce using rule 61 (expression2 -> exp expression2optional .)
    COMMA           reduce using rule 61 (expression2 -> exp expression2optional .)
    C_PARENTHESIS   reduce using rule 61 (expression2 -> exp expression2optional .)
    C_BRACKET       reduce using rule 61 (expression2 -> exp expression2optional .)
    SEMICOLON       reduce using rule 61 (expression2 -> exp expression2optional .)


state 115

    (71) relop -> LESS_EQUAL .

    O_PARENTHESIS   reduce using rule 71 (relop -> LESS_EQUAL .)
    ID              reduce using rule 71 (relop -> LESS_EQUAL .)
    INTCONST        reduce using rule 71 (relop -> LESS_EQUAL .)
    FLOATCONST      reduce using rule 71 (relop -> LESS_EQUAL .)
    STRINGCONST     reduce using rule 71 (relop -> LESS_EQUAL .)
    TRUE            reduce using rule 71 (relop -> LESS_EQUAL .)
    FALSE           reduce using rule 71 (relop -> LESS_EQUAL .)


state 116

    (62) expression2optional -> relop . exp relop_quadruple
    (74) exp -> . term exp_quadruple exploop
    (80) term -> . fact term_quadruple termloop
    (87) fact -> . varconst
    (88) fact -> . O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis
    (95) varconst -> . varconstfunction
    (96) varconst -> . constants
    (97) varconstfunction -> . ID functionorlist
    (102) constants -> . INTCONST add_int_constant_to_dict
    (103) constants -> . FLOATCONST add_float_constant_to_dict
    (104) constants -> . STRINGCONST add_string_constant_to_dict
    (105) constants -> . booleanconst
    (106) booleanconst -> . TRUE add_bool_constant_to_dict
    (107) booleanconst -> . FALSE add_bool_constant_to_dict

    O_PARENTHESIS   shift and go to state 72
    ID              shift and go to state 80
    INTCONST        shift and go to state 78
    FLOATCONST      shift and go to state 71
    STRINGCONST     shift and go to state 74
    TRUE            shift and go to state 73
    FALSE           shift and go to state 83

    term                           shift and go to state 82
    varconst                       shift and go to state 84
    constants                      shift and go to state 81
    exp                            shift and go to state 147
    booleanconst                   shift and go to state 85
    varconstfunction               shift and go to state 75
    fact                           shift and go to state 87

state 117

    (119) functioncall -> ID O_PARENTHESIS parametersinput C_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 148


state 118

    (102) constants -> INTCONST add_int_constant_to_dict .

    MULTIPLY        reduce using rule 102 (constants -> INTCONST add_int_constant_to_dict .)
    DIVIDE          reduce using rule 102 (constants -> INTCONST add_int_constant_to_dict .)
    MOD             reduce using rule 102 (constants -> INTCONST add_int_constant_to_dict .)
    SUM             reduce using rule 102 (constants -> INTCONST add_int_constant_to_dict .)
    MINUS           reduce using rule 102 (constants -> INTCONST add_int_constant_to_dict .)
    EQUALITY        reduce using rule 102 (constants -> INTCONST add_int_constant_to_dict .)
    GREATER         reduce using rule 102 (constants -> INTCONST add_int_constant_to_dict .)
    GREATER_EQUAL   reduce using rule 102 (constants -> INTCONST add_int_constant_to_dict .)
    LESS            reduce using rule 102 (constants -> INTCONST add_int_constant_to_dict .)
    LESS_EQUAL      reduce using rule 102 (constants -> INTCONST add_int_constant_to_dict .)
    DIFFERENT       reduce using rule 102 (constants -> INTCONST add_int_constant_to_dict .)
    AND             reduce using rule 102 (constants -> INTCONST add_int_constant_to_dict .)
    OR              reduce using rule 102 (constants -> INTCONST add_int_constant_to_dict .)
    SEMICOLON       reduce using rule 102 (constants -> INTCONST add_int_constant_to_dict .)
    COMMA           reduce using rule 102 (constants -> INTCONST add_int_constant_to_dict .)
    C_S_BRACKET     reduce using rule 102 (constants -> INTCONST add_int_constant_to_dict .)
    C_PARENTHESIS   reduce using rule 102 (constants -> INTCONST add_int_constant_to_dict .)
    C_BRACKET       reduce using rule 102 (constants -> INTCONST add_int_constant_to_dict .)


state 119

    (64) logicop -> AND .

    O_PARENTHESIS   reduce using rule 64 (logicop -> AND .)
    ID              reduce using rule 64 (logicop -> AND .)
    INTCONST        reduce using rule 64 (logicop -> AND .)
    FLOATCONST      reduce using rule 64 (logicop -> AND .)
    STRINGCONST     reduce using rule 64 (logicop -> AND .)
    TRUE            reduce using rule 64 (logicop -> AND .)
    FALSE           reduce using rule 64 (logicop -> AND .)


state 120

    (58) expression -> expression2 expressionoptional .

    C_BRACKET       reduce using rule 58 (expression -> expression2 expressionoptional .)
    C_PARENTHESIS   reduce using rule 58 (expression -> expression2 expressionoptional .)
    COMMA           reduce using rule 58 (expression -> expression2 expressionoptional .)
    SEMICOLON       reduce using rule 58 (expression -> expression2 expressionoptional .)


state 121

    (59) expressionoptional -> logicop . expression2 logic_op_quadruple
    (61) expression2 -> . exp expression2optional
    (74) exp -> . term exp_quadruple exploop
    (80) term -> . fact term_quadruple termloop
    (87) fact -> . varconst
    (88) fact -> . O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis
    (95) varconst -> . varconstfunction
    (96) varconst -> . constants
    (97) varconstfunction -> . ID functionorlist
    (102) constants -> . INTCONST add_int_constant_to_dict
    (103) constants -> . FLOATCONST add_float_constant_to_dict
    (104) constants -> . STRINGCONST add_string_constant_to_dict
    (105) constants -> . booleanconst
    (106) booleanconst -> . TRUE add_bool_constant_to_dict
    (107) booleanconst -> . FALSE add_bool_constant_to_dict

    O_PARENTHESIS   shift and go to state 72
    ID              shift and go to state 80
    INTCONST        shift and go to state 78
    FLOATCONST      shift and go to state 71
    STRINGCONST     shift and go to state 74
    TRUE            shift and go to state 73
    FALSE           shift and go to state 83

    varconstfunction               shift and go to state 75
    exp                            shift and go to state 76
    expression2                    shift and go to state 149
    constants                      shift and go to state 81
    term                           shift and go to state 82
    varconst                       shift and go to state 84
    booleanconst                   shift and go to state 85
    fact                           shift and go to state 87

state 122

    (65) logicop -> OR .

    O_PARENTHESIS   reduce using rule 65 (logicop -> OR .)
    ID              reduce using rule 65 (logicop -> OR .)
    INTCONST        reduce using rule 65 (logicop -> OR .)
    FLOATCONST      reduce using rule 65 (logicop -> OR .)
    STRINGCONST     reduce using rule 65 (logicop -> OR .)
    TRUE            reduce using rule 65 (logicop -> OR .)
    FALSE           reduce using rule 65 (logicop -> OR .)


state 123

    (101) functionorlist -> add_to_stack .

    MULTIPLY        reduce using rule 101 (functionorlist -> add_to_stack .)
    DIVIDE          reduce using rule 101 (functionorlist -> add_to_stack .)
    MOD             reduce using rule 101 (functionorlist -> add_to_stack .)
    SUM             reduce using rule 101 (functionorlist -> add_to_stack .)
    MINUS           reduce using rule 101 (functionorlist -> add_to_stack .)
    EQUALITY        reduce using rule 101 (functionorlist -> add_to_stack .)
    GREATER         reduce using rule 101 (functionorlist -> add_to_stack .)
    GREATER_EQUAL   reduce using rule 101 (functionorlist -> add_to_stack .)
    LESS            reduce using rule 101 (functionorlist -> add_to_stack .)
    LESS_EQUAL      reduce using rule 101 (functionorlist -> add_to_stack .)
    DIFFERENT       reduce using rule 101 (functionorlist -> add_to_stack .)
    AND             reduce using rule 101 (functionorlist -> add_to_stack .)
    OR              reduce using rule 101 (functionorlist -> add_to_stack .)
    COMMA           reduce using rule 101 (functionorlist -> add_to_stack .)
    C_PARENTHESIS   reduce using rule 101 (functionorlist -> add_to_stack .)
    SEMICOLON       reduce using rule 101 (functionorlist -> add_to_stack .)
    C_BRACKET       reduce using rule 101 (functionorlist -> add_to_stack .)


state 124

    (99) functionorlist -> O_S_BRACKET . INTCONST C_S_BRACKET

    INTCONST        shift and go to state 150


state 125

    (97) varconstfunction -> ID functionorlist .

    MULTIPLY        reduce using rule 97 (varconstfunction -> ID functionorlist .)
    DIVIDE          reduce using rule 97 (varconstfunction -> ID functionorlist .)
    MOD             reduce using rule 97 (varconstfunction -> ID functionorlist .)
    SUM             reduce using rule 97 (varconstfunction -> ID functionorlist .)
    MINUS           reduce using rule 97 (varconstfunction -> ID functionorlist .)
    EQUALITY        reduce using rule 97 (varconstfunction -> ID functionorlist .)
    GREATER         reduce using rule 97 (varconstfunction -> ID functionorlist .)
    GREATER_EQUAL   reduce using rule 97 (varconstfunction -> ID functionorlist .)
    LESS            reduce using rule 97 (varconstfunction -> ID functionorlist .)
    LESS_EQUAL      reduce using rule 97 (varconstfunction -> ID functionorlist .)
    DIFFERENT       reduce using rule 97 (varconstfunction -> ID functionorlist .)
    AND             reduce using rule 97 (varconstfunction -> ID functionorlist .)
    OR              reduce using rule 97 (varconstfunction -> ID functionorlist .)
    SEMICOLON       reduce using rule 97 (varconstfunction -> ID functionorlist .)
    C_PARENTHESIS   reduce using rule 97 (varconstfunction -> ID functionorlist .)
    C_BRACKET       reduce using rule 97 (varconstfunction -> ID functionorlist .)
    COMMA           reduce using rule 97 (varconstfunction -> ID functionorlist .)


state 126

    (100) functionorlist -> O_PARENTHESIS . parametersinput C_PARENTHESIS
    (120) parametersinput -> . expression parametersinputloop
    (121) parametersinput -> .
    (58) expression -> . expression2 expressionoptional
    (61) expression2 -> . exp expression2optional
    (74) exp -> . term exp_quadruple exploop
    (80) term -> . fact term_quadruple termloop
    (87) fact -> . varconst
    (88) fact -> . O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis
    (95) varconst -> . varconstfunction
    (96) varconst -> . constants
    (97) varconstfunction -> . ID functionorlist
    (102) constants -> . INTCONST add_int_constant_to_dict
    (103) constants -> . FLOATCONST add_float_constant_to_dict
    (104) constants -> . STRINGCONST add_string_constant_to_dict
    (105) constants -> . booleanconst
    (106) booleanconst -> . TRUE add_bool_constant_to_dict
    (107) booleanconst -> . FALSE add_bool_constant_to_dict

    C_PARENTHESIS   reduce using rule 121 (parametersinput -> .)
    O_PARENTHESIS   shift and go to state 72
    ID              shift and go to state 80
    INTCONST        shift and go to state 78
    FLOATCONST      shift and go to state 71
    STRINGCONST     shift and go to state 74
    TRUE            shift and go to state 73
    FALSE           shift and go to state 83

    varconstfunction               shift and go to state 75
    exp                            shift and go to state 76
    parametersinput                shift and go to state 151
    expression2                    shift and go to state 79
    constants                      shift and go to state 81
    term                           shift and go to state 82
    varconst                       shift and go to state 84
    booleanconst                   shift and go to state 85
    expression                     shift and go to state 86
    fact                           shift and go to state 87

state 127

    (74) exp -> term exp_quadruple . exploop
    (76) exploop -> . addsub exp
    (77) exploop -> .
    (78) addsub -> . SUM
    (79) addsub -> . MINUS

    EQUALITY        reduce using rule 77 (exploop -> .)
    GREATER         reduce using rule 77 (exploop -> .)
    GREATER_EQUAL   reduce using rule 77 (exploop -> .)
    LESS            reduce using rule 77 (exploop -> .)
    LESS_EQUAL      reduce using rule 77 (exploop -> .)
    DIFFERENT       reduce using rule 77 (exploop -> .)
    AND             reduce using rule 77 (exploop -> .)
    OR              reduce using rule 77 (exploop -> .)
    COMMA           reduce using rule 77 (exploop -> .)
    C_PARENTHESIS   reduce using rule 77 (exploop -> .)
    SEMICOLON       reduce using rule 77 (exploop -> .)
    C_BRACKET       reduce using rule 77 (exploop -> .)
    SUM             shift and go to state 152
    MINUS           shift and go to state 153

    exploop                        shift and go to state 154
    addsub                         shift and go to state 155

state 128

    (107) booleanconst -> FALSE add_bool_constant_to_dict .

    MULTIPLY        reduce using rule 107 (booleanconst -> FALSE add_bool_constant_to_dict .)
    DIVIDE          reduce using rule 107 (booleanconst -> FALSE add_bool_constant_to_dict .)
    MOD             reduce using rule 107 (booleanconst -> FALSE add_bool_constant_to_dict .)
    SUM             reduce using rule 107 (booleanconst -> FALSE add_bool_constant_to_dict .)
    MINUS           reduce using rule 107 (booleanconst -> FALSE add_bool_constant_to_dict .)
    EQUALITY        reduce using rule 107 (booleanconst -> FALSE add_bool_constant_to_dict .)
    GREATER         reduce using rule 107 (booleanconst -> FALSE add_bool_constant_to_dict .)
    GREATER_EQUAL   reduce using rule 107 (booleanconst -> FALSE add_bool_constant_to_dict .)
    LESS            reduce using rule 107 (booleanconst -> FALSE add_bool_constant_to_dict .)
    LESS_EQUAL      reduce using rule 107 (booleanconst -> FALSE add_bool_constant_to_dict .)
    DIFFERENT       reduce using rule 107 (booleanconst -> FALSE add_bool_constant_to_dict .)
    AND             reduce using rule 107 (booleanconst -> FALSE add_bool_constant_to_dict .)
    OR              reduce using rule 107 (booleanconst -> FALSE add_bool_constant_to_dict .)
    SEMICOLON       reduce using rule 107 (booleanconst -> FALSE add_bool_constant_to_dict .)
    COMMA           reduce using rule 107 (booleanconst -> FALSE add_bool_constant_to_dict .)
    C_PARENTHESIS   reduce using rule 107 (booleanconst -> FALSE add_bool_constant_to_dict .)
    C_BRACKET       reduce using rule 107 (booleanconst -> FALSE add_bool_constant_to_dict .)
    C_S_BRACKET     reduce using rule 107 (booleanconst -> FALSE add_bool_constant_to_dict .)


state 129

    (120) parametersinput -> expression parametersinputloop .

    C_PARENTHESIS   reduce using rule 120 (parametersinput -> expression parametersinputloop .)


state 130

    (122) parametersinputloop -> COMMA . expression parametersinputloop
    (58) expression -> . expression2 expressionoptional
    (61) expression2 -> . exp expression2optional
    (74) exp -> . term exp_quadruple exploop
    (80) term -> . fact term_quadruple termloop
    (87) fact -> . varconst
    (88) fact -> . O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis
    (95) varconst -> . varconstfunction
    (96) varconst -> . constants
    (97) varconstfunction -> . ID functionorlist
    (102) constants -> . INTCONST add_int_constant_to_dict
    (103) constants -> . FLOATCONST add_float_constant_to_dict
    (104) constants -> . STRINGCONST add_string_constant_to_dict
    (105) constants -> . booleanconst
    (106) booleanconst -> . TRUE add_bool_constant_to_dict
    (107) booleanconst -> . FALSE add_bool_constant_to_dict

    O_PARENTHESIS   shift and go to state 72
    ID              shift and go to state 80
    INTCONST        shift and go to state 78
    FLOATCONST      shift and go to state 71
    STRINGCONST     shift and go to state 74
    TRUE            shift and go to state 73
    FALSE           shift and go to state 83

    varconstfunction               shift and go to state 75
    exp                            shift and go to state 76
    expression2                    shift and go to state 79
    constants                      shift and go to state 81
    term                           shift and go to state 82
    varconst                       shift and go to state 84
    booleanconst                   shift and go to state 85
    expression                     shift and go to state 156
    fact                           shift and go to state 87

state 131

    (80) term -> fact term_quadruple . termloop
    (82) termloop -> . divmult term
    (83) termloop -> .
    (84) divmult -> . MULTIPLY
    (85) divmult -> . DIVIDE
    (86) divmult -> . MOD

    SUM             reduce using rule 83 (termloop -> .)
    MINUS           reduce using rule 83 (termloop -> .)
    EQUALITY        reduce using rule 83 (termloop -> .)
    GREATER         reduce using rule 83 (termloop -> .)
    GREATER_EQUAL   reduce using rule 83 (termloop -> .)
    LESS            reduce using rule 83 (termloop -> .)
    LESS_EQUAL      reduce using rule 83 (termloop -> .)
    DIFFERENT       reduce using rule 83 (termloop -> .)
    AND             reduce using rule 83 (termloop -> .)
    OR              reduce using rule 83 (termloop -> .)
    COMMA           reduce using rule 83 (termloop -> .)
    C_PARENTHESIS   reduce using rule 83 (termloop -> .)
    SEMICOLON       reduce using rule 83 (termloop -> .)
    C_BRACKET       reduce using rule 83 (termloop -> .)
    MULTIPLY        shift and go to state 159
    DIVIDE          shift and go to state 157
    MOD             shift and go to state 161

    termloop                       shift and go to state 158
    divmult                        shift and go to state 160

state 132

    (52) condition -> IF O_PARENTHESIS expression C_PARENTHESIS . start_condition block else end_condition
    (55) start_condition -> .

    O_BRACKET       reduce using rule 55 (start_condition -> .)

    start_condition                shift and go to state 162

state 133

    (46) listinit -> LIST type var EQUALS . list SEMICOLON
    (47) list -> . O_S_BRACKET listelements C_S_BRACKET

    O_S_BRACKET     shift and go to state 164

    list                           shift and go to state 163

state 134

    (126) parameterinit -> parametertype ID .

    COMMA           reduce using rule 126 (parameterinit -> parametertype ID .)
    C_PARENTHESIS   reduce using rule 126 (parameterinit -> parametertype ID .)


state 135

    (11) function_with_return_def -> ID O_PARENTHESIS parameters C_PARENTHESIS . functionblock
    (22) functionblock -> . O_BRACKET statutesloop functionreturn C_BRACKET

    O_BRACKET       shift and go to state 165

    functionblock                  shift and go to state 166

state 136

    (124) parameters -> parameterinit parametersloop .

    C_PARENTHESIS   reduce using rule 124 (parameters -> parameterinit parametersloop .)


state 137

    (127) parametersloop -> COMMA . parameterinit parametersloop
    (126) parameterinit -> . parametertype ID
    (17) parametertype -> . BOOL
    (18) parametertype -> . INT
    (19) parametertype -> . FLOAT
    (20) parametertype -> . STRING

    BOOL            shift and go to state 95
    INT             shift and go to state 93
    FLOAT           shift and go to state 94
    STRING          shift and go to state 91

    parametertype                  shift and go to state 90
    parameterinit                  shift and go to state 167

state 138

    (12) function_def -> ID O_PARENTHESIS parameters C_PARENTHESIS . block
    (21) block -> . O_BRACKET statutesloop C_BRACKET

    O_BRACKET       shift and go to state 7

    block                          shift and go to state 168

state 139

    (118) timesloop -> TIMES O_PARENTHESIS INTCONST C_PARENTHESIS block .

    IF              reduce using rule 118 (timesloop -> TIMES O_PARENTHESIS INTCONST C_PARENTHESIS block .)
    PRINT           reduce using rule 118 (timesloop -> TIMES O_PARENTHESIS INTCONST C_PARENTHESIS block .)
    ID              reduce using rule 118 (timesloop -> TIMES O_PARENTHESIS INTCONST C_PARENTHESIS block .)
    LIST            reduce using rule 118 (timesloop -> TIMES O_PARENTHESIS INTCONST C_PARENTHESIS block .)
    WHILE           reduce using rule 118 (timesloop -> TIMES O_PARENTHESIS INTCONST C_PARENTHESIS block .)
    TIMES           reduce using rule 118 (timesloop -> TIMES O_PARENTHESIS INTCONST C_PARENTHESIS block .)
    BOOL            reduce using rule 118 (timesloop -> TIMES O_PARENTHESIS INTCONST C_PARENTHESIS block .)
    INT             reduce using rule 118 (timesloop -> TIMES O_PARENTHESIS INTCONST C_PARENTHESIS block .)
    FLOAT           reduce using rule 118 (timesloop -> TIMES O_PARENTHESIS INTCONST C_PARENTHESIS block .)
    STRING          reduce using rule 118 (timesloop -> TIMES O_PARENTHESIS INTCONST C_PARENTHESIS block .)
    RETURN          reduce using rule 118 (timesloop -> TIMES O_PARENTHESIS INTCONST C_PARENTHESIS block .)
    C_BRACKET       reduce using rule 118 (timesloop -> TIMES O_PARENTHESIS INTCONST C_PARENTHESIS block .)


state 140

    (114) whileloop -> WHILE start_while O_PARENTHESIS expression C_PARENTHESIS . condition_while block end_while
    (116) condition_while -> .

    O_BRACKET       reduce using rule 116 (condition_while -> .)

    condition_while                shift and go to state 169

state 141

    (38) writtingloop -> start_printing expression print_quadruple . optionalwritting
    (39) optionalwritting -> . COMMA writtingloop
    (40) optionalwritting -> .

    COMMA           shift and go to state 171
    C_PARENTHESIS   reduce using rule 40 (optionalwritting -> .)

    optionalwritting               shift and go to state 170

state 142

    (35) writting -> PRINT O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON .

    IF              reduce using rule 35 (writting -> PRINT O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON .)
    PRINT           reduce using rule 35 (writting -> PRINT O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON .)
    ID              reduce using rule 35 (writting -> PRINT O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON .)
    LIST            reduce using rule 35 (writting -> PRINT O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON .)
    WHILE           reduce using rule 35 (writting -> PRINT O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON .)
    TIMES           reduce using rule 35 (writting -> PRINT O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON .)
    BOOL            reduce using rule 35 (writting -> PRINT O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON .)
    INT             reduce using rule 35 (writting -> PRINT O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON .)
    FLOAT           reduce using rule 35 (writting -> PRINT O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON .)
    STRING          reduce using rule 35 (writting -> PRINT O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON .)
    RETURN          reduce using rule 35 (writting -> PRINT O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON .)
    C_BRACKET       reduce using rule 35 (writting -> PRINT O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON .)


state 143

    (34) assignation -> var_assign EQUALS add_equals expression equals_quadruple . SEMICOLON

    SEMICOLON       shift and go to state 172


state 144

    (43) normalinit -> type var EQUALS add_equals expression . equals_quadruple SEMICOLON
    (44) equals_quadruple -> .

    SEMICOLON       reduce using rule 44 (equals_quadruple -> .)

    equals_quadruple               shift and go to state 173

state 145

    (93) listaccess -> O_S_BRACKET INTCONST C_S_BRACKET .

    EQUALS          reduce using rule 93 (listaccess -> O_S_BRACKET INTCONST C_S_BRACKET .)


state 146

    (88) fact -> O_PARENTHESIS add_o_parenthesis expression . C_PARENTHESIS add_c_parenthesis

    C_PARENTHESIS   shift and go to state 174


state 147

    (62) expression2optional -> relop exp . relop_quadruple
    (73) relop_quadruple -> .

    AND             reduce using rule 73 (relop_quadruple -> .)
    OR              reduce using rule 73 (relop_quadruple -> .)
    COMMA           reduce using rule 73 (relop_quadruple -> .)
    C_PARENTHESIS   reduce using rule 73 (relop_quadruple -> .)
    SEMICOLON       reduce using rule 73 (relop_quadruple -> .)
    C_BRACKET       reduce using rule 73 (relop_quadruple -> .)

    relop_quadruple                shift and go to state 175

state 148

    (119) functioncall -> ID O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON .

    IF              reduce using rule 119 (functioncall -> ID O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON .)
    PRINT           reduce using rule 119 (functioncall -> ID O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON .)
    ID              reduce using rule 119 (functioncall -> ID O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON .)
    LIST            reduce using rule 119 (functioncall -> ID O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON .)
    WHILE           reduce using rule 119 (functioncall -> ID O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON .)
    TIMES           reduce using rule 119 (functioncall -> ID O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON .)
    BOOL            reduce using rule 119 (functioncall -> ID O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON .)
    INT             reduce using rule 119 (functioncall -> ID O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON .)
    FLOAT           reduce using rule 119 (functioncall -> ID O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON .)
    STRING          reduce using rule 119 (functioncall -> ID O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON .)
    C_BRACKET       reduce using rule 119 (functioncall -> ID O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON .)
    RETURN          reduce using rule 119 (functioncall -> ID O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON .)


state 149

    (59) expressionoptional -> logicop expression2 . logic_op_quadruple
    (66) logic_op_quadruple -> .

    COMMA           reduce using rule 66 (logic_op_quadruple -> .)
    C_PARENTHESIS   reduce using rule 66 (logic_op_quadruple -> .)
    SEMICOLON       reduce using rule 66 (logic_op_quadruple -> .)
    C_BRACKET       reduce using rule 66 (logic_op_quadruple -> .)

    logic_op_quadruple             shift and go to state 176

state 150

    (99) functionorlist -> O_S_BRACKET INTCONST . C_S_BRACKET

    C_S_BRACKET     shift and go to state 177


state 151

    (100) functionorlist -> O_PARENTHESIS parametersinput . C_PARENTHESIS

    C_PARENTHESIS   shift and go to state 178


state 152

    (78) addsub -> SUM .

    O_PARENTHESIS   reduce using rule 78 (addsub -> SUM .)
    ID              reduce using rule 78 (addsub -> SUM .)
    INTCONST        reduce using rule 78 (addsub -> SUM .)
    FLOATCONST      reduce using rule 78 (addsub -> SUM .)
    STRINGCONST     reduce using rule 78 (addsub -> SUM .)
    TRUE            reduce using rule 78 (addsub -> SUM .)
    FALSE           reduce using rule 78 (addsub -> SUM .)


state 153

    (79) addsub -> MINUS .

    O_PARENTHESIS   reduce using rule 79 (addsub -> MINUS .)
    ID              reduce using rule 79 (addsub -> MINUS .)
    INTCONST        reduce using rule 79 (addsub -> MINUS .)
    FLOATCONST      reduce using rule 79 (addsub -> MINUS .)
    STRINGCONST     reduce using rule 79 (addsub -> MINUS .)
    TRUE            reduce using rule 79 (addsub -> MINUS .)
    FALSE           reduce using rule 79 (addsub -> MINUS .)


state 154

    (74) exp -> term exp_quadruple exploop .

    EQUALITY        reduce using rule 74 (exp -> term exp_quadruple exploop .)
    GREATER         reduce using rule 74 (exp -> term exp_quadruple exploop .)
    GREATER_EQUAL   reduce using rule 74 (exp -> term exp_quadruple exploop .)
    LESS            reduce using rule 74 (exp -> term exp_quadruple exploop .)
    LESS_EQUAL      reduce using rule 74 (exp -> term exp_quadruple exploop .)
    DIFFERENT       reduce using rule 74 (exp -> term exp_quadruple exploop .)
    AND             reduce using rule 74 (exp -> term exp_quadruple exploop .)
    OR              reduce using rule 74 (exp -> term exp_quadruple exploop .)
    SEMICOLON       reduce using rule 74 (exp -> term exp_quadruple exploop .)
    C_PARENTHESIS   reduce using rule 74 (exp -> term exp_quadruple exploop .)
    COMMA           reduce using rule 74 (exp -> term exp_quadruple exploop .)
    C_BRACKET       reduce using rule 74 (exp -> term exp_quadruple exploop .)


state 155

    (76) exploop -> addsub . exp
    (74) exp -> . term exp_quadruple exploop
    (80) term -> . fact term_quadruple termloop
    (87) fact -> . varconst
    (88) fact -> . O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis
    (95) varconst -> . varconstfunction
    (96) varconst -> . constants
    (97) varconstfunction -> . ID functionorlist
    (102) constants -> . INTCONST add_int_constant_to_dict
    (103) constants -> . FLOATCONST add_float_constant_to_dict
    (104) constants -> . STRINGCONST add_string_constant_to_dict
    (105) constants -> . booleanconst
    (106) booleanconst -> . TRUE add_bool_constant_to_dict
    (107) booleanconst -> . FALSE add_bool_constant_to_dict

    O_PARENTHESIS   shift and go to state 72
    ID              shift and go to state 80
    INTCONST        shift and go to state 78
    FLOATCONST      shift and go to state 71
    STRINGCONST     shift and go to state 74
    TRUE            shift and go to state 73
    FALSE           shift and go to state 83

    term                           shift and go to state 82
    varconst                       shift and go to state 84
    constants                      shift and go to state 81
    exp                            shift and go to state 179
    booleanconst                   shift and go to state 85
    varconstfunction               shift and go to state 75
    fact                           shift and go to state 87

state 156

    (122) parametersinputloop -> COMMA expression . parametersinputloop
    (122) parametersinputloop -> . COMMA expression parametersinputloop
    (123) parametersinputloop -> .

    COMMA           shift and go to state 130
    C_PARENTHESIS   reduce using rule 123 (parametersinputloop -> .)

    parametersinputloop            shift and go to state 180

state 157

    (85) divmult -> DIVIDE .

    O_PARENTHESIS   reduce using rule 85 (divmult -> DIVIDE .)
    ID              reduce using rule 85 (divmult -> DIVIDE .)
    INTCONST        reduce using rule 85 (divmult -> DIVIDE .)
    FLOATCONST      reduce using rule 85 (divmult -> DIVIDE .)
    STRINGCONST     reduce using rule 85 (divmult -> DIVIDE .)
    TRUE            reduce using rule 85 (divmult -> DIVIDE .)
    FALSE           reduce using rule 85 (divmult -> DIVIDE .)


state 158

    (80) term -> fact term_quadruple termloop .

    SUM             reduce using rule 80 (term -> fact term_quadruple termloop .)
    MINUS           reduce using rule 80 (term -> fact term_quadruple termloop .)
    EQUALITY        reduce using rule 80 (term -> fact term_quadruple termloop .)
    GREATER         reduce using rule 80 (term -> fact term_quadruple termloop .)
    GREATER_EQUAL   reduce using rule 80 (term -> fact term_quadruple termloop .)
    LESS            reduce using rule 80 (term -> fact term_quadruple termloop .)
    LESS_EQUAL      reduce using rule 80 (term -> fact term_quadruple termloop .)
    DIFFERENT       reduce using rule 80 (term -> fact term_quadruple termloop .)
    AND             reduce using rule 80 (term -> fact term_quadruple termloop .)
    OR              reduce using rule 80 (term -> fact term_quadruple termloop .)
    C_PARENTHESIS   reduce using rule 80 (term -> fact term_quadruple termloop .)
    SEMICOLON       reduce using rule 80 (term -> fact term_quadruple termloop .)
    COMMA           reduce using rule 80 (term -> fact term_quadruple termloop .)
    C_BRACKET       reduce using rule 80 (term -> fact term_quadruple termloop .)


state 159

    (84) divmult -> MULTIPLY .

    O_PARENTHESIS   reduce using rule 84 (divmult -> MULTIPLY .)
    ID              reduce using rule 84 (divmult -> MULTIPLY .)
    INTCONST        reduce using rule 84 (divmult -> MULTIPLY .)
    FLOATCONST      reduce using rule 84 (divmult -> MULTIPLY .)
    STRINGCONST     reduce using rule 84 (divmult -> MULTIPLY .)
    TRUE            reduce using rule 84 (divmult -> MULTIPLY .)
    FALSE           reduce using rule 84 (divmult -> MULTIPLY .)


state 160

    (82) termloop -> divmult . term
    (80) term -> . fact term_quadruple termloop
    (87) fact -> . varconst
    (88) fact -> . O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis
    (95) varconst -> . varconstfunction
    (96) varconst -> . constants
    (97) varconstfunction -> . ID functionorlist
    (102) constants -> . INTCONST add_int_constant_to_dict
    (103) constants -> . FLOATCONST add_float_constant_to_dict
    (104) constants -> . STRINGCONST add_string_constant_to_dict
    (105) constants -> . booleanconst
    (106) booleanconst -> . TRUE add_bool_constant_to_dict
    (107) booleanconst -> . FALSE add_bool_constant_to_dict

    O_PARENTHESIS   shift and go to state 72
    ID              shift and go to state 80
    INTCONST        shift and go to state 78
    FLOATCONST      shift and go to state 71
    STRINGCONST     shift and go to state 74
    TRUE            shift and go to state 73
    FALSE           shift and go to state 83

    term                           shift and go to state 181
    varconstfunction               shift and go to state 75
    varconst                       shift and go to state 84
    constants                      shift and go to state 81
    booleanconst                   shift and go to state 85
    fact                           shift and go to state 87

state 161

    (86) divmult -> MOD .

    O_PARENTHESIS   reduce using rule 86 (divmult -> MOD .)
    ID              reduce using rule 86 (divmult -> MOD .)
    INTCONST        reduce using rule 86 (divmult -> MOD .)
    FLOATCONST      reduce using rule 86 (divmult -> MOD .)
    STRINGCONST     reduce using rule 86 (divmult -> MOD .)
    TRUE            reduce using rule 86 (divmult -> MOD .)
    FALSE           reduce using rule 86 (divmult -> MOD .)


state 162

    (52) condition -> IF O_PARENTHESIS expression C_PARENTHESIS start_condition . block else end_condition
    (21) block -> . O_BRACKET statutesloop C_BRACKET

    O_BRACKET       shift and go to state 7

    block                          shift and go to state 182

state 163

    (46) listinit -> LIST type var EQUALS list . SEMICOLON

    SEMICOLON       shift and go to state 183


state 164

    (47) list -> O_S_BRACKET . listelements C_S_BRACKET
    (48) listelements -> . constants optionalconstants
    (49) listelements -> .
    (102) constants -> . INTCONST add_int_constant_to_dict
    (103) constants -> . FLOATCONST add_float_constant_to_dict
    (104) constants -> . STRINGCONST add_string_constant_to_dict
    (105) constants -> . booleanconst
    (106) booleanconst -> . TRUE add_bool_constant_to_dict
    (107) booleanconst -> . FALSE add_bool_constant_to_dict

    C_S_BRACKET     reduce using rule 49 (listelements -> .)
    INTCONST        shift and go to state 78
    FLOATCONST      shift and go to state 71
    STRINGCONST     shift and go to state 74
    TRUE            shift and go to state 73
    FALSE           shift and go to state 83

    listelements                   shift and go to state 184
    booleanconst                   shift and go to state 85
    constants                      shift and go to state 185

state 165

    (22) functionblock -> O_BRACKET . statutesloop functionreturn C_BRACKET
    (26) statutesloop -> . statute statutesloop
    (27) statutesloop -> .
    (28) statute -> . init
    (29) statute -> . condition
    (30) statute -> . writting
    (31) statute -> . loop
    (32) statute -> . assignation
    (33) statute -> . functioncall
    (41) init -> . listinit
    (42) init -> . normalinit
    (52) condition -> . IF O_PARENTHESIS expression C_PARENTHESIS start_condition block else end_condition
    (35) writting -> . PRINT O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON
    (112) loop -> . whileloop
    (113) loop -> . timesloop
    (34) assignation -> . var_assign EQUALS add_equals expression equals_quadruple SEMICOLON
    (119) functioncall -> . ID O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON
    (46) listinit -> . LIST type var EQUALS list SEMICOLON
    (43) normalinit -> . type var EQUALS add_equals expression equals_quadruple SEMICOLON
    (114) whileloop -> . WHILE start_while O_PARENTHESIS expression C_PARENTHESIS condition_while block end_while
    (118) timesloop -> . TIMES O_PARENTHESIS INTCONST C_PARENTHESIS block
    (91) var_assign -> . ID add_to_stack listaccess
    (13) type -> . BOOL
    (14) type -> . INT
    (15) type -> . FLOAT
    (16) type -> . STRING

    RETURN          reduce using rule 27 (statutesloop -> .)
    IF              shift and go to state 31
    PRINT           shift and go to state 18
    ID              shift and go to state 29
    LIST            shift and go to state 37
    WHILE           shift and go to state 17
    TIMES           shift and go to state 16
    BOOL            shift and go to state 21
    INT             shift and go to state 35
    FLOAT           shift and go to state 36
    STRING          shift and go to state 25

    whileloop                      shift and go to state 19
    init                           shift and go to state 20
    var_assign                     shift and go to state 22
    type                           shift and go to state 23
    normalinit                     shift and go to state 24
    listinit                       shift and go to state 26
    writting                       shift and go to state 27
    timesloop                      shift and go to state 28
    condition                      shift and go to state 30
    statute                        shift and go to state 32
    assignation                    shift and go to state 33
    statutesloop                   shift and go to state 186
    functioncall                   shift and go to state 38
    loop                           shift and go to state 39

state 166

    (11) function_with_return_def -> ID O_PARENTHESIS parameters C_PARENTHESIS functionblock .

    FUNCTION        reduce using rule 11 (function_with_return_def -> ID O_PARENTHESIS parameters C_PARENTHESIS functionblock .)
    $end            reduce using rule 11 (function_with_return_def -> ID O_PARENTHESIS parameters C_PARENTHESIS functionblock .)


state 167

    (127) parametersloop -> COMMA parameterinit . parametersloop
    (127) parametersloop -> . COMMA parameterinit parametersloop
    (128) parametersloop -> .

    COMMA           shift and go to state 137
    C_PARENTHESIS   reduce using rule 128 (parametersloop -> .)

    parametersloop                 shift and go to state 187

state 168

    (12) function_def -> ID O_PARENTHESIS parameters C_PARENTHESIS block .

    FUNCTION        reduce using rule 12 (function_def -> ID O_PARENTHESIS parameters C_PARENTHESIS block .)
    $end            reduce using rule 12 (function_def -> ID O_PARENTHESIS parameters C_PARENTHESIS block .)


state 169

    (114) whileloop -> WHILE start_while O_PARENTHESIS expression C_PARENTHESIS condition_while . block end_while
    (21) block -> . O_BRACKET statutesloop C_BRACKET

    O_BRACKET       shift and go to state 7

    block                          shift and go to state 188

state 170

    (38) writtingloop -> start_printing expression print_quadruple optionalwritting .

    C_PARENTHESIS   reduce using rule 38 (writtingloop -> start_printing expression print_quadruple optionalwritting .)


state 171

    (39) optionalwritting -> COMMA . writtingloop
    (38) writtingloop -> . start_printing expression print_quadruple optionalwritting
    (36) start_printing -> .

    O_PARENTHESIS   reduce using rule 36 (start_printing -> .)
    ID              reduce using rule 36 (start_printing -> .)
    INTCONST        reduce using rule 36 (start_printing -> .)
    FLOATCONST      reduce using rule 36 (start_printing -> .)
    STRINGCONST     reduce using rule 36 (start_printing -> .)
    TRUE            reduce using rule 36 (start_printing -> .)
    FALSE           reduce using rule 36 (start_printing -> .)

    writtingloop                   shift and go to state 189
    start_printing                 shift and go to state 64

state 172

    (34) assignation -> var_assign EQUALS add_equals expression equals_quadruple SEMICOLON .

    IF              reduce using rule 34 (assignation -> var_assign EQUALS add_equals expression equals_quadruple SEMICOLON .)
    PRINT           reduce using rule 34 (assignation -> var_assign EQUALS add_equals expression equals_quadruple SEMICOLON .)
    ID              reduce using rule 34 (assignation -> var_assign EQUALS add_equals expression equals_quadruple SEMICOLON .)
    LIST            reduce using rule 34 (assignation -> var_assign EQUALS add_equals expression equals_quadruple SEMICOLON .)
    WHILE           reduce using rule 34 (assignation -> var_assign EQUALS add_equals expression equals_quadruple SEMICOLON .)
    TIMES           reduce using rule 34 (assignation -> var_assign EQUALS add_equals expression equals_quadruple SEMICOLON .)
    BOOL            reduce using rule 34 (assignation -> var_assign EQUALS add_equals expression equals_quadruple SEMICOLON .)
    INT             reduce using rule 34 (assignation -> var_assign EQUALS add_equals expression equals_quadruple SEMICOLON .)
    FLOAT           reduce using rule 34 (assignation -> var_assign EQUALS add_equals expression equals_quadruple SEMICOLON .)
    STRING          reduce using rule 34 (assignation -> var_assign EQUALS add_equals expression equals_quadruple SEMICOLON .)
    C_BRACKET       reduce using rule 34 (assignation -> var_assign EQUALS add_equals expression equals_quadruple SEMICOLON .)
    RETURN          reduce using rule 34 (assignation -> var_assign EQUALS add_equals expression equals_quadruple SEMICOLON .)


state 173

    (43) normalinit -> type var EQUALS add_equals expression equals_quadruple . SEMICOLON

    SEMICOLON       shift and go to state 190


state 174

    (88) fact -> O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS . add_c_parenthesis
    (90) add_c_parenthesis -> .

    MULTIPLY        reduce using rule 90 (add_c_parenthesis -> .)
    DIVIDE          reduce using rule 90 (add_c_parenthesis -> .)
    MOD             reduce using rule 90 (add_c_parenthesis -> .)
    SUM             reduce using rule 90 (add_c_parenthesis -> .)
    MINUS           reduce using rule 90 (add_c_parenthesis -> .)
    EQUALITY        reduce using rule 90 (add_c_parenthesis -> .)
    GREATER         reduce using rule 90 (add_c_parenthesis -> .)
    GREATER_EQUAL   reduce using rule 90 (add_c_parenthesis -> .)
    LESS            reduce using rule 90 (add_c_parenthesis -> .)
    LESS_EQUAL      reduce using rule 90 (add_c_parenthesis -> .)
    DIFFERENT       reduce using rule 90 (add_c_parenthesis -> .)
    AND             reduce using rule 90 (add_c_parenthesis -> .)
    OR              reduce using rule 90 (add_c_parenthesis -> .)
    COMMA           reduce using rule 90 (add_c_parenthesis -> .)
    C_PARENTHESIS   reduce using rule 90 (add_c_parenthesis -> .)
    SEMICOLON       reduce using rule 90 (add_c_parenthesis -> .)
    C_BRACKET       reduce using rule 90 (add_c_parenthesis -> .)

    add_c_parenthesis              shift and go to state 191

state 175

    (62) expression2optional -> relop exp relop_quadruple .

    AND             reduce using rule 62 (expression2optional -> relop exp relop_quadruple .)
    OR              reduce using rule 62 (expression2optional -> relop exp relop_quadruple .)
    COMMA           reduce using rule 62 (expression2optional -> relop exp relop_quadruple .)
    C_PARENTHESIS   reduce using rule 62 (expression2optional -> relop exp relop_quadruple .)
    SEMICOLON       reduce using rule 62 (expression2optional -> relop exp relop_quadruple .)
    C_BRACKET       reduce using rule 62 (expression2optional -> relop exp relop_quadruple .)


state 176

    (59) expressionoptional -> logicop expression2 logic_op_quadruple .

    COMMA           reduce using rule 59 (expressionoptional -> logicop expression2 logic_op_quadruple .)
    C_PARENTHESIS   reduce using rule 59 (expressionoptional -> logicop expression2 logic_op_quadruple .)
    SEMICOLON       reduce using rule 59 (expressionoptional -> logicop expression2 logic_op_quadruple .)
    C_BRACKET       reduce using rule 59 (expressionoptional -> logicop expression2 logic_op_quadruple .)


state 177

    (99) functionorlist -> O_S_BRACKET INTCONST C_S_BRACKET .

    MULTIPLY        reduce using rule 99 (functionorlist -> O_S_BRACKET INTCONST C_S_BRACKET .)
    DIVIDE          reduce using rule 99 (functionorlist -> O_S_BRACKET INTCONST C_S_BRACKET .)
    MOD             reduce using rule 99 (functionorlist -> O_S_BRACKET INTCONST C_S_BRACKET .)
    SUM             reduce using rule 99 (functionorlist -> O_S_BRACKET INTCONST C_S_BRACKET .)
    MINUS           reduce using rule 99 (functionorlist -> O_S_BRACKET INTCONST C_S_BRACKET .)
    EQUALITY        reduce using rule 99 (functionorlist -> O_S_BRACKET INTCONST C_S_BRACKET .)
    GREATER         reduce using rule 99 (functionorlist -> O_S_BRACKET INTCONST C_S_BRACKET .)
    GREATER_EQUAL   reduce using rule 99 (functionorlist -> O_S_BRACKET INTCONST C_S_BRACKET .)
    LESS            reduce using rule 99 (functionorlist -> O_S_BRACKET INTCONST C_S_BRACKET .)
    LESS_EQUAL      reduce using rule 99 (functionorlist -> O_S_BRACKET INTCONST C_S_BRACKET .)
    DIFFERENT       reduce using rule 99 (functionorlist -> O_S_BRACKET INTCONST C_S_BRACKET .)
    AND             reduce using rule 99 (functionorlist -> O_S_BRACKET INTCONST C_S_BRACKET .)
    OR              reduce using rule 99 (functionorlist -> O_S_BRACKET INTCONST C_S_BRACKET .)
    COMMA           reduce using rule 99 (functionorlist -> O_S_BRACKET INTCONST C_S_BRACKET .)
    C_PARENTHESIS   reduce using rule 99 (functionorlist -> O_S_BRACKET INTCONST C_S_BRACKET .)
    SEMICOLON       reduce using rule 99 (functionorlist -> O_S_BRACKET INTCONST C_S_BRACKET .)
    C_BRACKET       reduce using rule 99 (functionorlist -> O_S_BRACKET INTCONST C_S_BRACKET .)


state 178

    (100) functionorlist -> O_PARENTHESIS parametersinput C_PARENTHESIS .

    MULTIPLY        reduce using rule 100 (functionorlist -> O_PARENTHESIS parametersinput C_PARENTHESIS .)
    DIVIDE          reduce using rule 100 (functionorlist -> O_PARENTHESIS parametersinput C_PARENTHESIS .)
    MOD             reduce using rule 100 (functionorlist -> O_PARENTHESIS parametersinput C_PARENTHESIS .)
    SUM             reduce using rule 100 (functionorlist -> O_PARENTHESIS parametersinput C_PARENTHESIS .)
    MINUS           reduce using rule 100 (functionorlist -> O_PARENTHESIS parametersinput C_PARENTHESIS .)
    EQUALITY        reduce using rule 100 (functionorlist -> O_PARENTHESIS parametersinput C_PARENTHESIS .)
    GREATER         reduce using rule 100 (functionorlist -> O_PARENTHESIS parametersinput C_PARENTHESIS .)
    GREATER_EQUAL   reduce using rule 100 (functionorlist -> O_PARENTHESIS parametersinput C_PARENTHESIS .)
    LESS            reduce using rule 100 (functionorlist -> O_PARENTHESIS parametersinput C_PARENTHESIS .)
    LESS_EQUAL      reduce using rule 100 (functionorlist -> O_PARENTHESIS parametersinput C_PARENTHESIS .)
    DIFFERENT       reduce using rule 100 (functionorlist -> O_PARENTHESIS parametersinput C_PARENTHESIS .)
    AND             reduce using rule 100 (functionorlist -> O_PARENTHESIS parametersinput C_PARENTHESIS .)
    OR              reduce using rule 100 (functionorlist -> O_PARENTHESIS parametersinput C_PARENTHESIS .)
    COMMA           reduce using rule 100 (functionorlist -> O_PARENTHESIS parametersinput C_PARENTHESIS .)
    C_PARENTHESIS   reduce using rule 100 (functionorlist -> O_PARENTHESIS parametersinput C_PARENTHESIS .)
    SEMICOLON       reduce using rule 100 (functionorlist -> O_PARENTHESIS parametersinput C_PARENTHESIS .)
    C_BRACKET       reduce using rule 100 (functionorlist -> O_PARENTHESIS parametersinput C_PARENTHESIS .)


state 179

    (76) exploop -> addsub exp .

    EQUALITY        reduce using rule 76 (exploop -> addsub exp .)
    GREATER         reduce using rule 76 (exploop -> addsub exp .)
    GREATER_EQUAL   reduce using rule 76 (exploop -> addsub exp .)
    LESS            reduce using rule 76 (exploop -> addsub exp .)
    LESS_EQUAL      reduce using rule 76 (exploop -> addsub exp .)
    DIFFERENT       reduce using rule 76 (exploop -> addsub exp .)
    AND             reduce using rule 76 (exploop -> addsub exp .)
    OR              reduce using rule 76 (exploop -> addsub exp .)
    COMMA           reduce using rule 76 (exploop -> addsub exp .)
    C_PARENTHESIS   reduce using rule 76 (exploop -> addsub exp .)
    SEMICOLON       reduce using rule 76 (exploop -> addsub exp .)
    C_BRACKET       reduce using rule 76 (exploop -> addsub exp .)


state 180

    (122) parametersinputloop -> COMMA expression parametersinputloop .

    C_PARENTHESIS   reduce using rule 122 (parametersinputloop -> COMMA expression parametersinputloop .)


state 181

    (82) termloop -> divmult term .

    SUM             reduce using rule 82 (termloop -> divmult term .)
    MINUS           reduce using rule 82 (termloop -> divmult term .)
    EQUALITY        reduce using rule 82 (termloop -> divmult term .)
    GREATER         reduce using rule 82 (termloop -> divmult term .)
    GREATER_EQUAL   reduce using rule 82 (termloop -> divmult term .)
    LESS            reduce using rule 82 (termloop -> divmult term .)
    LESS_EQUAL      reduce using rule 82 (termloop -> divmult term .)
    DIFFERENT       reduce using rule 82 (termloop -> divmult term .)
    AND             reduce using rule 82 (termloop -> divmult term .)
    OR              reduce using rule 82 (termloop -> divmult term .)
    COMMA           reduce using rule 82 (termloop -> divmult term .)
    C_PARENTHESIS   reduce using rule 82 (termloop -> divmult term .)
    SEMICOLON       reduce using rule 82 (termloop -> divmult term .)
    C_BRACKET       reduce using rule 82 (termloop -> divmult term .)


state 182

    (52) condition -> IF O_PARENTHESIS expression C_PARENTHESIS start_condition block . else end_condition
    (53) else -> . ELSE else_condition block
    (54) else -> .

    ELSE            shift and go to state 192
    IF              reduce using rule 54 (else -> .)
    PRINT           reduce using rule 54 (else -> .)
    ID              reduce using rule 54 (else -> .)
    LIST            reduce using rule 54 (else -> .)
    WHILE           reduce using rule 54 (else -> .)
    TIMES           reduce using rule 54 (else -> .)
    BOOL            reduce using rule 54 (else -> .)
    INT             reduce using rule 54 (else -> .)
    FLOAT           reduce using rule 54 (else -> .)
    STRING          reduce using rule 54 (else -> .)
    C_BRACKET       reduce using rule 54 (else -> .)
    RETURN          reduce using rule 54 (else -> .)

    else                           shift and go to state 193

state 183

    (46) listinit -> LIST type var EQUALS list SEMICOLON .

    IF              reduce using rule 46 (listinit -> LIST type var EQUALS list SEMICOLON .)
    PRINT           reduce using rule 46 (listinit -> LIST type var EQUALS list SEMICOLON .)
    ID              reduce using rule 46 (listinit -> LIST type var EQUALS list SEMICOLON .)
    LIST            reduce using rule 46 (listinit -> LIST type var EQUALS list SEMICOLON .)
    WHILE           reduce using rule 46 (listinit -> LIST type var EQUALS list SEMICOLON .)
    TIMES           reduce using rule 46 (listinit -> LIST type var EQUALS list SEMICOLON .)
    BOOL            reduce using rule 46 (listinit -> LIST type var EQUALS list SEMICOLON .)
    INT             reduce using rule 46 (listinit -> LIST type var EQUALS list SEMICOLON .)
    FLOAT           reduce using rule 46 (listinit -> LIST type var EQUALS list SEMICOLON .)
    STRING          reduce using rule 46 (listinit -> LIST type var EQUALS list SEMICOLON .)
    C_BRACKET       reduce using rule 46 (listinit -> LIST type var EQUALS list SEMICOLON .)
    RETURN          reduce using rule 46 (listinit -> LIST type var EQUALS list SEMICOLON .)


state 184

    (47) list -> O_S_BRACKET listelements . C_S_BRACKET

    C_S_BRACKET     shift and go to state 194


state 185

    (48) listelements -> constants . optionalconstants
    (50) optionalconstants -> . COMMA constants optionalconstants
    (51) optionalconstants -> .

    COMMA           shift and go to state 196
    C_S_BRACKET     reduce using rule 51 (optionalconstants -> .)

    optionalconstants              shift and go to state 195

state 186

    (22) functionblock -> O_BRACKET statutesloop . functionreturn C_BRACKET
    (23) functionreturn -> . RETURN O_BRACKET expression C_BRACKET SEMICOLON
    (24) functionreturn -> . RETURN expression SEMICOLON

    RETURN          shift and go to state 197

    functionreturn                 shift and go to state 198

state 187

    (127) parametersloop -> COMMA parameterinit parametersloop .

    C_PARENTHESIS   reduce using rule 127 (parametersloop -> COMMA parameterinit parametersloop .)


state 188

    (114) whileloop -> WHILE start_while O_PARENTHESIS expression C_PARENTHESIS condition_while block . end_while
    (117) end_while -> .

    IF              reduce using rule 117 (end_while -> .)
    PRINT           reduce using rule 117 (end_while -> .)
    ID              reduce using rule 117 (end_while -> .)
    LIST            reduce using rule 117 (end_while -> .)
    WHILE           reduce using rule 117 (end_while -> .)
    TIMES           reduce using rule 117 (end_while -> .)
    BOOL            reduce using rule 117 (end_while -> .)
    INT             reduce using rule 117 (end_while -> .)
    FLOAT           reduce using rule 117 (end_while -> .)
    STRING          reduce using rule 117 (end_while -> .)
    C_BRACKET       reduce using rule 117 (end_while -> .)
    RETURN          reduce using rule 117 (end_while -> .)

    end_while                      shift and go to state 199

state 189

    (39) optionalwritting -> COMMA writtingloop .

    C_PARENTHESIS   reduce using rule 39 (optionalwritting -> COMMA writtingloop .)


state 190

    (43) normalinit -> type var EQUALS add_equals expression equals_quadruple SEMICOLON .

    IF              reduce using rule 43 (normalinit -> type var EQUALS add_equals expression equals_quadruple SEMICOLON .)
    PRINT           reduce using rule 43 (normalinit -> type var EQUALS add_equals expression equals_quadruple SEMICOLON .)
    ID              reduce using rule 43 (normalinit -> type var EQUALS add_equals expression equals_quadruple SEMICOLON .)
    LIST            reduce using rule 43 (normalinit -> type var EQUALS add_equals expression equals_quadruple SEMICOLON .)
    WHILE           reduce using rule 43 (normalinit -> type var EQUALS add_equals expression equals_quadruple SEMICOLON .)
    TIMES           reduce using rule 43 (normalinit -> type var EQUALS add_equals expression equals_quadruple SEMICOLON .)
    BOOL            reduce using rule 43 (normalinit -> type var EQUALS add_equals expression equals_quadruple SEMICOLON .)
    INT             reduce using rule 43 (normalinit -> type var EQUALS add_equals expression equals_quadruple SEMICOLON .)
    FLOAT           reduce using rule 43 (normalinit -> type var EQUALS add_equals expression equals_quadruple SEMICOLON .)
    STRING          reduce using rule 43 (normalinit -> type var EQUALS add_equals expression equals_quadruple SEMICOLON .)
    C_BRACKET       reduce using rule 43 (normalinit -> type var EQUALS add_equals expression equals_quadruple SEMICOLON .)
    RETURN          reduce using rule 43 (normalinit -> type var EQUALS add_equals expression equals_quadruple SEMICOLON .)


state 191

    (88) fact -> O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis .

    MULTIPLY        reduce using rule 88 (fact -> O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis .)
    DIVIDE          reduce using rule 88 (fact -> O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis .)
    MOD             reduce using rule 88 (fact -> O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis .)
    SUM             reduce using rule 88 (fact -> O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis .)
    MINUS           reduce using rule 88 (fact -> O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis .)
    EQUALITY        reduce using rule 88 (fact -> O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis .)
    GREATER         reduce using rule 88 (fact -> O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis .)
    GREATER_EQUAL   reduce using rule 88 (fact -> O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis .)
    LESS            reduce using rule 88 (fact -> O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis .)
    LESS_EQUAL      reduce using rule 88 (fact -> O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis .)
    DIFFERENT       reduce using rule 88 (fact -> O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis .)
    AND             reduce using rule 88 (fact -> O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis .)
    OR              reduce using rule 88 (fact -> O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis .)
    C_PARENTHESIS   reduce using rule 88 (fact -> O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis .)
    COMMA           reduce using rule 88 (fact -> O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis .)
    SEMICOLON       reduce using rule 88 (fact -> O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis .)
    C_BRACKET       reduce using rule 88 (fact -> O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis .)


state 192

    (53) else -> ELSE . else_condition block
    (56) else_condition -> .

    O_BRACKET       reduce using rule 56 (else_condition -> .)

    else_condition                 shift and go to state 200

state 193

    (52) condition -> IF O_PARENTHESIS expression C_PARENTHESIS start_condition block else . end_condition
    (57) end_condition -> .

    IF              reduce using rule 57 (end_condition -> .)
    PRINT           reduce using rule 57 (end_condition -> .)
    ID              reduce using rule 57 (end_condition -> .)
    LIST            reduce using rule 57 (end_condition -> .)
    WHILE           reduce using rule 57 (end_condition -> .)
    TIMES           reduce using rule 57 (end_condition -> .)
    BOOL            reduce using rule 57 (end_condition -> .)
    INT             reduce using rule 57 (end_condition -> .)
    FLOAT           reduce using rule 57 (end_condition -> .)
    STRING          reduce using rule 57 (end_condition -> .)
    C_BRACKET       reduce using rule 57 (end_condition -> .)
    RETURN          reduce using rule 57 (end_condition -> .)

    end_condition                  shift and go to state 201

state 194

    (47) list -> O_S_BRACKET listelements C_S_BRACKET .

    SEMICOLON       reduce using rule 47 (list -> O_S_BRACKET listelements C_S_BRACKET .)


state 195

    (48) listelements -> constants optionalconstants .

    C_S_BRACKET     reduce using rule 48 (listelements -> constants optionalconstants .)


state 196

    (50) optionalconstants -> COMMA . constants optionalconstants
    (102) constants -> . INTCONST add_int_constant_to_dict
    (103) constants -> . FLOATCONST add_float_constant_to_dict
    (104) constants -> . STRINGCONST add_string_constant_to_dict
    (105) constants -> . booleanconst
    (106) booleanconst -> . TRUE add_bool_constant_to_dict
    (107) booleanconst -> . FALSE add_bool_constant_to_dict

    INTCONST        shift and go to state 78
    FLOATCONST      shift and go to state 71
    STRINGCONST     shift and go to state 74
    TRUE            shift and go to state 73
    FALSE           shift and go to state 83

    booleanconst                   shift and go to state 85
    constants                      shift and go to state 202

state 197

    (23) functionreturn -> RETURN . O_BRACKET expression C_BRACKET SEMICOLON
    (24) functionreturn -> RETURN . expression SEMICOLON
    (58) expression -> . expression2 expressionoptional
    (61) expression2 -> . exp expression2optional
    (74) exp -> . term exp_quadruple exploop
    (80) term -> . fact term_quadruple termloop
    (87) fact -> . varconst
    (88) fact -> . O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis
    (95) varconst -> . varconstfunction
    (96) varconst -> . constants
    (97) varconstfunction -> . ID functionorlist
    (102) constants -> . INTCONST add_int_constant_to_dict
    (103) constants -> . FLOATCONST add_float_constant_to_dict
    (104) constants -> . STRINGCONST add_string_constant_to_dict
    (105) constants -> . booleanconst
    (106) booleanconst -> . TRUE add_bool_constant_to_dict
    (107) booleanconst -> . FALSE add_bool_constant_to_dict

    O_BRACKET       shift and go to state 203
    O_PARENTHESIS   shift and go to state 72
    ID              shift and go to state 80
    INTCONST        shift and go to state 78
    FLOATCONST      shift and go to state 71
    STRINGCONST     shift and go to state 74
    TRUE            shift and go to state 73
    FALSE           shift and go to state 83

    varconstfunction               shift and go to state 75
    exp                            shift and go to state 76
    expression2                    shift and go to state 79
    constants                      shift and go to state 81
    term                           shift and go to state 82
    varconst                       shift and go to state 84
    booleanconst                   shift and go to state 85
    expression                     shift and go to state 204
    fact                           shift and go to state 87

state 198

    (22) functionblock -> O_BRACKET statutesloop functionreturn . C_BRACKET

    C_BRACKET       shift and go to state 205


state 199

    (114) whileloop -> WHILE start_while O_PARENTHESIS expression C_PARENTHESIS condition_while block end_while .

    IF              reduce using rule 114 (whileloop -> WHILE start_while O_PARENTHESIS expression C_PARENTHESIS condition_while block end_while .)
    PRINT           reduce using rule 114 (whileloop -> WHILE start_while O_PARENTHESIS expression C_PARENTHESIS condition_while block end_while .)
    ID              reduce using rule 114 (whileloop -> WHILE start_while O_PARENTHESIS expression C_PARENTHESIS condition_while block end_while .)
    LIST            reduce using rule 114 (whileloop -> WHILE start_while O_PARENTHESIS expression C_PARENTHESIS condition_while block end_while .)
    WHILE           reduce using rule 114 (whileloop -> WHILE start_while O_PARENTHESIS expression C_PARENTHESIS condition_while block end_while .)
    TIMES           reduce using rule 114 (whileloop -> WHILE start_while O_PARENTHESIS expression C_PARENTHESIS condition_while block end_while .)
    BOOL            reduce using rule 114 (whileloop -> WHILE start_while O_PARENTHESIS expression C_PARENTHESIS condition_while block end_while .)
    INT             reduce using rule 114 (whileloop -> WHILE start_while O_PARENTHESIS expression C_PARENTHESIS condition_while block end_while .)
    FLOAT           reduce using rule 114 (whileloop -> WHILE start_while O_PARENTHESIS expression C_PARENTHESIS condition_while block end_while .)
    STRING          reduce using rule 114 (whileloop -> WHILE start_while O_PARENTHESIS expression C_PARENTHESIS condition_while block end_while .)
    C_BRACKET       reduce using rule 114 (whileloop -> WHILE start_while O_PARENTHESIS expression C_PARENTHESIS condition_while block end_while .)
    RETURN          reduce using rule 114 (whileloop -> WHILE start_while O_PARENTHESIS expression C_PARENTHESIS condition_while block end_while .)


state 200

    (53) else -> ELSE else_condition . block
    (21) block -> . O_BRACKET statutesloop C_BRACKET

    O_BRACKET       shift and go to state 7

    block                          shift and go to state 206

state 201

    (52) condition -> IF O_PARENTHESIS expression C_PARENTHESIS start_condition block else end_condition .

    IF              reduce using rule 52 (condition -> IF O_PARENTHESIS expression C_PARENTHESIS start_condition block else end_condition .)
    PRINT           reduce using rule 52 (condition -> IF O_PARENTHESIS expression C_PARENTHESIS start_condition block else end_condition .)
    ID              reduce using rule 52 (condition -> IF O_PARENTHESIS expression C_PARENTHESIS start_condition block else end_condition .)
    LIST            reduce using rule 52 (condition -> IF O_PARENTHESIS expression C_PARENTHESIS start_condition block else end_condition .)
    WHILE           reduce using rule 52 (condition -> IF O_PARENTHESIS expression C_PARENTHESIS start_condition block else end_condition .)
    TIMES           reduce using rule 52 (condition -> IF O_PARENTHESIS expression C_PARENTHESIS start_condition block else end_condition .)
    BOOL            reduce using rule 52 (condition -> IF O_PARENTHESIS expression C_PARENTHESIS start_condition block else end_condition .)
    INT             reduce using rule 52 (condition -> IF O_PARENTHESIS expression C_PARENTHESIS start_condition block else end_condition .)
    FLOAT           reduce using rule 52 (condition -> IF O_PARENTHESIS expression C_PARENTHESIS start_condition block else end_condition .)
    STRING          reduce using rule 52 (condition -> IF O_PARENTHESIS expression C_PARENTHESIS start_condition block else end_condition .)
    RETURN          reduce using rule 52 (condition -> IF O_PARENTHESIS expression C_PARENTHESIS start_condition block else end_condition .)
    C_BRACKET       reduce using rule 52 (condition -> IF O_PARENTHESIS expression C_PARENTHESIS start_condition block else end_condition .)


state 202

    (50) optionalconstants -> COMMA constants . optionalconstants
    (50) optionalconstants -> . COMMA constants optionalconstants
    (51) optionalconstants -> .

    COMMA           shift and go to state 196
    C_S_BRACKET     reduce using rule 51 (optionalconstants -> .)

    optionalconstants              shift and go to state 207

state 203

    (23) functionreturn -> RETURN O_BRACKET . expression C_BRACKET SEMICOLON
    (58) expression -> . expression2 expressionoptional
    (61) expression2 -> . exp expression2optional
    (74) exp -> . term exp_quadruple exploop
    (80) term -> . fact term_quadruple termloop
    (87) fact -> . varconst
    (88) fact -> . O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis
    (95) varconst -> . varconstfunction
    (96) varconst -> . constants
    (97) varconstfunction -> . ID functionorlist
    (102) constants -> . INTCONST add_int_constant_to_dict
    (103) constants -> . FLOATCONST add_float_constant_to_dict
    (104) constants -> . STRINGCONST add_string_constant_to_dict
    (105) constants -> . booleanconst
    (106) booleanconst -> . TRUE add_bool_constant_to_dict
    (107) booleanconst -> . FALSE add_bool_constant_to_dict

    O_PARENTHESIS   shift and go to state 72
    ID              shift and go to state 80
    INTCONST        shift and go to state 78
    FLOATCONST      shift and go to state 71
    STRINGCONST     shift and go to state 74
    TRUE            shift and go to state 73
    FALSE           shift and go to state 83

    varconstfunction               shift and go to state 75
    exp                            shift and go to state 76
    expression2                    shift and go to state 79
    constants                      shift and go to state 81
    term                           shift and go to state 82
    varconst                       shift and go to state 84
    booleanconst                   shift and go to state 85
    expression                     shift and go to state 208
    fact                           shift and go to state 87

state 204

    (24) functionreturn -> RETURN expression . SEMICOLON

    SEMICOLON       shift and go to state 209


state 205

    (22) functionblock -> O_BRACKET statutesloop functionreturn C_BRACKET .

    FUNCTION        reduce using rule 22 (functionblock -> O_BRACKET statutesloop functionreturn C_BRACKET .)
    $end            reduce using rule 22 (functionblock -> O_BRACKET statutesloop functionreturn C_BRACKET .)


state 206

    (53) else -> ELSE else_condition block .

    IF              reduce using rule 53 (else -> ELSE else_condition block .)
    PRINT           reduce using rule 53 (else -> ELSE else_condition block .)
    ID              reduce using rule 53 (else -> ELSE else_condition block .)
    LIST            reduce using rule 53 (else -> ELSE else_condition block .)
    WHILE           reduce using rule 53 (else -> ELSE else_condition block .)
    TIMES           reduce using rule 53 (else -> ELSE else_condition block .)
    BOOL            reduce using rule 53 (else -> ELSE else_condition block .)
    INT             reduce using rule 53 (else -> ELSE else_condition block .)
    FLOAT           reduce using rule 53 (else -> ELSE else_condition block .)
    STRING          reduce using rule 53 (else -> ELSE else_condition block .)
    C_BRACKET       reduce using rule 53 (else -> ELSE else_condition block .)
    RETURN          reduce using rule 53 (else -> ELSE else_condition block .)


state 207

    (50) optionalconstants -> COMMA constants optionalconstants .

    C_S_BRACKET     reduce using rule 50 (optionalconstants -> COMMA constants optionalconstants .)


state 208

    (23) functionreturn -> RETURN O_BRACKET expression . C_BRACKET SEMICOLON

    C_BRACKET       shift and go to state 210


state 209

    (24) functionreturn -> RETURN expression SEMICOLON .

    C_BRACKET       reduce using rule 24 (functionreturn -> RETURN expression SEMICOLON .)


state 210

    (23) functionreturn -> RETURN O_BRACKET expression C_BRACKET . SEMICOLON

    SEMICOLON       shift and go to state 211


state 211

    (23) functionreturn -> RETURN O_BRACKET expression C_BRACKET SEMICOLON .

    C_BRACKET       reduce using rule 23 (functionreturn -> RETURN O_BRACKET expression C_BRACKET SEMICOLON .)

