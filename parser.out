Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> generate_main_goto functionloop fill_main_goto main generate_end_all global_memory_needed
Rule 2     global_memory_needed -> <empty>
Rule 3     generate_end_all -> <empty>
Rule 4     generate_main_goto -> <empty>
Rule 5     fill_main_goto -> <empty>
Rule 6     main -> MAIN start_main block
Rule 7     start_main -> <empty>
Rule 8     functionloop -> function functionloop
Rule 9     functionloop -> <empty>
Rule 10    function -> FUNCTION function_head function_end
Rule 11    add_function_init_to_dict -> <empty>
Rule 12    function_head -> VOID add_function_type_to_options function_def
Rule 13    function_head -> BOOL add_function_type_to_options function_with_return_def
Rule 14    function_head -> INT add_function_type_to_options function_with_return_def
Rule 15    function_head -> FLOAT add_function_type_to_options function_with_return_def
Rule 16    function_head -> STRING add_function_type_to_options function_with_return_def
Rule 17    add_function_type_to_options -> <empty>
Rule 18    function_with_return_def -> ID add_function_id_to_options add_function_to_global_variables check_current_quadruple O_PARENTHESIS parameters C_PARENTHESIS add_function_init_to_dict functionblock
Rule 19    add_function_to_global_variables -> <empty>
Rule 20    function_def -> ID add_function_id_to_options check_current_quadruple O_PARENTHESIS parameters C_PARENTHESIS add_function_init_to_dict block
Rule 21    check_current_quadruple -> <empty>
Rule 22    add_function_id_to_options -> <empty>
Rule 23    type -> BOOL
Rule 24    type -> INT
Rule 25    type -> FLOAT
Rule 26    type -> STRING
Rule 27    parametertype -> BOOL
Rule 28    parametertype -> INT
Rule 29    parametertype -> FLOAT
Rule 30    parametertype -> STRING
Rule 31    block -> O_BRACKET statutesloop C_BRACKET
Rule 32    functionblock -> O_BRACKET functionstatutesloop C_BRACKET
Rule 33    functionreturn -> RETURN add_function_var_to_stack O_BRACKET expression C_BRACKET SEMICOLON
Rule 34    functionreturn -> RETURN add_function_var_to_stack expression SEMICOLON
Rule 35    add_function_var_to_stack -> <empty>
Rule 36    function_end -> <empty>
Rule 37    statutesloop -> statute statutesloop
Rule 38    statutesloop -> <empty>
Rule 39    functionstatutesloop -> functionstatute functionstatutesloop
Rule 40    functionstatutesloop -> functionreturn
Rule 41    functionstatutesloop -> <empty>
Rule 42    statute -> init
Rule 43    statute -> condition
Rule 44    statute -> writting
Rule 45    statute -> loop
Rule 46    statute -> assignation
Rule 47    statute -> functioncall
Rule 48    functionstatute -> init
Rule 49    functionstatute -> functioncondition
Rule 50    functionstatute -> writting
Rule 51    functionstatute -> functionloops
Rule 52    functionstatute -> assignation
Rule 53    functionstatute -> functioncall
Rule 54    assignation -> var_assign EQUALS add_equals expression equals_quadruple SEMICOLON
Rule 55    writting -> PRINT O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON
Rule 56    start_printing -> <empty>
Rule 57    print_quadruple -> <empty>
Rule 58    writtingloop -> start_printing expression print_quadruple optionalwritting
Rule 59    optionalwritting -> COMMA writtingloop
Rule 60    optionalwritting -> <empty>
Rule 61    init -> listinit
Rule 62    init -> normalinit
Rule 63    normalinit -> type var EQUALS add_equals expression equals_quadruple SEMICOLON
Rule 64    equals_quadruple -> <empty>
Rule 65    add_equals -> <empty>
Rule 66    listinit -> LIST type ID EQUALS start_list list SEMICOLON
Rule 67    list -> O_S_BRACKET listelements C_S_BRACKET
Rule 68    start_list -> <empty>
Rule 69    listelements -> expression generate_list_assignation optionallist
Rule 70    listelements -> <empty>
Rule 71    optionallist -> COMMA expression generate_list_assignation optionallist
Rule 72    optionallist -> <empty>
Rule 73    generate_list_assignation -> <empty>
Rule 74    condition -> IF O_PARENTHESIS expression C_PARENTHESIS start_condition block else end_condition
Rule 75    functioncondition -> IF O_PARENTHESIS expression C_PARENTHESIS start_condition functionblock functionelse end_condition
Rule 76    else -> ELSE else_condition block
Rule 77    else -> <empty>
Rule 78    functionelse -> ELSE else_condition functionblock
Rule 79    functionelse -> <empty>
Rule 80    start_condition -> <empty>
Rule 81    else_condition -> <empty>
Rule 82    end_condition -> <empty>
Rule 83    expression -> expression2 expressionoptional
Rule 84    expressionoptional -> logicop expression2 logic_op_quadruple
Rule 85    expressionoptional -> <empty>
Rule 86    expression2 -> exp expression2optional
Rule 87    expression2optional -> relop exp relop_quadruple
Rule 88    expression2optional -> <empty>
Rule 89    logicop -> AND
Rule 90    logicop -> OR
Rule 91    logic_op_quadruple -> <empty>
Rule 92    relop -> EQUALITY
Rule 93    relop -> GREATER
Rule 94    relop -> GREATER_EQUAL
Rule 95    relop -> LESS
Rule 96    relop -> LESS_EQUAL
Rule 97    relop -> DIFFERENT
Rule 98    relop_quadruple -> <empty>
Rule 99    exp -> term exp_quadruple exploop
Rule 100   exp_quadruple -> <empty>
Rule 101   exploop -> addsub exp
Rule 102   exploop -> <empty>
Rule 103   addsub -> SUM
Rule 104   addsub -> MINUS
Rule 105   term -> fact term_quadruple termloop
Rule 106   term_quadruple -> <empty>
Rule 107   termloop -> divmult term
Rule 108   termloop -> <empty>
Rule 109   divmult -> MULTIPLY
Rule 110   divmult -> DIVIDE
Rule 111   divmult -> MOD
Rule 112   fact -> varconst
Rule 113   fact -> O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis
Rule 114   add_o_parenthesis -> <empty>
Rule 115   add_c_parenthesis -> <empty>
Rule 116   var_assign -> ID listaccess
Rule 117   var -> ID
Rule 118   listaccess -> add_list_variable add_o_parenthesis O_S_BRACKET expression C_S_BRACKET add_c_parenthesis add_list_index_to_stack
Rule 119   listaccess -> add_to_stack
Rule 120   add_list_index_to_stack -> <empty>
Rule 121   varconst -> varconstfunction
Rule 122   varconst -> constants
Rule 123   varconstfunction -> ID functionorlist
Rule 124   add_to_stack -> <empty>
Rule 125   functionorlist -> add_list_variable add_o_parenthesis O_S_BRACKET expression C_S_BRACKET add_c_parenthesis add_list_index_to_stack
Rule 126   functionorlist -> add_o_parenthesis check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS generate_gosub add_c_parenthesis
Rule 127   functionorlist -> add_to_stack
Rule 128   add_list_variable -> <empty>
Rule 129   constants -> INTCONST add_int_constant_to_dict
Rule 130   constants -> FLOATCONST add_float_constant_to_dict
Rule 131   constants -> STRINGCONST add_string_constant_to_dict
Rule 132   constants -> booleanconst
Rule 133   booleanconst -> TRUE add_bool_constant_to_dict
Rule 134   booleanconst -> FALSE add_bool_constant_to_dict
Rule 135   add_int_constant_to_dict -> <empty>
Rule 136   add_float_constant_to_dict -> <empty>
Rule 137   add_string_constant_to_dict -> <empty>
Rule 138   add_bool_constant_to_dict -> <empty>
Rule 139   loop -> whileloop
Rule 140   loop -> timesloop
Rule 141   functionloops -> functionwhileloop
Rule 142   functionloops -> functiontimesloop
Rule 143   whileloop -> WHILE start_while O_PARENTHESIS expression C_PARENTHESIS condition_while block end_while
Rule 144   functionwhileloop -> WHILE start_while O_PARENTHESIS expression C_PARENTHESIS condition_while functionblock end_while
Rule 145   start_while -> <empty>
Rule 146   condition_while -> <empty>
Rule 147   end_while -> <empty>
Rule 148   timesloop -> TIMES O_PARENTHESIS expression C_PARENTHESIS start_times block end_times
Rule 149   functiontimesloop -> TIMES O_PARENTHESIS expression C_PARENTHESIS start_times functionblock end_times
Rule 150   start_times -> <empty>
Rule 151   end_times -> <empty>
Rule 152   functioncall -> ID add_o_parenthesis check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON generate_gosub add_c_parenthesis
Rule 153   check_function_exists -> <empty>
Rule 154   generate_gosub -> <empty>
Rule 155   parametersinput -> expression push_type_to_function_options generate_parameter_quadruple parametersinputloop check_params_order
Rule 156   parametersinput -> <empty>
Rule 157   parametersinputloop -> COMMA expression push_type_to_function_options generate_parameter_quadruple parametersinputloop
Rule 158   parametersinputloop -> <empty>
Rule 159   push_type_to_function_options -> <empty>
Rule 160   check_params_order -> <empty>
Rule 161   generate_parameter_quadruple -> <empty>
Rule 162   parameters -> parameterinit parametersloop
Rule 163   parameters -> <empty>
Rule 164   parameterinit -> parametertype ID
Rule 165   parametersloop -> COMMA parameterinit parametersloop
Rule 166   parametersloop -> <empty>

Terminals, with rules where they appear

AND                  : 89
BOOL                 : 13 23 27
COMMA                : 59 71 157 165
C_BRACKET            : 31 32 33
C_PARENTHESIS        : 18 20 55 74 75 113 126 143 144 148 149 152
C_S_BRACKET          : 67 118 125
DIFFERENT            : 97
DIVIDE               : 110
ELSE                 : 76 78
EQUALITY             : 92
EQUALS               : 54 63 66
FALSE                : 134
FLOAT                : 15 25 29
FLOATCONST           : 130
FUNCTION             : 10
GREATER              : 93
GREATER_EQUAL        : 94
ID                   : 18 20 66 116 117 123 152 164
IF                   : 74 75
INT                  : 14 24 28
INTCONST             : 129
LESS                 : 95
LESS_EQUAL           : 96
LIST                 : 66
MAIN                 : 6
MINUS                : 104
MOD                  : 111
MULTIPLY             : 109
OR                   : 90
O_BRACKET            : 31 32 33
O_PARENTHESIS        : 18 20 55 74 75 113 126 143 144 148 149 152
O_S_BRACKET          : 67 118 125
PRINT                : 55
RETURN               : 33 34
SEMICOLON            : 33 34 54 55 63 66 152
STRING               : 16 26 30
STRINGCONST          : 131
SUM                  : 103
TIMES                : 148 149
TRUE                 : 133
VOID                 : 12
WHILE                : 143 144
error                : 

Nonterminals, with rules where they appear

add_bool_constant_to_dict : 133 134
add_c_parenthesis    : 113 118 125 126 152
add_equals           : 54 63
add_float_constant_to_dict : 130
add_function_id_to_options : 18 20
add_function_init_to_dict : 18 20
add_function_to_global_variables : 18
add_function_type_to_options : 12 13 14 15 16
add_function_var_to_stack : 33 34
add_int_constant_to_dict : 129
add_list_index_to_stack : 118 125
add_list_variable    : 118 125
add_o_parenthesis    : 113 118 125 126 152
add_string_constant_to_dict : 131
add_to_stack         : 119 127
addsub               : 101
assignation          : 46 52
block                : 6 20 74 76 143 148
booleanconst         : 132
check_current_quadruple : 18 20
check_function_exists : 126 152
check_params_order   : 155
condition            : 43
condition_while      : 143 144
constants            : 122
divmult              : 107
else                 : 74
else_condition       : 76 78
end_condition        : 74 75
end_times            : 148 149
end_while            : 143 144
equals_quadruple     : 54 63
exp                  : 86 87 101
exp_quadruple        : 99
exploop              : 99
expression           : 33 34 54 58 63 69 71 74 75 113 118 125 143 144 148 149 155 157
expression2          : 83 84
expression2optional  : 86
expressionoptional   : 83
fact                 : 105
fill_main_goto       : 1
function             : 8
function_def         : 12
function_end         : 10
function_head        : 10
function_with_return_def : 13 14 15 16
functionblock        : 18 75 78 144 149
functioncall         : 47 53
functioncondition    : 49
functionelse         : 75
functionloop         : 1 8
functionloops        : 51
functionorlist       : 123
functionreturn       : 40
functionstatute      : 39
functionstatutesloop : 32 39
functiontimesloop    : 142
functionwhileloop    : 141
generate_end_all     : 1
generate_gosub       : 126 152
generate_list_assignation : 69 71
generate_main_goto   : 1
generate_parameter_quadruple : 155 157
global_memory_needed : 1
init                 : 42 48
list                 : 66
listaccess           : 116
listelements         : 67
listinit             : 61
logic_op_quadruple   : 84
logicop              : 84
loop                 : 45
main                 : 1
normalinit           : 62
optionallist         : 69 71
optionalwritting     : 58
parameterinit        : 162 165
parameters           : 18 20
parametersinput      : 126 152
parametersinputloop  : 155 157
parametersloop       : 162 165
parametertype        : 164
print_quadruple      : 58
program              : 0
push_type_to_function_options : 155 157
relop                : 87
relop_quadruple      : 87
start_condition      : 74 75
start_list           : 66
start_main           : 6
start_printing       : 58
start_times          : 148 149
start_while          : 143 144
statute              : 37
statutesloop         : 31 37
term                 : 99 107
term_quadruple       : 105
termloop             : 105
timesloop            : 140
type                 : 63 66
var                  : 63
var_assign           : 54
varconst             : 112
varconstfunction     : 121
whileloop            : 139
writting             : 44 50
writtingloop         : 55 59

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . generate_main_goto functionloop fill_main_goto main generate_end_all global_memory_needed
    (4) generate_main_goto -> .

    FUNCTION        reduce using rule 4 (generate_main_goto -> .)
    MAIN            reduce using rule 4 (generate_main_goto -> .)

    generate_main_goto             shift and go to state 1
    program                        shift and go to state 2

state 1

    (1) program -> generate_main_goto . functionloop fill_main_goto main generate_end_all global_memory_needed
    (8) functionloop -> . function functionloop
    (9) functionloop -> .
    (10) function -> . FUNCTION function_head function_end

    MAIN            reduce using rule 9 (functionloop -> .)
    FUNCTION        shift and go to state 4

    function                       shift and go to state 3
    functionloop                   shift and go to state 5

state 2

    (0) S' -> program .



state 3

    (8) functionloop -> function . functionloop
    (8) functionloop -> . function functionloop
    (9) functionloop -> .
    (10) function -> . FUNCTION function_head function_end

    MAIN            reduce using rule 9 (functionloop -> .)
    FUNCTION        shift and go to state 4

    function                       shift and go to state 3
    functionloop                   shift and go to state 6

state 4

    (10) function -> FUNCTION . function_head function_end
    (12) function_head -> . VOID add_function_type_to_options function_def
    (13) function_head -> . BOOL add_function_type_to_options function_with_return_def
    (14) function_head -> . INT add_function_type_to_options function_with_return_def
    (15) function_head -> . FLOAT add_function_type_to_options function_with_return_def
    (16) function_head -> . STRING add_function_type_to_options function_with_return_def

    VOID            shift and go to state 8
    BOOL            shift and go to state 11
    INT             shift and go to state 12
    FLOAT           shift and go to state 9
    STRING          shift and go to state 7

    function_head                  shift and go to state 10

state 5

    (1) program -> generate_main_goto functionloop . fill_main_goto main generate_end_all global_memory_needed
    (5) fill_main_goto -> .

    MAIN            reduce using rule 5 (fill_main_goto -> .)

    fill_main_goto                 shift and go to state 13

state 6

    (8) functionloop -> function functionloop .

    MAIN            reduce using rule 8 (functionloop -> function functionloop .)


state 7

    (16) function_head -> STRING . add_function_type_to_options function_with_return_def
    (17) add_function_type_to_options -> .

    ID              reduce using rule 17 (add_function_type_to_options -> .)

    add_function_type_to_options   shift and go to state 14

state 8

    (12) function_head -> VOID . add_function_type_to_options function_def
    (17) add_function_type_to_options -> .

    ID              reduce using rule 17 (add_function_type_to_options -> .)

    add_function_type_to_options   shift and go to state 15

state 9

    (15) function_head -> FLOAT . add_function_type_to_options function_with_return_def
    (17) add_function_type_to_options -> .

    ID              reduce using rule 17 (add_function_type_to_options -> .)

    add_function_type_to_options   shift and go to state 16

state 10

    (10) function -> FUNCTION function_head . function_end
    (36) function_end -> .

    FUNCTION        reduce using rule 36 (function_end -> .)
    MAIN            reduce using rule 36 (function_end -> .)

    function_end                   shift and go to state 17

state 11

    (13) function_head -> BOOL . add_function_type_to_options function_with_return_def
    (17) add_function_type_to_options -> .

    ID              reduce using rule 17 (add_function_type_to_options -> .)

    add_function_type_to_options   shift and go to state 18

state 12

    (14) function_head -> INT . add_function_type_to_options function_with_return_def
    (17) add_function_type_to_options -> .

    ID              reduce using rule 17 (add_function_type_to_options -> .)

    add_function_type_to_options   shift and go to state 19

state 13

    (1) program -> generate_main_goto functionloop fill_main_goto . main generate_end_all global_memory_needed
    (6) main -> . MAIN start_main block

    MAIN            shift and go to state 20

    main                           shift and go to state 21

state 14

    (16) function_head -> STRING add_function_type_to_options . function_with_return_def
    (18) function_with_return_def -> . ID add_function_id_to_options add_function_to_global_variables check_current_quadruple O_PARENTHESIS parameters C_PARENTHESIS add_function_init_to_dict functionblock

    ID              shift and go to state 23

    function_with_return_def       shift and go to state 22

state 15

    (12) function_head -> VOID add_function_type_to_options . function_def
    (20) function_def -> . ID add_function_id_to_options check_current_quadruple O_PARENTHESIS parameters C_PARENTHESIS add_function_init_to_dict block

    ID              shift and go to state 25

    function_def                   shift and go to state 24

state 16

    (15) function_head -> FLOAT add_function_type_to_options . function_with_return_def
    (18) function_with_return_def -> . ID add_function_id_to_options add_function_to_global_variables check_current_quadruple O_PARENTHESIS parameters C_PARENTHESIS add_function_init_to_dict functionblock

    ID              shift and go to state 23

    function_with_return_def       shift and go to state 26

state 17

    (10) function -> FUNCTION function_head function_end .

    FUNCTION        reduce using rule 10 (function -> FUNCTION function_head function_end .)
    MAIN            reduce using rule 10 (function -> FUNCTION function_head function_end .)


state 18

    (13) function_head -> BOOL add_function_type_to_options . function_with_return_def
    (18) function_with_return_def -> . ID add_function_id_to_options add_function_to_global_variables check_current_quadruple O_PARENTHESIS parameters C_PARENTHESIS add_function_init_to_dict functionblock

    ID              shift and go to state 23

    function_with_return_def       shift and go to state 27

state 19

    (14) function_head -> INT add_function_type_to_options . function_with_return_def
    (18) function_with_return_def -> . ID add_function_id_to_options add_function_to_global_variables check_current_quadruple O_PARENTHESIS parameters C_PARENTHESIS add_function_init_to_dict functionblock

    ID              shift and go to state 23

    function_with_return_def       shift and go to state 28

state 20

    (6) main -> MAIN . start_main block
    (7) start_main -> .

    O_BRACKET       reduce using rule 7 (start_main -> .)

    start_main                     shift and go to state 29

state 21

    (1) program -> generate_main_goto functionloop fill_main_goto main . generate_end_all global_memory_needed
    (3) generate_end_all -> .

    $end            reduce using rule 3 (generate_end_all -> .)

    generate_end_all               shift and go to state 30

state 22

    (16) function_head -> STRING add_function_type_to_options function_with_return_def .

    FUNCTION        reduce using rule 16 (function_head -> STRING add_function_type_to_options function_with_return_def .)
    MAIN            reduce using rule 16 (function_head -> STRING add_function_type_to_options function_with_return_def .)


state 23

    (18) function_with_return_def -> ID . add_function_id_to_options add_function_to_global_variables check_current_quadruple O_PARENTHESIS parameters C_PARENTHESIS add_function_init_to_dict functionblock
    (22) add_function_id_to_options -> .

    O_PARENTHESIS   reduce using rule 22 (add_function_id_to_options -> .)

    add_function_id_to_options     shift and go to state 31

state 24

    (12) function_head -> VOID add_function_type_to_options function_def .

    FUNCTION        reduce using rule 12 (function_head -> VOID add_function_type_to_options function_def .)
    MAIN            reduce using rule 12 (function_head -> VOID add_function_type_to_options function_def .)


state 25

    (20) function_def -> ID . add_function_id_to_options check_current_quadruple O_PARENTHESIS parameters C_PARENTHESIS add_function_init_to_dict block
    (22) add_function_id_to_options -> .

    O_PARENTHESIS   reduce using rule 22 (add_function_id_to_options -> .)

    add_function_id_to_options     shift and go to state 32

state 26

    (15) function_head -> FLOAT add_function_type_to_options function_with_return_def .

    FUNCTION        reduce using rule 15 (function_head -> FLOAT add_function_type_to_options function_with_return_def .)
    MAIN            reduce using rule 15 (function_head -> FLOAT add_function_type_to_options function_with_return_def .)


state 27

    (13) function_head -> BOOL add_function_type_to_options function_with_return_def .

    FUNCTION        reduce using rule 13 (function_head -> BOOL add_function_type_to_options function_with_return_def .)
    MAIN            reduce using rule 13 (function_head -> BOOL add_function_type_to_options function_with_return_def .)


state 28

    (14) function_head -> INT add_function_type_to_options function_with_return_def .

    FUNCTION        reduce using rule 14 (function_head -> INT add_function_type_to_options function_with_return_def .)
    MAIN            reduce using rule 14 (function_head -> INT add_function_type_to_options function_with_return_def .)


state 29

    (6) main -> MAIN start_main . block
    (31) block -> . O_BRACKET statutesloop C_BRACKET

    O_BRACKET       shift and go to state 33

    block                          shift and go to state 34

state 30

    (1) program -> generate_main_goto functionloop fill_main_goto main generate_end_all . global_memory_needed
    (2) global_memory_needed -> .

    $end            reduce using rule 2 (global_memory_needed -> .)

    global_memory_needed           shift and go to state 35

state 31

    (18) function_with_return_def -> ID add_function_id_to_options . add_function_to_global_variables check_current_quadruple O_PARENTHESIS parameters C_PARENTHESIS add_function_init_to_dict functionblock
    (19) add_function_to_global_variables -> .

    O_PARENTHESIS   reduce using rule 19 (add_function_to_global_variables -> .)

    add_function_to_global_variables shift and go to state 36

state 32

    (20) function_def -> ID add_function_id_to_options . check_current_quadruple O_PARENTHESIS parameters C_PARENTHESIS add_function_init_to_dict block
    (21) check_current_quadruple -> .

    O_PARENTHESIS   reduce using rule 21 (check_current_quadruple -> .)

    check_current_quadruple        shift and go to state 37

state 33

    (31) block -> O_BRACKET . statutesloop C_BRACKET
    (37) statutesloop -> . statute statutesloop
    (38) statutesloop -> .
    (42) statute -> . init
    (43) statute -> . condition
    (44) statute -> . writting
    (45) statute -> . loop
    (46) statute -> . assignation
    (47) statute -> . functioncall
    (61) init -> . listinit
    (62) init -> . normalinit
    (74) condition -> . IF O_PARENTHESIS expression C_PARENTHESIS start_condition block else end_condition
    (55) writting -> . PRINT O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON
    (139) loop -> . whileloop
    (140) loop -> . timesloop
    (54) assignation -> . var_assign EQUALS add_equals expression equals_quadruple SEMICOLON
    (152) functioncall -> . ID add_o_parenthesis check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON generate_gosub add_c_parenthesis
    (66) listinit -> . LIST type ID EQUALS start_list list SEMICOLON
    (63) normalinit -> . type var EQUALS add_equals expression equals_quadruple SEMICOLON
    (143) whileloop -> . WHILE start_while O_PARENTHESIS expression C_PARENTHESIS condition_while block end_while
    (148) timesloop -> . TIMES O_PARENTHESIS expression C_PARENTHESIS start_times block end_times
    (116) var_assign -> . ID listaccess
    (23) type -> . BOOL
    (24) type -> . INT
    (25) type -> . FLOAT
    (26) type -> . STRING

    C_BRACKET       reduce using rule 38 (statutesloop -> .)
    IF              shift and go to state 53
    PRINT           shift and go to state 40
    ID              shift and go to state 51
    LIST            shift and go to state 59
    WHILE           shift and go to state 39
    TIMES           shift and go to state 38
    BOOL            shift and go to state 43
    INT             shift and go to state 57
    FLOAT           shift and go to state 58
    STRING          shift and go to state 47

    whileloop                      shift and go to state 41
    init                           shift and go to state 42
    var_assign                     shift and go to state 44
    type                           shift and go to state 45
    normalinit                     shift and go to state 46
    listinit                       shift and go to state 48
    writting                       shift and go to state 49
    timesloop                      shift and go to state 50
    condition                      shift and go to state 52
    statute                        shift and go to state 54
    assignation                    shift and go to state 55
    statutesloop                   shift and go to state 56
    functioncall                   shift and go to state 60
    loop                           shift and go to state 61

state 34

    (6) main -> MAIN start_main block .

    $end            reduce using rule 6 (main -> MAIN start_main block .)


state 35

    (1) program -> generate_main_goto functionloop fill_main_goto main generate_end_all global_memory_needed .

    $end            reduce using rule 1 (program -> generate_main_goto functionloop fill_main_goto main generate_end_all global_memory_needed .)


state 36

    (18) function_with_return_def -> ID add_function_id_to_options add_function_to_global_variables . check_current_quadruple O_PARENTHESIS parameters C_PARENTHESIS add_function_init_to_dict functionblock
    (21) check_current_quadruple -> .

    O_PARENTHESIS   reduce using rule 21 (check_current_quadruple -> .)

    check_current_quadruple        shift and go to state 62

state 37

    (20) function_def -> ID add_function_id_to_options check_current_quadruple . O_PARENTHESIS parameters C_PARENTHESIS add_function_init_to_dict block

    O_PARENTHESIS   shift and go to state 63


state 38

    (148) timesloop -> TIMES . O_PARENTHESIS expression C_PARENTHESIS start_times block end_times

    O_PARENTHESIS   shift and go to state 64


state 39

    (143) whileloop -> WHILE . start_while O_PARENTHESIS expression C_PARENTHESIS condition_while block end_while
    (145) start_while -> .

    O_PARENTHESIS   reduce using rule 145 (start_while -> .)

    start_while                    shift and go to state 65

state 40

    (55) writting -> PRINT . O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON

    O_PARENTHESIS   shift and go to state 66


state 41

    (139) loop -> whileloop .

    IF              reduce using rule 139 (loop -> whileloop .)
    PRINT           reduce using rule 139 (loop -> whileloop .)
    ID              reduce using rule 139 (loop -> whileloop .)
    LIST            reduce using rule 139 (loop -> whileloop .)
    WHILE           reduce using rule 139 (loop -> whileloop .)
    TIMES           reduce using rule 139 (loop -> whileloop .)
    BOOL            reduce using rule 139 (loop -> whileloop .)
    INT             reduce using rule 139 (loop -> whileloop .)
    FLOAT           reduce using rule 139 (loop -> whileloop .)
    STRING          reduce using rule 139 (loop -> whileloop .)
    C_BRACKET       reduce using rule 139 (loop -> whileloop .)


state 42

    (42) statute -> init .

    IF              reduce using rule 42 (statute -> init .)
    PRINT           reduce using rule 42 (statute -> init .)
    ID              reduce using rule 42 (statute -> init .)
    LIST            reduce using rule 42 (statute -> init .)
    WHILE           reduce using rule 42 (statute -> init .)
    TIMES           reduce using rule 42 (statute -> init .)
    BOOL            reduce using rule 42 (statute -> init .)
    INT             reduce using rule 42 (statute -> init .)
    FLOAT           reduce using rule 42 (statute -> init .)
    STRING          reduce using rule 42 (statute -> init .)
    C_BRACKET       reduce using rule 42 (statute -> init .)


state 43

    (23) type -> BOOL .

    ID              reduce using rule 23 (type -> BOOL .)


state 44

    (54) assignation -> var_assign . EQUALS add_equals expression equals_quadruple SEMICOLON

    EQUALS          shift and go to state 67


state 45

    (63) normalinit -> type . var EQUALS add_equals expression equals_quadruple SEMICOLON
    (117) var -> . ID

    ID              shift and go to state 69

    var                            shift and go to state 68

state 46

    (62) init -> normalinit .

    RETURN          reduce using rule 62 (init -> normalinit .)
    IF              reduce using rule 62 (init -> normalinit .)
    PRINT           reduce using rule 62 (init -> normalinit .)
    ID              reduce using rule 62 (init -> normalinit .)
    LIST            reduce using rule 62 (init -> normalinit .)
    WHILE           reduce using rule 62 (init -> normalinit .)
    TIMES           reduce using rule 62 (init -> normalinit .)
    BOOL            reduce using rule 62 (init -> normalinit .)
    INT             reduce using rule 62 (init -> normalinit .)
    FLOAT           reduce using rule 62 (init -> normalinit .)
    STRING          reduce using rule 62 (init -> normalinit .)
    C_BRACKET       reduce using rule 62 (init -> normalinit .)


state 47

    (26) type -> STRING .

    ID              reduce using rule 26 (type -> STRING .)


state 48

    (61) init -> listinit .

    RETURN          reduce using rule 61 (init -> listinit .)
    IF              reduce using rule 61 (init -> listinit .)
    PRINT           reduce using rule 61 (init -> listinit .)
    ID              reduce using rule 61 (init -> listinit .)
    LIST            reduce using rule 61 (init -> listinit .)
    WHILE           reduce using rule 61 (init -> listinit .)
    TIMES           reduce using rule 61 (init -> listinit .)
    BOOL            reduce using rule 61 (init -> listinit .)
    INT             reduce using rule 61 (init -> listinit .)
    FLOAT           reduce using rule 61 (init -> listinit .)
    STRING          reduce using rule 61 (init -> listinit .)
    C_BRACKET       reduce using rule 61 (init -> listinit .)


state 49

    (44) statute -> writting .

    IF              reduce using rule 44 (statute -> writting .)
    PRINT           reduce using rule 44 (statute -> writting .)
    ID              reduce using rule 44 (statute -> writting .)
    LIST            reduce using rule 44 (statute -> writting .)
    WHILE           reduce using rule 44 (statute -> writting .)
    TIMES           reduce using rule 44 (statute -> writting .)
    BOOL            reduce using rule 44 (statute -> writting .)
    INT             reduce using rule 44 (statute -> writting .)
    FLOAT           reduce using rule 44 (statute -> writting .)
    STRING          reduce using rule 44 (statute -> writting .)
    C_BRACKET       reduce using rule 44 (statute -> writting .)


state 50

    (140) loop -> timesloop .

    IF              reduce using rule 140 (loop -> timesloop .)
    PRINT           reduce using rule 140 (loop -> timesloop .)
    ID              reduce using rule 140 (loop -> timesloop .)
    LIST            reduce using rule 140 (loop -> timesloop .)
    WHILE           reduce using rule 140 (loop -> timesloop .)
    TIMES           reduce using rule 140 (loop -> timesloop .)
    BOOL            reduce using rule 140 (loop -> timesloop .)
    INT             reduce using rule 140 (loop -> timesloop .)
    FLOAT           reduce using rule 140 (loop -> timesloop .)
    STRING          reduce using rule 140 (loop -> timesloop .)
    C_BRACKET       reduce using rule 140 (loop -> timesloop .)


state 51

    (152) functioncall -> ID . add_o_parenthesis check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON generate_gosub add_c_parenthesis
    (116) var_assign -> ID . listaccess
    (114) add_o_parenthesis -> .
    (118) listaccess -> . add_list_variable add_o_parenthesis O_S_BRACKET expression C_S_BRACKET add_c_parenthesis add_list_index_to_stack
    (119) listaccess -> . add_to_stack
    (128) add_list_variable -> .
    (124) add_to_stack -> .

    O_PARENTHESIS   reduce using rule 114 (add_o_parenthesis -> .)
    O_S_BRACKET     reduce using rule 128 (add_list_variable -> .)
    EQUALS          reduce using rule 124 (add_to_stack -> .)

    add_to_stack                   shift and go to state 70
    add_o_parenthesis              shift and go to state 71
    listaccess                     shift and go to state 72
    add_list_variable              shift and go to state 73

state 52

    (43) statute -> condition .

    IF              reduce using rule 43 (statute -> condition .)
    PRINT           reduce using rule 43 (statute -> condition .)
    ID              reduce using rule 43 (statute -> condition .)
    LIST            reduce using rule 43 (statute -> condition .)
    WHILE           reduce using rule 43 (statute -> condition .)
    TIMES           reduce using rule 43 (statute -> condition .)
    BOOL            reduce using rule 43 (statute -> condition .)
    INT             reduce using rule 43 (statute -> condition .)
    FLOAT           reduce using rule 43 (statute -> condition .)
    STRING          reduce using rule 43 (statute -> condition .)
    C_BRACKET       reduce using rule 43 (statute -> condition .)


state 53

    (74) condition -> IF . O_PARENTHESIS expression C_PARENTHESIS start_condition block else end_condition

    O_PARENTHESIS   shift and go to state 74


state 54

    (37) statutesloop -> statute . statutesloop
    (37) statutesloop -> . statute statutesloop
    (38) statutesloop -> .
    (42) statute -> . init
    (43) statute -> . condition
    (44) statute -> . writting
    (45) statute -> . loop
    (46) statute -> . assignation
    (47) statute -> . functioncall
    (61) init -> . listinit
    (62) init -> . normalinit
    (74) condition -> . IF O_PARENTHESIS expression C_PARENTHESIS start_condition block else end_condition
    (55) writting -> . PRINT O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON
    (139) loop -> . whileloop
    (140) loop -> . timesloop
    (54) assignation -> . var_assign EQUALS add_equals expression equals_quadruple SEMICOLON
    (152) functioncall -> . ID add_o_parenthesis check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON generate_gosub add_c_parenthesis
    (66) listinit -> . LIST type ID EQUALS start_list list SEMICOLON
    (63) normalinit -> . type var EQUALS add_equals expression equals_quadruple SEMICOLON
    (143) whileloop -> . WHILE start_while O_PARENTHESIS expression C_PARENTHESIS condition_while block end_while
    (148) timesloop -> . TIMES O_PARENTHESIS expression C_PARENTHESIS start_times block end_times
    (116) var_assign -> . ID listaccess
    (23) type -> . BOOL
    (24) type -> . INT
    (25) type -> . FLOAT
    (26) type -> . STRING

    C_BRACKET       reduce using rule 38 (statutesloop -> .)
    IF              shift and go to state 53
    PRINT           shift and go to state 40
    ID              shift and go to state 51
    LIST            shift and go to state 59
    WHILE           shift and go to state 39
    TIMES           shift and go to state 38
    BOOL            shift and go to state 43
    INT             shift and go to state 57
    FLOAT           shift and go to state 58
    STRING          shift and go to state 47

    whileloop                      shift and go to state 41
    init                           shift and go to state 42
    var_assign                     shift and go to state 44
    type                           shift and go to state 45
    normalinit                     shift and go to state 46
    listinit                       shift and go to state 48
    writting                       shift and go to state 49
    timesloop                      shift and go to state 50
    condition                      shift and go to state 52
    statute                        shift and go to state 54
    assignation                    shift and go to state 55
    statutesloop                   shift and go to state 75
    functioncall                   shift and go to state 60
    loop                           shift and go to state 61

state 55

    (46) statute -> assignation .

    IF              reduce using rule 46 (statute -> assignation .)
    PRINT           reduce using rule 46 (statute -> assignation .)
    ID              reduce using rule 46 (statute -> assignation .)
    LIST            reduce using rule 46 (statute -> assignation .)
    WHILE           reduce using rule 46 (statute -> assignation .)
    TIMES           reduce using rule 46 (statute -> assignation .)
    BOOL            reduce using rule 46 (statute -> assignation .)
    INT             reduce using rule 46 (statute -> assignation .)
    FLOAT           reduce using rule 46 (statute -> assignation .)
    STRING          reduce using rule 46 (statute -> assignation .)
    C_BRACKET       reduce using rule 46 (statute -> assignation .)


state 56

    (31) block -> O_BRACKET statutesloop . C_BRACKET

    C_BRACKET       shift and go to state 76


state 57

    (24) type -> INT .

    ID              reduce using rule 24 (type -> INT .)


state 58

    (25) type -> FLOAT .

    ID              reduce using rule 25 (type -> FLOAT .)


state 59

    (66) listinit -> LIST . type ID EQUALS start_list list SEMICOLON
    (23) type -> . BOOL
    (24) type -> . INT
    (25) type -> . FLOAT
    (26) type -> . STRING

    BOOL            shift and go to state 43
    INT             shift and go to state 57
    FLOAT           shift and go to state 58
    STRING          shift and go to state 47

    type                           shift and go to state 77

state 60

    (47) statute -> functioncall .

    IF              reduce using rule 47 (statute -> functioncall .)
    PRINT           reduce using rule 47 (statute -> functioncall .)
    ID              reduce using rule 47 (statute -> functioncall .)
    LIST            reduce using rule 47 (statute -> functioncall .)
    WHILE           reduce using rule 47 (statute -> functioncall .)
    TIMES           reduce using rule 47 (statute -> functioncall .)
    BOOL            reduce using rule 47 (statute -> functioncall .)
    INT             reduce using rule 47 (statute -> functioncall .)
    FLOAT           reduce using rule 47 (statute -> functioncall .)
    STRING          reduce using rule 47 (statute -> functioncall .)
    C_BRACKET       reduce using rule 47 (statute -> functioncall .)


state 61

    (45) statute -> loop .

    IF              reduce using rule 45 (statute -> loop .)
    PRINT           reduce using rule 45 (statute -> loop .)
    ID              reduce using rule 45 (statute -> loop .)
    LIST            reduce using rule 45 (statute -> loop .)
    WHILE           reduce using rule 45 (statute -> loop .)
    TIMES           reduce using rule 45 (statute -> loop .)
    BOOL            reduce using rule 45 (statute -> loop .)
    INT             reduce using rule 45 (statute -> loop .)
    FLOAT           reduce using rule 45 (statute -> loop .)
    STRING          reduce using rule 45 (statute -> loop .)
    C_BRACKET       reduce using rule 45 (statute -> loop .)


state 62

    (18) function_with_return_def -> ID add_function_id_to_options add_function_to_global_variables check_current_quadruple . O_PARENTHESIS parameters C_PARENTHESIS add_function_init_to_dict functionblock

    O_PARENTHESIS   shift and go to state 78


state 63

    (20) function_def -> ID add_function_id_to_options check_current_quadruple O_PARENTHESIS . parameters C_PARENTHESIS add_function_init_to_dict block
    (162) parameters -> . parameterinit parametersloop
    (163) parameters -> .
    (164) parameterinit -> . parametertype ID
    (27) parametertype -> . BOOL
    (28) parametertype -> . INT
    (29) parametertype -> . FLOAT
    (30) parametertype -> . STRING

    C_PARENTHESIS   reduce using rule 163 (parameters -> .)
    BOOL            shift and go to state 84
    INT             shift and go to state 83
    FLOAT           shift and go to state 80
    STRING          shift and go to state 81

    parametertype                  shift and go to state 79
    parameters                     shift and go to state 82
    parameterinit                  shift and go to state 85

state 64

    (148) timesloop -> TIMES O_PARENTHESIS . expression C_PARENTHESIS start_times block end_times
    (83) expression -> . expression2 expressionoptional
    (86) expression2 -> . exp expression2optional
    (99) exp -> . term exp_quadruple exploop
    (105) term -> . fact term_quadruple termloop
    (112) fact -> . varconst
    (113) fact -> . O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis
    (121) varconst -> . varconstfunction
    (122) varconst -> . constants
    (123) varconstfunction -> . ID functionorlist
    (129) constants -> . INTCONST add_int_constant_to_dict
    (130) constants -> . FLOATCONST add_float_constant_to_dict
    (131) constants -> . STRINGCONST add_string_constant_to_dict
    (132) constants -> . booleanconst
    (133) booleanconst -> . TRUE add_bool_constant_to_dict
    (134) booleanconst -> . FALSE add_bool_constant_to_dict

    O_PARENTHESIS   shift and go to state 87
    ID              shift and go to state 94
    INTCONST        shift and go to state 92
    FLOATCONST      shift and go to state 86
    STRINGCONST     shift and go to state 89
    TRUE            shift and go to state 88
    FALSE           shift and go to state 97

    varconstfunction               shift and go to state 90
    exp                            shift and go to state 91
    expression2                    shift and go to state 93
    constants                      shift and go to state 95
    term                           shift and go to state 96
    varconst                       shift and go to state 98
    booleanconst                   shift and go to state 99
    expression                     shift and go to state 100
    fact                           shift and go to state 101

state 65

    (143) whileloop -> WHILE start_while . O_PARENTHESIS expression C_PARENTHESIS condition_while block end_while

    O_PARENTHESIS   shift and go to state 102


state 66

    (55) writting -> PRINT O_PARENTHESIS . writtingloop C_PARENTHESIS SEMICOLON
    (58) writtingloop -> . start_printing expression print_quadruple optionalwritting
    (56) start_printing -> .

    O_PARENTHESIS   reduce using rule 56 (start_printing -> .)
    ID              reduce using rule 56 (start_printing -> .)
    INTCONST        reduce using rule 56 (start_printing -> .)
    FLOATCONST      reduce using rule 56 (start_printing -> .)
    STRINGCONST     reduce using rule 56 (start_printing -> .)
    TRUE            reduce using rule 56 (start_printing -> .)
    FALSE           reduce using rule 56 (start_printing -> .)

    writtingloop                   shift and go to state 104
    start_printing                 shift and go to state 103

state 67

    (54) assignation -> var_assign EQUALS . add_equals expression equals_quadruple SEMICOLON
    (65) add_equals -> .

    O_PARENTHESIS   reduce using rule 65 (add_equals -> .)
    ID              reduce using rule 65 (add_equals -> .)
    INTCONST        reduce using rule 65 (add_equals -> .)
    FLOATCONST      reduce using rule 65 (add_equals -> .)
    STRINGCONST     reduce using rule 65 (add_equals -> .)
    TRUE            reduce using rule 65 (add_equals -> .)
    FALSE           reduce using rule 65 (add_equals -> .)

    add_equals                     shift and go to state 105

state 68

    (63) normalinit -> type var . EQUALS add_equals expression equals_quadruple SEMICOLON

    EQUALS          shift and go to state 106


state 69

    (117) var -> ID .

    EQUALS          reduce using rule 117 (var -> ID .)


state 70

    (119) listaccess -> add_to_stack .

    EQUALS          reduce using rule 119 (listaccess -> add_to_stack .)


state 71

    (152) functioncall -> ID add_o_parenthesis . check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON generate_gosub add_c_parenthesis
    (153) check_function_exists -> .

    O_PARENTHESIS   reduce using rule 153 (check_function_exists -> .)

    check_function_exists          shift and go to state 107

state 72

    (116) var_assign -> ID listaccess .

    EQUALS          reduce using rule 116 (var_assign -> ID listaccess .)


state 73

    (118) listaccess -> add_list_variable . add_o_parenthesis O_S_BRACKET expression C_S_BRACKET add_c_parenthesis add_list_index_to_stack
    (114) add_o_parenthesis -> .

    O_S_BRACKET     reduce using rule 114 (add_o_parenthesis -> .)

    add_o_parenthesis              shift and go to state 108

state 74

    (74) condition -> IF O_PARENTHESIS . expression C_PARENTHESIS start_condition block else end_condition
    (83) expression -> . expression2 expressionoptional
    (86) expression2 -> . exp expression2optional
    (99) exp -> . term exp_quadruple exploop
    (105) term -> . fact term_quadruple termloop
    (112) fact -> . varconst
    (113) fact -> . O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis
    (121) varconst -> . varconstfunction
    (122) varconst -> . constants
    (123) varconstfunction -> . ID functionorlist
    (129) constants -> . INTCONST add_int_constant_to_dict
    (130) constants -> . FLOATCONST add_float_constant_to_dict
    (131) constants -> . STRINGCONST add_string_constant_to_dict
    (132) constants -> . booleanconst
    (133) booleanconst -> . TRUE add_bool_constant_to_dict
    (134) booleanconst -> . FALSE add_bool_constant_to_dict

    O_PARENTHESIS   shift and go to state 87
    ID              shift and go to state 94
    INTCONST        shift and go to state 92
    FLOATCONST      shift and go to state 86
    STRINGCONST     shift and go to state 89
    TRUE            shift and go to state 88
    FALSE           shift and go to state 97

    varconstfunction               shift and go to state 90
    exp                            shift and go to state 91
    expression2                    shift and go to state 93
    constants                      shift and go to state 95
    term                           shift and go to state 96
    varconst                       shift and go to state 98
    booleanconst                   shift and go to state 99
    expression                     shift and go to state 109
    fact                           shift and go to state 101

state 75

    (37) statutesloop -> statute statutesloop .

    C_BRACKET       reduce using rule 37 (statutesloop -> statute statutesloop .)


state 76

    (31) block -> O_BRACKET statutesloop C_BRACKET .

    IF              reduce using rule 31 (block -> O_BRACKET statutesloop C_BRACKET .)
    PRINT           reduce using rule 31 (block -> O_BRACKET statutesloop C_BRACKET .)
    ID              reduce using rule 31 (block -> O_BRACKET statutesloop C_BRACKET .)
    LIST            reduce using rule 31 (block -> O_BRACKET statutesloop C_BRACKET .)
    WHILE           reduce using rule 31 (block -> O_BRACKET statutesloop C_BRACKET .)
    TIMES           reduce using rule 31 (block -> O_BRACKET statutesloop C_BRACKET .)
    BOOL            reduce using rule 31 (block -> O_BRACKET statutesloop C_BRACKET .)
    INT             reduce using rule 31 (block -> O_BRACKET statutesloop C_BRACKET .)
    FLOAT           reduce using rule 31 (block -> O_BRACKET statutesloop C_BRACKET .)
    STRING          reduce using rule 31 (block -> O_BRACKET statutesloop C_BRACKET .)
    C_BRACKET       reduce using rule 31 (block -> O_BRACKET statutesloop C_BRACKET .)
    $end            reduce using rule 31 (block -> O_BRACKET statutesloop C_BRACKET .)
    ELSE            reduce using rule 31 (block -> O_BRACKET statutesloop C_BRACKET .)
    FUNCTION        reduce using rule 31 (block -> O_BRACKET statutesloop C_BRACKET .)
    MAIN            reduce using rule 31 (block -> O_BRACKET statutesloop C_BRACKET .)


state 77

    (66) listinit -> LIST type . ID EQUALS start_list list SEMICOLON

    ID              shift and go to state 110


state 78

    (18) function_with_return_def -> ID add_function_id_to_options add_function_to_global_variables check_current_quadruple O_PARENTHESIS . parameters C_PARENTHESIS add_function_init_to_dict functionblock
    (162) parameters -> . parameterinit parametersloop
    (163) parameters -> .
    (164) parameterinit -> . parametertype ID
    (27) parametertype -> . BOOL
    (28) parametertype -> . INT
    (29) parametertype -> . FLOAT
    (30) parametertype -> . STRING

    C_PARENTHESIS   reduce using rule 163 (parameters -> .)
    BOOL            shift and go to state 84
    INT             shift and go to state 83
    FLOAT           shift and go to state 80
    STRING          shift and go to state 81

    parametertype                  shift and go to state 79
    parameters                     shift and go to state 111
    parameterinit                  shift and go to state 85

state 79

    (164) parameterinit -> parametertype . ID

    ID              shift and go to state 112


state 80

    (29) parametertype -> FLOAT .

    ID              reduce using rule 29 (parametertype -> FLOAT .)


state 81

    (30) parametertype -> STRING .

    ID              reduce using rule 30 (parametertype -> STRING .)


state 82

    (20) function_def -> ID add_function_id_to_options check_current_quadruple O_PARENTHESIS parameters . C_PARENTHESIS add_function_init_to_dict block

    C_PARENTHESIS   shift and go to state 113


state 83

    (28) parametertype -> INT .

    ID              reduce using rule 28 (parametertype -> INT .)


state 84

    (27) parametertype -> BOOL .

    ID              reduce using rule 27 (parametertype -> BOOL .)


state 85

    (162) parameters -> parameterinit . parametersloop
    (165) parametersloop -> . COMMA parameterinit parametersloop
    (166) parametersloop -> .

    COMMA           shift and go to state 115
    C_PARENTHESIS   reduce using rule 166 (parametersloop -> .)

    parametersloop                 shift and go to state 114

state 86

    (130) constants -> FLOATCONST . add_float_constant_to_dict
    (136) add_float_constant_to_dict -> .

    MULTIPLY        reduce using rule 136 (add_float_constant_to_dict -> .)
    DIVIDE          reduce using rule 136 (add_float_constant_to_dict -> .)
    MOD             reduce using rule 136 (add_float_constant_to_dict -> .)
    SUM             reduce using rule 136 (add_float_constant_to_dict -> .)
    MINUS           reduce using rule 136 (add_float_constant_to_dict -> .)
    EQUALITY        reduce using rule 136 (add_float_constant_to_dict -> .)
    GREATER         reduce using rule 136 (add_float_constant_to_dict -> .)
    GREATER_EQUAL   reduce using rule 136 (add_float_constant_to_dict -> .)
    LESS            reduce using rule 136 (add_float_constant_to_dict -> .)
    LESS_EQUAL      reduce using rule 136 (add_float_constant_to_dict -> .)
    DIFFERENT       reduce using rule 136 (add_float_constant_to_dict -> .)
    AND             reduce using rule 136 (add_float_constant_to_dict -> .)
    OR              reduce using rule 136 (add_float_constant_to_dict -> .)
    C_PARENTHESIS   reduce using rule 136 (add_float_constant_to_dict -> .)
    COMMA           reduce using rule 136 (add_float_constant_to_dict -> .)
    SEMICOLON       reduce using rule 136 (add_float_constant_to_dict -> .)
    C_S_BRACKET     reduce using rule 136 (add_float_constant_to_dict -> .)
    C_BRACKET       reduce using rule 136 (add_float_constant_to_dict -> .)

    add_float_constant_to_dict     shift and go to state 116

state 87

    (113) fact -> O_PARENTHESIS . add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis
    (114) add_o_parenthesis -> .

    O_PARENTHESIS   reduce using rule 114 (add_o_parenthesis -> .)
    ID              reduce using rule 114 (add_o_parenthesis -> .)
    INTCONST        reduce using rule 114 (add_o_parenthesis -> .)
    FLOATCONST      reduce using rule 114 (add_o_parenthesis -> .)
    STRINGCONST     reduce using rule 114 (add_o_parenthesis -> .)
    TRUE            reduce using rule 114 (add_o_parenthesis -> .)
    FALSE           reduce using rule 114 (add_o_parenthesis -> .)

    add_o_parenthesis              shift and go to state 117

state 88

    (133) booleanconst -> TRUE . add_bool_constant_to_dict
    (138) add_bool_constant_to_dict -> .

    MULTIPLY        reduce using rule 138 (add_bool_constant_to_dict -> .)
    DIVIDE          reduce using rule 138 (add_bool_constant_to_dict -> .)
    MOD             reduce using rule 138 (add_bool_constant_to_dict -> .)
    SUM             reduce using rule 138 (add_bool_constant_to_dict -> .)
    MINUS           reduce using rule 138 (add_bool_constant_to_dict -> .)
    EQUALITY        reduce using rule 138 (add_bool_constant_to_dict -> .)
    GREATER         reduce using rule 138 (add_bool_constant_to_dict -> .)
    GREATER_EQUAL   reduce using rule 138 (add_bool_constant_to_dict -> .)
    LESS            reduce using rule 138 (add_bool_constant_to_dict -> .)
    LESS_EQUAL      reduce using rule 138 (add_bool_constant_to_dict -> .)
    DIFFERENT       reduce using rule 138 (add_bool_constant_to_dict -> .)
    AND             reduce using rule 138 (add_bool_constant_to_dict -> .)
    OR              reduce using rule 138 (add_bool_constant_to_dict -> .)
    C_PARENTHESIS   reduce using rule 138 (add_bool_constant_to_dict -> .)
    COMMA           reduce using rule 138 (add_bool_constant_to_dict -> .)
    SEMICOLON       reduce using rule 138 (add_bool_constant_to_dict -> .)
    C_S_BRACKET     reduce using rule 138 (add_bool_constant_to_dict -> .)
    C_BRACKET       reduce using rule 138 (add_bool_constant_to_dict -> .)

    add_bool_constant_to_dict      shift and go to state 118

state 89

    (131) constants -> STRINGCONST . add_string_constant_to_dict
    (137) add_string_constant_to_dict -> .

    MULTIPLY        reduce using rule 137 (add_string_constant_to_dict -> .)
    DIVIDE          reduce using rule 137 (add_string_constant_to_dict -> .)
    MOD             reduce using rule 137 (add_string_constant_to_dict -> .)
    SUM             reduce using rule 137 (add_string_constant_to_dict -> .)
    MINUS           reduce using rule 137 (add_string_constant_to_dict -> .)
    EQUALITY        reduce using rule 137 (add_string_constant_to_dict -> .)
    GREATER         reduce using rule 137 (add_string_constant_to_dict -> .)
    GREATER_EQUAL   reduce using rule 137 (add_string_constant_to_dict -> .)
    LESS            reduce using rule 137 (add_string_constant_to_dict -> .)
    LESS_EQUAL      reduce using rule 137 (add_string_constant_to_dict -> .)
    DIFFERENT       reduce using rule 137 (add_string_constant_to_dict -> .)
    AND             reduce using rule 137 (add_string_constant_to_dict -> .)
    OR              reduce using rule 137 (add_string_constant_to_dict -> .)
    C_PARENTHESIS   reduce using rule 137 (add_string_constant_to_dict -> .)
    COMMA           reduce using rule 137 (add_string_constant_to_dict -> .)
    SEMICOLON       reduce using rule 137 (add_string_constant_to_dict -> .)
    C_S_BRACKET     reduce using rule 137 (add_string_constant_to_dict -> .)
    C_BRACKET       reduce using rule 137 (add_string_constant_to_dict -> .)

    add_string_constant_to_dict    shift and go to state 119

state 90

    (121) varconst -> varconstfunction .

    MULTIPLY        reduce using rule 121 (varconst -> varconstfunction .)
    DIVIDE          reduce using rule 121 (varconst -> varconstfunction .)
    MOD             reduce using rule 121 (varconst -> varconstfunction .)
    SUM             reduce using rule 121 (varconst -> varconstfunction .)
    MINUS           reduce using rule 121 (varconst -> varconstfunction .)
    EQUALITY        reduce using rule 121 (varconst -> varconstfunction .)
    GREATER         reduce using rule 121 (varconst -> varconstfunction .)
    GREATER_EQUAL   reduce using rule 121 (varconst -> varconstfunction .)
    LESS            reduce using rule 121 (varconst -> varconstfunction .)
    LESS_EQUAL      reduce using rule 121 (varconst -> varconstfunction .)
    DIFFERENT       reduce using rule 121 (varconst -> varconstfunction .)
    C_PARENTHESIS   reduce using rule 121 (varconst -> varconstfunction .)
    COMMA           reduce using rule 121 (varconst -> varconstfunction .)
    SEMICOLON       reduce using rule 121 (varconst -> varconstfunction .)
    C_S_BRACKET     reduce using rule 121 (varconst -> varconstfunction .)
    C_BRACKET       reduce using rule 121 (varconst -> varconstfunction .)
    AND             reduce using rule 121 (varconst -> varconstfunction .)
    OR              reduce using rule 121 (varconst -> varconstfunction .)


state 91

    (86) expression2 -> exp . expression2optional
    (87) expression2optional -> . relop exp relop_quadruple
    (88) expression2optional -> .
    (92) relop -> . EQUALITY
    (93) relop -> . GREATER
    (94) relop -> . GREATER_EQUAL
    (95) relop -> . LESS
    (96) relop -> . LESS_EQUAL
    (97) relop -> . DIFFERENT

    AND             reduce using rule 88 (expression2optional -> .)
    OR              reduce using rule 88 (expression2optional -> .)
    C_PARENTHESIS   reduce using rule 88 (expression2optional -> .)
    COMMA           reduce using rule 88 (expression2optional -> .)
    SEMICOLON       reduce using rule 88 (expression2optional -> .)
    C_S_BRACKET     reduce using rule 88 (expression2optional -> .)
    C_BRACKET       reduce using rule 88 (expression2optional -> .)
    EQUALITY        shift and go to state 121
    GREATER         shift and go to state 122
    GREATER_EQUAL   shift and go to state 123
    LESS            shift and go to state 124
    LESS_EQUAL      shift and go to state 126
    DIFFERENT       shift and go to state 120

    relop                          shift and go to state 127
    expression2optional            shift and go to state 125

state 92

    (129) constants -> INTCONST . add_int_constant_to_dict
    (135) add_int_constant_to_dict -> .

    MULTIPLY        reduce using rule 135 (add_int_constant_to_dict -> .)
    DIVIDE          reduce using rule 135 (add_int_constant_to_dict -> .)
    MOD             reduce using rule 135 (add_int_constant_to_dict -> .)
    SUM             reduce using rule 135 (add_int_constant_to_dict -> .)
    MINUS           reduce using rule 135 (add_int_constant_to_dict -> .)
    EQUALITY        reduce using rule 135 (add_int_constant_to_dict -> .)
    GREATER         reduce using rule 135 (add_int_constant_to_dict -> .)
    GREATER_EQUAL   reduce using rule 135 (add_int_constant_to_dict -> .)
    LESS            reduce using rule 135 (add_int_constant_to_dict -> .)
    LESS_EQUAL      reduce using rule 135 (add_int_constant_to_dict -> .)
    DIFFERENT       reduce using rule 135 (add_int_constant_to_dict -> .)
    AND             reduce using rule 135 (add_int_constant_to_dict -> .)
    OR              reduce using rule 135 (add_int_constant_to_dict -> .)
    C_PARENTHESIS   reduce using rule 135 (add_int_constant_to_dict -> .)
    COMMA           reduce using rule 135 (add_int_constant_to_dict -> .)
    SEMICOLON       reduce using rule 135 (add_int_constant_to_dict -> .)
    C_S_BRACKET     reduce using rule 135 (add_int_constant_to_dict -> .)
    C_BRACKET       reduce using rule 135 (add_int_constant_to_dict -> .)

    add_int_constant_to_dict       shift and go to state 128

state 93

    (83) expression -> expression2 . expressionoptional
    (84) expressionoptional -> . logicop expression2 logic_op_quadruple
    (85) expressionoptional -> .
    (89) logicop -> . AND
    (90) logicop -> . OR

    C_PARENTHESIS   reduce using rule 85 (expressionoptional -> .)
    COMMA           reduce using rule 85 (expressionoptional -> .)
    SEMICOLON       reduce using rule 85 (expressionoptional -> .)
    C_S_BRACKET     reduce using rule 85 (expressionoptional -> .)
    C_BRACKET       reduce using rule 85 (expressionoptional -> .)
    AND             shift and go to state 129
    OR              shift and go to state 132

    logicop                        shift and go to state 131
    expressionoptional             shift and go to state 130

state 94

    (123) varconstfunction -> ID . functionorlist
    (125) functionorlist -> . add_list_variable add_o_parenthesis O_S_BRACKET expression C_S_BRACKET add_c_parenthesis add_list_index_to_stack
    (126) functionorlist -> . add_o_parenthesis check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS generate_gosub add_c_parenthesis
    (127) functionorlist -> . add_to_stack
    (128) add_list_variable -> .
    (114) add_o_parenthesis -> .
    (124) add_to_stack -> .

    O_S_BRACKET     reduce using rule 128 (add_list_variable -> .)
    O_PARENTHESIS   reduce using rule 114 (add_o_parenthesis -> .)
    MULTIPLY        reduce using rule 124 (add_to_stack -> .)
    DIVIDE          reduce using rule 124 (add_to_stack -> .)
    MOD             reduce using rule 124 (add_to_stack -> .)
    SUM             reduce using rule 124 (add_to_stack -> .)
    MINUS           reduce using rule 124 (add_to_stack -> .)
    EQUALITY        reduce using rule 124 (add_to_stack -> .)
    GREATER         reduce using rule 124 (add_to_stack -> .)
    GREATER_EQUAL   reduce using rule 124 (add_to_stack -> .)
    LESS            reduce using rule 124 (add_to_stack -> .)
    LESS_EQUAL      reduce using rule 124 (add_to_stack -> .)
    DIFFERENT       reduce using rule 124 (add_to_stack -> .)
    AND             reduce using rule 124 (add_to_stack -> .)
    OR              reduce using rule 124 (add_to_stack -> .)
    C_PARENTHESIS   reduce using rule 124 (add_to_stack -> .)
    COMMA           reduce using rule 124 (add_to_stack -> .)
    SEMICOLON       reduce using rule 124 (add_to_stack -> .)
    C_S_BRACKET     reduce using rule 124 (add_to_stack -> .)
    C_BRACKET       reduce using rule 124 (add_to_stack -> .)

    add_to_stack                   shift and go to state 133
    add_o_parenthesis              shift and go to state 134
    functionorlist                 shift and go to state 135
    add_list_variable              shift and go to state 136

state 95

    (122) varconst -> constants .

    MULTIPLY        reduce using rule 122 (varconst -> constants .)
    DIVIDE          reduce using rule 122 (varconst -> constants .)
    MOD             reduce using rule 122 (varconst -> constants .)
    SUM             reduce using rule 122 (varconst -> constants .)
    MINUS           reduce using rule 122 (varconst -> constants .)
    EQUALITY        reduce using rule 122 (varconst -> constants .)
    GREATER         reduce using rule 122 (varconst -> constants .)
    GREATER_EQUAL   reduce using rule 122 (varconst -> constants .)
    LESS            reduce using rule 122 (varconst -> constants .)
    LESS_EQUAL      reduce using rule 122 (varconst -> constants .)
    DIFFERENT       reduce using rule 122 (varconst -> constants .)
    C_PARENTHESIS   reduce using rule 122 (varconst -> constants .)
    COMMA           reduce using rule 122 (varconst -> constants .)
    SEMICOLON       reduce using rule 122 (varconst -> constants .)
    C_S_BRACKET     reduce using rule 122 (varconst -> constants .)
    C_BRACKET       reduce using rule 122 (varconst -> constants .)
    AND             reduce using rule 122 (varconst -> constants .)
    OR              reduce using rule 122 (varconst -> constants .)


state 96

    (99) exp -> term . exp_quadruple exploop
    (100) exp_quadruple -> .

    SUM             reduce using rule 100 (exp_quadruple -> .)
    MINUS           reduce using rule 100 (exp_quadruple -> .)
    EQUALITY        reduce using rule 100 (exp_quadruple -> .)
    GREATER         reduce using rule 100 (exp_quadruple -> .)
    GREATER_EQUAL   reduce using rule 100 (exp_quadruple -> .)
    LESS            reduce using rule 100 (exp_quadruple -> .)
    LESS_EQUAL      reduce using rule 100 (exp_quadruple -> .)
    DIFFERENT       reduce using rule 100 (exp_quadruple -> .)
    AND             reduce using rule 100 (exp_quadruple -> .)
    OR              reduce using rule 100 (exp_quadruple -> .)
    C_PARENTHESIS   reduce using rule 100 (exp_quadruple -> .)
    COMMA           reduce using rule 100 (exp_quadruple -> .)
    SEMICOLON       reduce using rule 100 (exp_quadruple -> .)
    C_S_BRACKET     reduce using rule 100 (exp_quadruple -> .)
    C_BRACKET       reduce using rule 100 (exp_quadruple -> .)

    exp_quadruple                  shift and go to state 137

state 97

    (134) booleanconst -> FALSE . add_bool_constant_to_dict
    (138) add_bool_constant_to_dict -> .

    MULTIPLY        reduce using rule 138 (add_bool_constant_to_dict -> .)
    DIVIDE          reduce using rule 138 (add_bool_constant_to_dict -> .)
    MOD             reduce using rule 138 (add_bool_constant_to_dict -> .)
    SUM             reduce using rule 138 (add_bool_constant_to_dict -> .)
    MINUS           reduce using rule 138 (add_bool_constant_to_dict -> .)
    EQUALITY        reduce using rule 138 (add_bool_constant_to_dict -> .)
    GREATER         reduce using rule 138 (add_bool_constant_to_dict -> .)
    GREATER_EQUAL   reduce using rule 138 (add_bool_constant_to_dict -> .)
    LESS            reduce using rule 138 (add_bool_constant_to_dict -> .)
    LESS_EQUAL      reduce using rule 138 (add_bool_constant_to_dict -> .)
    DIFFERENT       reduce using rule 138 (add_bool_constant_to_dict -> .)
    AND             reduce using rule 138 (add_bool_constant_to_dict -> .)
    OR              reduce using rule 138 (add_bool_constant_to_dict -> .)
    C_PARENTHESIS   reduce using rule 138 (add_bool_constant_to_dict -> .)
    COMMA           reduce using rule 138 (add_bool_constant_to_dict -> .)
    SEMICOLON       reduce using rule 138 (add_bool_constant_to_dict -> .)
    C_S_BRACKET     reduce using rule 138 (add_bool_constant_to_dict -> .)
    C_BRACKET       reduce using rule 138 (add_bool_constant_to_dict -> .)

    add_bool_constant_to_dict      shift and go to state 138

state 98

    (112) fact -> varconst .

    MULTIPLY        reduce using rule 112 (fact -> varconst .)
    DIVIDE          reduce using rule 112 (fact -> varconst .)
    MOD             reduce using rule 112 (fact -> varconst .)
    SUM             reduce using rule 112 (fact -> varconst .)
    MINUS           reduce using rule 112 (fact -> varconst .)
    EQUALITY        reduce using rule 112 (fact -> varconst .)
    GREATER         reduce using rule 112 (fact -> varconst .)
    GREATER_EQUAL   reduce using rule 112 (fact -> varconst .)
    LESS            reduce using rule 112 (fact -> varconst .)
    LESS_EQUAL      reduce using rule 112 (fact -> varconst .)
    DIFFERENT       reduce using rule 112 (fact -> varconst .)
    AND             reduce using rule 112 (fact -> varconst .)
    OR              reduce using rule 112 (fact -> varconst .)
    C_PARENTHESIS   reduce using rule 112 (fact -> varconst .)
    COMMA           reduce using rule 112 (fact -> varconst .)
    SEMICOLON       reduce using rule 112 (fact -> varconst .)
    C_S_BRACKET     reduce using rule 112 (fact -> varconst .)
    C_BRACKET       reduce using rule 112 (fact -> varconst .)


state 99

    (132) constants -> booleanconst .

    MULTIPLY        reduce using rule 132 (constants -> booleanconst .)
    DIVIDE          reduce using rule 132 (constants -> booleanconst .)
    MOD             reduce using rule 132 (constants -> booleanconst .)
    SUM             reduce using rule 132 (constants -> booleanconst .)
    MINUS           reduce using rule 132 (constants -> booleanconst .)
    EQUALITY        reduce using rule 132 (constants -> booleanconst .)
    GREATER         reduce using rule 132 (constants -> booleanconst .)
    GREATER_EQUAL   reduce using rule 132 (constants -> booleanconst .)
    LESS            reduce using rule 132 (constants -> booleanconst .)
    LESS_EQUAL      reduce using rule 132 (constants -> booleanconst .)
    DIFFERENT       reduce using rule 132 (constants -> booleanconst .)
    AND             reduce using rule 132 (constants -> booleanconst .)
    OR              reduce using rule 132 (constants -> booleanconst .)
    SEMICOLON       reduce using rule 132 (constants -> booleanconst .)
    COMMA           reduce using rule 132 (constants -> booleanconst .)
    C_PARENTHESIS   reduce using rule 132 (constants -> booleanconst .)
    C_S_BRACKET     reduce using rule 132 (constants -> booleanconst .)
    C_BRACKET       reduce using rule 132 (constants -> booleanconst .)


state 100

    (148) timesloop -> TIMES O_PARENTHESIS expression . C_PARENTHESIS start_times block end_times

    C_PARENTHESIS   shift and go to state 139


state 101

    (105) term -> fact . term_quadruple termloop
    (106) term_quadruple -> .

    MULTIPLY        reduce using rule 106 (term_quadruple -> .)
    DIVIDE          reduce using rule 106 (term_quadruple -> .)
    MOD             reduce using rule 106 (term_quadruple -> .)
    SUM             reduce using rule 106 (term_quadruple -> .)
    MINUS           reduce using rule 106 (term_quadruple -> .)
    EQUALITY        reduce using rule 106 (term_quadruple -> .)
    GREATER         reduce using rule 106 (term_quadruple -> .)
    GREATER_EQUAL   reduce using rule 106 (term_quadruple -> .)
    LESS            reduce using rule 106 (term_quadruple -> .)
    LESS_EQUAL      reduce using rule 106 (term_quadruple -> .)
    DIFFERENT       reduce using rule 106 (term_quadruple -> .)
    AND             reduce using rule 106 (term_quadruple -> .)
    OR              reduce using rule 106 (term_quadruple -> .)
    C_PARENTHESIS   reduce using rule 106 (term_quadruple -> .)
    COMMA           reduce using rule 106 (term_quadruple -> .)
    SEMICOLON       reduce using rule 106 (term_quadruple -> .)
    C_S_BRACKET     reduce using rule 106 (term_quadruple -> .)
    C_BRACKET       reduce using rule 106 (term_quadruple -> .)

    term_quadruple                 shift and go to state 140

state 102

    (143) whileloop -> WHILE start_while O_PARENTHESIS . expression C_PARENTHESIS condition_while block end_while
    (83) expression -> . expression2 expressionoptional
    (86) expression2 -> . exp expression2optional
    (99) exp -> . term exp_quadruple exploop
    (105) term -> . fact term_quadruple termloop
    (112) fact -> . varconst
    (113) fact -> . O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis
    (121) varconst -> . varconstfunction
    (122) varconst -> . constants
    (123) varconstfunction -> . ID functionorlist
    (129) constants -> . INTCONST add_int_constant_to_dict
    (130) constants -> . FLOATCONST add_float_constant_to_dict
    (131) constants -> . STRINGCONST add_string_constant_to_dict
    (132) constants -> . booleanconst
    (133) booleanconst -> . TRUE add_bool_constant_to_dict
    (134) booleanconst -> . FALSE add_bool_constant_to_dict

    O_PARENTHESIS   shift and go to state 87
    ID              shift and go to state 94
    INTCONST        shift and go to state 92
    FLOATCONST      shift and go to state 86
    STRINGCONST     shift and go to state 89
    TRUE            shift and go to state 88
    FALSE           shift and go to state 97

    varconstfunction               shift and go to state 90
    exp                            shift and go to state 91
    expression2                    shift and go to state 93
    constants                      shift and go to state 95
    term                           shift and go to state 96
    varconst                       shift and go to state 98
    booleanconst                   shift and go to state 99
    expression                     shift and go to state 141
    fact                           shift and go to state 101

state 103

    (58) writtingloop -> start_printing . expression print_quadruple optionalwritting
    (83) expression -> . expression2 expressionoptional
    (86) expression2 -> . exp expression2optional
    (99) exp -> . term exp_quadruple exploop
    (105) term -> . fact term_quadruple termloop
    (112) fact -> . varconst
    (113) fact -> . O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis
    (121) varconst -> . varconstfunction
    (122) varconst -> . constants
    (123) varconstfunction -> . ID functionorlist
    (129) constants -> . INTCONST add_int_constant_to_dict
    (130) constants -> . FLOATCONST add_float_constant_to_dict
    (131) constants -> . STRINGCONST add_string_constant_to_dict
    (132) constants -> . booleanconst
    (133) booleanconst -> . TRUE add_bool_constant_to_dict
    (134) booleanconst -> . FALSE add_bool_constant_to_dict

    O_PARENTHESIS   shift and go to state 87
    ID              shift and go to state 94
    INTCONST        shift and go to state 92
    FLOATCONST      shift and go to state 86
    STRINGCONST     shift and go to state 89
    TRUE            shift and go to state 88
    FALSE           shift and go to state 97

    varconstfunction               shift and go to state 90
    exp                            shift and go to state 91
    expression2                    shift and go to state 93
    constants                      shift and go to state 95
    term                           shift and go to state 96
    varconst                       shift and go to state 98
    booleanconst                   shift and go to state 99
    expression                     shift and go to state 142
    fact                           shift and go to state 101

state 104

    (55) writting -> PRINT O_PARENTHESIS writtingloop . C_PARENTHESIS SEMICOLON

    C_PARENTHESIS   shift and go to state 143


state 105

    (54) assignation -> var_assign EQUALS add_equals . expression equals_quadruple SEMICOLON
    (83) expression -> . expression2 expressionoptional
    (86) expression2 -> . exp expression2optional
    (99) exp -> . term exp_quadruple exploop
    (105) term -> . fact term_quadruple termloop
    (112) fact -> . varconst
    (113) fact -> . O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis
    (121) varconst -> . varconstfunction
    (122) varconst -> . constants
    (123) varconstfunction -> . ID functionorlist
    (129) constants -> . INTCONST add_int_constant_to_dict
    (130) constants -> . FLOATCONST add_float_constant_to_dict
    (131) constants -> . STRINGCONST add_string_constant_to_dict
    (132) constants -> . booleanconst
    (133) booleanconst -> . TRUE add_bool_constant_to_dict
    (134) booleanconst -> . FALSE add_bool_constant_to_dict

    O_PARENTHESIS   shift and go to state 87
    ID              shift and go to state 94
    INTCONST        shift and go to state 92
    FLOATCONST      shift and go to state 86
    STRINGCONST     shift and go to state 89
    TRUE            shift and go to state 88
    FALSE           shift and go to state 97

    varconstfunction               shift and go to state 90
    expression2                    shift and go to state 93
    constants                      shift and go to state 95
    term                           shift and go to state 96
    varconst                       shift and go to state 98
    exp                            shift and go to state 91
    booleanconst                   shift and go to state 99
    expression                     shift and go to state 144
    fact                           shift and go to state 101

state 106

    (63) normalinit -> type var EQUALS . add_equals expression equals_quadruple SEMICOLON
    (65) add_equals -> .

    O_PARENTHESIS   reduce using rule 65 (add_equals -> .)
    ID              reduce using rule 65 (add_equals -> .)
    INTCONST        reduce using rule 65 (add_equals -> .)
    FLOATCONST      reduce using rule 65 (add_equals -> .)
    STRINGCONST     reduce using rule 65 (add_equals -> .)
    TRUE            reduce using rule 65 (add_equals -> .)
    FALSE           reduce using rule 65 (add_equals -> .)

    add_equals                     shift and go to state 145

state 107

    (152) functioncall -> ID add_o_parenthesis check_function_exists . O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON generate_gosub add_c_parenthesis

    O_PARENTHESIS   shift and go to state 146


state 108

    (118) listaccess -> add_list_variable add_o_parenthesis . O_S_BRACKET expression C_S_BRACKET add_c_parenthesis add_list_index_to_stack

    O_S_BRACKET     shift and go to state 147


state 109

    (74) condition -> IF O_PARENTHESIS expression . C_PARENTHESIS start_condition block else end_condition

    C_PARENTHESIS   shift and go to state 148


state 110

    (66) listinit -> LIST type ID . EQUALS start_list list SEMICOLON

    EQUALS          shift and go to state 149


state 111

    (18) function_with_return_def -> ID add_function_id_to_options add_function_to_global_variables check_current_quadruple O_PARENTHESIS parameters . C_PARENTHESIS add_function_init_to_dict functionblock

    C_PARENTHESIS   shift and go to state 150


state 112

    (164) parameterinit -> parametertype ID .

    COMMA           reduce using rule 164 (parameterinit -> parametertype ID .)
    C_PARENTHESIS   reduce using rule 164 (parameterinit -> parametertype ID .)


state 113

    (20) function_def -> ID add_function_id_to_options check_current_quadruple O_PARENTHESIS parameters C_PARENTHESIS . add_function_init_to_dict block
    (11) add_function_init_to_dict -> .

    O_BRACKET       reduce using rule 11 (add_function_init_to_dict -> .)

    add_function_init_to_dict      shift and go to state 151

state 114

    (162) parameters -> parameterinit parametersloop .

    C_PARENTHESIS   reduce using rule 162 (parameters -> parameterinit parametersloop .)


state 115

    (165) parametersloop -> COMMA . parameterinit parametersloop
    (164) parameterinit -> . parametertype ID
    (27) parametertype -> . BOOL
    (28) parametertype -> . INT
    (29) parametertype -> . FLOAT
    (30) parametertype -> . STRING

    BOOL            shift and go to state 84
    INT             shift and go to state 83
    FLOAT           shift and go to state 80
    STRING          shift and go to state 81

    parametertype                  shift and go to state 79
    parameterinit                  shift and go to state 152

state 116

    (130) constants -> FLOATCONST add_float_constant_to_dict .

    MULTIPLY        reduce using rule 130 (constants -> FLOATCONST add_float_constant_to_dict .)
    DIVIDE          reduce using rule 130 (constants -> FLOATCONST add_float_constant_to_dict .)
    MOD             reduce using rule 130 (constants -> FLOATCONST add_float_constant_to_dict .)
    SUM             reduce using rule 130 (constants -> FLOATCONST add_float_constant_to_dict .)
    MINUS           reduce using rule 130 (constants -> FLOATCONST add_float_constant_to_dict .)
    EQUALITY        reduce using rule 130 (constants -> FLOATCONST add_float_constant_to_dict .)
    GREATER         reduce using rule 130 (constants -> FLOATCONST add_float_constant_to_dict .)
    GREATER_EQUAL   reduce using rule 130 (constants -> FLOATCONST add_float_constant_to_dict .)
    LESS            reduce using rule 130 (constants -> FLOATCONST add_float_constant_to_dict .)
    LESS_EQUAL      reduce using rule 130 (constants -> FLOATCONST add_float_constant_to_dict .)
    DIFFERENT       reduce using rule 130 (constants -> FLOATCONST add_float_constant_to_dict .)
    AND             reduce using rule 130 (constants -> FLOATCONST add_float_constant_to_dict .)
    OR              reduce using rule 130 (constants -> FLOATCONST add_float_constant_to_dict .)
    SEMICOLON       reduce using rule 130 (constants -> FLOATCONST add_float_constant_to_dict .)
    COMMA           reduce using rule 130 (constants -> FLOATCONST add_float_constant_to_dict .)
    C_PARENTHESIS   reduce using rule 130 (constants -> FLOATCONST add_float_constant_to_dict .)
    C_S_BRACKET     reduce using rule 130 (constants -> FLOATCONST add_float_constant_to_dict .)
    C_BRACKET       reduce using rule 130 (constants -> FLOATCONST add_float_constant_to_dict .)


state 117

    (113) fact -> O_PARENTHESIS add_o_parenthesis . expression C_PARENTHESIS add_c_parenthesis
    (83) expression -> . expression2 expressionoptional
    (86) expression2 -> . exp expression2optional
    (99) exp -> . term exp_quadruple exploop
    (105) term -> . fact term_quadruple termloop
    (112) fact -> . varconst
    (113) fact -> . O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis
    (121) varconst -> . varconstfunction
    (122) varconst -> . constants
    (123) varconstfunction -> . ID functionorlist
    (129) constants -> . INTCONST add_int_constant_to_dict
    (130) constants -> . FLOATCONST add_float_constant_to_dict
    (131) constants -> . STRINGCONST add_string_constant_to_dict
    (132) constants -> . booleanconst
    (133) booleanconst -> . TRUE add_bool_constant_to_dict
    (134) booleanconst -> . FALSE add_bool_constant_to_dict

    O_PARENTHESIS   shift and go to state 87
    ID              shift and go to state 94
    INTCONST        shift and go to state 92
    FLOATCONST      shift and go to state 86
    STRINGCONST     shift and go to state 89
    TRUE            shift and go to state 88
    FALSE           shift and go to state 97

    varconstfunction               shift and go to state 90
    exp                            shift and go to state 91
    expression2                    shift and go to state 93
    constants                      shift and go to state 95
    term                           shift and go to state 96
    varconst                       shift and go to state 98
    booleanconst                   shift and go to state 99
    expression                     shift and go to state 153
    fact                           shift and go to state 101

state 118

    (133) booleanconst -> TRUE add_bool_constant_to_dict .

    MULTIPLY        reduce using rule 133 (booleanconst -> TRUE add_bool_constant_to_dict .)
    DIVIDE          reduce using rule 133 (booleanconst -> TRUE add_bool_constant_to_dict .)
    MOD             reduce using rule 133 (booleanconst -> TRUE add_bool_constant_to_dict .)
    SUM             reduce using rule 133 (booleanconst -> TRUE add_bool_constant_to_dict .)
    MINUS           reduce using rule 133 (booleanconst -> TRUE add_bool_constant_to_dict .)
    EQUALITY        reduce using rule 133 (booleanconst -> TRUE add_bool_constant_to_dict .)
    GREATER         reduce using rule 133 (booleanconst -> TRUE add_bool_constant_to_dict .)
    GREATER_EQUAL   reduce using rule 133 (booleanconst -> TRUE add_bool_constant_to_dict .)
    LESS            reduce using rule 133 (booleanconst -> TRUE add_bool_constant_to_dict .)
    LESS_EQUAL      reduce using rule 133 (booleanconst -> TRUE add_bool_constant_to_dict .)
    DIFFERENT       reduce using rule 133 (booleanconst -> TRUE add_bool_constant_to_dict .)
    AND             reduce using rule 133 (booleanconst -> TRUE add_bool_constant_to_dict .)
    OR              reduce using rule 133 (booleanconst -> TRUE add_bool_constant_to_dict .)
    C_PARENTHESIS   reduce using rule 133 (booleanconst -> TRUE add_bool_constant_to_dict .)
    COMMA           reduce using rule 133 (booleanconst -> TRUE add_bool_constant_to_dict .)
    SEMICOLON       reduce using rule 133 (booleanconst -> TRUE add_bool_constant_to_dict .)
    C_S_BRACKET     reduce using rule 133 (booleanconst -> TRUE add_bool_constant_to_dict .)
    C_BRACKET       reduce using rule 133 (booleanconst -> TRUE add_bool_constant_to_dict .)


state 119

    (131) constants -> STRINGCONST add_string_constant_to_dict .

    MULTIPLY        reduce using rule 131 (constants -> STRINGCONST add_string_constant_to_dict .)
    DIVIDE          reduce using rule 131 (constants -> STRINGCONST add_string_constant_to_dict .)
    MOD             reduce using rule 131 (constants -> STRINGCONST add_string_constant_to_dict .)
    SUM             reduce using rule 131 (constants -> STRINGCONST add_string_constant_to_dict .)
    MINUS           reduce using rule 131 (constants -> STRINGCONST add_string_constant_to_dict .)
    EQUALITY        reduce using rule 131 (constants -> STRINGCONST add_string_constant_to_dict .)
    GREATER         reduce using rule 131 (constants -> STRINGCONST add_string_constant_to_dict .)
    GREATER_EQUAL   reduce using rule 131 (constants -> STRINGCONST add_string_constant_to_dict .)
    LESS            reduce using rule 131 (constants -> STRINGCONST add_string_constant_to_dict .)
    LESS_EQUAL      reduce using rule 131 (constants -> STRINGCONST add_string_constant_to_dict .)
    DIFFERENT       reduce using rule 131 (constants -> STRINGCONST add_string_constant_to_dict .)
    AND             reduce using rule 131 (constants -> STRINGCONST add_string_constant_to_dict .)
    OR              reduce using rule 131 (constants -> STRINGCONST add_string_constant_to_dict .)
    SEMICOLON       reduce using rule 131 (constants -> STRINGCONST add_string_constant_to_dict .)
    COMMA           reduce using rule 131 (constants -> STRINGCONST add_string_constant_to_dict .)
    C_PARENTHESIS   reduce using rule 131 (constants -> STRINGCONST add_string_constant_to_dict .)
    C_S_BRACKET     reduce using rule 131 (constants -> STRINGCONST add_string_constant_to_dict .)
    C_BRACKET       reduce using rule 131 (constants -> STRINGCONST add_string_constant_to_dict .)


state 120

    (97) relop -> DIFFERENT .

    O_PARENTHESIS   reduce using rule 97 (relop -> DIFFERENT .)
    ID              reduce using rule 97 (relop -> DIFFERENT .)
    INTCONST        reduce using rule 97 (relop -> DIFFERENT .)
    FLOATCONST      reduce using rule 97 (relop -> DIFFERENT .)
    STRINGCONST     reduce using rule 97 (relop -> DIFFERENT .)
    TRUE            reduce using rule 97 (relop -> DIFFERENT .)
    FALSE           reduce using rule 97 (relop -> DIFFERENT .)


state 121

    (92) relop -> EQUALITY .

    O_PARENTHESIS   reduce using rule 92 (relop -> EQUALITY .)
    ID              reduce using rule 92 (relop -> EQUALITY .)
    INTCONST        reduce using rule 92 (relop -> EQUALITY .)
    FLOATCONST      reduce using rule 92 (relop -> EQUALITY .)
    STRINGCONST     reduce using rule 92 (relop -> EQUALITY .)
    TRUE            reduce using rule 92 (relop -> EQUALITY .)
    FALSE           reduce using rule 92 (relop -> EQUALITY .)


state 122

    (93) relop -> GREATER .

    O_PARENTHESIS   reduce using rule 93 (relop -> GREATER .)
    ID              reduce using rule 93 (relop -> GREATER .)
    INTCONST        reduce using rule 93 (relop -> GREATER .)
    FLOATCONST      reduce using rule 93 (relop -> GREATER .)
    STRINGCONST     reduce using rule 93 (relop -> GREATER .)
    TRUE            reduce using rule 93 (relop -> GREATER .)
    FALSE           reduce using rule 93 (relop -> GREATER .)


state 123

    (94) relop -> GREATER_EQUAL .

    O_PARENTHESIS   reduce using rule 94 (relop -> GREATER_EQUAL .)
    ID              reduce using rule 94 (relop -> GREATER_EQUAL .)
    INTCONST        reduce using rule 94 (relop -> GREATER_EQUAL .)
    FLOATCONST      reduce using rule 94 (relop -> GREATER_EQUAL .)
    STRINGCONST     reduce using rule 94 (relop -> GREATER_EQUAL .)
    TRUE            reduce using rule 94 (relop -> GREATER_EQUAL .)
    FALSE           reduce using rule 94 (relop -> GREATER_EQUAL .)


state 124

    (95) relop -> LESS .

    O_PARENTHESIS   reduce using rule 95 (relop -> LESS .)
    ID              reduce using rule 95 (relop -> LESS .)
    INTCONST        reduce using rule 95 (relop -> LESS .)
    FLOATCONST      reduce using rule 95 (relop -> LESS .)
    STRINGCONST     reduce using rule 95 (relop -> LESS .)
    TRUE            reduce using rule 95 (relop -> LESS .)
    FALSE           reduce using rule 95 (relop -> LESS .)


state 125

    (86) expression2 -> exp expression2optional .

    AND             reduce using rule 86 (expression2 -> exp expression2optional .)
    OR              reduce using rule 86 (expression2 -> exp expression2optional .)
    C_BRACKET       reduce using rule 86 (expression2 -> exp expression2optional .)
    C_PARENTHESIS   reduce using rule 86 (expression2 -> exp expression2optional .)
    COMMA           reduce using rule 86 (expression2 -> exp expression2optional .)
    SEMICOLON       reduce using rule 86 (expression2 -> exp expression2optional .)
    C_S_BRACKET     reduce using rule 86 (expression2 -> exp expression2optional .)


state 126

    (96) relop -> LESS_EQUAL .

    O_PARENTHESIS   reduce using rule 96 (relop -> LESS_EQUAL .)
    ID              reduce using rule 96 (relop -> LESS_EQUAL .)
    INTCONST        reduce using rule 96 (relop -> LESS_EQUAL .)
    FLOATCONST      reduce using rule 96 (relop -> LESS_EQUAL .)
    STRINGCONST     reduce using rule 96 (relop -> LESS_EQUAL .)
    TRUE            reduce using rule 96 (relop -> LESS_EQUAL .)
    FALSE           reduce using rule 96 (relop -> LESS_EQUAL .)


state 127

    (87) expression2optional -> relop . exp relop_quadruple
    (99) exp -> . term exp_quadruple exploop
    (105) term -> . fact term_quadruple termloop
    (112) fact -> . varconst
    (113) fact -> . O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis
    (121) varconst -> . varconstfunction
    (122) varconst -> . constants
    (123) varconstfunction -> . ID functionorlist
    (129) constants -> . INTCONST add_int_constant_to_dict
    (130) constants -> . FLOATCONST add_float_constant_to_dict
    (131) constants -> . STRINGCONST add_string_constant_to_dict
    (132) constants -> . booleanconst
    (133) booleanconst -> . TRUE add_bool_constant_to_dict
    (134) booleanconst -> . FALSE add_bool_constant_to_dict

    O_PARENTHESIS   shift and go to state 87
    ID              shift and go to state 94
    INTCONST        shift and go to state 92
    FLOATCONST      shift and go to state 86
    STRINGCONST     shift and go to state 89
    TRUE            shift and go to state 88
    FALSE           shift and go to state 97

    term                           shift and go to state 96
    varconst                       shift and go to state 98
    constants                      shift and go to state 95
    exp                            shift and go to state 154
    booleanconst                   shift and go to state 99
    varconstfunction               shift and go to state 90
    fact                           shift and go to state 101

state 128

    (129) constants -> INTCONST add_int_constant_to_dict .

    MULTIPLY        reduce using rule 129 (constants -> INTCONST add_int_constant_to_dict .)
    DIVIDE          reduce using rule 129 (constants -> INTCONST add_int_constant_to_dict .)
    MOD             reduce using rule 129 (constants -> INTCONST add_int_constant_to_dict .)
    SUM             reduce using rule 129 (constants -> INTCONST add_int_constant_to_dict .)
    MINUS           reduce using rule 129 (constants -> INTCONST add_int_constant_to_dict .)
    EQUALITY        reduce using rule 129 (constants -> INTCONST add_int_constant_to_dict .)
    GREATER         reduce using rule 129 (constants -> INTCONST add_int_constant_to_dict .)
    GREATER_EQUAL   reduce using rule 129 (constants -> INTCONST add_int_constant_to_dict .)
    LESS            reduce using rule 129 (constants -> INTCONST add_int_constant_to_dict .)
    LESS_EQUAL      reduce using rule 129 (constants -> INTCONST add_int_constant_to_dict .)
    DIFFERENT       reduce using rule 129 (constants -> INTCONST add_int_constant_to_dict .)
    AND             reduce using rule 129 (constants -> INTCONST add_int_constant_to_dict .)
    OR              reduce using rule 129 (constants -> INTCONST add_int_constant_to_dict .)
    SEMICOLON       reduce using rule 129 (constants -> INTCONST add_int_constant_to_dict .)
    COMMA           reduce using rule 129 (constants -> INTCONST add_int_constant_to_dict .)
    C_PARENTHESIS   reduce using rule 129 (constants -> INTCONST add_int_constant_to_dict .)
    C_S_BRACKET     reduce using rule 129 (constants -> INTCONST add_int_constant_to_dict .)
    C_BRACKET       reduce using rule 129 (constants -> INTCONST add_int_constant_to_dict .)


state 129

    (89) logicop -> AND .

    O_PARENTHESIS   reduce using rule 89 (logicop -> AND .)
    ID              reduce using rule 89 (logicop -> AND .)
    INTCONST        reduce using rule 89 (logicop -> AND .)
    FLOATCONST      reduce using rule 89 (logicop -> AND .)
    STRINGCONST     reduce using rule 89 (logicop -> AND .)
    TRUE            reduce using rule 89 (logicop -> AND .)
    FALSE           reduce using rule 89 (logicop -> AND .)


state 130

    (83) expression -> expression2 expressionoptional .

    COMMA           reduce using rule 83 (expression -> expression2 expressionoptional .)
    C_PARENTHESIS   reduce using rule 83 (expression -> expression2 expressionoptional .)
    SEMICOLON       reduce using rule 83 (expression -> expression2 expressionoptional .)
    C_S_BRACKET     reduce using rule 83 (expression -> expression2 expressionoptional .)
    C_BRACKET       reduce using rule 83 (expression -> expression2 expressionoptional .)


state 131

    (84) expressionoptional -> logicop . expression2 logic_op_quadruple
    (86) expression2 -> . exp expression2optional
    (99) exp -> . term exp_quadruple exploop
    (105) term -> . fact term_quadruple termloop
    (112) fact -> . varconst
    (113) fact -> . O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis
    (121) varconst -> . varconstfunction
    (122) varconst -> . constants
    (123) varconstfunction -> . ID functionorlist
    (129) constants -> . INTCONST add_int_constant_to_dict
    (130) constants -> . FLOATCONST add_float_constant_to_dict
    (131) constants -> . STRINGCONST add_string_constant_to_dict
    (132) constants -> . booleanconst
    (133) booleanconst -> . TRUE add_bool_constant_to_dict
    (134) booleanconst -> . FALSE add_bool_constant_to_dict

    O_PARENTHESIS   shift and go to state 87
    ID              shift and go to state 94
    INTCONST        shift and go to state 92
    FLOATCONST      shift and go to state 86
    STRINGCONST     shift and go to state 89
    TRUE            shift and go to state 88
    FALSE           shift and go to state 97

    varconstfunction               shift and go to state 90
    exp                            shift and go to state 91
    expression2                    shift and go to state 155
    constants                      shift and go to state 95
    term                           shift and go to state 96
    varconst                       shift and go to state 98
    booleanconst                   shift and go to state 99
    fact                           shift and go to state 101

state 132

    (90) logicop -> OR .

    O_PARENTHESIS   reduce using rule 90 (logicop -> OR .)
    ID              reduce using rule 90 (logicop -> OR .)
    INTCONST        reduce using rule 90 (logicop -> OR .)
    FLOATCONST      reduce using rule 90 (logicop -> OR .)
    STRINGCONST     reduce using rule 90 (logicop -> OR .)
    TRUE            reduce using rule 90 (logicop -> OR .)
    FALSE           reduce using rule 90 (logicop -> OR .)


state 133

    (127) functionorlist -> add_to_stack .

    MULTIPLY        reduce using rule 127 (functionorlist -> add_to_stack .)
    DIVIDE          reduce using rule 127 (functionorlist -> add_to_stack .)
    MOD             reduce using rule 127 (functionorlist -> add_to_stack .)
    SUM             reduce using rule 127 (functionorlist -> add_to_stack .)
    MINUS           reduce using rule 127 (functionorlist -> add_to_stack .)
    EQUALITY        reduce using rule 127 (functionorlist -> add_to_stack .)
    GREATER         reduce using rule 127 (functionorlist -> add_to_stack .)
    GREATER_EQUAL   reduce using rule 127 (functionorlist -> add_to_stack .)
    LESS            reduce using rule 127 (functionorlist -> add_to_stack .)
    LESS_EQUAL      reduce using rule 127 (functionorlist -> add_to_stack .)
    DIFFERENT       reduce using rule 127 (functionorlist -> add_to_stack .)
    AND             reduce using rule 127 (functionorlist -> add_to_stack .)
    OR              reduce using rule 127 (functionorlist -> add_to_stack .)
    C_PARENTHESIS   reduce using rule 127 (functionorlist -> add_to_stack .)
    COMMA           reduce using rule 127 (functionorlist -> add_to_stack .)
    SEMICOLON       reduce using rule 127 (functionorlist -> add_to_stack .)
    C_S_BRACKET     reduce using rule 127 (functionorlist -> add_to_stack .)
    C_BRACKET       reduce using rule 127 (functionorlist -> add_to_stack .)


state 134

    (126) functionorlist -> add_o_parenthesis . check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS generate_gosub add_c_parenthesis
    (153) check_function_exists -> .

    O_PARENTHESIS   reduce using rule 153 (check_function_exists -> .)

    check_function_exists          shift and go to state 156

state 135

    (123) varconstfunction -> ID functionorlist .

    MULTIPLY        reduce using rule 123 (varconstfunction -> ID functionorlist .)
    DIVIDE          reduce using rule 123 (varconstfunction -> ID functionorlist .)
    MOD             reduce using rule 123 (varconstfunction -> ID functionorlist .)
    SUM             reduce using rule 123 (varconstfunction -> ID functionorlist .)
    MINUS           reduce using rule 123 (varconstfunction -> ID functionorlist .)
    EQUALITY        reduce using rule 123 (varconstfunction -> ID functionorlist .)
    GREATER         reduce using rule 123 (varconstfunction -> ID functionorlist .)
    GREATER_EQUAL   reduce using rule 123 (varconstfunction -> ID functionorlist .)
    LESS            reduce using rule 123 (varconstfunction -> ID functionorlist .)
    LESS_EQUAL      reduce using rule 123 (varconstfunction -> ID functionorlist .)
    DIFFERENT       reduce using rule 123 (varconstfunction -> ID functionorlist .)
    AND             reduce using rule 123 (varconstfunction -> ID functionorlist .)
    OR              reduce using rule 123 (varconstfunction -> ID functionorlist .)
    COMMA           reduce using rule 123 (varconstfunction -> ID functionorlist .)
    C_PARENTHESIS   reduce using rule 123 (varconstfunction -> ID functionorlist .)
    C_S_BRACKET     reduce using rule 123 (varconstfunction -> ID functionorlist .)
    SEMICOLON       reduce using rule 123 (varconstfunction -> ID functionorlist .)
    C_BRACKET       reduce using rule 123 (varconstfunction -> ID functionorlist .)


state 136

    (125) functionorlist -> add_list_variable . add_o_parenthesis O_S_BRACKET expression C_S_BRACKET add_c_parenthesis add_list_index_to_stack
    (114) add_o_parenthesis -> .

    O_S_BRACKET     reduce using rule 114 (add_o_parenthesis -> .)

    add_o_parenthesis              shift and go to state 157

state 137

    (99) exp -> term exp_quadruple . exploop
    (101) exploop -> . addsub exp
    (102) exploop -> .
    (103) addsub -> . SUM
    (104) addsub -> . MINUS

    EQUALITY        reduce using rule 102 (exploop -> .)
    GREATER         reduce using rule 102 (exploop -> .)
    GREATER_EQUAL   reduce using rule 102 (exploop -> .)
    LESS            reduce using rule 102 (exploop -> .)
    LESS_EQUAL      reduce using rule 102 (exploop -> .)
    DIFFERENT       reduce using rule 102 (exploop -> .)
    AND             reduce using rule 102 (exploop -> .)
    OR              reduce using rule 102 (exploop -> .)
    C_PARENTHESIS   reduce using rule 102 (exploop -> .)
    COMMA           reduce using rule 102 (exploop -> .)
    SEMICOLON       reduce using rule 102 (exploop -> .)
    C_S_BRACKET     reduce using rule 102 (exploop -> .)
    C_BRACKET       reduce using rule 102 (exploop -> .)
    SUM             shift and go to state 158
    MINUS           shift and go to state 159

    exploop                        shift and go to state 160
    addsub                         shift and go to state 161

state 138

    (134) booleanconst -> FALSE add_bool_constant_to_dict .

    MULTIPLY        reduce using rule 134 (booleanconst -> FALSE add_bool_constant_to_dict .)
    DIVIDE          reduce using rule 134 (booleanconst -> FALSE add_bool_constant_to_dict .)
    MOD             reduce using rule 134 (booleanconst -> FALSE add_bool_constant_to_dict .)
    SUM             reduce using rule 134 (booleanconst -> FALSE add_bool_constant_to_dict .)
    MINUS           reduce using rule 134 (booleanconst -> FALSE add_bool_constant_to_dict .)
    EQUALITY        reduce using rule 134 (booleanconst -> FALSE add_bool_constant_to_dict .)
    GREATER         reduce using rule 134 (booleanconst -> FALSE add_bool_constant_to_dict .)
    GREATER_EQUAL   reduce using rule 134 (booleanconst -> FALSE add_bool_constant_to_dict .)
    LESS            reduce using rule 134 (booleanconst -> FALSE add_bool_constant_to_dict .)
    LESS_EQUAL      reduce using rule 134 (booleanconst -> FALSE add_bool_constant_to_dict .)
    DIFFERENT       reduce using rule 134 (booleanconst -> FALSE add_bool_constant_to_dict .)
    AND             reduce using rule 134 (booleanconst -> FALSE add_bool_constant_to_dict .)
    OR              reduce using rule 134 (booleanconst -> FALSE add_bool_constant_to_dict .)
    C_PARENTHESIS   reduce using rule 134 (booleanconst -> FALSE add_bool_constant_to_dict .)
    COMMA           reduce using rule 134 (booleanconst -> FALSE add_bool_constant_to_dict .)
    SEMICOLON       reduce using rule 134 (booleanconst -> FALSE add_bool_constant_to_dict .)
    C_S_BRACKET     reduce using rule 134 (booleanconst -> FALSE add_bool_constant_to_dict .)
    C_BRACKET       reduce using rule 134 (booleanconst -> FALSE add_bool_constant_to_dict .)


state 139

    (148) timesloop -> TIMES O_PARENTHESIS expression C_PARENTHESIS . start_times block end_times
    (150) start_times -> .

    O_BRACKET       reduce using rule 150 (start_times -> .)

    start_times                    shift and go to state 162

state 140

    (105) term -> fact term_quadruple . termloop
    (107) termloop -> . divmult term
    (108) termloop -> .
    (109) divmult -> . MULTIPLY
    (110) divmult -> . DIVIDE
    (111) divmult -> . MOD

    SUM             reduce using rule 108 (termloop -> .)
    MINUS           reduce using rule 108 (termloop -> .)
    EQUALITY        reduce using rule 108 (termloop -> .)
    GREATER         reduce using rule 108 (termloop -> .)
    GREATER_EQUAL   reduce using rule 108 (termloop -> .)
    LESS            reduce using rule 108 (termloop -> .)
    LESS_EQUAL      reduce using rule 108 (termloop -> .)
    DIFFERENT       reduce using rule 108 (termloop -> .)
    AND             reduce using rule 108 (termloop -> .)
    OR              reduce using rule 108 (termloop -> .)
    C_PARENTHESIS   reduce using rule 108 (termloop -> .)
    COMMA           reduce using rule 108 (termloop -> .)
    SEMICOLON       reduce using rule 108 (termloop -> .)
    C_S_BRACKET     reduce using rule 108 (termloop -> .)
    C_BRACKET       reduce using rule 108 (termloop -> .)
    MULTIPLY        shift and go to state 165
    DIVIDE          shift and go to state 163
    MOD             shift and go to state 167

    termloop                       shift and go to state 164
    divmult                        shift and go to state 166

state 141

    (143) whileloop -> WHILE start_while O_PARENTHESIS expression . C_PARENTHESIS condition_while block end_while

    C_PARENTHESIS   shift and go to state 168


state 142

    (58) writtingloop -> start_printing expression . print_quadruple optionalwritting
    (57) print_quadruple -> .

    COMMA           reduce using rule 57 (print_quadruple -> .)
    C_PARENTHESIS   reduce using rule 57 (print_quadruple -> .)

    print_quadruple                shift and go to state 169

state 143

    (55) writting -> PRINT O_PARENTHESIS writtingloop C_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 170


state 144

    (54) assignation -> var_assign EQUALS add_equals expression . equals_quadruple SEMICOLON
    (64) equals_quadruple -> .

    SEMICOLON       reduce using rule 64 (equals_quadruple -> .)

    equals_quadruple               shift and go to state 171

state 145

    (63) normalinit -> type var EQUALS add_equals . expression equals_quadruple SEMICOLON
    (83) expression -> . expression2 expressionoptional
    (86) expression2 -> . exp expression2optional
    (99) exp -> . term exp_quadruple exploop
    (105) term -> . fact term_quadruple termloop
    (112) fact -> . varconst
    (113) fact -> . O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis
    (121) varconst -> . varconstfunction
    (122) varconst -> . constants
    (123) varconstfunction -> . ID functionorlist
    (129) constants -> . INTCONST add_int_constant_to_dict
    (130) constants -> . FLOATCONST add_float_constant_to_dict
    (131) constants -> . STRINGCONST add_string_constant_to_dict
    (132) constants -> . booleanconst
    (133) booleanconst -> . TRUE add_bool_constant_to_dict
    (134) booleanconst -> . FALSE add_bool_constant_to_dict

    O_PARENTHESIS   shift and go to state 87
    ID              shift and go to state 94
    INTCONST        shift and go to state 92
    FLOATCONST      shift and go to state 86
    STRINGCONST     shift and go to state 89
    TRUE            shift and go to state 88
    FALSE           shift and go to state 97

    varconstfunction               shift and go to state 90
    expression2                    shift and go to state 93
    constants                      shift and go to state 95
    term                           shift and go to state 96
    varconst                       shift and go to state 98
    exp                            shift and go to state 91
    booleanconst                   shift and go to state 99
    expression                     shift and go to state 172
    fact                           shift and go to state 101

state 146

    (152) functioncall -> ID add_o_parenthesis check_function_exists O_PARENTHESIS . parametersinput C_PARENTHESIS SEMICOLON generate_gosub add_c_parenthesis
    (155) parametersinput -> . expression push_type_to_function_options generate_parameter_quadruple parametersinputloop check_params_order
    (156) parametersinput -> .
    (83) expression -> . expression2 expressionoptional
    (86) expression2 -> . exp expression2optional
    (99) exp -> . term exp_quadruple exploop
    (105) term -> . fact term_quadruple termloop
    (112) fact -> . varconst
    (113) fact -> . O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis
    (121) varconst -> . varconstfunction
    (122) varconst -> . constants
    (123) varconstfunction -> . ID functionorlist
    (129) constants -> . INTCONST add_int_constant_to_dict
    (130) constants -> . FLOATCONST add_float_constant_to_dict
    (131) constants -> . STRINGCONST add_string_constant_to_dict
    (132) constants -> . booleanconst
    (133) booleanconst -> . TRUE add_bool_constant_to_dict
    (134) booleanconst -> . FALSE add_bool_constant_to_dict

    C_PARENTHESIS   reduce using rule 156 (parametersinput -> .)
    O_PARENTHESIS   shift and go to state 87
    ID              shift and go to state 94
    INTCONST        shift and go to state 92
    FLOATCONST      shift and go to state 86
    STRINGCONST     shift and go to state 89
    TRUE            shift and go to state 88
    FALSE           shift and go to state 97

    varconstfunction               shift and go to state 90
    exp                            shift and go to state 91
    parametersinput                shift and go to state 173
    expression2                    shift and go to state 93
    constants                      shift and go to state 95
    term                           shift and go to state 96
    varconst                       shift and go to state 98
    booleanconst                   shift and go to state 99
    expression                     shift and go to state 174
    fact                           shift and go to state 101

state 147

    (118) listaccess -> add_list_variable add_o_parenthesis O_S_BRACKET . expression C_S_BRACKET add_c_parenthesis add_list_index_to_stack
    (83) expression -> . expression2 expressionoptional
    (86) expression2 -> . exp expression2optional
    (99) exp -> . term exp_quadruple exploop
    (105) term -> . fact term_quadruple termloop
    (112) fact -> . varconst
    (113) fact -> . O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis
    (121) varconst -> . varconstfunction
    (122) varconst -> . constants
    (123) varconstfunction -> . ID functionorlist
    (129) constants -> . INTCONST add_int_constant_to_dict
    (130) constants -> . FLOATCONST add_float_constant_to_dict
    (131) constants -> . STRINGCONST add_string_constant_to_dict
    (132) constants -> . booleanconst
    (133) booleanconst -> . TRUE add_bool_constant_to_dict
    (134) booleanconst -> . FALSE add_bool_constant_to_dict

    O_PARENTHESIS   shift and go to state 87
    ID              shift and go to state 94
    INTCONST        shift and go to state 92
    FLOATCONST      shift and go to state 86
    STRINGCONST     shift and go to state 89
    TRUE            shift and go to state 88
    FALSE           shift and go to state 97

    varconstfunction               shift and go to state 90
    exp                            shift and go to state 91
    expression2                    shift and go to state 93
    constants                      shift and go to state 95
    term                           shift and go to state 96
    varconst                       shift and go to state 98
    booleanconst                   shift and go to state 99
    expression                     shift and go to state 175
    fact                           shift and go to state 101

state 148

    (74) condition -> IF O_PARENTHESIS expression C_PARENTHESIS . start_condition block else end_condition
    (80) start_condition -> .

    O_BRACKET       reduce using rule 80 (start_condition -> .)

    start_condition                shift and go to state 176

state 149

    (66) listinit -> LIST type ID EQUALS . start_list list SEMICOLON
    (68) start_list -> .

    O_S_BRACKET     reduce using rule 68 (start_list -> .)

    start_list                     shift and go to state 177

state 150

    (18) function_with_return_def -> ID add_function_id_to_options add_function_to_global_variables check_current_quadruple O_PARENTHESIS parameters C_PARENTHESIS . add_function_init_to_dict functionblock
    (11) add_function_init_to_dict -> .

    O_BRACKET       reduce using rule 11 (add_function_init_to_dict -> .)

    add_function_init_to_dict      shift and go to state 178

state 151

    (20) function_def -> ID add_function_id_to_options check_current_quadruple O_PARENTHESIS parameters C_PARENTHESIS add_function_init_to_dict . block
    (31) block -> . O_BRACKET statutesloop C_BRACKET

    O_BRACKET       shift and go to state 33

    block                          shift and go to state 179

state 152

    (165) parametersloop -> COMMA parameterinit . parametersloop
    (165) parametersloop -> . COMMA parameterinit parametersloop
    (166) parametersloop -> .

    COMMA           shift and go to state 115
    C_PARENTHESIS   reduce using rule 166 (parametersloop -> .)

    parametersloop                 shift and go to state 180

state 153

    (113) fact -> O_PARENTHESIS add_o_parenthesis expression . C_PARENTHESIS add_c_parenthesis

    C_PARENTHESIS   shift and go to state 181


state 154

    (87) expression2optional -> relop exp . relop_quadruple
    (98) relop_quadruple -> .

    AND             reduce using rule 98 (relop_quadruple -> .)
    OR              reduce using rule 98 (relop_quadruple -> .)
    C_PARENTHESIS   reduce using rule 98 (relop_quadruple -> .)
    COMMA           reduce using rule 98 (relop_quadruple -> .)
    SEMICOLON       reduce using rule 98 (relop_quadruple -> .)
    C_S_BRACKET     reduce using rule 98 (relop_quadruple -> .)
    C_BRACKET       reduce using rule 98 (relop_quadruple -> .)

    relop_quadruple                shift and go to state 182

state 155

    (84) expressionoptional -> logicop expression2 . logic_op_quadruple
    (91) logic_op_quadruple -> .

    C_PARENTHESIS   reduce using rule 91 (logic_op_quadruple -> .)
    COMMA           reduce using rule 91 (logic_op_quadruple -> .)
    SEMICOLON       reduce using rule 91 (logic_op_quadruple -> .)
    C_S_BRACKET     reduce using rule 91 (logic_op_quadruple -> .)
    C_BRACKET       reduce using rule 91 (logic_op_quadruple -> .)

    logic_op_quadruple             shift and go to state 183

state 156

    (126) functionorlist -> add_o_parenthesis check_function_exists . O_PARENTHESIS parametersinput C_PARENTHESIS generate_gosub add_c_parenthesis

    O_PARENTHESIS   shift and go to state 184


state 157

    (125) functionorlist -> add_list_variable add_o_parenthesis . O_S_BRACKET expression C_S_BRACKET add_c_parenthesis add_list_index_to_stack

    O_S_BRACKET     shift and go to state 185


state 158

    (103) addsub -> SUM .

    O_PARENTHESIS   reduce using rule 103 (addsub -> SUM .)
    ID              reduce using rule 103 (addsub -> SUM .)
    INTCONST        reduce using rule 103 (addsub -> SUM .)
    FLOATCONST      reduce using rule 103 (addsub -> SUM .)
    STRINGCONST     reduce using rule 103 (addsub -> SUM .)
    TRUE            reduce using rule 103 (addsub -> SUM .)
    FALSE           reduce using rule 103 (addsub -> SUM .)


state 159

    (104) addsub -> MINUS .

    O_PARENTHESIS   reduce using rule 104 (addsub -> MINUS .)
    ID              reduce using rule 104 (addsub -> MINUS .)
    INTCONST        reduce using rule 104 (addsub -> MINUS .)
    FLOATCONST      reduce using rule 104 (addsub -> MINUS .)
    STRINGCONST     reduce using rule 104 (addsub -> MINUS .)
    TRUE            reduce using rule 104 (addsub -> MINUS .)
    FALSE           reduce using rule 104 (addsub -> MINUS .)


state 160

    (99) exp -> term exp_quadruple exploop .

    EQUALITY        reduce using rule 99 (exp -> term exp_quadruple exploop .)
    GREATER         reduce using rule 99 (exp -> term exp_quadruple exploop .)
    GREATER_EQUAL   reduce using rule 99 (exp -> term exp_quadruple exploop .)
    LESS            reduce using rule 99 (exp -> term exp_quadruple exploop .)
    LESS_EQUAL      reduce using rule 99 (exp -> term exp_quadruple exploop .)
    DIFFERENT       reduce using rule 99 (exp -> term exp_quadruple exploop .)
    AND             reduce using rule 99 (exp -> term exp_quadruple exploop .)
    OR              reduce using rule 99 (exp -> term exp_quadruple exploop .)
    COMMA           reduce using rule 99 (exp -> term exp_quadruple exploop .)
    C_PARENTHESIS   reduce using rule 99 (exp -> term exp_quadruple exploop .)
    SEMICOLON       reduce using rule 99 (exp -> term exp_quadruple exploop .)
    C_S_BRACKET     reduce using rule 99 (exp -> term exp_quadruple exploop .)
    C_BRACKET       reduce using rule 99 (exp -> term exp_quadruple exploop .)


state 161

    (101) exploop -> addsub . exp
    (99) exp -> . term exp_quadruple exploop
    (105) term -> . fact term_quadruple termloop
    (112) fact -> . varconst
    (113) fact -> . O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis
    (121) varconst -> . varconstfunction
    (122) varconst -> . constants
    (123) varconstfunction -> . ID functionorlist
    (129) constants -> . INTCONST add_int_constant_to_dict
    (130) constants -> . FLOATCONST add_float_constant_to_dict
    (131) constants -> . STRINGCONST add_string_constant_to_dict
    (132) constants -> . booleanconst
    (133) booleanconst -> . TRUE add_bool_constant_to_dict
    (134) booleanconst -> . FALSE add_bool_constant_to_dict

    O_PARENTHESIS   shift and go to state 87
    ID              shift and go to state 94
    INTCONST        shift and go to state 92
    FLOATCONST      shift and go to state 86
    STRINGCONST     shift and go to state 89
    TRUE            shift and go to state 88
    FALSE           shift and go to state 97

    term                           shift and go to state 96
    varconst                       shift and go to state 98
    constants                      shift and go to state 95
    exp                            shift and go to state 186
    booleanconst                   shift and go to state 99
    varconstfunction               shift and go to state 90
    fact                           shift and go to state 101

state 162

    (148) timesloop -> TIMES O_PARENTHESIS expression C_PARENTHESIS start_times . block end_times
    (31) block -> . O_BRACKET statutesloop C_BRACKET

    O_BRACKET       shift and go to state 33

    block                          shift and go to state 187

state 163

    (110) divmult -> DIVIDE .

    O_PARENTHESIS   reduce using rule 110 (divmult -> DIVIDE .)
    ID              reduce using rule 110 (divmult -> DIVIDE .)
    INTCONST        reduce using rule 110 (divmult -> DIVIDE .)
    FLOATCONST      reduce using rule 110 (divmult -> DIVIDE .)
    STRINGCONST     reduce using rule 110 (divmult -> DIVIDE .)
    TRUE            reduce using rule 110 (divmult -> DIVIDE .)
    FALSE           reduce using rule 110 (divmult -> DIVIDE .)


state 164

    (105) term -> fact term_quadruple termloop .

    SUM             reduce using rule 105 (term -> fact term_quadruple termloop .)
    MINUS           reduce using rule 105 (term -> fact term_quadruple termloop .)
    AND             reduce using rule 105 (term -> fact term_quadruple termloop .)
    OR              reduce using rule 105 (term -> fact term_quadruple termloop .)
    C_PARENTHESIS   reduce using rule 105 (term -> fact term_quadruple termloop .)
    COMMA           reduce using rule 105 (term -> fact term_quadruple termloop .)
    SEMICOLON       reduce using rule 105 (term -> fact term_quadruple termloop .)
    C_S_BRACKET     reduce using rule 105 (term -> fact term_quadruple termloop .)
    C_BRACKET       reduce using rule 105 (term -> fact term_quadruple termloop .)
    EQUALITY        reduce using rule 105 (term -> fact term_quadruple termloop .)
    GREATER         reduce using rule 105 (term -> fact term_quadruple termloop .)
    GREATER_EQUAL   reduce using rule 105 (term -> fact term_quadruple termloop .)
    LESS            reduce using rule 105 (term -> fact term_quadruple termloop .)
    LESS_EQUAL      reduce using rule 105 (term -> fact term_quadruple termloop .)
    DIFFERENT       reduce using rule 105 (term -> fact term_quadruple termloop .)


state 165

    (109) divmult -> MULTIPLY .

    O_PARENTHESIS   reduce using rule 109 (divmult -> MULTIPLY .)
    ID              reduce using rule 109 (divmult -> MULTIPLY .)
    INTCONST        reduce using rule 109 (divmult -> MULTIPLY .)
    FLOATCONST      reduce using rule 109 (divmult -> MULTIPLY .)
    STRINGCONST     reduce using rule 109 (divmult -> MULTIPLY .)
    TRUE            reduce using rule 109 (divmult -> MULTIPLY .)
    FALSE           reduce using rule 109 (divmult -> MULTIPLY .)


state 166

    (107) termloop -> divmult . term
    (105) term -> . fact term_quadruple termloop
    (112) fact -> . varconst
    (113) fact -> . O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis
    (121) varconst -> . varconstfunction
    (122) varconst -> . constants
    (123) varconstfunction -> . ID functionorlist
    (129) constants -> . INTCONST add_int_constant_to_dict
    (130) constants -> . FLOATCONST add_float_constant_to_dict
    (131) constants -> . STRINGCONST add_string_constant_to_dict
    (132) constants -> . booleanconst
    (133) booleanconst -> . TRUE add_bool_constant_to_dict
    (134) booleanconst -> . FALSE add_bool_constant_to_dict

    O_PARENTHESIS   shift and go to state 87
    ID              shift and go to state 94
    INTCONST        shift and go to state 92
    FLOATCONST      shift and go to state 86
    STRINGCONST     shift and go to state 89
    TRUE            shift and go to state 88
    FALSE           shift and go to state 97

    term                           shift and go to state 188
    varconstfunction               shift and go to state 90
    varconst                       shift and go to state 98
    constants                      shift and go to state 95
    booleanconst                   shift and go to state 99
    fact                           shift and go to state 101

state 167

    (111) divmult -> MOD .

    O_PARENTHESIS   reduce using rule 111 (divmult -> MOD .)
    ID              reduce using rule 111 (divmult -> MOD .)
    INTCONST        reduce using rule 111 (divmult -> MOD .)
    FLOATCONST      reduce using rule 111 (divmult -> MOD .)
    STRINGCONST     reduce using rule 111 (divmult -> MOD .)
    TRUE            reduce using rule 111 (divmult -> MOD .)
    FALSE           reduce using rule 111 (divmult -> MOD .)


state 168

    (143) whileloop -> WHILE start_while O_PARENTHESIS expression C_PARENTHESIS . condition_while block end_while
    (146) condition_while -> .

    O_BRACKET       reduce using rule 146 (condition_while -> .)

    condition_while                shift and go to state 189

state 169

    (58) writtingloop -> start_printing expression print_quadruple . optionalwritting
    (59) optionalwritting -> . COMMA writtingloop
    (60) optionalwritting -> .

    COMMA           shift and go to state 191
    C_PARENTHESIS   reduce using rule 60 (optionalwritting -> .)

    optionalwritting               shift and go to state 190

state 170

    (55) writting -> PRINT O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON .

    RETURN          reduce using rule 55 (writting -> PRINT O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON .)
    IF              reduce using rule 55 (writting -> PRINT O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON .)
    PRINT           reduce using rule 55 (writting -> PRINT O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON .)
    ID              reduce using rule 55 (writting -> PRINT O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON .)
    LIST            reduce using rule 55 (writting -> PRINT O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON .)
    WHILE           reduce using rule 55 (writting -> PRINT O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON .)
    TIMES           reduce using rule 55 (writting -> PRINT O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON .)
    BOOL            reduce using rule 55 (writting -> PRINT O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON .)
    INT             reduce using rule 55 (writting -> PRINT O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON .)
    FLOAT           reduce using rule 55 (writting -> PRINT O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON .)
    STRING          reduce using rule 55 (writting -> PRINT O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON .)
    C_BRACKET       reduce using rule 55 (writting -> PRINT O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON .)


state 171

    (54) assignation -> var_assign EQUALS add_equals expression equals_quadruple . SEMICOLON

    SEMICOLON       shift and go to state 192


state 172

    (63) normalinit -> type var EQUALS add_equals expression . equals_quadruple SEMICOLON
    (64) equals_quadruple -> .

    SEMICOLON       reduce using rule 64 (equals_quadruple -> .)

    equals_quadruple               shift and go to state 193

state 173

    (152) functioncall -> ID add_o_parenthesis check_function_exists O_PARENTHESIS parametersinput . C_PARENTHESIS SEMICOLON generate_gosub add_c_parenthesis

    C_PARENTHESIS   shift and go to state 194


state 174

    (155) parametersinput -> expression . push_type_to_function_options generate_parameter_quadruple parametersinputloop check_params_order
    (159) push_type_to_function_options -> .

    COMMA           reduce using rule 159 (push_type_to_function_options -> .)
    C_PARENTHESIS   reduce using rule 159 (push_type_to_function_options -> .)

    push_type_to_function_options  shift and go to state 195

state 175

    (118) listaccess -> add_list_variable add_o_parenthesis O_S_BRACKET expression . C_S_BRACKET add_c_parenthesis add_list_index_to_stack

    C_S_BRACKET     shift and go to state 196


state 176

    (74) condition -> IF O_PARENTHESIS expression C_PARENTHESIS start_condition . block else end_condition
    (31) block -> . O_BRACKET statutesloop C_BRACKET

    O_BRACKET       shift and go to state 33

    block                          shift and go to state 197

state 177

    (66) listinit -> LIST type ID EQUALS start_list . list SEMICOLON
    (67) list -> . O_S_BRACKET listelements C_S_BRACKET

    O_S_BRACKET     shift and go to state 199

    list                           shift and go to state 198

state 178

    (18) function_with_return_def -> ID add_function_id_to_options add_function_to_global_variables check_current_quadruple O_PARENTHESIS parameters C_PARENTHESIS add_function_init_to_dict . functionblock
    (32) functionblock -> . O_BRACKET functionstatutesloop C_BRACKET

    O_BRACKET       shift and go to state 200

    functionblock                  shift and go to state 201

state 179

    (20) function_def -> ID add_function_id_to_options check_current_quadruple O_PARENTHESIS parameters C_PARENTHESIS add_function_init_to_dict block .

    FUNCTION        reduce using rule 20 (function_def -> ID add_function_id_to_options check_current_quadruple O_PARENTHESIS parameters C_PARENTHESIS add_function_init_to_dict block .)
    MAIN            reduce using rule 20 (function_def -> ID add_function_id_to_options check_current_quadruple O_PARENTHESIS parameters C_PARENTHESIS add_function_init_to_dict block .)


state 180

    (165) parametersloop -> COMMA parameterinit parametersloop .

    C_PARENTHESIS   reduce using rule 165 (parametersloop -> COMMA parameterinit parametersloop .)


state 181

    (113) fact -> O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS . add_c_parenthesis
    (115) add_c_parenthesis -> .

    MULTIPLY        reduce using rule 115 (add_c_parenthesis -> .)
    DIVIDE          reduce using rule 115 (add_c_parenthesis -> .)
    MOD             reduce using rule 115 (add_c_parenthesis -> .)
    SUM             reduce using rule 115 (add_c_parenthesis -> .)
    MINUS           reduce using rule 115 (add_c_parenthesis -> .)
    EQUALITY        reduce using rule 115 (add_c_parenthesis -> .)
    GREATER         reduce using rule 115 (add_c_parenthesis -> .)
    GREATER_EQUAL   reduce using rule 115 (add_c_parenthesis -> .)
    LESS            reduce using rule 115 (add_c_parenthesis -> .)
    LESS_EQUAL      reduce using rule 115 (add_c_parenthesis -> .)
    DIFFERENT       reduce using rule 115 (add_c_parenthesis -> .)
    AND             reduce using rule 115 (add_c_parenthesis -> .)
    OR              reduce using rule 115 (add_c_parenthesis -> .)
    C_PARENTHESIS   reduce using rule 115 (add_c_parenthesis -> .)
    COMMA           reduce using rule 115 (add_c_parenthesis -> .)
    SEMICOLON       reduce using rule 115 (add_c_parenthesis -> .)
    C_S_BRACKET     reduce using rule 115 (add_c_parenthesis -> .)
    C_BRACKET       reduce using rule 115 (add_c_parenthesis -> .)

    add_c_parenthesis              shift and go to state 202

state 182

    (87) expression2optional -> relop exp relop_quadruple .

    AND             reduce using rule 87 (expression2optional -> relop exp relop_quadruple .)
    OR              reduce using rule 87 (expression2optional -> relop exp relop_quadruple .)
    C_PARENTHESIS   reduce using rule 87 (expression2optional -> relop exp relop_quadruple .)
    COMMA           reduce using rule 87 (expression2optional -> relop exp relop_quadruple .)
    SEMICOLON       reduce using rule 87 (expression2optional -> relop exp relop_quadruple .)
    C_S_BRACKET     reduce using rule 87 (expression2optional -> relop exp relop_quadruple .)
    C_BRACKET       reduce using rule 87 (expression2optional -> relop exp relop_quadruple .)


state 183

    (84) expressionoptional -> logicop expression2 logic_op_quadruple .

    C_PARENTHESIS   reduce using rule 84 (expressionoptional -> logicop expression2 logic_op_quadruple .)
    COMMA           reduce using rule 84 (expressionoptional -> logicop expression2 logic_op_quadruple .)
    SEMICOLON       reduce using rule 84 (expressionoptional -> logicop expression2 logic_op_quadruple .)
    C_S_BRACKET     reduce using rule 84 (expressionoptional -> logicop expression2 logic_op_quadruple .)
    C_BRACKET       reduce using rule 84 (expressionoptional -> logicop expression2 logic_op_quadruple .)


state 184

    (126) functionorlist -> add_o_parenthesis check_function_exists O_PARENTHESIS . parametersinput C_PARENTHESIS generate_gosub add_c_parenthesis
    (155) parametersinput -> . expression push_type_to_function_options generate_parameter_quadruple parametersinputloop check_params_order
    (156) parametersinput -> .
    (83) expression -> . expression2 expressionoptional
    (86) expression2 -> . exp expression2optional
    (99) exp -> . term exp_quadruple exploop
    (105) term -> . fact term_quadruple termloop
    (112) fact -> . varconst
    (113) fact -> . O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis
    (121) varconst -> . varconstfunction
    (122) varconst -> . constants
    (123) varconstfunction -> . ID functionorlist
    (129) constants -> . INTCONST add_int_constant_to_dict
    (130) constants -> . FLOATCONST add_float_constant_to_dict
    (131) constants -> . STRINGCONST add_string_constant_to_dict
    (132) constants -> . booleanconst
    (133) booleanconst -> . TRUE add_bool_constant_to_dict
    (134) booleanconst -> . FALSE add_bool_constant_to_dict

    C_PARENTHESIS   reduce using rule 156 (parametersinput -> .)
    O_PARENTHESIS   shift and go to state 87
    ID              shift and go to state 94
    INTCONST        shift and go to state 92
    FLOATCONST      shift and go to state 86
    STRINGCONST     shift and go to state 89
    TRUE            shift and go to state 88
    FALSE           shift and go to state 97

    varconstfunction               shift and go to state 90
    exp                            shift and go to state 91
    parametersinput                shift and go to state 203
    expression2                    shift and go to state 93
    constants                      shift and go to state 95
    term                           shift and go to state 96
    varconst                       shift and go to state 98
    booleanconst                   shift and go to state 99
    expression                     shift and go to state 174
    fact                           shift and go to state 101

state 185

    (125) functionorlist -> add_list_variable add_o_parenthesis O_S_BRACKET . expression C_S_BRACKET add_c_parenthesis add_list_index_to_stack
    (83) expression -> . expression2 expressionoptional
    (86) expression2 -> . exp expression2optional
    (99) exp -> . term exp_quadruple exploop
    (105) term -> . fact term_quadruple termloop
    (112) fact -> . varconst
    (113) fact -> . O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis
    (121) varconst -> . varconstfunction
    (122) varconst -> . constants
    (123) varconstfunction -> . ID functionorlist
    (129) constants -> . INTCONST add_int_constant_to_dict
    (130) constants -> . FLOATCONST add_float_constant_to_dict
    (131) constants -> . STRINGCONST add_string_constant_to_dict
    (132) constants -> . booleanconst
    (133) booleanconst -> . TRUE add_bool_constant_to_dict
    (134) booleanconst -> . FALSE add_bool_constant_to_dict

    O_PARENTHESIS   shift and go to state 87
    ID              shift and go to state 94
    INTCONST        shift and go to state 92
    FLOATCONST      shift and go to state 86
    STRINGCONST     shift and go to state 89
    TRUE            shift and go to state 88
    FALSE           shift and go to state 97

    varconstfunction               shift and go to state 90
    exp                            shift and go to state 91
    expression2                    shift and go to state 93
    constants                      shift and go to state 95
    term                           shift and go to state 96
    varconst                       shift and go to state 98
    booleanconst                   shift and go to state 99
    expression                     shift and go to state 204
    fact                           shift and go to state 101

state 186

    (101) exploop -> addsub exp .

    EQUALITY        reduce using rule 101 (exploop -> addsub exp .)
    GREATER         reduce using rule 101 (exploop -> addsub exp .)
    GREATER_EQUAL   reduce using rule 101 (exploop -> addsub exp .)
    LESS            reduce using rule 101 (exploop -> addsub exp .)
    LESS_EQUAL      reduce using rule 101 (exploop -> addsub exp .)
    DIFFERENT       reduce using rule 101 (exploop -> addsub exp .)
    AND             reduce using rule 101 (exploop -> addsub exp .)
    OR              reduce using rule 101 (exploop -> addsub exp .)
    C_PARENTHESIS   reduce using rule 101 (exploop -> addsub exp .)
    COMMA           reduce using rule 101 (exploop -> addsub exp .)
    SEMICOLON       reduce using rule 101 (exploop -> addsub exp .)
    C_S_BRACKET     reduce using rule 101 (exploop -> addsub exp .)
    C_BRACKET       reduce using rule 101 (exploop -> addsub exp .)


state 187

    (148) timesloop -> TIMES O_PARENTHESIS expression C_PARENTHESIS start_times block . end_times
    (151) end_times -> .

    IF              reduce using rule 151 (end_times -> .)
    PRINT           reduce using rule 151 (end_times -> .)
    ID              reduce using rule 151 (end_times -> .)
    LIST            reduce using rule 151 (end_times -> .)
    WHILE           reduce using rule 151 (end_times -> .)
    TIMES           reduce using rule 151 (end_times -> .)
    BOOL            reduce using rule 151 (end_times -> .)
    INT             reduce using rule 151 (end_times -> .)
    FLOAT           reduce using rule 151 (end_times -> .)
    STRING          reduce using rule 151 (end_times -> .)
    C_BRACKET       reduce using rule 151 (end_times -> .)

    end_times                      shift and go to state 205

state 188

    (107) termloop -> divmult term .

    SUM             reduce using rule 107 (termloop -> divmult term .)
    MINUS           reduce using rule 107 (termloop -> divmult term .)
    EQUALITY        reduce using rule 107 (termloop -> divmult term .)
    GREATER         reduce using rule 107 (termloop -> divmult term .)
    GREATER_EQUAL   reduce using rule 107 (termloop -> divmult term .)
    LESS            reduce using rule 107 (termloop -> divmult term .)
    LESS_EQUAL      reduce using rule 107 (termloop -> divmult term .)
    DIFFERENT       reduce using rule 107 (termloop -> divmult term .)
    AND             reduce using rule 107 (termloop -> divmult term .)
    OR              reduce using rule 107 (termloop -> divmult term .)
    C_PARENTHESIS   reduce using rule 107 (termloop -> divmult term .)
    COMMA           reduce using rule 107 (termloop -> divmult term .)
    SEMICOLON       reduce using rule 107 (termloop -> divmult term .)
    C_S_BRACKET     reduce using rule 107 (termloop -> divmult term .)
    C_BRACKET       reduce using rule 107 (termloop -> divmult term .)


state 189

    (143) whileloop -> WHILE start_while O_PARENTHESIS expression C_PARENTHESIS condition_while . block end_while
    (31) block -> . O_BRACKET statutesloop C_BRACKET

    O_BRACKET       shift and go to state 33

    block                          shift and go to state 206

state 190

    (58) writtingloop -> start_printing expression print_quadruple optionalwritting .

    C_PARENTHESIS   reduce using rule 58 (writtingloop -> start_printing expression print_quadruple optionalwritting .)


state 191

    (59) optionalwritting -> COMMA . writtingloop
    (58) writtingloop -> . start_printing expression print_quadruple optionalwritting
    (56) start_printing -> .

    O_PARENTHESIS   reduce using rule 56 (start_printing -> .)
    ID              reduce using rule 56 (start_printing -> .)
    INTCONST        reduce using rule 56 (start_printing -> .)
    FLOATCONST      reduce using rule 56 (start_printing -> .)
    STRINGCONST     reduce using rule 56 (start_printing -> .)
    TRUE            reduce using rule 56 (start_printing -> .)
    FALSE           reduce using rule 56 (start_printing -> .)

    writtingloop                   shift and go to state 207
    start_printing                 shift and go to state 103

state 192

    (54) assignation -> var_assign EQUALS add_equals expression equals_quadruple SEMICOLON .

    RETURN          reduce using rule 54 (assignation -> var_assign EQUALS add_equals expression equals_quadruple SEMICOLON .)
    IF              reduce using rule 54 (assignation -> var_assign EQUALS add_equals expression equals_quadruple SEMICOLON .)
    PRINT           reduce using rule 54 (assignation -> var_assign EQUALS add_equals expression equals_quadruple SEMICOLON .)
    ID              reduce using rule 54 (assignation -> var_assign EQUALS add_equals expression equals_quadruple SEMICOLON .)
    LIST            reduce using rule 54 (assignation -> var_assign EQUALS add_equals expression equals_quadruple SEMICOLON .)
    WHILE           reduce using rule 54 (assignation -> var_assign EQUALS add_equals expression equals_quadruple SEMICOLON .)
    TIMES           reduce using rule 54 (assignation -> var_assign EQUALS add_equals expression equals_quadruple SEMICOLON .)
    BOOL            reduce using rule 54 (assignation -> var_assign EQUALS add_equals expression equals_quadruple SEMICOLON .)
    INT             reduce using rule 54 (assignation -> var_assign EQUALS add_equals expression equals_quadruple SEMICOLON .)
    FLOAT           reduce using rule 54 (assignation -> var_assign EQUALS add_equals expression equals_quadruple SEMICOLON .)
    STRING          reduce using rule 54 (assignation -> var_assign EQUALS add_equals expression equals_quadruple SEMICOLON .)
    C_BRACKET       reduce using rule 54 (assignation -> var_assign EQUALS add_equals expression equals_quadruple SEMICOLON .)


state 193

    (63) normalinit -> type var EQUALS add_equals expression equals_quadruple . SEMICOLON

    SEMICOLON       shift and go to state 208


state 194

    (152) functioncall -> ID add_o_parenthesis check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS . SEMICOLON generate_gosub add_c_parenthesis

    SEMICOLON       shift and go to state 209


state 195

    (155) parametersinput -> expression push_type_to_function_options . generate_parameter_quadruple parametersinputloop check_params_order
    (161) generate_parameter_quadruple -> .

    COMMA           reduce using rule 161 (generate_parameter_quadruple -> .)
    C_PARENTHESIS   reduce using rule 161 (generate_parameter_quadruple -> .)

    generate_parameter_quadruple   shift and go to state 210

state 196

    (118) listaccess -> add_list_variable add_o_parenthesis O_S_BRACKET expression C_S_BRACKET . add_c_parenthesis add_list_index_to_stack
    (115) add_c_parenthesis -> .

    EQUALS          reduce using rule 115 (add_c_parenthesis -> .)

    add_c_parenthesis              shift and go to state 211

state 197

    (74) condition -> IF O_PARENTHESIS expression C_PARENTHESIS start_condition block . else end_condition
    (76) else -> . ELSE else_condition block
    (77) else -> .

    ELSE            shift and go to state 212
    IF              reduce using rule 77 (else -> .)
    PRINT           reduce using rule 77 (else -> .)
    ID              reduce using rule 77 (else -> .)
    LIST            reduce using rule 77 (else -> .)
    WHILE           reduce using rule 77 (else -> .)
    TIMES           reduce using rule 77 (else -> .)
    BOOL            reduce using rule 77 (else -> .)
    INT             reduce using rule 77 (else -> .)
    FLOAT           reduce using rule 77 (else -> .)
    STRING          reduce using rule 77 (else -> .)
    C_BRACKET       reduce using rule 77 (else -> .)

    else                           shift and go to state 213

state 198

    (66) listinit -> LIST type ID EQUALS start_list list . SEMICOLON

    SEMICOLON       shift and go to state 214


state 199

    (67) list -> O_S_BRACKET . listelements C_S_BRACKET
    (69) listelements -> . expression generate_list_assignation optionallist
    (70) listelements -> .
    (83) expression -> . expression2 expressionoptional
    (86) expression2 -> . exp expression2optional
    (99) exp -> . term exp_quadruple exploop
    (105) term -> . fact term_quadruple termloop
    (112) fact -> . varconst
    (113) fact -> . O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis
    (121) varconst -> . varconstfunction
    (122) varconst -> . constants
    (123) varconstfunction -> . ID functionorlist
    (129) constants -> . INTCONST add_int_constant_to_dict
    (130) constants -> . FLOATCONST add_float_constant_to_dict
    (131) constants -> . STRINGCONST add_string_constant_to_dict
    (132) constants -> . booleanconst
    (133) booleanconst -> . TRUE add_bool_constant_to_dict
    (134) booleanconst -> . FALSE add_bool_constant_to_dict

    C_S_BRACKET     reduce using rule 70 (listelements -> .)
    O_PARENTHESIS   shift and go to state 87
    ID              shift and go to state 94
    INTCONST        shift and go to state 92
    FLOATCONST      shift and go to state 86
    STRINGCONST     shift and go to state 89
    TRUE            shift and go to state 88
    FALSE           shift and go to state 97

    varconstfunction               shift and go to state 90
    exp                            shift and go to state 91
    expression2                    shift and go to state 93
    constants                      shift and go to state 95
    term                           shift and go to state 96
    varconst                       shift and go to state 98
    listelements                   shift and go to state 215
    booleanconst                   shift and go to state 99
    expression                     shift and go to state 216
    fact                           shift and go to state 101

state 200

    (32) functionblock -> O_BRACKET . functionstatutesloop C_BRACKET
    (39) functionstatutesloop -> . functionstatute functionstatutesloop
    (40) functionstatutesloop -> . functionreturn
    (41) functionstatutesloop -> .
    (48) functionstatute -> . init
    (49) functionstatute -> . functioncondition
    (50) functionstatute -> . writting
    (51) functionstatute -> . functionloops
    (52) functionstatute -> . assignation
    (53) functionstatute -> . functioncall
    (33) functionreturn -> . RETURN add_function_var_to_stack O_BRACKET expression C_BRACKET SEMICOLON
    (34) functionreturn -> . RETURN add_function_var_to_stack expression SEMICOLON
    (61) init -> . listinit
    (62) init -> . normalinit
    (75) functioncondition -> . IF O_PARENTHESIS expression C_PARENTHESIS start_condition functionblock functionelse end_condition
    (55) writting -> . PRINT O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON
    (141) functionloops -> . functionwhileloop
    (142) functionloops -> . functiontimesloop
    (54) assignation -> . var_assign EQUALS add_equals expression equals_quadruple SEMICOLON
    (152) functioncall -> . ID add_o_parenthesis check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON generate_gosub add_c_parenthesis
    (66) listinit -> . LIST type ID EQUALS start_list list SEMICOLON
    (63) normalinit -> . type var EQUALS add_equals expression equals_quadruple SEMICOLON
    (144) functionwhileloop -> . WHILE start_while O_PARENTHESIS expression C_PARENTHESIS condition_while functionblock end_while
    (149) functiontimesloop -> . TIMES O_PARENTHESIS expression C_PARENTHESIS start_times functionblock end_times
    (116) var_assign -> . ID listaccess
    (23) type -> . BOOL
    (24) type -> . INT
    (25) type -> . FLOAT
    (26) type -> . STRING

    C_BRACKET       reduce using rule 41 (functionstatutesloop -> .)
    RETURN          shift and go to state 218
    IF              shift and go to state 229
    PRINT           shift and go to state 40
    ID              shift and go to state 51
    LIST            shift and go to state 59
    WHILE           shift and go to state 220
    TIMES           shift and go to state 217
    BOOL            shift and go to state 43
    INT             shift and go to state 57
    FLOAT           shift and go to state 58
    STRING          shift and go to state 47

    functionstatute                shift and go to state 219
    functiontimesloop              shift and go to state 221
    functionstatutesloop           shift and go to state 222
    functionwhileloop              shift and go to state 223
    init                           shift and go to state 224
    var_assign                     shift and go to state 44
    type                           shift and go to state 45
    listinit                       shift and go to state 48
    functionloops                  shift and go to state 225
    writting                       shift and go to state 226
    functionreturn                 shift and go to state 227
    functioncondition              shift and go to state 228
    assignation                    shift and go to state 230
    functioncall                   shift and go to state 231
    normalinit                     shift and go to state 46

state 201

    (18) function_with_return_def -> ID add_function_id_to_options add_function_to_global_variables check_current_quadruple O_PARENTHESIS parameters C_PARENTHESIS add_function_init_to_dict functionblock .

    FUNCTION        reduce using rule 18 (function_with_return_def -> ID add_function_id_to_options add_function_to_global_variables check_current_quadruple O_PARENTHESIS parameters C_PARENTHESIS add_function_init_to_dict functionblock .)
    MAIN            reduce using rule 18 (function_with_return_def -> ID add_function_id_to_options add_function_to_global_variables check_current_quadruple O_PARENTHESIS parameters C_PARENTHESIS add_function_init_to_dict functionblock .)


state 202

    (113) fact -> O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis .

    MULTIPLY        reduce using rule 113 (fact -> O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis .)
    DIVIDE          reduce using rule 113 (fact -> O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis .)
    MOD             reduce using rule 113 (fact -> O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis .)
    SUM             reduce using rule 113 (fact -> O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis .)
    MINUS           reduce using rule 113 (fact -> O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis .)
    EQUALITY        reduce using rule 113 (fact -> O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis .)
    GREATER         reduce using rule 113 (fact -> O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis .)
    GREATER_EQUAL   reduce using rule 113 (fact -> O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis .)
    LESS            reduce using rule 113 (fact -> O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis .)
    LESS_EQUAL      reduce using rule 113 (fact -> O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis .)
    DIFFERENT       reduce using rule 113 (fact -> O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis .)
    AND             reduce using rule 113 (fact -> O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis .)
    OR              reduce using rule 113 (fact -> O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis .)
    C_PARENTHESIS   reduce using rule 113 (fact -> O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis .)
    COMMA           reduce using rule 113 (fact -> O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis .)
    SEMICOLON       reduce using rule 113 (fact -> O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis .)
    C_S_BRACKET     reduce using rule 113 (fact -> O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis .)
    C_BRACKET       reduce using rule 113 (fact -> O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis .)


state 203

    (126) functionorlist -> add_o_parenthesis check_function_exists O_PARENTHESIS parametersinput . C_PARENTHESIS generate_gosub add_c_parenthesis

    C_PARENTHESIS   shift and go to state 232


state 204

    (125) functionorlist -> add_list_variable add_o_parenthesis O_S_BRACKET expression . C_S_BRACKET add_c_parenthesis add_list_index_to_stack

    C_S_BRACKET     shift and go to state 233


state 205

    (148) timesloop -> TIMES O_PARENTHESIS expression C_PARENTHESIS start_times block end_times .

    IF              reduce using rule 148 (timesloop -> TIMES O_PARENTHESIS expression C_PARENTHESIS start_times block end_times .)
    PRINT           reduce using rule 148 (timesloop -> TIMES O_PARENTHESIS expression C_PARENTHESIS start_times block end_times .)
    ID              reduce using rule 148 (timesloop -> TIMES O_PARENTHESIS expression C_PARENTHESIS start_times block end_times .)
    LIST            reduce using rule 148 (timesloop -> TIMES O_PARENTHESIS expression C_PARENTHESIS start_times block end_times .)
    WHILE           reduce using rule 148 (timesloop -> TIMES O_PARENTHESIS expression C_PARENTHESIS start_times block end_times .)
    TIMES           reduce using rule 148 (timesloop -> TIMES O_PARENTHESIS expression C_PARENTHESIS start_times block end_times .)
    BOOL            reduce using rule 148 (timesloop -> TIMES O_PARENTHESIS expression C_PARENTHESIS start_times block end_times .)
    INT             reduce using rule 148 (timesloop -> TIMES O_PARENTHESIS expression C_PARENTHESIS start_times block end_times .)
    FLOAT           reduce using rule 148 (timesloop -> TIMES O_PARENTHESIS expression C_PARENTHESIS start_times block end_times .)
    STRING          reduce using rule 148 (timesloop -> TIMES O_PARENTHESIS expression C_PARENTHESIS start_times block end_times .)
    C_BRACKET       reduce using rule 148 (timesloop -> TIMES O_PARENTHESIS expression C_PARENTHESIS start_times block end_times .)


state 206

    (143) whileloop -> WHILE start_while O_PARENTHESIS expression C_PARENTHESIS condition_while block . end_while
    (147) end_while -> .

    IF              reduce using rule 147 (end_while -> .)
    PRINT           reduce using rule 147 (end_while -> .)
    ID              reduce using rule 147 (end_while -> .)
    LIST            reduce using rule 147 (end_while -> .)
    WHILE           reduce using rule 147 (end_while -> .)
    TIMES           reduce using rule 147 (end_while -> .)
    BOOL            reduce using rule 147 (end_while -> .)
    INT             reduce using rule 147 (end_while -> .)
    FLOAT           reduce using rule 147 (end_while -> .)
    STRING          reduce using rule 147 (end_while -> .)
    C_BRACKET       reduce using rule 147 (end_while -> .)

    end_while                      shift and go to state 234

state 207

    (59) optionalwritting -> COMMA writtingloop .

    C_PARENTHESIS   reduce using rule 59 (optionalwritting -> COMMA writtingloop .)


state 208

    (63) normalinit -> type var EQUALS add_equals expression equals_quadruple SEMICOLON .

    IF              reduce using rule 63 (normalinit -> type var EQUALS add_equals expression equals_quadruple SEMICOLON .)
    PRINT           reduce using rule 63 (normalinit -> type var EQUALS add_equals expression equals_quadruple SEMICOLON .)
    ID              reduce using rule 63 (normalinit -> type var EQUALS add_equals expression equals_quadruple SEMICOLON .)
    LIST            reduce using rule 63 (normalinit -> type var EQUALS add_equals expression equals_quadruple SEMICOLON .)
    WHILE           reduce using rule 63 (normalinit -> type var EQUALS add_equals expression equals_quadruple SEMICOLON .)
    TIMES           reduce using rule 63 (normalinit -> type var EQUALS add_equals expression equals_quadruple SEMICOLON .)
    BOOL            reduce using rule 63 (normalinit -> type var EQUALS add_equals expression equals_quadruple SEMICOLON .)
    INT             reduce using rule 63 (normalinit -> type var EQUALS add_equals expression equals_quadruple SEMICOLON .)
    FLOAT           reduce using rule 63 (normalinit -> type var EQUALS add_equals expression equals_quadruple SEMICOLON .)
    STRING          reduce using rule 63 (normalinit -> type var EQUALS add_equals expression equals_quadruple SEMICOLON .)
    C_BRACKET       reduce using rule 63 (normalinit -> type var EQUALS add_equals expression equals_quadruple SEMICOLON .)
    RETURN          reduce using rule 63 (normalinit -> type var EQUALS add_equals expression equals_quadruple SEMICOLON .)


state 209

    (152) functioncall -> ID add_o_parenthesis check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON . generate_gosub add_c_parenthesis
    (154) generate_gosub -> .

    IF              reduce using rule 154 (generate_gosub -> .)
    PRINT           reduce using rule 154 (generate_gosub -> .)
    ID              reduce using rule 154 (generate_gosub -> .)
    LIST            reduce using rule 154 (generate_gosub -> .)
    WHILE           reduce using rule 154 (generate_gosub -> .)
    TIMES           reduce using rule 154 (generate_gosub -> .)
    BOOL            reduce using rule 154 (generate_gosub -> .)
    INT             reduce using rule 154 (generate_gosub -> .)
    FLOAT           reduce using rule 154 (generate_gosub -> .)
    STRING          reduce using rule 154 (generate_gosub -> .)
    C_BRACKET       reduce using rule 154 (generate_gosub -> .)
    RETURN          reduce using rule 154 (generate_gosub -> .)

    generate_gosub                 shift and go to state 235

state 210

    (155) parametersinput -> expression push_type_to_function_options generate_parameter_quadruple . parametersinputloop check_params_order
    (157) parametersinputloop -> . COMMA expression push_type_to_function_options generate_parameter_quadruple parametersinputloop
    (158) parametersinputloop -> .

    COMMA           shift and go to state 237
    C_PARENTHESIS   reduce using rule 158 (parametersinputloop -> .)

    parametersinputloop            shift and go to state 236

state 211

    (118) listaccess -> add_list_variable add_o_parenthesis O_S_BRACKET expression C_S_BRACKET add_c_parenthesis . add_list_index_to_stack
    (120) add_list_index_to_stack -> .

    EQUALS          reduce using rule 120 (add_list_index_to_stack -> .)

    add_list_index_to_stack        shift and go to state 238

state 212

    (76) else -> ELSE . else_condition block
    (81) else_condition -> .

    O_BRACKET       reduce using rule 81 (else_condition -> .)

    else_condition                 shift and go to state 239

state 213

    (74) condition -> IF O_PARENTHESIS expression C_PARENTHESIS start_condition block else . end_condition
    (82) end_condition -> .

    IF              reduce using rule 82 (end_condition -> .)
    PRINT           reduce using rule 82 (end_condition -> .)
    ID              reduce using rule 82 (end_condition -> .)
    LIST            reduce using rule 82 (end_condition -> .)
    WHILE           reduce using rule 82 (end_condition -> .)
    TIMES           reduce using rule 82 (end_condition -> .)
    BOOL            reduce using rule 82 (end_condition -> .)
    INT             reduce using rule 82 (end_condition -> .)
    FLOAT           reduce using rule 82 (end_condition -> .)
    STRING          reduce using rule 82 (end_condition -> .)
    C_BRACKET       reduce using rule 82 (end_condition -> .)

    end_condition                  shift and go to state 240

state 214

    (66) listinit -> LIST type ID EQUALS start_list list SEMICOLON .

    RETURN          reduce using rule 66 (listinit -> LIST type ID EQUALS start_list list SEMICOLON .)
    IF              reduce using rule 66 (listinit -> LIST type ID EQUALS start_list list SEMICOLON .)
    PRINT           reduce using rule 66 (listinit -> LIST type ID EQUALS start_list list SEMICOLON .)
    ID              reduce using rule 66 (listinit -> LIST type ID EQUALS start_list list SEMICOLON .)
    LIST            reduce using rule 66 (listinit -> LIST type ID EQUALS start_list list SEMICOLON .)
    WHILE           reduce using rule 66 (listinit -> LIST type ID EQUALS start_list list SEMICOLON .)
    TIMES           reduce using rule 66 (listinit -> LIST type ID EQUALS start_list list SEMICOLON .)
    BOOL            reduce using rule 66 (listinit -> LIST type ID EQUALS start_list list SEMICOLON .)
    INT             reduce using rule 66 (listinit -> LIST type ID EQUALS start_list list SEMICOLON .)
    FLOAT           reduce using rule 66 (listinit -> LIST type ID EQUALS start_list list SEMICOLON .)
    STRING          reduce using rule 66 (listinit -> LIST type ID EQUALS start_list list SEMICOLON .)
    C_BRACKET       reduce using rule 66 (listinit -> LIST type ID EQUALS start_list list SEMICOLON .)


state 215

    (67) list -> O_S_BRACKET listelements . C_S_BRACKET

    C_S_BRACKET     shift and go to state 241


state 216

    (69) listelements -> expression . generate_list_assignation optionallist
    (73) generate_list_assignation -> .

    COMMA           reduce using rule 73 (generate_list_assignation -> .)
    C_S_BRACKET     reduce using rule 73 (generate_list_assignation -> .)

    generate_list_assignation      shift and go to state 242

state 217

    (149) functiontimesloop -> TIMES . O_PARENTHESIS expression C_PARENTHESIS start_times functionblock end_times

    O_PARENTHESIS   shift and go to state 243


state 218

    (33) functionreturn -> RETURN . add_function_var_to_stack O_BRACKET expression C_BRACKET SEMICOLON
    (34) functionreturn -> RETURN . add_function_var_to_stack expression SEMICOLON
    (35) add_function_var_to_stack -> .

    O_BRACKET       reduce using rule 35 (add_function_var_to_stack -> .)
    O_PARENTHESIS   reduce using rule 35 (add_function_var_to_stack -> .)
    ID              reduce using rule 35 (add_function_var_to_stack -> .)
    INTCONST        reduce using rule 35 (add_function_var_to_stack -> .)
    FLOATCONST      reduce using rule 35 (add_function_var_to_stack -> .)
    STRINGCONST     reduce using rule 35 (add_function_var_to_stack -> .)
    TRUE            reduce using rule 35 (add_function_var_to_stack -> .)
    FALSE           reduce using rule 35 (add_function_var_to_stack -> .)

    add_function_var_to_stack      shift and go to state 244

state 219

    (39) functionstatutesloop -> functionstatute . functionstatutesloop
    (39) functionstatutesloop -> . functionstatute functionstatutesloop
    (40) functionstatutesloop -> . functionreturn
    (41) functionstatutesloop -> .
    (48) functionstatute -> . init
    (49) functionstatute -> . functioncondition
    (50) functionstatute -> . writting
    (51) functionstatute -> . functionloops
    (52) functionstatute -> . assignation
    (53) functionstatute -> . functioncall
    (33) functionreturn -> . RETURN add_function_var_to_stack O_BRACKET expression C_BRACKET SEMICOLON
    (34) functionreturn -> . RETURN add_function_var_to_stack expression SEMICOLON
    (61) init -> . listinit
    (62) init -> . normalinit
    (75) functioncondition -> . IF O_PARENTHESIS expression C_PARENTHESIS start_condition functionblock functionelse end_condition
    (55) writting -> . PRINT O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON
    (141) functionloops -> . functionwhileloop
    (142) functionloops -> . functiontimesloop
    (54) assignation -> . var_assign EQUALS add_equals expression equals_quadruple SEMICOLON
    (152) functioncall -> . ID add_o_parenthesis check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON generate_gosub add_c_parenthesis
    (66) listinit -> . LIST type ID EQUALS start_list list SEMICOLON
    (63) normalinit -> . type var EQUALS add_equals expression equals_quadruple SEMICOLON
    (144) functionwhileloop -> . WHILE start_while O_PARENTHESIS expression C_PARENTHESIS condition_while functionblock end_while
    (149) functiontimesloop -> . TIMES O_PARENTHESIS expression C_PARENTHESIS start_times functionblock end_times
    (116) var_assign -> . ID listaccess
    (23) type -> . BOOL
    (24) type -> . INT
    (25) type -> . FLOAT
    (26) type -> . STRING

    C_BRACKET       reduce using rule 41 (functionstatutesloop -> .)
    RETURN          shift and go to state 218
    IF              shift and go to state 229
    PRINT           shift and go to state 40
    ID              shift and go to state 51
    LIST            shift and go to state 59
    WHILE           shift and go to state 220
    TIMES           shift and go to state 217
    BOOL            shift and go to state 43
    INT             shift and go to state 57
    FLOAT           shift and go to state 58
    STRING          shift and go to state 47

    functionstatute                shift and go to state 219
    functiontimesloop              shift and go to state 221
    functionstatutesloop           shift and go to state 245
    functionwhileloop              shift and go to state 223
    init                           shift and go to state 224
    var_assign                     shift and go to state 44
    type                           shift and go to state 45
    listinit                       shift and go to state 48
    functionloops                  shift and go to state 225
    writting                       shift and go to state 226
    functionreturn                 shift and go to state 227
    functioncondition              shift and go to state 228
    assignation                    shift and go to state 230
    functioncall                   shift and go to state 231
    normalinit                     shift and go to state 46

state 220

    (144) functionwhileloop -> WHILE . start_while O_PARENTHESIS expression C_PARENTHESIS condition_while functionblock end_while
    (145) start_while -> .

    O_PARENTHESIS   reduce using rule 145 (start_while -> .)

    start_while                    shift and go to state 246

state 221

    (142) functionloops -> functiontimesloop .

    RETURN          reduce using rule 142 (functionloops -> functiontimesloop .)
    IF              reduce using rule 142 (functionloops -> functiontimesloop .)
    PRINT           reduce using rule 142 (functionloops -> functiontimesloop .)
    ID              reduce using rule 142 (functionloops -> functiontimesloop .)
    LIST            reduce using rule 142 (functionloops -> functiontimesloop .)
    WHILE           reduce using rule 142 (functionloops -> functiontimesloop .)
    TIMES           reduce using rule 142 (functionloops -> functiontimesloop .)
    BOOL            reduce using rule 142 (functionloops -> functiontimesloop .)
    INT             reduce using rule 142 (functionloops -> functiontimesloop .)
    FLOAT           reduce using rule 142 (functionloops -> functiontimesloop .)
    STRING          reduce using rule 142 (functionloops -> functiontimesloop .)
    C_BRACKET       reduce using rule 142 (functionloops -> functiontimesloop .)


state 222

    (32) functionblock -> O_BRACKET functionstatutesloop . C_BRACKET

    C_BRACKET       shift and go to state 247


state 223

    (141) functionloops -> functionwhileloop .

    RETURN          reduce using rule 141 (functionloops -> functionwhileloop .)
    IF              reduce using rule 141 (functionloops -> functionwhileloop .)
    PRINT           reduce using rule 141 (functionloops -> functionwhileloop .)
    ID              reduce using rule 141 (functionloops -> functionwhileloop .)
    LIST            reduce using rule 141 (functionloops -> functionwhileloop .)
    WHILE           reduce using rule 141 (functionloops -> functionwhileloop .)
    TIMES           reduce using rule 141 (functionloops -> functionwhileloop .)
    BOOL            reduce using rule 141 (functionloops -> functionwhileloop .)
    INT             reduce using rule 141 (functionloops -> functionwhileloop .)
    FLOAT           reduce using rule 141 (functionloops -> functionwhileloop .)
    STRING          reduce using rule 141 (functionloops -> functionwhileloop .)
    C_BRACKET       reduce using rule 141 (functionloops -> functionwhileloop .)


state 224

    (48) functionstatute -> init .

    RETURN          reduce using rule 48 (functionstatute -> init .)
    IF              reduce using rule 48 (functionstatute -> init .)
    PRINT           reduce using rule 48 (functionstatute -> init .)
    ID              reduce using rule 48 (functionstatute -> init .)
    LIST            reduce using rule 48 (functionstatute -> init .)
    WHILE           reduce using rule 48 (functionstatute -> init .)
    TIMES           reduce using rule 48 (functionstatute -> init .)
    BOOL            reduce using rule 48 (functionstatute -> init .)
    INT             reduce using rule 48 (functionstatute -> init .)
    FLOAT           reduce using rule 48 (functionstatute -> init .)
    STRING          reduce using rule 48 (functionstatute -> init .)
    C_BRACKET       reduce using rule 48 (functionstatute -> init .)


state 225

    (51) functionstatute -> functionloops .

    RETURN          reduce using rule 51 (functionstatute -> functionloops .)
    IF              reduce using rule 51 (functionstatute -> functionloops .)
    PRINT           reduce using rule 51 (functionstatute -> functionloops .)
    ID              reduce using rule 51 (functionstatute -> functionloops .)
    LIST            reduce using rule 51 (functionstatute -> functionloops .)
    WHILE           reduce using rule 51 (functionstatute -> functionloops .)
    TIMES           reduce using rule 51 (functionstatute -> functionloops .)
    BOOL            reduce using rule 51 (functionstatute -> functionloops .)
    INT             reduce using rule 51 (functionstatute -> functionloops .)
    FLOAT           reduce using rule 51 (functionstatute -> functionloops .)
    STRING          reduce using rule 51 (functionstatute -> functionloops .)
    C_BRACKET       reduce using rule 51 (functionstatute -> functionloops .)


state 226

    (50) functionstatute -> writting .

    RETURN          reduce using rule 50 (functionstatute -> writting .)
    IF              reduce using rule 50 (functionstatute -> writting .)
    PRINT           reduce using rule 50 (functionstatute -> writting .)
    ID              reduce using rule 50 (functionstatute -> writting .)
    LIST            reduce using rule 50 (functionstatute -> writting .)
    WHILE           reduce using rule 50 (functionstatute -> writting .)
    TIMES           reduce using rule 50 (functionstatute -> writting .)
    BOOL            reduce using rule 50 (functionstatute -> writting .)
    INT             reduce using rule 50 (functionstatute -> writting .)
    FLOAT           reduce using rule 50 (functionstatute -> writting .)
    STRING          reduce using rule 50 (functionstatute -> writting .)
    C_BRACKET       reduce using rule 50 (functionstatute -> writting .)


state 227

    (40) functionstatutesloop -> functionreturn .

    C_BRACKET       reduce using rule 40 (functionstatutesloop -> functionreturn .)


state 228

    (49) functionstatute -> functioncondition .

    RETURN          reduce using rule 49 (functionstatute -> functioncondition .)
    IF              reduce using rule 49 (functionstatute -> functioncondition .)
    PRINT           reduce using rule 49 (functionstatute -> functioncondition .)
    ID              reduce using rule 49 (functionstatute -> functioncondition .)
    LIST            reduce using rule 49 (functionstatute -> functioncondition .)
    WHILE           reduce using rule 49 (functionstatute -> functioncondition .)
    TIMES           reduce using rule 49 (functionstatute -> functioncondition .)
    BOOL            reduce using rule 49 (functionstatute -> functioncondition .)
    INT             reduce using rule 49 (functionstatute -> functioncondition .)
    FLOAT           reduce using rule 49 (functionstatute -> functioncondition .)
    STRING          reduce using rule 49 (functionstatute -> functioncondition .)
    C_BRACKET       reduce using rule 49 (functionstatute -> functioncondition .)


state 229

    (75) functioncondition -> IF . O_PARENTHESIS expression C_PARENTHESIS start_condition functionblock functionelse end_condition

    O_PARENTHESIS   shift and go to state 248


state 230

    (52) functionstatute -> assignation .

    RETURN          reduce using rule 52 (functionstatute -> assignation .)
    IF              reduce using rule 52 (functionstatute -> assignation .)
    PRINT           reduce using rule 52 (functionstatute -> assignation .)
    ID              reduce using rule 52 (functionstatute -> assignation .)
    LIST            reduce using rule 52 (functionstatute -> assignation .)
    WHILE           reduce using rule 52 (functionstatute -> assignation .)
    TIMES           reduce using rule 52 (functionstatute -> assignation .)
    BOOL            reduce using rule 52 (functionstatute -> assignation .)
    INT             reduce using rule 52 (functionstatute -> assignation .)
    FLOAT           reduce using rule 52 (functionstatute -> assignation .)
    STRING          reduce using rule 52 (functionstatute -> assignation .)
    C_BRACKET       reduce using rule 52 (functionstatute -> assignation .)


state 231

    (53) functionstatute -> functioncall .

    RETURN          reduce using rule 53 (functionstatute -> functioncall .)
    IF              reduce using rule 53 (functionstatute -> functioncall .)
    PRINT           reduce using rule 53 (functionstatute -> functioncall .)
    ID              reduce using rule 53 (functionstatute -> functioncall .)
    LIST            reduce using rule 53 (functionstatute -> functioncall .)
    WHILE           reduce using rule 53 (functionstatute -> functioncall .)
    TIMES           reduce using rule 53 (functionstatute -> functioncall .)
    BOOL            reduce using rule 53 (functionstatute -> functioncall .)
    INT             reduce using rule 53 (functionstatute -> functioncall .)
    FLOAT           reduce using rule 53 (functionstatute -> functioncall .)
    STRING          reduce using rule 53 (functionstatute -> functioncall .)
    C_BRACKET       reduce using rule 53 (functionstatute -> functioncall .)


state 232

    (126) functionorlist -> add_o_parenthesis check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS . generate_gosub add_c_parenthesis
    (154) generate_gosub -> .

    MULTIPLY        reduce using rule 154 (generate_gosub -> .)
    DIVIDE          reduce using rule 154 (generate_gosub -> .)
    MOD             reduce using rule 154 (generate_gosub -> .)
    SUM             reduce using rule 154 (generate_gosub -> .)
    MINUS           reduce using rule 154 (generate_gosub -> .)
    EQUALITY        reduce using rule 154 (generate_gosub -> .)
    GREATER         reduce using rule 154 (generate_gosub -> .)
    GREATER_EQUAL   reduce using rule 154 (generate_gosub -> .)
    LESS            reduce using rule 154 (generate_gosub -> .)
    LESS_EQUAL      reduce using rule 154 (generate_gosub -> .)
    DIFFERENT       reduce using rule 154 (generate_gosub -> .)
    AND             reduce using rule 154 (generate_gosub -> .)
    OR              reduce using rule 154 (generate_gosub -> .)
    C_PARENTHESIS   reduce using rule 154 (generate_gosub -> .)
    COMMA           reduce using rule 154 (generate_gosub -> .)
    SEMICOLON       reduce using rule 154 (generate_gosub -> .)
    C_S_BRACKET     reduce using rule 154 (generate_gosub -> .)
    C_BRACKET       reduce using rule 154 (generate_gosub -> .)

    generate_gosub                 shift and go to state 249

state 233

    (125) functionorlist -> add_list_variable add_o_parenthesis O_S_BRACKET expression C_S_BRACKET . add_c_parenthesis add_list_index_to_stack
    (115) add_c_parenthesis -> .

    MULTIPLY        reduce using rule 115 (add_c_parenthesis -> .)
    DIVIDE          reduce using rule 115 (add_c_parenthesis -> .)
    MOD             reduce using rule 115 (add_c_parenthesis -> .)
    SUM             reduce using rule 115 (add_c_parenthesis -> .)
    MINUS           reduce using rule 115 (add_c_parenthesis -> .)
    EQUALITY        reduce using rule 115 (add_c_parenthesis -> .)
    GREATER         reduce using rule 115 (add_c_parenthesis -> .)
    GREATER_EQUAL   reduce using rule 115 (add_c_parenthesis -> .)
    LESS            reduce using rule 115 (add_c_parenthesis -> .)
    LESS_EQUAL      reduce using rule 115 (add_c_parenthesis -> .)
    DIFFERENT       reduce using rule 115 (add_c_parenthesis -> .)
    AND             reduce using rule 115 (add_c_parenthesis -> .)
    OR              reduce using rule 115 (add_c_parenthesis -> .)
    C_PARENTHESIS   reduce using rule 115 (add_c_parenthesis -> .)
    COMMA           reduce using rule 115 (add_c_parenthesis -> .)
    SEMICOLON       reduce using rule 115 (add_c_parenthesis -> .)
    C_S_BRACKET     reduce using rule 115 (add_c_parenthesis -> .)
    C_BRACKET       reduce using rule 115 (add_c_parenthesis -> .)

    add_c_parenthesis              shift and go to state 250

state 234

    (143) whileloop -> WHILE start_while O_PARENTHESIS expression C_PARENTHESIS condition_while block end_while .

    IF              reduce using rule 143 (whileloop -> WHILE start_while O_PARENTHESIS expression C_PARENTHESIS condition_while block end_while .)
    PRINT           reduce using rule 143 (whileloop -> WHILE start_while O_PARENTHESIS expression C_PARENTHESIS condition_while block end_while .)
    ID              reduce using rule 143 (whileloop -> WHILE start_while O_PARENTHESIS expression C_PARENTHESIS condition_while block end_while .)
    LIST            reduce using rule 143 (whileloop -> WHILE start_while O_PARENTHESIS expression C_PARENTHESIS condition_while block end_while .)
    WHILE           reduce using rule 143 (whileloop -> WHILE start_while O_PARENTHESIS expression C_PARENTHESIS condition_while block end_while .)
    TIMES           reduce using rule 143 (whileloop -> WHILE start_while O_PARENTHESIS expression C_PARENTHESIS condition_while block end_while .)
    BOOL            reduce using rule 143 (whileloop -> WHILE start_while O_PARENTHESIS expression C_PARENTHESIS condition_while block end_while .)
    INT             reduce using rule 143 (whileloop -> WHILE start_while O_PARENTHESIS expression C_PARENTHESIS condition_while block end_while .)
    FLOAT           reduce using rule 143 (whileloop -> WHILE start_while O_PARENTHESIS expression C_PARENTHESIS condition_while block end_while .)
    STRING          reduce using rule 143 (whileloop -> WHILE start_while O_PARENTHESIS expression C_PARENTHESIS condition_while block end_while .)
    C_BRACKET       reduce using rule 143 (whileloop -> WHILE start_while O_PARENTHESIS expression C_PARENTHESIS condition_while block end_while .)


state 235

    (152) functioncall -> ID add_o_parenthesis check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON generate_gosub . add_c_parenthesis
    (115) add_c_parenthesis -> .

    IF              reduce using rule 115 (add_c_parenthesis -> .)
    PRINT           reduce using rule 115 (add_c_parenthesis -> .)
    ID              reduce using rule 115 (add_c_parenthesis -> .)
    LIST            reduce using rule 115 (add_c_parenthesis -> .)
    WHILE           reduce using rule 115 (add_c_parenthesis -> .)
    TIMES           reduce using rule 115 (add_c_parenthesis -> .)
    BOOL            reduce using rule 115 (add_c_parenthesis -> .)
    INT             reduce using rule 115 (add_c_parenthesis -> .)
    FLOAT           reduce using rule 115 (add_c_parenthesis -> .)
    STRING          reduce using rule 115 (add_c_parenthesis -> .)
    C_BRACKET       reduce using rule 115 (add_c_parenthesis -> .)
    RETURN          reduce using rule 115 (add_c_parenthesis -> .)

    add_c_parenthesis              shift and go to state 251

state 236

    (155) parametersinput -> expression push_type_to_function_options generate_parameter_quadruple parametersinputloop . check_params_order
    (160) check_params_order -> .

    C_PARENTHESIS   reduce using rule 160 (check_params_order -> .)

    check_params_order             shift and go to state 252

state 237

    (157) parametersinputloop -> COMMA . expression push_type_to_function_options generate_parameter_quadruple parametersinputloop
    (83) expression -> . expression2 expressionoptional
    (86) expression2 -> . exp expression2optional
    (99) exp -> . term exp_quadruple exploop
    (105) term -> . fact term_quadruple termloop
    (112) fact -> . varconst
    (113) fact -> . O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis
    (121) varconst -> . varconstfunction
    (122) varconst -> . constants
    (123) varconstfunction -> . ID functionorlist
    (129) constants -> . INTCONST add_int_constant_to_dict
    (130) constants -> . FLOATCONST add_float_constant_to_dict
    (131) constants -> . STRINGCONST add_string_constant_to_dict
    (132) constants -> . booleanconst
    (133) booleanconst -> . TRUE add_bool_constant_to_dict
    (134) booleanconst -> . FALSE add_bool_constant_to_dict

    O_PARENTHESIS   shift and go to state 87
    ID              shift and go to state 94
    INTCONST        shift and go to state 92
    FLOATCONST      shift and go to state 86
    STRINGCONST     shift and go to state 89
    TRUE            shift and go to state 88
    FALSE           shift and go to state 97

    varconstfunction               shift and go to state 90
    exp                            shift and go to state 91
    expression2                    shift and go to state 93
    constants                      shift and go to state 95
    term                           shift and go to state 96
    varconst                       shift and go to state 98
    booleanconst                   shift and go to state 99
    expression                     shift and go to state 253
    fact                           shift and go to state 101

state 238

    (118) listaccess -> add_list_variable add_o_parenthesis O_S_BRACKET expression C_S_BRACKET add_c_parenthesis add_list_index_to_stack .

    EQUALS          reduce using rule 118 (listaccess -> add_list_variable add_o_parenthesis O_S_BRACKET expression C_S_BRACKET add_c_parenthesis add_list_index_to_stack .)


state 239

    (76) else -> ELSE else_condition . block
    (31) block -> . O_BRACKET statutesloop C_BRACKET

    O_BRACKET       shift and go to state 33

    block                          shift and go to state 254

state 240

    (74) condition -> IF O_PARENTHESIS expression C_PARENTHESIS start_condition block else end_condition .

    IF              reduce using rule 74 (condition -> IF O_PARENTHESIS expression C_PARENTHESIS start_condition block else end_condition .)
    PRINT           reduce using rule 74 (condition -> IF O_PARENTHESIS expression C_PARENTHESIS start_condition block else end_condition .)
    ID              reduce using rule 74 (condition -> IF O_PARENTHESIS expression C_PARENTHESIS start_condition block else end_condition .)
    LIST            reduce using rule 74 (condition -> IF O_PARENTHESIS expression C_PARENTHESIS start_condition block else end_condition .)
    WHILE           reduce using rule 74 (condition -> IF O_PARENTHESIS expression C_PARENTHESIS start_condition block else end_condition .)
    TIMES           reduce using rule 74 (condition -> IF O_PARENTHESIS expression C_PARENTHESIS start_condition block else end_condition .)
    BOOL            reduce using rule 74 (condition -> IF O_PARENTHESIS expression C_PARENTHESIS start_condition block else end_condition .)
    INT             reduce using rule 74 (condition -> IF O_PARENTHESIS expression C_PARENTHESIS start_condition block else end_condition .)
    FLOAT           reduce using rule 74 (condition -> IF O_PARENTHESIS expression C_PARENTHESIS start_condition block else end_condition .)
    STRING          reduce using rule 74 (condition -> IF O_PARENTHESIS expression C_PARENTHESIS start_condition block else end_condition .)
    C_BRACKET       reduce using rule 74 (condition -> IF O_PARENTHESIS expression C_PARENTHESIS start_condition block else end_condition .)


state 241

    (67) list -> O_S_BRACKET listelements C_S_BRACKET .

    SEMICOLON       reduce using rule 67 (list -> O_S_BRACKET listelements C_S_BRACKET .)


state 242

    (69) listelements -> expression generate_list_assignation . optionallist
    (71) optionallist -> . COMMA expression generate_list_assignation optionallist
    (72) optionallist -> .

    COMMA           shift and go to state 256
    C_S_BRACKET     reduce using rule 72 (optionallist -> .)

    optionallist                   shift and go to state 255

state 243

    (149) functiontimesloop -> TIMES O_PARENTHESIS . expression C_PARENTHESIS start_times functionblock end_times
    (83) expression -> . expression2 expressionoptional
    (86) expression2 -> . exp expression2optional
    (99) exp -> . term exp_quadruple exploop
    (105) term -> . fact term_quadruple termloop
    (112) fact -> . varconst
    (113) fact -> . O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis
    (121) varconst -> . varconstfunction
    (122) varconst -> . constants
    (123) varconstfunction -> . ID functionorlist
    (129) constants -> . INTCONST add_int_constant_to_dict
    (130) constants -> . FLOATCONST add_float_constant_to_dict
    (131) constants -> . STRINGCONST add_string_constant_to_dict
    (132) constants -> . booleanconst
    (133) booleanconst -> . TRUE add_bool_constant_to_dict
    (134) booleanconst -> . FALSE add_bool_constant_to_dict

    O_PARENTHESIS   shift and go to state 87
    ID              shift and go to state 94
    INTCONST        shift and go to state 92
    FLOATCONST      shift and go to state 86
    STRINGCONST     shift and go to state 89
    TRUE            shift and go to state 88
    FALSE           shift and go to state 97

    varconstfunction               shift and go to state 90
    exp                            shift and go to state 91
    expression2                    shift and go to state 93
    constants                      shift and go to state 95
    term                           shift and go to state 96
    varconst                       shift and go to state 98
    booleanconst                   shift and go to state 99
    expression                     shift and go to state 257
    fact                           shift and go to state 101

state 244

    (33) functionreturn -> RETURN add_function_var_to_stack . O_BRACKET expression C_BRACKET SEMICOLON
    (34) functionreturn -> RETURN add_function_var_to_stack . expression SEMICOLON
    (83) expression -> . expression2 expressionoptional
    (86) expression2 -> . exp expression2optional
    (99) exp -> . term exp_quadruple exploop
    (105) term -> . fact term_quadruple termloop
    (112) fact -> . varconst
    (113) fact -> . O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis
    (121) varconst -> . varconstfunction
    (122) varconst -> . constants
    (123) varconstfunction -> . ID functionorlist
    (129) constants -> . INTCONST add_int_constant_to_dict
    (130) constants -> . FLOATCONST add_float_constant_to_dict
    (131) constants -> . STRINGCONST add_string_constant_to_dict
    (132) constants -> . booleanconst
    (133) booleanconst -> . TRUE add_bool_constant_to_dict
    (134) booleanconst -> . FALSE add_bool_constant_to_dict

    O_BRACKET       shift and go to state 258
    O_PARENTHESIS   shift and go to state 87
    ID              shift and go to state 94
    INTCONST        shift and go to state 92
    FLOATCONST      shift and go to state 86
    STRINGCONST     shift and go to state 89
    TRUE            shift and go to state 88
    FALSE           shift and go to state 97

    varconstfunction               shift and go to state 90
    exp                            shift and go to state 91
    expression2                    shift and go to state 93
    constants                      shift and go to state 95
    term                           shift and go to state 96
    varconst                       shift and go to state 98
    booleanconst                   shift and go to state 99
    expression                     shift and go to state 259
    fact                           shift and go to state 101

state 245

    (39) functionstatutesloop -> functionstatute functionstatutesloop .

    C_BRACKET       reduce using rule 39 (functionstatutesloop -> functionstatute functionstatutesloop .)


state 246

    (144) functionwhileloop -> WHILE start_while . O_PARENTHESIS expression C_PARENTHESIS condition_while functionblock end_while

    O_PARENTHESIS   shift and go to state 260


state 247

    (32) functionblock -> O_BRACKET functionstatutesloop C_BRACKET .

    FUNCTION        reduce using rule 32 (functionblock -> O_BRACKET functionstatutesloop C_BRACKET .)
    MAIN            reduce using rule 32 (functionblock -> O_BRACKET functionstatutesloop C_BRACKET .)
    RETURN          reduce using rule 32 (functionblock -> O_BRACKET functionstatutesloop C_BRACKET .)
    IF              reduce using rule 32 (functionblock -> O_BRACKET functionstatutesloop C_BRACKET .)
    PRINT           reduce using rule 32 (functionblock -> O_BRACKET functionstatutesloop C_BRACKET .)
    ID              reduce using rule 32 (functionblock -> O_BRACKET functionstatutesloop C_BRACKET .)
    LIST            reduce using rule 32 (functionblock -> O_BRACKET functionstatutesloop C_BRACKET .)
    WHILE           reduce using rule 32 (functionblock -> O_BRACKET functionstatutesloop C_BRACKET .)
    TIMES           reduce using rule 32 (functionblock -> O_BRACKET functionstatutesloop C_BRACKET .)
    BOOL            reduce using rule 32 (functionblock -> O_BRACKET functionstatutesloop C_BRACKET .)
    INT             reduce using rule 32 (functionblock -> O_BRACKET functionstatutesloop C_BRACKET .)
    FLOAT           reduce using rule 32 (functionblock -> O_BRACKET functionstatutesloop C_BRACKET .)
    STRING          reduce using rule 32 (functionblock -> O_BRACKET functionstatutesloop C_BRACKET .)
    C_BRACKET       reduce using rule 32 (functionblock -> O_BRACKET functionstatutesloop C_BRACKET .)
    ELSE            reduce using rule 32 (functionblock -> O_BRACKET functionstatutesloop C_BRACKET .)


state 248

    (75) functioncondition -> IF O_PARENTHESIS . expression C_PARENTHESIS start_condition functionblock functionelse end_condition
    (83) expression -> . expression2 expressionoptional
    (86) expression2 -> . exp expression2optional
    (99) exp -> . term exp_quadruple exploop
    (105) term -> . fact term_quadruple termloop
    (112) fact -> . varconst
    (113) fact -> . O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis
    (121) varconst -> . varconstfunction
    (122) varconst -> . constants
    (123) varconstfunction -> . ID functionorlist
    (129) constants -> . INTCONST add_int_constant_to_dict
    (130) constants -> . FLOATCONST add_float_constant_to_dict
    (131) constants -> . STRINGCONST add_string_constant_to_dict
    (132) constants -> . booleanconst
    (133) booleanconst -> . TRUE add_bool_constant_to_dict
    (134) booleanconst -> . FALSE add_bool_constant_to_dict

    O_PARENTHESIS   shift and go to state 87
    ID              shift and go to state 94
    INTCONST        shift and go to state 92
    FLOATCONST      shift and go to state 86
    STRINGCONST     shift and go to state 89
    TRUE            shift and go to state 88
    FALSE           shift and go to state 97

    varconstfunction               shift and go to state 90
    exp                            shift and go to state 91
    expression2                    shift and go to state 93
    constants                      shift and go to state 95
    term                           shift and go to state 96
    varconst                       shift and go to state 98
    booleanconst                   shift and go to state 99
    expression                     shift and go to state 261
    fact                           shift and go to state 101

state 249

    (126) functionorlist -> add_o_parenthesis check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS generate_gosub . add_c_parenthesis
    (115) add_c_parenthesis -> .

    MULTIPLY        reduce using rule 115 (add_c_parenthesis -> .)
    DIVIDE          reduce using rule 115 (add_c_parenthesis -> .)
    MOD             reduce using rule 115 (add_c_parenthesis -> .)
    SUM             reduce using rule 115 (add_c_parenthesis -> .)
    MINUS           reduce using rule 115 (add_c_parenthesis -> .)
    EQUALITY        reduce using rule 115 (add_c_parenthesis -> .)
    GREATER         reduce using rule 115 (add_c_parenthesis -> .)
    GREATER_EQUAL   reduce using rule 115 (add_c_parenthesis -> .)
    LESS            reduce using rule 115 (add_c_parenthesis -> .)
    LESS_EQUAL      reduce using rule 115 (add_c_parenthesis -> .)
    DIFFERENT       reduce using rule 115 (add_c_parenthesis -> .)
    AND             reduce using rule 115 (add_c_parenthesis -> .)
    OR              reduce using rule 115 (add_c_parenthesis -> .)
    C_PARENTHESIS   reduce using rule 115 (add_c_parenthesis -> .)
    COMMA           reduce using rule 115 (add_c_parenthesis -> .)
    SEMICOLON       reduce using rule 115 (add_c_parenthesis -> .)
    C_S_BRACKET     reduce using rule 115 (add_c_parenthesis -> .)
    C_BRACKET       reduce using rule 115 (add_c_parenthesis -> .)

    add_c_parenthesis              shift and go to state 262

state 250

    (125) functionorlist -> add_list_variable add_o_parenthesis O_S_BRACKET expression C_S_BRACKET add_c_parenthesis . add_list_index_to_stack
    (120) add_list_index_to_stack -> .

    MULTIPLY        reduce using rule 120 (add_list_index_to_stack -> .)
    DIVIDE          reduce using rule 120 (add_list_index_to_stack -> .)
    MOD             reduce using rule 120 (add_list_index_to_stack -> .)
    SUM             reduce using rule 120 (add_list_index_to_stack -> .)
    MINUS           reduce using rule 120 (add_list_index_to_stack -> .)
    EQUALITY        reduce using rule 120 (add_list_index_to_stack -> .)
    GREATER         reduce using rule 120 (add_list_index_to_stack -> .)
    GREATER_EQUAL   reduce using rule 120 (add_list_index_to_stack -> .)
    LESS            reduce using rule 120 (add_list_index_to_stack -> .)
    LESS_EQUAL      reduce using rule 120 (add_list_index_to_stack -> .)
    DIFFERENT       reduce using rule 120 (add_list_index_to_stack -> .)
    AND             reduce using rule 120 (add_list_index_to_stack -> .)
    OR              reduce using rule 120 (add_list_index_to_stack -> .)
    C_PARENTHESIS   reduce using rule 120 (add_list_index_to_stack -> .)
    COMMA           reduce using rule 120 (add_list_index_to_stack -> .)
    SEMICOLON       reduce using rule 120 (add_list_index_to_stack -> .)
    C_S_BRACKET     reduce using rule 120 (add_list_index_to_stack -> .)
    C_BRACKET       reduce using rule 120 (add_list_index_to_stack -> .)

    add_list_index_to_stack        shift and go to state 263

state 251

    (152) functioncall -> ID add_o_parenthesis check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON generate_gosub add_c_parenthesis .

    IF              reduce using rule 152 (functioncall -> ID add_o_parenthesis check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON generate_gosub add_c_parenthesis .)
    PRINT           reduce using rule 152 (functioncall -> ID add_o_parenthesis check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON generate_gosub add_c_parenthesis .)
    ID              reduce using rule 152 (functioncall -> ID add_o_parenthesis check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON generate_gosub add_c_parenthesis .)
    LIST            reduce using rule 152 (functioncall -> ID add_o_parenthesis check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON generate_gosub add_c_parenthesis .)
    WHILE           reduce using rule 152 (functioncall -> ID add_o_parenthesis check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON generate_gosub add_c_parenthesis .)
    TIMES           reduce using rule 152 (functioncall -> ID add_o_parenthesis check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON generate_gosub add_c_parenthesis .)
    BOOL            reduce using rule 152 (functioncall -> ID add_o_parenthesis check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON generate_gosub add_c_parenthesis .)
    INT             reduce using rule 152 (functioncall -> ID add_o_parenthesis check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON generate_gosub add_c_parenthesis .)
    FLOAT           reduce using rule 152 (functioncall -> ID add_o_parenthesis check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON generate_gosub add_c_parenthesis .)
    STRING          reduce using rule 152 (functioncall -> ID add_o_parenthesis check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON generate_gosub add_c_parenthesis .)
    C_BRACKET       reduce using rule 152 (functioncall -> ID add_o_parenthesis check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON generate_gosub add_c_parenthesis .)
    RETURN          reduce using rule 152 (functioncall -> ID add_o_parenthesis check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON generate_gosub add_c_parenthesis .)


state 252

    (155) parametersinput -> expression push_type_to_function_options generate_parameter_quadruple parametersinputloop check_params_order .

    C_PARENTHESIS   reduce using rule 155 (parametersinput -> expression push_type_to_function_options generate_parameter_quadruple parametersinputloop check_params_order .)


state 253

    (157) parametersinputloop -> COMMA expression . push_type_to_function_options generate_parameter_quadruple parametersinputloop
    (159) push_type_to_function_options -> .

    COMMA           reduce using rule 159 (push_type_to_function_options -> .)
    C_PARENTHESIS   reduce using rule 159 (push_type_to_function_options -> .)

    push_type_to_function_options  shift and go to state 264

state 254

    (76) else -> ELSE else_condition block .

    IF              reduce using rule 76 (else -> ELSE else_condition block .)
    PRINT           reduce using rule 76 (else -> ELSE else_condition block .)
    ID              reduce using rule 76 (else -> ELSE else_condition block .)
    LIST            reduce using rule 76 (else -> ELSE else_condition block .)
    WHILE           reduce using rule 76 (else -> ELSE else_condition block .)
    TIMES           reduce using rule 76 (else -> ELSE else_condition block .)
    BOOL            reduce using rule 76 (else -> ELSE else_condition block .)
    INT             reduce using rule 76 (else -> ELSE else_condition block .)
    FLOAT           reduce using rule 76 (else -> ELSE else_condition block .)
    STRING          reduce using rule 76 (else -> ELSE else_condition block .)
    C_BRACKET       reduce using rule 76 (else -> ELSE else_condition block .)


state 255

    (69) listelements -> expression generate_list_assignation optionallist .

    C_S_BRACKET     reduce using rule 69 (listelements -> expression generate_list_assignation optionallist .)


state 256

    (71) optionallist -> COMMA . expression generate_list_assignation optionallist
    (83) expression -> . expression2 expressionoptional
    (86) expression2 -> . exp expression2optional
    (99) exp -> . term exp_quadruple exploop
    (105) term -> . fact term_quadruple termloop
    (112) fact -> . varconst
    (113) fact -> . O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis
    (121) varconst -> . varconstfunction
    (122) varconst -> . constants
    (123) varconstfunction -> . ID functionorlist
    (129) constants -> . INTCONST add_int_constant_to_dict
    (130) constants -> . FLOATCONST add_float_constant_to_dict
    (131) constants -> . STRINGCONST add_string_constant_to_dict
    (132) constants -> . booleanconst
    (133) booleanconst -> . TRUE add_bool_constant_to_dict
    (134) booleanconst -> . FALSE add_bool_constant_to_dict

    O_PARENTHESIS   shift and go to state 87
    ID              shift and go to state 94
    INTCONST        shift and go to state 92
    FLOATCONST      shift and go to state 86
    STRINGCONST     shift and go to state 89
    TRUE            shift and go to state 88
    FALSE           shift and go to state 97

    varconstfunction               shift and go to state 90
    exp                            shift and go to state 91
    expression2                    shift and go to state 93
    constants                      shift and go to state 95
    term                           shift and go to state 96
    varconst                       shift and go to state 98
    booleanconst                   shift and go to state 99
    expression                     shift and go to state 265
    fact                           shift and go to state 101

state 257

    (149) functiontimesloop -> TIMES O_PARENTHESIS expression . C_PARENTHESIS start_times functionblock end_times

    C_PARENTHESIS   shift and go to state 266


state 258

    (33) functionreturn -> RETURN add_function_var_to_stack O_BRACKET . expression C_BRACKET SEMICOLON
    (83) expression -> . expression2 expressionoptional
    (86) expression2 -> . exp expression2optional
    (99) exp -> . term exp_quadruple exploop
    (105) term -> . fact term_quadruple termloop
    (112) fact -> . varconst
    (113) fact -> . O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis
    (121) varconst -> . varconstfunction
    (122) varconst -> . constants
    (123) varconstfunction -> . ID functionorlist
    (129) constants -> . INTCONST add_int_constant_to_dict
    (130) constants -> . FLOATCONST add_float_constant_to_dict
    (131) constants -> . STRINGCONST add_string_constant_to_dict
    (132) constants -> . booleanconst
    (133) booleanconst -> . TRUE add_bool_constant_to_dict
    (134) booleanconst -> . FALSE add_bool_constant_to_dict

    O_PARENTHESIS   shift and go to state 87
    ID              shift and go to state 94
    INTCONST        shift and go to state 92
    FLOATCONST      shift and go to state 86
    STRINGCONST     shift and go to state 89
    TRUE            shift and go to state 88
    FALSE           shift and go to state 97

    varconstfunction               shift and go to state 90
    exp                            shift and go to state 91
    expression2                    shift and go to state 93
    constants                      shift and go to state 95
    term                           shift and go to state 96
    varconst                       shift and go to state 98
    booleanconst                   shift and go to state 99
    expression                     shift and go to state 267
    fact                           shift and go to state 101

state 259

    (34) functionreturn -> RETURN add_function_var_to_stack expression . SEMICOLON

    SEMICOLON       shift and go to state 268


state 260

    (144) functionwhileloop -> WHILE start_while O_PARENTHESIS . expression C_PARENTHESIS condition_while functionblock end_while
    (83) expression -> . expression2 expressionoptional
    (86) expression2 -> . exp expression2optional
    (99) exp -> . term exp_quadruple exploop
    (105) term -> . fact term_quadruple termloop
    (112) fact -> . varconst
    (113) fact -> . O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis
    (121) varconst -> . varconstfunction
    (122) varconst -> . constants
    (123) varconstfunction -> . ID functionorlist
    (129) constants -> . INTCONST add_int_constant_to_dict
    (130) constants -> . FLOATCONST add_float_constant_to_dict
    (131) constants -> . STRINGCONST add_string_constant_to_dict
    (132) constants -> . booleanconst
    (133) booleanconst -> . TRUE add_bool_constant_to_dict
    (134) booleanconst -> . FALSE add_bool_constant_to_dict

    O_PARENTHESIS   shift and go to state 87
    ID              shift and go to state 94
    INTCONST        shift and go to state 92
    FLOATCONST      shift and go to state 86
    STRINGCONST     shift and go to state 89
    TRUE            shift and go to state 88
    FALSE           shift and go to state 97

    varconstfunction               shift and go to state 90
    exp                            shift and go to state 91
    expression2                    shift and go to state 93
    constants                      shift and go to state 95
    term                           shift and go to state 96
    varconst                       shift and go to state 98
    booleanconst                   shift and go to state 99
    expression                     shift and go to state 269
    fact                           shift and go to state 101

state 261

    (75) functioncondition -> IF O_PARENTHESIS expression . C_PARENTHESIS start_condition functionblock functionelse end_condition

    C_PARENTHESIS   shift and go to state 270


state 262

    (126) functionorlist -> add_o_parenthesis check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS generate_gosub add_c_parenthesis .

    MULTIPLY        reduce using rule 126 (functionorlist -> add_o_parenthesis check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS generate_gosub add_c_parenthesis .)
    DIVIDE          reduce using rule 126 (functionorlist -> add_o_parenthesis check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS generate_gosub add_c_parenthesis .)
    MOD             reduce using rule 126 (functionorlist -> add_o_parenthesis check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS generate_gosub add_c_parenthesis .)
    SUM             reduce using rule 126 (functionorlist -> add_o_parenthesis check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS generate_gosub add_c_parenthesis .)
    MINUS           reduce using rule 126 (functionorlist -> add_o_parenthesis check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS generate_gosub add_c_parenthesis .)
    EQUALITY        reduce using rule 126 (functionorlist -> add_o_parenthesis check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS generate_gosub add_c_parenthesis .)
    GREATER         reduce using rule 126 (functionorlist -> add_o_parenthesis check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS generate_gosub add_c_parenthesis .)
    GREATER_EQUAL   reduce using rule 126 (functionorlist -> add_o_parenthesis check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS generate_gosub add_c_parenthesis .)
    LESS            reduce using rule 126 (functionorlist -> add_o_parenthesis check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS generate_gosub add_c_parenthesis .)
    LESS_EQUAL      reduce using rule 126 (functionorlist -> add_o_parenthesis check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS generate_gosub add_c_parenthesis .)
    DIFFERENT       reduce using rule 126 (functionorlist -> add_o_parenthesis check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS generate_gosub add_c_parenthesis .)
    AND             reduce using rule 126 (functionorlist -> add_o_parenthesis check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS generate_gosub add_c_parenthesis .)
    OR              reduce using rule 126 (functionorlist -> add_o_parenthesis check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS generate_gosub add_c_parenthesis .)
    C_PARENTHESIS   reduce using rule 126 (functionorlist -> add_o_parenthesis check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS generate_gosub add_c_parenthesis .)
    COMMA           reduce using rule 126 (functionorlist -> add_o_parenthesis check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS generate_gosub add_c_parenthesis .)
    SEMICOLON       reduce using rule 126 (functionorlist -> add_o_parenthesis check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS generate_gosub add_c_parenthesis .)
    C_S_BRACKET     reduce using rule 126 (functionorlist -> add_o_parenthesis check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS generate_gosub add_c_parenthesis .)
    C_BRACKET       reduce using rule 126 (functionorlist -> add_o_parenthesis check_function_exists O_PARENTHESIS parametersinput C_PARENTHESIS generate_gosub add_c_parenthesis .)


state 263

    (125) functionorlist -> add_list_variable add_o_parenthesis O_S_BRACKET expression C_S_BRACKET add_c_parenthesis add_list_index_to_stack .

    MULTIPLY        reduce using rule 125 (functionorlist -> add_list_variable add_o_parenthesis O_S_BRACKET expression C_S_BRACKET add_c_parenthesis add_list_index_to_stack .)
    DIVIDE          reduce using rule 125 (functionorlist -> add_list_variable add_o_parenthesis O_S_BRACKET expression C_S_BRACKET add_c_parenthesis add_list_index_to_stack .)
    MOD             reduce using rule 125 (functionorlist -> add_list_variable add_o_parenthesis O_S_BRACKET expression C_S_BRACKET add_c_parenthesis add_list_index_to_stack .)
    SUM             reduce using rule 125 (functionorlist -> add_list_variable add_o_parenthesis O_S_BRACKET expression C_S_BRACKET add_c_parenthesis add_list_index_to_stack .)
    MINUS           reduce using rule 125 (functionorlist -> add_list_variable add_o_parenthesis O_S_BRACKET expression C_S_BRACKET add_c_parenthesis add_list_index_to_stack .)
    EQUALITY        reduce using rule 125 (functionorlist -> add_list_variable add_o_parenthesis O_S_BRACKET expression C_S_BRACKET add_c_parenthesis add_list_index_to_stack .)
    GREATER         reduce using rule 125 (functionorlist -> add_list_variable add_o_parenthesis O_S_BRACKET expression C_S_BRACKET add_c_parenthesis add_list_index_to_stack .)
    GREATER_EQUAL   reduce using rule 125 (functionorlist -> add_list_variable add_o_parenthesis O_S_BRACKET expression C_S_BRACKET add_c_parenthesis add_list_index_to_stack .)
    LESS            reduce using rule 125 (functionorlist -> add_list_variable add_o_parenthesis O_S_BRACKET expression C_S_BRACKET add_c_parenthesis add_list_index_to_stack .)
    LESS_EQUAL      reduce using rule 125 (functionorlist -> add_list_variable add_o_parenthesis O_S_BRACKET expression C_S_BRACKET add_c_parenthesis add_list_index_to_stack .)
    DIFFERENT       reduce using rule 125 (functionorlist -> add_list_variable add_o_parenthesis O_S_BRACKET expression C_S_BRACKET add_c_parenthesis add_list_index_to_stack .)
    AND             reduce using rule 125 (functionorlist -> add_list_variable add_o_parenthesis O_S_BRACKET expression C_S_BRACKET add_c_parenthesis add_list_index_to_stack .)
    OR              reduce using rule 125 (functionorlist -> add_list_variable add_o_parenthesis O_S_BRACKET expression C_S_BRACKET add_c_parenthesis add_list_index_to_stack .)
    C_PARENTHESIS   reduce using rule 125 (functionorlist -> add_list_variable add_o_parenthesis O_S_BRACKET expression C_S_BRACKET add_c_parenthesis add_list_index_to_stack .)
    COMMA           reduce using rule 125 (functionorlist -> add_list_variable add_o_parenthesis O_S_BRACKET expression C_S_BRACKET add_c_parenthesis add_list_index_to_stack .)
    SEMICOLON       reduce using rule 125 (functionorlist -> add_list_variable add_o_parenthesis O_S_BRACKET expression C_S_BRACKET add_c_parenthesis add_list_index_to_stack .)
    C_S_BRACKET     reduce using rule 125 (functionorlist -> add_list_variable add_o_parenthesis O_S_BRACKET expression C_S_BRACKET add_c_parenthesis add_list_index_to_stack .)
    C_BRACKET       reduce using rule 125 (functionorlist -> add_list_variable add_o_parenthesis O_S_BRACKET expression C_S_BRACKET add_c_parenthesis add_list_index_to_stack .)


state 264

    (157) parametersinputloop -> COMMA expression push_type_to_function_options . generate_parameter_quadruple parametersinputloop
    (161) generate_parameter_quadruple -> .

    COMMA           reduce using rule 161 (generate_parameter_quadruple -> .)
    C_PARENTHESIS   reduce using rule 161 (generate_parameter_quadruple -> .)

    generate_parameter_quadruple   shift and go to state 271

state 265

    (71) optionallist -> COMMA expression . generate_list_assignation optionallist
    (73) generate_list_assignation -> .

    COMMA           reduce using rule 73 (generate_list_assignation -> .)
    C_S_BRACKET     reduce using rule 73 (generate_list_assignation -> .)

    generate_list_assignation      shift and go to state 272

state 266

    (149) functiontimesloop -> TIMES O_PARENTHESIS expression C_PARENTHESIS . start_times functionblock end_times
    (150) start_times -> .

    O_BRACKET       reduce using rule 150 (start_times -> .)

    start_times                    shift and go to state 273

state 267

    (33) functionreturn -> RETURN add_function_var_to_stack O_BRACKET expression . C_BRACKET SEMICOLON

    C_BRACKET       shift and go to state 274


state 268

    (34) functionreturn -> RETURN add_function_var_to_stack expression SEMICOLON .

    C_BRACKET       reduce using rule 34 (functionreturn -> RETURN add_function_var_to_stack expression SEMICOLON .)


state 269

    (144) functionwhileloop -> WHILE start_while O_PARENTHESIS expression . C_PARENTHESIS condition_while functionblock end_while

    C_PARENTHESIS   shift and go to state 275


state 270

    (75) functioncondition -> IF O_PARENTHESIS expression C_PARENTHESIS . start_condition functionblock functionelse end_condition
    (80) start_condition -> .

    O_BRACKET       reduce using rule 80 (start_condition -> .)

    start_condition                shift and go to state 276

state 271

    (157) parametersinputloop -> COMMA expression push_type_to_function_options generate_parameter_quadruple . parametersinputloop
    (157) parametersinputloop -> . COMMA expression push_type_to_function_options generate_parameter_quadruple parametersinputloop
    (158) parametersinputloop -> .

    COMMA           shift and go to state 237
    C_PARENTHESIS   reduce using rule 158 (parametersinputloop -> .)

    parametersinputloop            shift and go to state 277

state 272

    (71) optionallist -> COMMA expression generate_list_assignation . optionallist
    (71) optionallist -> . COMMA expression generate_list_assignation optionallist
    (72) optionallist -> .

    COMMA           shift and go to state 256
    C_S_BRACKET     reduce using rule 72 (optionallist -> .)

    optionallist                   shift and go to state 278

state 273

    (149) functiontimesloop -> TIMES O_PARENTHESIS expression C_PARENTHESIS start_times . functionblock end_times
    (32) functionblock -> . O_BRACKET functionstatutesloop C_BRACKET

    O_BRACKET       shift and go to state 200

    functionblock                  shift and go to state 279

state 274

    (33) functionreturn -> RETURN add_function_var_to_stack O_BRACKET expression C_BRACKET . SEMICOLON

    SEMICOLON       shift and go to state 280


state 275

    (144) functionwhileloop -> WHILE start_while O_PARENTHESIS expression C_PARENTHESIS . condition_while functionblock end_while
    (146) condition_while -> .

    O_BRACKET       reduce using rule 146 (condition_while -> .)

    condition_while                shift and go to state 281

state 276

    (75) functioncondition -> IF O_PARENTHESIS expression C_PARENTHESIS start_condition . functionblock functionelse end_condition
    (32) functionblock -> . O_BRACKET functionstatutesloop C_BRACKET

    O_BRACKET       shift and go to state 200

    functionblock                  shift and go to state 282

state 277

    (157) parametersinputloop -> COMMA expression push_type_to_function_options generate_parameter_quadruple parametersinputloop .

    C_PARENTHESIS   reduce using rule 157 (parametersinputloop -> COMMA expression push_type_to_function_options generate_parameter_quadruple parametersinputloop .)


state 278

    (71) optionallist -> COMMA expression generate_list_assignation optionallist .

    C_S_BRACKET     reduce using rule 71 (optionallist -> COMMA expression generate_list_assignation optionallist .)


state 279

    (149) functiontimesloop -> TIMES O_PARENTHESIS expression C_PARENTHESIS start_times functionblock . end_times
    (151) end_times -> .

    RETURN          reduce using rule 151 (end_times -> .)
    IF              reduce using rule 151 (end_times -> .)
    PRINT           reduce using rule 151 (end_times -> .)
    ID              reduce using rule 151 (end_times -> .)
    LIST            reduce using rule 151 (end_times -> .)
    WHILE           reduce using rule 151 (end_times -> .)
    TIMES           reduce using rule 151 (end_times -> .)
    BOOL            reduce using rule 151 (end_times -> .)
    INT             reduce using rule 151 (end_times -> .)
    FLOAT           reduce using rule 151 (end_times -> .)
    STRING          reduce using rule 151 (end_times -> .)
    C_BRACKET       reduce using rule 151 (end_times -> .)

    end_times                      shift and go to state 283

state 280

    (33) functionreturn -> RETURN add_function_var_to_stack O_BRACKET expression C_BRACKET SEMICOLON .

    C_BRACKET       reduce using rule 33 (functionreturn -> RETURN add_function_var_to_stack O_BRACKET expression C_BRACKET SEMICOLON .)


state 281

    (144) functionwhileloop -> WHILE start_while O_PARENTHESIS expression C_PARENTHESIS condition_while . functionblock end_while
    (32) functionblock -> . O_BRACKET functionstatutesloop C_BRACKET

    O_BRACKET       shift and go to state 200

    functionblock                  shift and go to state 284

state 282

    (75) functioncondition -> IF O_PARENTHESIS expression C_PARENTHESIS start_condition functionblock . functionelse end_condition
    (78) functionelse -> . ELSE else_condition functionblock
    (79) functionelse -> .

    ELSE            shift and go to state 286
    RETURN          reduce using rule 79 (functionelse -> .)
    IF              reduce using rule 79 (functionelse -> .)
    PRINT           reduce using rule 79 (functionelse -> .)
    ID              reduce using rule 79 (functionelse -> .)
    LIST            reduce using rule 79 (functionelse -> .)
    WHILE           reduce using rule 79 (functionelse -> .)
    TIMES           reduce using rule 79 (functionelse -> .)
    BOOL            reduce using rule 79 (functionelse -> .)
    INT             reduce using rule 79 (functionelse -> .)
    FLOAT           reduce using rule 79 (functionelse -> .)
    STRING          reduce using rule 79 (functionelse -> .)
    C_BRACKET       reduce using rule 79 (functionelse -> .)

    functionelse                   shift and go to state 285

state 283

    (149) functiontimesloop -> TIMES O_PARENTHESIS expression C_PARENTHESIS start_times functionblock end_times .

    RETURN          reduce using rule 149 (functiontimesloop -> TIMES O_PARENTHESIS expression C_PARENTHESIS start_times functionblock end_times .)
    IF              reduce using rule 149 (functiontimesloop -> TIMES O_PARENTHESIS expression C_PARENTHESIS start_times functionblock end_times .)
    PRINT           reduce using rule 149 (functiontimesloop -> TIMES O_PARENTHESIS expression C_PARENTHESIS start_times functionblock end_times .)
    ID              reduce using rule 149 (functiontimesloop -> TIMES O_PARENTHESIS expression C_PARENTHESIS start_times functionblock end_times .)
    LIST            reduce using rule 149 (functiontimesloop -> TIMES O_PARENTHESIS expression C_PARENTHESIS start_times functionblock end_times .)
    WHILE           reduce using rule 149 (functiontimesloop -> TIMES O_PARENTHESIS expression C_PARENTHESIS start_times functionblock end_times .)
    TIMES           reduce using rule 149 (functiontimesloop -> TIMES O_PARENTHESIS expression C_PARENTHESIS start_times functionblock end_times .)
    BOOL            reduce using rule 149 (functiontimesloop -> TIMES O_PARENTHESIS expression C_PARENTHESIS start_times functionblock end_times .)
    INT             reduce using rule 149 (functiontimesloop -> TIMES O_PARENTHESIS expression C_PARENTHESIS start_times functionblock end_times .)
    FLOAT           reduce using rule 149 (functiontimesloop -> TIMES O_PARENTHESIS expression C_PARENTHESIS start_times functionblock end_times .)
    STRING          reduce using rule 149 (functiontimesloop -> TIMES O_PARENTHESIS expression C_PARENTHESIS start_times functionblock end_times .)
    C_BRACKET       reduce using rule 149 (functiontimesloop -> TIMES O_PARENTHESIS expression C_PARENTHESIS start_times functionblock end_times .)


state 284

    (144) functionwhileloop -> WHILE start_while O_PARENTHESIS expression C_PARENTHESIS condition_while functionblock . end_while
    (147) end_while -> .

    RETURN          reduce using rule 147 (end_while -> .)
    IF              reduce using rule 147 (end_while -> .)
    PRINT           reduce using rule 147 (end_while -> .)
    ID              reduce using rule 147 (end_while -> .)
    LIST            reduce using rule 147 (end_while -> .)
    WHILE           reduce using rule 147 (end_while -> .)
    TIMES           reduce using rule 147 (end_while -> .)
    BOOL            reduce using rule 147 (end_while -> .)
    INT             reduce using rule 147 (end_while -> .)
    FLOAT           reduce using rule 147 (end_while -> .)
    STRING          reduce using rule 147 (end_while -> .)
    C_BRACKET       reduce using rule 147 (end_while -> .)

    end_while                      shift and go to state 287

state 285

    (75) functioncondition -> IF O_PARENTHESIS expression C_PARENTHESIS start_condition functionblock functionelse . end_condition
    (82) end_condition -> .

    RETURN          reduce using rule 82 (end_condition -> .)
    IF              reduce using rule 82 (end_condition -> .)
    PRINT           reduce using rule 82 (end_condition -> .)
    ID              reduce using rule 82 (end_condition -> .)
    LIST            reduce using rule 82 (end_condition -> .)
    WHILE           reduce using rule 82 (end_condition -> .)
    TIMES           reduce using rule 82 (end_condition -> .)
    BOOL            reduce using rule 82 (end_condition -> .)
    INT             reduce using rule 82 (end_condition -> .)
    FLOAT           reduce using rule 82 (end_condition -> .)
    STRING          reduce using rule 82 (end_condition -> .)
    C_BRACKET       reduce using rule 82 (end_condition -> .)

    end_condition                  shift and go to state 288

state 286

    (78) functionelse -> ELSE . else_condition functionblock
    (81) else_condition -> .

    O_BRACKET       reduce using rule 81 (else_condition -> .)

    else_condition                 shift and go to state 289

state 287

    (144) functionwhileloop -> WHILE start_while O_PARENTHESIS expression C_PARENTHESIS condition_while functionblock end_while .

    RETURN          reduce using rule 144 (functionwhileloop -> WHILE start_while O_PARENTHESIS expression C_PARENTHESIS condition_while functionblock end_while .)
    IF              reduce using rule 144 (functionwhileloop -> WHILE start_while O_PARENTHESIS expression C_PARENTHESIS condition_while functionblock end_while .)
    PRINT           reduce using rule 144 (functionwhileloop -> WHILE start_while O_PARENTHESIS expression C_PARENTHESIS condition_while functionblock end_while .)
    ID              reduce using rule 144 (functionwhileloop -> WHILE start_while O_PARENTHESIS expression C_PARENTHESIS condition_while functionblock end_while .)
    LIST            reduce using rule 144 (functionwhileloop -> WHILE start_while O_PARENTHESIS expression C_PARENTHESIS condition_while functionblock end_while .)
    WHILE           reduce using rule 144 (functionwhileloop -> WHILE start_while O_PARENTHESIS expression C_PARENTHESIS condition_while functionblock end_while .)
    TIMES           reduce using rule 144 (functionwhileloop -> WHILE start_while O_PARENTHESIS expression C_PARENTHESIS condition_while functionblock end_while .)
    BOOL            reduce using rule 144 (functionwhileloop -> WHILE start_while O_PARENTHESIS expression C_PARENTHESIS condition_while functionblock end_while .)
    INT             reduce using rule 144 (functionwhileloop -> WHILE start_while O_PARENTHESIS expression C_PARENTHESIS condition_while functionblock end_while .)
    FLOAT           reduce using rule 144 (functionwhileloop -> WHILE start_while O_PARENTHESIS expression C_PARENTHESIS condition_while functionblock end_while .)
    STRING          reduce using rule 144 (functionwhileloop -> WHILE start_while O_PARENTHESIS expression C_PARENTHESIS condition_while functionblock end_while .)
    C_BRACKET       reduce using rule 144 (functionwhileloop -> WHILE start_while O_PARENTHESIS expression C_PARENTHESIS condition_while functionblock end_while .)


state 288

    (75) functioncondition -> IF O_PARENTHESIS expression C_PARENTHESIS start_condition functionblock functionelse end_condition .

    RETURN          reduce using rule 75 (functioncondition -> IF O_PARENTHESIS expression C_PARENTHESIS start_condition functionblock functionelse end_condition .)
    IF              reduce using rule 75 (functioncondition -> IF O_PARENTHESIS expression C_PARENTHESIS start_condition functionblock functionelse end_condition .)
    PRINT           reduce using rule 75 (functioncondition -> IF O_PARENTHESIS expression C_PARENTHESIS start_condition functionblock functionelse end_condition .)
    ID              reduce using rule 75 (functioncondition -> IF O_PARENTHESIS expression C_PARENTHESIS start_condition functionblock functionelse end_condition .)
    LIST            reduce using rule 75 (functioncondition -> IF O_PARENTHESIS expression C_PARENTHESIS start_condition functionblock functionelse end_condition .)
    WHILE           reduce using rule 75 (functioncondition -> IF O_PARENTHESIS expression C_PARENTHESIS start_condition functionblock functionelse end_condition .)
    TIMES           reduce using rule 75 (functioncondition -> IF O_PARENTHESIS expression C_PARENTHESIS start_condition functionblock functionelse end_condition .)
    BOOL            reduce using rule 75 (functioncondition -> IF O_PARENTHESIS expression C_PARENTHESIS start_condition functionblock functionelse end_condition .)
    INT             reduce using rule 75 (functioncondition -> IF O_PARENTHESIS expression C_PARENTHESIS start_condition functionblock functionelse end_condition .)
    FLOAT           reduce using rule 75 (functioncondition -> IF O_PARENTHESIS expression C_PARENTHESIS start_condition functionblock functionelse end_condition .)
    STRING          reduce using rule 75 (functioncondition -> IF O_PARENTHESIS expression C_PARENTHESIS start_condition functionblock functionelse end_condition .)
    C_BRACKET       reduce using rule 75 (functioncondition -> IF O_PARENTHESIS expression C_PARENTHESIS start_condition functionblock functionelse end_condition .)


state 289

    (78) functionelse -> ELSE else_condition . functionblock
    (32) functionblock -> . O_BRACKET functionstatutesloop C_BRACKET

    O_BRACKET       shift and go to state 200

    functionblock                  shift and go to state 290

state 290

    (78) functionelse -> ELSE else_condition functionblock .

    RETURN          reduce using rule 78 (functionelse -> ELSE else_condition functionblock .)
    IF              reduce using rule 78 (functionelse -> ELSE else_condition functionblock .)
    PRINT           reduce using rule 78 (functionelse -> ELSE else_condition functionblock .)
    ID              reduce using rule 78 (functionelse -> ELSE else_condition functionblock .)
    LIST            reduce using rule 78 (functionelse -> ELSE else_condition functionblock .)
    WHILE           reduce using rule 78 (functionelse -> ELSE else_condition functionblock .)
    TIMES           reduce using rule 78 (functionelse -> ELSE else_condition functionblock .)
    BOOL            reduce using rule 78 (functionelse -> ELSE else_condition functionblock .)
    INT             reduce using rule 78 (functionelse -> ELSE else_condition functionblock .)
    FLOAT           reduce using rule 78 (functionelse -> ELSE else_condition functionblock .)
    STRING          reduce using rule 78 (functionelse -> ELSE else_condition functionblock .)
    C_BRACKET       reduce using rule 78 (functionelse -> ELSE else_condition functionblock .)

