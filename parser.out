Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> main functionloop
Rule 2     main -> MAIN block
Rule 3     functionloop -> function functionloop
Rule 4     functionloop -> <empty>
Rule 5     function -> FUNCTION functiontype ID O_PARENTHESIS parameters C_PARENTHESIS block
Rule 6     functiontype -> VOID
Rule 7     functiontype -> BOOL
Rule 8     functiontype -> INT
Rule 9     functiontype -> FLOAT
Rule 10    functiontype -> STRING
Rule 11    type -> BOOL
Rule 12    type -> INT
Rule 13    type -> FLOAT
Rule 14    type -> STRING
Rule 15    parametertype -> BOOL
Rule 16    parametertype -> INT
Rule 17    parametertype -> FLOAT
Rule 18    parametertype -> STRING
Rule 19    block -> O_BRACKET statutesloop functionreturn C_BRACKET
Rule 20    functionreturn -> RETURN expression SEMICOLON
Rule 21    functionreturn -> <empty>
Rule 22    statutesloop -> statute statutesloop
Rule 23    statutesloop -> <empty>
Rule 24    statute -> init
Rule 25    statute -> condition
Rule 26    statute -> writting
Rule 27    statute -> loop
Rule 28    statute -> assignation
Rule 29    statute -> functioncall
Rule 30    assignation -> var_assign EQUALS add_equals expression SEMICOLON
Rule 31    writting -> PRINT O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON
Rule 32    writtingloop -> expression optionalwritting
Rule 33    optionalwritting -> COMMA writtingloop
Rule 34    optionalwritting -> <empty>
Rule 35    init -> listinit
Rule 36    init -> normalinit
Rule 37    normalinit -> type var EQUALS add_equals expression SEMICOLON
Rule 38    add_equals -> <empty>
Rule 39    listinit -> LIST type var EQUALS add_equals list SEMICOLON
Rule 40    list -> O_S_BRACKET listelements C_S_BRACKET
Rule 41    listelements -> constants optionalconstants
Rule 42    listelements -> <empty>
Rule 43    optionalconstants -> COMMA constants optionalconstants
Rule 44    optionalconstants -> <empty>
Rule 45    condition -> IF O_PARENTHESIS expression C_PARENTHESIS block else
Rule 46    else -> ELSE block
Rule 47    else -> <empty>
Rule 48    expression -> expression2 expressionoptional
Rule 49    expressionoptional -> logicop expression2
Rule 50    expressionoptional -> <empty>
Rule 51    expression2 -> exp expression2optional
Rule 52    expression2optional -> relop exp
Rule 53    expression2optional -> <empty>
Rule 54    logicop -> AND
Rule 55    logicop -> OR
Rule 56    relop -> EQUALITY
Rule 57    relop -> GREATER
Rule 58    relop -> GREATER_EQUAL
Rule 59    relop -> LESS
Rule 60    relop -> LESS_EQUAL
Rule 61    relop -> DIFFERENT
Rule 62    exp -> term exploop
Rule 63    exploop -> addsub exp
Rule 64    exploop -> <empty>
Rule 65    addsub -> SUM
Rule 66    addsub -> MINUS
Rule 67    term -> fact termloop
Rule 68    termloop -> divmult term
Rule 69    termloop -> <empty>
Rule 70    divmult -> MULTIPLY
Rule 71    divmult -> DIVIDE
Rule 72    divmult -> MOD
Rule 73    fact -> varconst
Rule 74    fact -> O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis
Rule 75    add_o_parenthesis -> <empty>
Rule 76    add_c_parenthesis -> <empty>
Rule 77    var_assign -> ID listaccess
Rule 78    var -> ID listaccess
Rule 79    listaccess -> O_S_BRACKET INTCONST C_S_BRACKET
Rule 80    listaccess -> <empty>
Rule 81    varconst -> varconstfunction
Rule 82    varconst -> constants
Rule 83    varconstfunction -> ID functionorlist
Rule 84    functionorlist -> O_S_BRACKET INTCONST C_S_BRACKET
Rule 85    functionorlist -> O_PARENTHESIS parametersinput C_PARENTHESIS
Rule 86    functionorlist -> <empty>
Rule 87    constants -> INTCONST add_int_constant_to_dict
Rule 88    constants -> FLOATCONST add_float_constant_to_dict
Rule 89    constants -> STRINGCONST add_string_constant_to_dict
Rule 90    constants -> booleanconst
Rule 91    booleanconst -> TRUE add_bool_constant_to_dict
Rule 92    booleanconst -> FALSE add_bool_constant_to_dict
Rule 93    add_int_constant_to_dict -> <empty>
Rule 94    add_float_constant_to_dict -> <empty>
Rule 95    add_string_constant_to_dict -> <empty>
Rule 96    add_bool_constant_to_dict -> <empty>
Rule 97    loop -> whileloop
Rule 98    loop -> timesloop
Rule 99    whileloop -> WHILE O_PARENTHESIS expression C_PARENTHESIS block
Rule 100   timesloop -> TIMES O_PARENTHESIS INTCONST C_PARENTHESIS block
Rule 101   functioncall -> ID O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON
Rule 102   parametersinput -> expression parametersinputloop
Rule 103   parametersinput -> <empty>
Rule 104   parametersinputloop -> COMMA expression parametersinputloop
Rule 105   parametersinputloop -> <empty>
Rule 106   parameters -> parameterinit parametersloop
Rule 107   parameters -> <empty>
Rule 108   parameterinit -> parametertype ID
Rule 109   parametersloop -> COMMA parameterinit parametersloop
Rule 110   parametersloop -> <empty>

Terminals, with rules where they appear

AND                  : 54
BOOL                 : 7 11 15
COMMA                : 33 43 104 109
C_BRACKET            : 19
C_PARENTHESIS        : 5 31 45 74 85 99 100 101
C_S_BRACKET          : 40 79 84
DIFFERENT            : 61
DIVIDE               : 71
ELSE                 : 46
EQUALITY             : 56
EQUALS               : 30 37 39
FALSE                : 92
FLOAT                : 9 13 17
FLOATCONST           : 88
FUNCTION             : 5
GREATER              : 57
GREATER_EQUAL        : 58
ID                   : 5 77 78 83 101 108
IF                   : 45
INT                  : 8 12 16
INTCONST             : 79 84 87 100
LESS                 : 59
LESS_EQUAL           : 60
LIST                 : 39
MAIN                 : 2
MINUS                : 66
MOD                  : 72
MULTIPLY             : 70
OR                   : 55
O_BRACKET            : 19
O_PARENTHESIS        : 5 31 45 74 85 99 100 101
O_S_BRACKET          : 40 79 84
PRINT                : 31
RETURN               : 20
SEMICOLON            : 20 30 31 37 39 101
STRING               : 10 14 18
STRINGCONST          : 89
SUM                  : 65
TIMES                : 100
TRUE                 : 91
VOID                 : 6
WHILE                : 99
error                : 

Nonterminals, with rules where they appear

add_bool_constant_to_dict : 91 92
add_c_parenthesis    : 74
add_equals           : 30 37 39
add_float_constant_to_dict : 88
add_int_constant_to_dict : 87
add_o_parenthesis    : 74
add_string_constant_to_dict : 89
addsub               : 63
assignation          : 28
block                : 2 5 45 46 99 100
booleanconst         : 90
condition            : 25
constants            : 41 43 82
divmult              : 68
else                 : 45
exp                  : 51 52 63
exploop              : 62
expression           : 20 30 32 37 45 74 99 102 104
expression2          : 48 49
expression2optional  : 51
expressionoptional   : 48
fact                 : 67
function             : 3
functioncall         : 29
functionloop         : 1 3
functionorlist       : 83
functionreturn       : 19
functiontype         : 5
init                 : 24
list                 : 39
listaccess           : 77 78
listelements         : 40
listinit             : 35
logicop              : 49
loop                 : 27
main                 : 1
normalinit           : 36
optionalconstants    : 41 43
optionalwritting     : 32
parameterinit        : 106 109
parameters           : 5
parametersinput      : 85 101
parametersinputloop  : 102 104
parametersloop       : 106 109
parametertype        : 108
program              : 0
relop                : 52
statute              : 22
statutesloop         : 19 22
term                 : 62 68
termloop             : 67
timesloop            : 98
type                 : 37 39
var                  : 37 39
var_assign           : 30
varconst             : 73
varconstfunction     : 81
whileloop            : 97
writting             : 26
writtingloop         : 31 33

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . main functionloop
    (2) main -> . MAIN block

    MAIN            shift and go to state 3

    main                           shift and go to state 1
    program                        shift and go to state 2

state 1

    (1) program -> main . functionloop
    (3) functionloop -> . function functionloop
    (4) functionloop -> .
    (5) function -> . FUNCTION functiontype ID O_PARENTHESIS parameters C_PARENTHESIS block

    $end            reduce using rule 4 (functionloop -> .)
    FUNCTION        shift and go to state 5

    function                       shift and go to state 4
    functionloop                   shift and go to state 6

state 2

    (0) S' -> program .



state 3

    (2) main -> MAIN . block
    (19) block -> . O_BRACKET statutesloop functionreturn C_BRACKET

    O_BRACKET       shift and go to state 7

    block                          shift and go to state 8

state 4

    (3) functionloop -> function . functionloop
    (3) functionloop -> . function functionloop
    (4) functionloop -> .
    (5) function -> . FUNCTION functiontype ID O_PARENTHESIS parameters C_PARENTHESIS block

    $end            reduce using rule 4 (functionloop -> .)
    FUNCTION        shift and go to state 5

    function                       shift and go to state 4
    functionloop                   shift and go to state 9

state 5

    (5) function -> FUNCTION . functiontype ID O_PARENTHESIS parameters C_PARENTHESIS block
    (6) functiontype -> . VOID
    (7) functiontype -> . BOOL
    (8) functiontype -> . INT
    (9) functiontype -> . FLOAT
    (10) functiontype -> . STRING

    VOID            shift and go to state 12
    BOOL            shift and go to state 14
    INT             shift and go to state 11
    FLOAT           shift and go to state 13
    STRING          shift and go to state 10

    functiontype                   shift and go to state 15

state 6

    (1) program -> main functionloop .

    $end            reduce using rule 1 (program -> main functionloop .)


state 7

    (19) block -> O_BRACKET . statutesloop functionreturn C_BRACKET
    (22) statutesloop -> . statute statutesloop
    (23) statutesloop -> .
    (24) statute -> . init
    (25) statute -> . condition
    (26) statute -> . writting
    (27) statute -> . loop
    (28) statute -> . assignation
    (29) statute -> . functioncall
    (35) init -> . listinit
    (36) init -> . normalinit
    (45) condition -> . IF O_PARENTHESIS expression C_PARENTHESIS block else
    (31) writting -> . PRINT O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON
    (97) loop -> . whileloop
    (98) loop -> . timesloop
    (30) assignation -> . var_assign EQUALS add_equals expression SEMICOLON
    (101) functioncall -> . ID O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON
    (39) listinit -> . LIST type var EQUALS add_equals list SEMICOLON
    (37) normalinit -> . type var EQUALS add_equals expression SEMICOLON
    (99) whileloop -> . WHILE O_PARENTHESIS expression C_PARENTHESIS block
    (100) timesloop -> . TIMES O_PARENTHESIS INTCONST C_PARENTHESIS block
    (77) var_assign -> . ID listaccess
    (11) type -> . BOOL
    (12) type -> . INT
    (13) type -> . FLOAT
    (14) type -> . STRING

    RETURN          reduce using rule 23 (statutesloop -> .)
    C_BRACKET       reduce using rule 23 (statutesloop -> .)
    IF              shift and go to state 31
    PRINT           shift and go to state 18
    ID              shift and go to state 29
    LIST            shift and go to state 37
    WHILE           shift and go to state 17
    TIMES           shift and go to state 16
    BOOL            shift and go to state 21
    INT             shift and go to state 35
    FLOAT           shift and go to state 36
    STRING          shift and go to state 25

    whileloop                      shift and go to state 19
    init                           shift and go to state 20
    var_assign                     shift and go to state 22
    type                           shift and go to state 23
    normalinit                     shift and go to state 24
    listinit                       shift and go to state 26
    writting                       shift and go to state 27
    timesloop                      shift and go to state 28
    condition                      shift and go to state 30
    statute                        shift and go to state 32
    assignation                    shift and go to state 33
    statutesloop                   shift and go to state 34
    functioncall                   shift and go to state 38
    loop                           shift and go to state 39

state 8

    (2) main -> MAIN block .

    FUNCTION        reduce using rule 2 (main -> MAIN block .)
    $end            reduce using rule 2 (main -> MAIN block .)


state 9

    (3) functionloop -> function functionloop .

    $end            reduce using rule 3 (functionloop -> function functionloop .)


state 10

    (10) functiontype -> STRING .

    ID              reduce using rule 10 (functiontype -> STRING .)


state 11

    (8) functiontype -> INT .

    ID              reduce using rule 8 (functiontype -> INT .)


state 12

    (6) functiontype -> VOID .

    ID              reduce using rule 6 (functiontype -> VOID .)


state 13

    (9) functiontype -> FLOAT .

    ID              reduce using rule 9 (functiontype -> FLOAT .)


state 14

    (7) functiontype -> BOOL .

    ID              reduce using rule 7 (functiontype -> BOOL .)


state 15

    (5) function -> FUNCTION functiontype . ID O_PARENTHESIS parameters C_PARENTHESIS block

    ID              shift and go to state 40


state 16

    (100) timesloop -> TIMES . O_PARENTHESIS INTCONST C_PARENTHESIS block

    O_PARENTHESIS   shift and go to state 41


state 17

    (99) whileloop -> WHILE . O_PARENTHESIS expression C_PARENTHESIS block

    O_PARENTHESIS   shift and go to state 42


state 18

    (31) writting -> PRINT . O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON

    O_PARENTHESIS   shift and go to state 43


state 19

    (97) loop -> whileloop .

    IF              reduce using rule 97 (loop -> whileloop .)
    PRINT           reduce using rule 97 (loop -> whileloop .)
    ID              reduce using rule 97 (loop -> whileloop .)
    LIST            reduce using rule 97 (loop -> whileloop .)
    WHILE           reduce using rule 97 (loop -> whileloop .)
    TIMES           reduce using rule 97 (loop -> whileloop .)
    BOOL            reduce using rule 97 (loop -> whileloop .)
    INT             reduce using rule 97 (loop -> whileloop .)
    FLOAT           reduce using rule 97 (loop -> whileloop .)
    STRING          reduce using rule 97 (loop -> whileloop .)
    RETURN          reduce using rule 97 (loop -> whileloop .)
    C_BRACKET       reduce using rule 97 (loop -> whileloop .)


state 20

    (24) statute -> init .

    IF              reduce using rule 24 (statute -> init .)
    PRINT           reduce using rule 24 (statute -> init .)
    ID              reduce using rule 24 (statute -> init .)
    LIST            reduce using rule 24 (statute -> init .)
    WHILE           reduce using rule 24 (statute -> init .)
    TIMES           reduce using rule 24 (statute -> init .)
    BOOL            reduce using rule 24 (statute -> init .)
    INT             reduce using rule 24 (statute -> init .)
    FLOAT           reduce using rule 24 (statute -> init .)
    STRING          reduce using rule 24 (statute -> init .)
    RETURN          reduce using rule 24 (statute -> init .)
    C_BRACKET       reduce using rule 24 (statute -> init .)


state 21

    (11) type -> BOOL .

    ID              reduce using rule 11 (type -> BOOL .)


state 22

    (30) assignation -> var_assign . EQUALS add_equals expression SEMICOLON

    EQUALS          shift and go to state 44


state 23

    (37) normalinit -> type . var EQUALS add_equals expression SEMICOLON
    (78) var -> . ID listaccess

    ID              shift and go to state 46

    var                            shift and go to state 45

state 24

    (36) init -> normalinit .

    IF              reduce using rule 36 (init -> normalinit .)
    PRINT           reduce using rule 36 (init -> normalinit .)
    ID              reduce using rule 36 (init -> normalinit .)
    LIST            reduce using rule 36 (init -> normalinit .)
    WHILE           reduce using rule 36 (init -> normalinit .)
    TIMES           reduce using rule 36 (init -> normalinit .)
    BOOL            reduce using rule 36 (init -> normalinit .)
    INT             reduce using rule 36 (init -> normalinit .)
    FLOAT           reduce using rule 36 (init -> normalinit .)
    STRING          reduce using rule 36 (init -> normalinit .)
    RETURN          reduce using rule 36 (init -> normalinit .)
    C_BRACKET       reduce using rule 36 (init -> normalinit .)


state 25

    (14) type -> STRING .

    ID              reduce using rule 14 (type -> STRING .)


state 26

    (35) init -> listinit .

    IF              reduce using rule 35 (init -> listinit .)
    PRINT           reduce using rule 35 (init -> listinit .)
    ID              reduce using rule 35 (init -> listinit .)
    LIST            reduce using rule 35 (init -> listinit .)
    WHILE           reduce using rule 35 (init -> listinit .)
    TIMES           reduce using rule 35 (init -> listinit .)
    BOOL            reduce using rule 35 (init -> listinit .)
    INT             reduce using rule 35 (init -> listinit .)
    FLOAT           reduce using rule 35 (init -> listinit .)
    STRING          reduce using rule 35 (init -> listinit .)
    RETURN          reduce using rule 35 (init -> listinit .)
    C_BRACKET       reduce using rule 35 (init -> listinit .)


state 27

    (26) statute -> writting .

    IF              reduce using rule 26 (statute -> writting .)
    PRINT           reduce using rule 26 (statute -> writting .)
    ID              reduce using rule 26 (statute -> writting .)
    LIST            reduce using rule 26 (statute -> writting .)
    WHILE           reduce using rule 26 (statute -> writting .)
    TIMES           reduce using rule 26 (statute -> writting .)
    BOOL            reduce using rule 26 (statute -> writting .)
    INT             reduce using rule 26 (statute -> writting .)
    FLOAT           reduce using rule 26 (statute -> writting .)
    STRING          reduce using rule 26 (statute -> writting .)
    RETURN          reduce using rule 26 (statute -> writting .)
    C_BRACKET       reduce using rule 26 (statute -> writting .)


state 28

    (98) loop -> timesloop .

    IF              reduce using rule 98 (loop -> timesloop .)
    PRINT           reduce using rule 98 (loop -> timesloop .)
    ID              reduce using rule 98 (loop -> timesloop .)
    LIST            reduce using rule 98 (loop -> timesloop .)
    WHILE           reduce using rule 98 (loop -> timesloop .)
    TIMES           reduce using rule 98 (loop -> timesloop .)
    BOOL            reduce using rule 98 (loop -> timesloop .)
    INT             reduce using rule 98 (loop -> timesloop .)
    FLOAT           reduce using rule 98 (loop -> timesloop .)
    STRING          reduce using rule 98 (loop -> timesloop .)
    RETURN          reduce using rule 98 (loop -> timesloop .)
    C_BRACKET       reduce using rule 98 (loop -> timesloop .)


state 29

    (101) functioncall -> ID . O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON
    (77) var_assign -> ID . listaccess
    (79) listaccess -> . O_S_BRACKET INTCONST C_S_BRACKET
    (80) listaccess -> .

    O_PARENTHESIS   shift and go to state 49
    O_S_BRACKET     shift and go to state 47
    EQUALS          reduce using rule 80 (listaccess -> .)

    listaccess                     shift and go to state 48

state 30

    (25) statute -> condition .

    IF              reduce using rule 25 (statute -> condition .)
    PRINT           reduce using rule 25 (statute -> condition .)
    ID              reduce using rule 25 (statute -> condition .)
    LIST            reduce using rule 25 (statute -> condition .)
    WHILE           reduce using rule 25 (statute -> condition .)
    TIMES           reduce using rule 25 (statute -> condition .)
    BOOL            reduce using rule 25 (statute -> condition .)
    INT             reduce using rule 25 (statute -> condition .)
    FLOAT           reduce using rule 25 (statute -> condition .)
    STRING          reduce using rule 25 (statute -> condition .)
    RETURN          reduce using rule 25 (statute -> condition .)
    C_BRACKET       reduce using rule 25 (statute -> condition .)


state 31

    (45) condition -> IF . O_PARENTHESIS expression C_PARENTHESIS block else

    O_PARENTHESIS   shift and go to state 50


state 32

    (22) statutesloop -> statute . statutesloop
    (22) statutesloop -> . statute statutesloop
    (23) statutesloop -> .
    (24) statute -> . init
    (25) statute -> . condition
    (26) statute -> . writting
    (27) statute -> . loop
    (28) statute -> . assignation
    (29) statute -> . functioncall
    (35) init -> . listinit
    (36) init -> . normalinit
    (45) condition -> . IF O_PARENTHESIS expression C_PARENTHESIS block else
    (31) writting -> . PRINT O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON
    (97) loop -> . whileloop
    (98) loop -> . timesloop
    (30) assignation -> . var_assign EQUALS add_equals expression SEMICOLON
    (101) functioncall -> . ID O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON
    (39) listinit -> . LIST type var EQUALS add_equals list SEMICOLON
    (37) normalinit -> . type var EQUALS add_equals expression SEMICOLON
    (99) whileloop -> . WHILE O_PARENTHESIS expression C_PARENTHESIS block
    (100) timesloop -> . TIMES O_PARENTHESIS INTCONST C_PARENTHESIS block
    (77) var_assign -> . ID listaccess
    (11) type -> . BOOL
    (12) type -> . INT
    (13) type -> . FLOAT
    (14) type -> . STRING

    RETURN          reduce using rule 23 (statutesloop -> .)
    C_BRACKET       reduce using rule 23 (statutesloop -> .)
    IF              shift and go to state 31
    PRINT           shift and go to state 18
    ID              shift and go to state 29
    LIST            shift and go to state 37
    WHILE           shift and go to state 17
    TIMES           shift and go to state 16
    BOOL            shift and go to state 21
    INT             shift and go to state 35
    FLOAT           shift and go to state 36
    STRING          shift and go to state 25

    whileloop                      shift and go to state 19
    init                           shift and go to state 20
    var_assign                     shift and go to state 22
    type                           shift and go to state 23
    normalinit                     shift and go to state 24
    listinit                       shift and go to state 26
    writting                       shift and go to state 27
    timesloop                      shift and go to state 28
    condition                      shift and go to state 30
    statute                        shift and go to state 32
    assignation                    shift and go to state 33
    statutesloop                   shift and go to state 51
    functioncall                   shift and go to state 38
    loop                           shift and go to state 39

state 33

    (28) statute -> assignation .

    IF              reduce using rule 28 (statute -> assignation .)
    PRINT           reduce using rule 28 (statute -> assignation .)
    ID              reduce using rule 28 (statute -> assignation .)
    LIST            reduce using rule 28 (statute -> assignation .)
    WHILE           reduce using rule 28 (statute -> assignation .)
    TIMES           reduce using rule 28 (statute -> assignation .)
    BOOL            reduce using rule 28 (statute -> assignation .)
    INT             reduce using rule 28 (statute -> assignation .)
    FLOAT           reduce using rule 28 (statute -> assignation .)
    STRING          reduce using rule 28 (statute -> assignation .)
    RETURN          reduce using rule 28 (statute -> assignation .)
    C_BRACKET       reduce using rule 28 (statute -> assignation .)


state 34

    (19) block -> O_BRACKET statutesloop . functionreturn C_BRACKET
    (20) functionreturn -> . RETURN expression SEMICOLON
    (21) functionreturn -> .

    RETURN          shift and go to state 52
    C_BRACKET       reduce using rule 21 (functionreturn -> .)

    functionreturn                 shift and go to state 53

state 35

    (12) type -> INT .

    ID              reduce using rule 12 (type -> INT .)


state 36

    (13) type -> FLOAT .

    ID              reduce using rule 13 (type -> FLOAT .)


state 37

    (39) listinit -> LIST . type var EQUALS add_equals list SEMICOLON
    (11) type -> . BOOL
    (12) type -> . INT
    (13) type -> . FLOAT
    (14) type -> . STRING

    BOOL            shift and go to state 21
    INT             shift and go to state 35
    FLOAT           shift and go to state 36
    STRING          shift and go to state 25

    type                           shift and go to state 54

state 38

    (29) statute -> functioncall .

    IF              reduce using rule 29 (statute -> functioncall .)
    PRINT           reduce using rule 29 (statute -> functioncall .)
    ID              reduce using rule 29 (statute -> functioncall .)
    LIST            reduce using rule 29 (statute -> functioncall .)
    WHILE           reduce using rule 29 (statute -> functioncall .)
    TIMES           reduce using rule 29 (statute -> functioncall .)
    BOOL            reduce using rule 29 (statute -> functioncall .)
    INT             reduce using rule 29 (statute -> functioncall .)
    FLOAT           reduce using rule 29 (statute -> functioncall .)
    STRING          reduce using rule 29 (statute -> functioncall .)
    RETURN          reduce using rule 29 (statute -> functioncall .)
    C_BRACKET       reduce using rule 29 (statute -> functioncall .)


state 39

    (27) statute -> loop .

    IF              reduce using rule 27 (statute -> loop .)
    PRINT           reduce using rule 27 (statute -> loop .)
    ID              reduce using rule 27 (statute -> loop .)
    LIST            reduce using rule 27 (statute -> loop .)
    WHILE           reduce using rule 27 (statute -> loop .)
    TIMES           reduce using rule 27 (statute -> loop .)
    BOOL            reduce using rule 27 (statute -> loop .)
    INT             reduce using rule 27 (statute -> loop .)
    FLOAT           reduce using rule 27 (statute -> loop .)
    STRING          reduce using rule 27 (statute -> loop .)
    RETURN          reduce using rule 27 (statute -> loop .)
    C_BRACKET       reduce using rule 27 (statute -> loop .)


state 40

    (5) function -> FUNCTION functiontype ID . O_PARENTHESIS parameters C_PARENTHESIS block

    O_PARENTHESIS   shift and go to state 55


state 41

    (100) timesloop -> TIMES O_PARENTHESIS . INTCONST C_PARENTHESIS block

    INTCONST        shift and go to state 56


state 42

    (99) whileloop -> WHILE O_PARENTHESIS . expression C_PARENTHESIS block
    (48) expression -> . expression2 expressionoptional
    (51) expression2 -> . exp expression2optional
    (62) exp -> . term exploop
    (67) term -> . fact termloop
    (73) fact -> . varconst
    (74) fact -> . O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis
    (81) varconst -> . varconstfunction
    (82) varconst -> . constants
    (83) varconstfunction -> . ID functionorlist
    (87) constants -> . INTCONST add_int_constant_to_dict
    (88) constants -> . FLOATCONST add_float_constant_to_dict
    (89) constants -> . STRINGCONST add_string_constant_to_dict
    (90) constants -> . booleanconst
    (91) booleanconst -> . TRUE add_bool_constant_to_dict
    (92) booleanconst -> . FALSE add_bool_constant_to_dict

    O_PARENTHESIS   shift and go to state 58
    ID              shift and go to state 64
    INTCONST        shift and go to state 62
    FLOATCONST      shift and go to state 57
    STRINGCONST     shift and go to state 60
    TRUE            shift and go to state 59
    FALSE           shift and go to state 67

    term                           shift and go to state 66
    booleanconst                   shift and go to state 70
    varconst                       shift and go to state 68
    fact                           shift and go to state 72
    exp                            shift and go to state 69
    varconstfunction               shift and go to state 61
    constants                      shift and go to state 65
    expression2                    shift and go to state 63
    expression                     shift and go to state 71

state 43

    (31) writting -> PRINT O_PARENTHESIS . writtingloop C_PARENTHESIS SEMICOLON
    (32) writtingloop -> . expression optionalwritting
    (48) expression -> . expression2 expressionoptional
    (51) expression2 -> . exp expression2optional
    (62) exp -> . term exploop
    (67) term -> . fact termloop
    (73) fact -> . varconst
    (74) fact -> . O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis
    (81) varconst -> . varconstfunction
    (82) varconst -> . constants
    (83) varconstfunction -> . ID functionorlist
    (87) constants -> . INTCONST add_int_constant_to_dict
    (88) constants -> . FLOATCONST add_float_constant_to_dict
    (89) constants -> . STRINGCONST add_string_constant_to_dict
    (90) constants -> . booleanconst
    (91) booleanconst -> . TRUE add_bool_constant_to_dict
    (92) booleanconst -> . FALSE add_bool_constant_to_dict

    O_PARENTHESIS   shift and go to state 58
    ID              shift and go to state 64
    INTCONST        shift and go to state 62
    FLOATCONST      shift and go to state 57
    STRINGCONST     shift and go to state 60
    TRUE            shift and go to state 59
    FALSE           shift and go to state 67

    varconstfunction               shift and go to state 61
    expression2                    shift and go to state 63
    constants                      shift and go to state 65
    term                           shift and go to state 66
    varconst                       shift and go to state 68
    exp                            shift and go to state 69
    booleanconst                   shift and go to state 70
    writtingloop                   shift and go to state 73
    expression                     shift and go to state 74
    fact                           shift and go to state 72

state 44

    (30) assignation -> var_assign EQUALS . add_equals expression SEMICOLON
    (38) add_equals -> .

    O_PARENTHESIS   reduce using rule 38 (add_equals -> .)
    ID              reduce using rule 38 (add_equals -> .)
    INTCONST        reduce using rule 38 (add_equals -> .)
    FLOATCONST      reduce using rule 38 (add_equals -> .)
    STRINGCONST     reduce using rule 38 (add_equals -> .)
    TRUE            reduce using rule 38 (add_equals -> .)
    FALSE           reduce using rule 38 (add_equals -> .)

    add_equals                     shift and go to state 75

state 45

    (37) normalinit -> type var . EQUALS add_equals expression SEMICOLON

    EQUALS          shift and go to state 76


state 46

    (78) var -> ID . listaccess
    (79) listaccess -> . O_S_BRACKET INTCONST C_S_BRACKET
    (80) listaccess -> .

    O_S_BRACKET     shift and go to state 47
    EQUALS          reduce using rule 80 (listaccess -> .)

    listaccess                     shift and go to state 77

state 47

    (79) listaccess -> O_S_BRACKET . INTCONST C_S_BRACKET

    INTCONST        shift and go to state 78


state 48

    (77) var_assign -> ID listaccess .

    EQUALS          reduce using rule 77 (var_assign -> ID listaccess .)


state 49

    (101) functioncall -> ID O_PARENTHESIS . parametersinput C_PARENTHESIS SEMICOLON
    (102) parametersinput -> . expression parametersinputloop
    (103) parametersinput -> .
    (48) expression -> . expression2 expressionoptional
    (51) expression2 -> . exp expression2optional
    (62) exp -> . term exploop
    (67) term -> . fact termloop
    (73) fact -> . varconst
    (74) fact -> . O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis
    (81) varconst -> . varconstfunction
    (82) varconst -> . constants
    (83) varconstfunction -> . ID functionorlist
    (87) constants -> . INTCONST add_int_constant_to_dict
    (88) constants -> . FLOATCONST add_float_constant_to_dict
    (89) constants -> . STRINGCONST add_string_constant_to_dict
    (90) constants -> . booleanconst
    (91) booleanconst -> . TRUE add_bool_constant_to_dict
    (92) booleanconst -> . FALSE add_bool_constant_to_dict

    C_PARENTHESIS   reduce using rule 103 (parametersinput -> .)
    O_PARENTHESIS   shift and go to state 58
    ID              shift and go to state 64
    INTCONST        shift and go to state 62
    FLOATCONST      shift and go to state 57
    STRINGCONST     shift and go to state 60
    TRUE            shift and go to state 59
    FALSE           shift and go to state 67

    varconstfunction               shift and go to state 61
    parametersinput                shift and go to state 79
    expression2                    shift and go to state 63
    constants                      shift and go to state 65
    term                           shift and go to state 66
    varconst                       shift and go to state 68
    exp                            shift and go to state 69
    booleanconst                   shift and go to state 70
    expression                     shift and go to state 80
    fact                           shift and go to state 72

state 50

    (45) condition -> IF O_PARENTHESIS . expression C_PARENTHESIS block else
    (48) expression -> . expression2 expressionoptional
    (51) expression2 -> . exp expression2optional
    (62) exp -> . term exploop
    (67) term -> . fact termloop
    (73) fact -> . varconst
    (74) fact -> . O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis
    (81) varconst -> . varconstfunction
    (82) varconst -> . constants
    (83) varconstfunction -> . ID functionorlist
    (87) constants -> . INTCONST add_int_constant_to_dict
    (88) constants -> . FLOATCONST add_float_constant_to_dict
    (89) constants -> . STRINGCONST add_string_constant_to_dict
    (90) constants -> . booleanconst
    (91) booleanconst -> . TRUE add_bool_constant_to_dict
    (92) booleanconst -> . FALSE add_bool_constant_to_dict

    O_PARENTHESIS   shift and go to state 58
    ID              shift and go to state 64
    INTCONST        shift and go to state 62
    FLOATCONST      shift and go to state 57
    STRINGCONST     shift and go to state 60
    TRUE            shift and go to state 59
    FALSE           shift and go to state 67

    varconstfunction               shift and go to state 61
    expression2                    shift and go to state 63
    constants                      shift and go to state 65
    term                           shift and go to state 66
    varconst                       shift and go to state 68
    exp                            shift and go to state 69
    booleanconst                   shift and go to state 70
    expression                     shift and go to state 81
    fact                           shift and go to state 72

state 51

    (22) statutesloop -> statute statutesloop .

    RETURN          reduce using rule 22 (statutesloop -> statute statutesloop .)
    C_BRACKET       reduce using rule 22 (statutesloop -> statute statutesloop .)


state 52

    (20) functionreturn -> RETURN . expression SEMICOLON
    (48) expression -> . expression2 expressionoptional
    (51) expression2 -> . exp expression2optional
    (62) exp -> . term exploop
    (67) term -> . fact termloop
    (73) fact -> . varconst
    (74) fact -> . O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis
    (81) varconst -> . varconstfunction
    (82) varconst -> . constants
    (83) varconstfunction -> . ID functionorlist
    (87) constants -> . INTCONST add_int_constant_to_dict
    (88) constants -> . FLOATCONST add_float_constant_to_dict
    (89) constants -> . STRINGCONST add_string_constant_to_dict
    (90) constants -> . booleanconst
    (91) booleanconst -> . TRUE add_bool_constant_to_dict
    (92) booleanconst -> . FALSE add_bool_constant_to_dict

    O_PARENTHESIS   shift and go to state 58
    ID              shift and go to state 64
    INTCONST        shift and go to state 62
    FLOATCONST      shift and go to state 57
    STRINGCONST     shift and go to state 60
    TRUE            shift and go to state 59
    FALSE           shift and go to state 67

    term                           shift and go to state 66
    booleanconst                   shift and go to state 70
    varconst                       shift and go to state 68
    constants                      shift and go to state 65
    exp                            shift and go to state 69
    varconstfunction               shift and go to state 61
    expression2                    shift and go to state 63
    expression                     shift and go to state 82
    fact                           shift and go to state 72

state 53

    (19) block -> O_BRACKET statutesloop functionreturn . C_BRACKET

    C_BRACKET       shift and go to state 83


state 54

    (39) listinit -> LIST type . var EQUALS add_equals list SEMICOLON
    (78) var -> . ID listaccess

    ID              shift and go to state 46

    var                            shift and go to state 84

state 55

    (5) function -> FUNCTION functiontype ID O_PARENTHESIS . parameters C_PARENTHESIS block
    (106) parameters -> . parameterinit parametersloop
    (107) parameters -> .
    (108) parameterinit -> . parametertype ID
    (15) parametertype -> . BOOL
    (16) parametertype -> . INT
    (17) parametertype -> . FLOAT
    (18) parametertype -> . STRING

    C_PARENTHESIS   reduce using rule 107 (parameters -> .)
    BOOL            shift and go to state 89
    INT             shift and go to state 87
    FLOAT           shift and go to state 88
    STRING          shift and go to state 91

    parametertype                  shift and go to state 85
    parameters                     shift and go to state 86
    parameterinit                  shift and go to state 90

state 56

    (100) timesloop -> TIMES O_PARENTHESIS INTCONST . C_PARENTHESIS block

    C_PARENTHESIS   shift and go to state 92


state 57

    (88) constants -> FLOATCONST . add_float_constant_to_dict
    (94) add_float_constant_to_dict -> .

    MULTIPLY        reduce using rule 94 (add_float_constant_to_dict -> .)
    DIVIDE          reduce using rule 94 (add_float_constant_to_dict -> .)
    MOD             reduce using rule 94 (add_float_constant_to_dict -> .)
    SUM             reduce using rule 94 (add_float_constant_to_dict -> .)
    MINUS           reduce using rule 94 (add_float_constant_to_dict -> .)
    EQUALITY        reduce using rule 94 (add_float_constant_to_dict -> .)
    GREATER         reduce using rule 94 (add_float_constant_to_dict -> .)
    GREATER_EQUAL   reduce using rule 94 (add_float_constant_to_dict -> .)
    LESS            reduce using rule 94 (add_float_constant_to_dict -> .)
    LESS_EQUAL      reduce using rule 94 (add_float_constant_to_dict -> .)
    DIFFERENT       reduce using rule 94 (add_float_constant_to_dict -> .)
    AND             reduce using rule 94 (add_float_constant_to_dict -> .)
    OR              reduce using rule 94 (add_float_constant_to_dict -> .)
    C_PARENTHESIS   reduce using rule 94 (add_float_constant_to_dict -> .)
    COMMA           reduce using rule 94 (add_float_constant_to_dict -> .)
    SEMICOLON       reduce using rule 94 (add_float_constant_to_dict -> .)
    C_S_BRACKET     reduce using rule 94 (add_float_constant_to_dict -> .)

    add_float_constant_to_dict     shift and go to state 93

state 58

    (74) fact -> O_PARENTHESIS . add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis
    (75) add_o_parenthesis -> .

    O_PARENTHESIS   reduce using rule 75 (add_o_parenthesis -> .)
    ID              reduce using rule 75 (add_o_parenthesis -> .)
    INTCONST        reduce using rule 75 (add_o_parenthesis -> .)
    FLOATCONST      reduce using rule 75 (add_o_parenthesis -> .)
    STRINGCONST     reduce using rule 75 (add_o_parenthesis -> .)
    TRUE            reduce using rule 75 (add_o_parenthesis -> .)
    FALSE           reduce using rule 75 (add_o_parenthesis -> .)

    add_o_parenthesis              shift and go to state 94

state 59

    (91) booleanconst -> TRUE . add_bool_constant_to_dict
    (96) add_bool_constant_to_dict -> .

    MULTIPLY        reduce using rule 96 (add_bool_constant_to_dict -> .)
    DIVIDE          reduce using rule 96 (add_bool_constant_to_dict -> .)
    MOD             reduce using rule 96 (add_bool_constant_to_dict -> .)
    SUM             reduce using rule 96 (add_bool_constant_to_dict -> .)
    MINUS           reduce using rule 96 (add_bool_constant_to_dict -> .)
    EQUALITY        reduce using rule 96 (add_bool_constant_to_dict -> .)
    GREATER         reduce using rule 96 (add_bool_constant_to_dict -> .)
    GREATER_EQUAL   reduce using rule 96 (add_bool_constant_to_dict -> .)
    LESS            reduce using rule 96 (add_bool_constant_to_dict -> .)
    LESS_EQUAL      reduce using rule 96 (add_bool_constant_to_dict -> .)
    DIFFERENT       reduce using rule 96 (add_bool_constant_to_dict -> .)
    AND             reduce using rule 96 (add_bool_constant_to_dict -> .)
    OR              reduce using rule 96 (add_bool_constant_to_dict -> .)
    C_PARENTHESIS   reduce using rule 96 (add_bool_constant_to_dict -> .)
    COMMA           reduce using rule 96 (add_bool_constant_to_dict -> .)
    SEMICOLON       reduce using rule 96 (add_bool_constant_to_dict -> .)
    C_S_BRACKET     reduce using rule 96 (add_bool_constant_to_dict -> .)

    add_bool_constant_to_dict      shift and go to state 95

state 60

    (89) constants -> STRINGCONST . add_string_constant_to_dict
    (95) add_string_constant_to_dict -> .

    MULTIPLY        reduce using rule 95 (add_string_constant_to_dict -> .)
    DIVIDE          reduce using rule 95 (add_string_constant_to_dict -> .)
    MOD             reduce using rule 95 (add_string_constant_to_dict -> .)
    SUM             reduce using rule 95 (add_string_constant_to_dict -> .)
    MINUS           reduce using rule 95 (add_string_constant_to_dict -> .)
    EQUALITY        reduce using rule 95 (add_string_constant_to_dict -> .)
    GREATER         reduce using rule 95 (add_string_constant_to_dict -> .)
    GREATER_EQUAL   reduce using rule 95 (add_string_constant_to_dict -> .)
    LESS            reduce using rule 95 (add_string_constant_to_dict -> .)
    LESS_EQUAL      reduce using rule 95 (add_string_constant_to_dict -> .)
    DIFFERENT       reduce using rule 95 (add_string_constant_to_dict -> .)
    AND             reduce using rule 95 (add_string_constant_to_dict -> .)
    OR              reduce using rule 95 (add_string_constant_to_dict -> .)
    C_PARENTHESIS   reduce using rule 95 (add_string_constant_to_dict -> .)
    COMMA           reduce using rule 95 (add_string_constant_to_dict -> .)
    SEMICOLON       reduce using rule 95 (add_string_constant_to_dict -> .)
    C_S_BRACKET     reduce using rule 95 (add_string_constant_to_dict -> .)

    add_string_constant_to_dict    shift and go to state 96

state 61

    (81) varconst -> varconstfunction .

    MULTIPLY        reduce using rule 81 (varconst -> varconstfunction .)
    DIVIDE          reduce using rule 81 (varconst -> varconstfunction .)
    MOD             reduce using rule 81 (varconst -> varconstfunction .)
    SUM             reduce using rule 81 (varconst -> varconstfunction .)
    MINUS           reduce using rule 81 (varconst -> varconstfunction .)
    EQUALITY        reduce using rule 81 (varconst -> varconstfunction .)
    GREATER         reduce using rule 81 (varconst -> varconstfunction .)
    GREATER_EQUAL   reduce using rule 81 (varconst -> varconstfunction .)
    LESS            reduce using rule 81 (varconst -> varconstfunction .)
    LESS_EQUAL      reduce using rule 81 (varconst -> varconstfunction .)
    DIFFERENT       reduce using rule 81 (varconst -> varconstfunction .)
    AND             reduce using rule 81 (varconst -> varconstfunction .)
    OR              reduce using rule 81 (varconst -> varconstfunction .)
    C_PARENTHESIS   reduce using rule 81 (varconst -> varconstfunction .)
    COMMA           reduce using rule 81 (varconst -> varconstfunction .)
    SEMICOLON       reduce using rule 81 (varconst -> varconstfunction .)


state 62

    (87) constants -> INTCONST . add_int_constant_to_dict
    (93) add_int_constant_to_dict -> .

    MULTIPLY        reduce using rule 93 (add_int_constant_to_dict -> .)
    DIVIDE          reduce using rule 93 (add_int_constant_to_dict -> .)
    MOD             reduce using rule 93 (add_int_constant_to_dict -> .)
    SUM             reduce using rule 93 (add_int_constant_to_dict -> .)
    MINUS           reduce using rule 93 (add_int_constant_to_dict -> .)
    EQUALITY        reduce using rule 93 (add_int_constant_to_dict -> .)
    GREATER         reduce using rule 93 (add_int_constant_to_dict -> .)
    GREATER_EQUAL   reduce using rule 93 (add_int_constant_to_dict -> .)
    LESS            reduce using rule 93 (add_int_constant_to_dict -> .)
    LESS_EQUAL      reduce using rule 93 (add_int_constant_to_dict -> .)
    DIFFERENT       reduce using rule 93 (add_int_constant_to_dict -> .)
    AND             reduce using rule 93 (add_int_constant_to_dict -> .)
    OR              reduce using rule 93 (add_int_constant_to_dict -> .)
    C_PARENTHESIS   reduce using rule 93 (add_int_constant_to_dict -> .)
    COMMA           reduce using rule 93 (add_int_constant_to_dict -> .)
    SEMICOLON       reduce using rule 93 (add_int_constant_to_dict -> .)
    C_S_BRACKET     reduce using rule 93 (add_int_constant_to_dict -> .)

    add_int_constant_to_dict       shift and go to state 97

state 63

    (48) expression -> expression2 . expressionoptional
    (49) expressionoptional -> . logicop expression2
    (50) expressionoptional -> .
    (54) logicop -> . AND
    (55) logicop -> . OR

    C_PARENTHESIS   reduce using rule 50 (expressionoptional -> .)
    COMMA           reduce using rule 50 (expressionoptional -> .)
    SEMICOLON       reduce using rule 50 (expressionoptional -> .)
    AND             shift and go to state 98
    OR              shift and go to state 101

    logicop                        shift and go to state 99
    expressionoptional             shift and go to state 100

state 64

    (83) varconstfunction -> ID . functionorlist
    (84) functionorlist -> . O_S_BRACKET INTCONST C_S_BRACKET
    (85) functionorlist -> . O_PARENTHESIS parametersinput C_PARENTHESIS
    (86) functionorlist -> .

    O_S_BRACKET     shift and go to state 102
    O_PARENTHESIS   shift and go to state 104
    MULTIPLY        reduce using rule 86 (functionorlist -> .)
    DIVIDE          reduce using rule 86 (functionorlist -> .)
    MOD             reduce using rule 86 (functionorlist -> .)
    SUM             reduce using rule 86 (functionorlist -> .)
    MINUS           reduce using rule 86 (functionorlist -> .)
    EQUALITY        reduce using rule 86 (functionorlist -> .)
    GREATER         reduce using rule 86 (functionorlist -> .)
    GREATER_EQUAL   reduce using rule 86 (functionorlist -> .)
    LESS            reduce using rule 86 (functionorlist -> .)
    LESS_EQUAL      reduce using rule 86 (functionorlist -> .)
    DIFFERENT       reduce using rule 86 (functionorlist -> .)
    AND             reduce using rule 86 (functionorlist -> .)
    OR              reduce using rule 86 (functionorlist -> .)
    C_PARENTHESIS   reduce using rule 86 (functionorlist -> .)
    COMMA           reduce using rule 86 (functionorlist -> .)
    SEMICOLON       reduce using rule 86 (functionorlist -> .)

    functionorlist                 shift and go to state 103

state 65

    (82) varconst -> constants .

    MULTIPLY        reduce using rule 82 (varconst -> constants .)
    DIVIDE          reduce using rule 82 (varconst -> constants .)
    MOD             reduce using rule 82 (varconst -> constants .)
    SUM             reduce using rule 82 (varconst -> constants .)
    MINUS           reduce using rule 82 (varconst -> constants .)
    EQUALITY        reduce using rule 82 (varconst -> constants .)
    GREATER         reduce using rule 82 (varconst -> constants .)
    GREATER_EQUAL   reduce using rule 82 (varconst -> constants .)
    LESS            reduce using rule 82 (varconst -> constants .)
    LESS_EQUAL      reduce using rule 82 (varconst -> constants .)
    DIFFERENT       reduce using rule 82 (varconst -> constants .)
    AND             reduce using rule 82 (varconst -> constants .)
    OR              reduce using rule 82 (varconst -> constants .)
    C_PARENTHESIS   reduce using rule 82 (varconst -> constants .)
    COMMA           reduce using rule 82 (varconst -> constants .)
    SEMICOLON       reduce using rule 82 (varconst -> constants .)


state 66

    (62) exp -> term . exploop
    (63) exploop -> . addsub exp
    (64) exploop -> .
    (65) addsub -> . SUM
    (66) addsub -> . MINUS

    EQUALITY        reduce using rule 64 (exploop -> .)
    GREATER         reduce using rule 64 (exploop -> .)
    GREATER_EQUAL   reduce using rule 64 (exploop -> .)
    LESS            reduce using rule 64 (exploop -> .)
    LESS_EQUAL      reduce using rule 64 (exploop -> .)
    DIFFERENT       reduce using rule 64 (exploop -> .)
    AND             reduce using rule 64 (exploop -> .)
    OR              reduce using rule 64 (exploop -> .)
    C_PARENTHESIS   reduce using rule 64 (exploop -> .)
    COMMA           reduce using rule 64 (exploop -> .)
    SEMICOLON       reduce using rule 64 (exploop -> .)
    SUM             shift and go to state 105
    MINUS           shift and go to state 108

    exploop                        shift and go to state 106
    addsub                         shift and go to state 107

state 67

    (92) booleanconst -> FALSE . add_bool_constant_to_dict
    (96) add_bool_constant_to_dict -> .

    MULTIPLY        reduce using rule 96 (add_bool_constant_to_dict -> .)
    DIVIDE          reduce using rule 96 (add_bool_constant_to_dict -> .)
    MOD             reduce using rule 96 (add_bool_constant_to_dict -> .)
    SUM             reduce using rule 96 (add_bool_constant_to_dict -> .)
    MINUS           reduce using rule 96 (add_bool_constant_to_dict -> .)
    EQUALITY        reduce using rule 96 (add_bool_constant_to_dict -> .)
    GREATER         reduce using rule 96 (add_bool_constant_to_dict -> .)
    GREATER_EQUAL   reduce using rule 96 (add_bool_constant_to_dict -> .)
    LESS            reduce using rule 96 (add_bool_constant_to_dict -> .)
    LESS_EQUAL      reduce using rule 96 (add_bool_constant_to_dict -> .)
    DIFFERENT       reduce using rule 96 (add_bool_constant_to_dict -> .)
    AND             reduce using rule 96 (add_bool_constant_to_dict -> .)
    OR              reduce using rule 96 (add_bool_constant_to_dict -> .)
    C_PARENTHESIS   reduce using rule 96 (add_bool_constant_to_dict -> .)
    COMMA           reduce using rule 96 (add_bool_constant_to_dict -> .)
    SEMICOLON       reduce using rule 96 (add_bool_constant_to_dict -> .)
    C_S_BRACKET     reduce using rule 96 (add_bool_constant_to_dict -> .)

    add_bool_constant_to_dict      shift and go to state 109

state 68

    (73) fact -> varconst .

    MULTIPLY        reduce using rule 73 (fact -> varconst .)
    DIVIDE          reduce using rule 73 (fact -> varconst .)
    MOD             reduce using rule 73 (fact -> varconst .)
    SUM             reduce using rule 73 (fact -> varconst .)
    MINUS           reduce using rule 73 (fact -> varconst .)
    EQUALITY        reduce using rule 73 (fact -> varconst .)
    GREATER         reduce using rule 73 (fact -> varconst .)
    GREATER_EQUAL   reduce using rule 73 (fact -> varconst .)
    LESS            reduce using rule 73 (fact -> varconst .)
    LESS_EQUAL      reduce using rule 73 (fact -> varconst .)
    DIFFERENT       reduce using rule 73 (fact -> varconst .)
    AND             reduce using rule 73 (fact -> varconst .)
    OR              reduce using rule 73 (fact -> varconst .)
    C_PARENTHESIS   reduce using rule 73 (fact -> varconst .)
    COMMA           reduce using rule 73 (fact -> varconst .)
    SEMICOLON       reduce using rule 73 (fact -> varconst .)


state 69

    (51) expression2 -> exp . expression2optional
    (52) expression2optional -> . relop exp
    (53) expression2optional -> .
    (56) relop -> . EQUALITY
    (57) relop -> . GREATER
    (58) relop -> . GREATER_EQUAL
    (59) relop -> . LESS
    (60) relop -> . LESS_EQUAL
    (61) relop -> . DIFFERENT

    AND             reduce using rule 53 (expression2optional -> .)
    OR              reduce using rule 53 (expression2optional -> .)
    C_PARENTHESIS   reduce using rule 53 (expression2optional -> .)
    COMMA           reduce using rule 53 (expression2optional -> .)
    SEMICOLON       reduce using rule 53 (expression2optional -> .)
    EQUALITY        shift and go to state 111
    GREATER         shift and go to state 112
    GREATER_EQUAL   shift and go to state 113
    LESS            shift and go to state 114
    LESS_EQUAL      shift and go to state 116
    DIFFERENT       shift and go to state 110

    relop                          shift and go to state 117
    expression2optional            shift and go to state 115

state 70

    (90) constants -> booleanconst .

    MULTIPLY        reduce using rule 90 (constants -> booleanconst .)
    DIVIDE          reduce using rule 90 (constants -> booleanconst .)
    MOD             reduce using rule 90 (constants -> booleanconst .)
    SUM             reduce using rule 90 (constants -> booleanconst .)
    MINUS           reduce using rule 90 (constants -> booleanconst .)
    EQUALITY        reduce using rule 90 (constants -> booleanconst .)
    GREATER         reduce using rule 90 (constants -> booleanconst .)
    GREATER_EQUAL   reduce using rule 90 (constants -> booleanconst .)
    LESS            reduce using rule 90 (constants -> booleanconst .)
    LESS_EQUAL      reduce using rule 90 (constants -> booleanconst .)
    DIFFERENT       reduce using rule 90 (constants -> booleanconst .)
    AND             reduce using rule 90 (constants -> booleanconst .)
    OR              reduce using rule 90 (constants -> booleanconst .)
    C_PARENTHESIS   reduce using rule 90 (constants -> booleanconst .)
    COMMA           reduce using rule 90 (constants -> booleanconst .)
    C_S_BRACKET     reduce using rule 90 (constants -> booleanconst .)
    SEMICOLON       reduce using rule 90 (constants -> booleanconst .)


state 71

    (99) whileloop -> WHILE O_PARENTHESIS expression . C_PARENTHESIS block

    C_PARENTHESIS   shift and go to state 118


state 72

    (67) term -> fact . termloop
    (68) termloop -> . divmult term
    (69) termloop -> .
    (70) divmult -> . MULTIPLY
    (71) divmult -> . DIVIDE
    (72) divmult -> . MOD

    SUM             reduce using rule 69 (termloop -> .)
    MINUS           reduce using rule 69 (termloop -> .)
    EQUALITY        reduce using rule 69 (termloop -> .)
    GREATER         reduce using rule 69 (termloop -> .)
    GREATER_EQUAL   reduce using rule 69 (termloop -> .)
    LESS            reduce using rule 69 (termloop -> .)
    LESS_EQUAL      reduce using rule 69 (termloop -> .)
    DIFFERENT       reduce using rule 69 (termloop -> .)
    AND             reduce using rule 69 (termloop -> .)
    OR              reduce using rule 69 (termloop -> .)
    C_PARENTHESIS   reduce using rule 69 (termloop -> .)
    COMMA           reduce using rule 69 (termloop -> .)
    SEMICOLON       reduce using rule 69 (termloop -> .)
    MULTIPLY        shift and go to state 121
    DIVIDE          shift and go to state 119
    MOD             shift and go to state 123

    termloop                       shift and go to state 120
    divmult                        shift and go to state 122

state 73

    (31) writting -> PRINT O_PARENTHESIS writtingloop . C_PARENTHESIS SEMICOLON

    C_PARENTHESIS   shift and go to state 124


state 74

    (32) writtingloop -> expression . optionalwritting
    (33) optionalwritting -> . COMMA writtingloop
    (34) optionalwritting -> .

    COMMA           shift and go to state 126
    C_PARENTHESIS   reduce using rule 34 (optionalwritting -> .)

    optionalwritting               shift and go to state 125

state 75

    (30) assignation -> var_assign EQUALS add_equals . expression SEMICOLON
    (48) expression -> . expression2 expressionoptional
    (51) expression2 -> . exp expression2optional
    (62) exp -> . term exploop
    (67) term -> . fact termloop
    (73) fact -> . varconst
    (74) fact -> . O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis
    (81) varconst -> . varconstfunction
    (82) varconst -> . constants
    (83) varconstfunction -> . ID functionorlist
    (87) constants -> . INTCONST add_int_constant_to_dict
    (88) constants -> . FLOATCONST add_float_constant_to_dict
    (89) constants -> . STRINGCONST add_string_constant_to_dict
    (90) constants -> . booleanconst
    (91) booleanconst -> . TRUE add_bool_constant_to_dict
    (92) booleanconst -> . FALSE add_bool_constant_to_dict

    O_PARENTHESIS   shift and go to state 58
    ID              shift and go to state 64
    INTCONST        shift and go to state 62
    FLOATCONST      shift and go to state 57
    STRINGCONST     shift and go to state 60
    TRUE            shift and go to state 59
    FALSE           shift and go to state 67

    varconstfunction               shift and go to state 61
    expression2                    shift and go to state 63
    constants                      shift and go to state 65
    term                           shift and go to state 66
    varconst                       shift and go to state 68
    exp                            shift and go to state 69
    booleanconst                   shift and go to state 70
    expression                     shift and go to state 127
    fact                           shift and go to state 72

state 76

    (37) normalinit -> type var EQUALS . add_equals expression SEMICOLON
    (38) add_equals -> .

    O_PARENTHESIS   reduce using rule 38 (add_equals -> .)
    ID              reduce using rule 38 (add_equals -> .)
    INTCONST        reduce using rule 38 (add_equals -> .)
    FLOATCONST      reduce using rule 38 (add_equals -> .)
    STRINGCONST     reduce using rule 38 (add_equals -> .)
    TRUE            reduce using rule 38 (add_equals -> .)
    FALSE           reduce using rule 38 (add_equals -> .)

    add_equals                     shift and go to state 128

state 77

    (78) var -> ID listaccess .

    EQUALS          reduce using rule 78 (var -> ID listaccess .)


state 78

    (79) listaccess -> O_S_BRACKET INTCONST . C_S_BRACKET

    C_S_BRACKET     shift and go to state 129


state 79

    (101) functioncall -> ID O_PARENTHESIS parametersinput . C_PARENTHESIS SEMICOLON

    C_PARENTHESIS   shift and go to state 130


state 80

    (102) parametersinput -> expression . parametersinputloop
    (104) parametersinputloop -> . COMMA expression parametersinputloop
    (105) parametersinputloop -> .

    COMMA           shift and go to state 132
    C_PARENTHESIS   reduce using rule 105 (parametersinputloop -> .)

    parametersinputloop            shift and go to state 131

state 81

    (45) condition -> IF O_PARENTHESIS expression . C_PARENTHESIS block else

    C_PARENTHESIS   shift and go to state 133


state 82

    (20) functionreturn -> RETURN expression . SEMICOLON

    SEMICOLON       shift and go to state 134


state 83

    (19) block -> O_BRACKET statutesloop functionreturn C_BRACKET .

    IF              reduce using rule 19 (block -> O_BRACKET statutesloop functionreturn C_BRACKET .)
    PRINT           reduce using rule 19 (block -> O_BRACKET statutesloop functionreturn C_BRACKET .)
    ID              reduce using rule 19 (block -> O_BRACKET statutesloop functionreturn C_BRACKET .)
    LIST            reduce using rule 19 (block -> O_BRACKET statutesloop functionreturn C_BRACKET .)
    WHILE           reduce using rule 19 (block -> O_BRACKET statutesloop functionreturn C_BRACKET .)
    TIMES           reduce using rule 19 (block -> O_BRACKET statutesloop functionreturn C_BRACKET .)
    BOOL            reduce using rule 19 (block -> O_BRACKET statutesloop functionreturn C_BRACKET .)
    INT             reduce using rule 19 (block -> O_BRACKET statutesloop functionreturn C_BRACKET .)
    FLOAT           reduce using rule 19 (block -> O_BRACKET statutesloop functionreturn C_BRACKET .)
    STRING          reduce using rule 19 (block -> O_BRACKET statutesloop functionreturn C_BRACKET .)
    RETURN          reduce using rule 19 (block -> O_BRACKET statutesloop functionreturn C_BRACKET .)
    C_BRACKET       reduce using rule 19 (block -> O_BRACKET statutesloop functionreturn C_BRACKET .)
    FUNCTION        reduce using rule 19 (block -> O_BRACKET statutesloop functionreturn C_BRACKET .)
    $end            reduce using rule 19 (block -> O_BRACKET statutesloop functionreturn C_BRACKET .)
    ELSE            reduce using rule 19 (block -> O_BRACKET statutesloop functionreturn C_BRACKET .)


state 84

    (39) listinit -> LIST type var . EQUALS add_equals list SEMICOLON

    EQUALS          shift and go to state 135


state 85

    (108) parameterinit -> parametertype . ID

    ID              shift and go to state 136


state 86

    (5) function -> FUNCTION functiontype ID O_PARENTHESIS parameters . C_PARENTHESIS block

    C_PARENTHESIS   shift and go to state 137


state 87

    (16) parametertype -> INT .

    ID              reduce using rule 16 (parametertype -> INT .)


state 88

    (17) parametertype -> FLOAT .

    ID              reduce using rule 17 (parametertype -> FLOAT .)


state 89

    (15) parametertype -> BOOL .

    ID              reduce using rule 15 (parametertype -> BOOL .)


state 90

    (106) parameters -> parameterinit . parametersloop
    (109) parametersloop -> . COMMA parameterinit parametersloop
    (110) parametersloop -> .

    COMMA           shift and go to state 139
    C_PARENTHESIS   reduce using rule 110 (parametersloop -> .)

    parametersloop                 shift and go to state 138

state 91

    (18) parametertype -> STRING .

    ID              reduce using rule 18 (parametertype -> STRING .)


state 92

    (100) timesloop -> TIMES O_PARENTHESIS INTCONST C_PARENTHESIS . block
    (19) block -> . O_BRACKET statutesloop functionreturn C_BRACKET

    O_BRACKET       shift and go to state 7

    block                          shift and go to state 140

state 93

    (88) constants -> FLOATCONST add_float_constant_to_dict .

    MULTIPLY        reduce using rule 88 (constants -> FLOATCONST add_float_constant_to_dict .)
    DIVIDE          reduce using rule 88 (constants -> FLOATCONST add_float_constant_to_dict .)
    MOD             reduce using rule 88 (constants -> FLOATCONST add_float_constant_to_dict .)
    SUM             reduce using rule 88 (constants -> FLOATCONST add_float_constant_to_dict .)
    MINUS           reduce using rule 88 (constants -> FLOATCONST add_float_constant_to_dict .)
    EQUALITY        reduce using rule 88 (constants -> FLOATCONST add_float_constant_to_dict .)
    GREATER         reduce using rule 88 (constants -> FLOATCONST add_float_constant_to_dict .)
    GREATER_EQUAL   reduce using rule 88 (constants -> FLOATCONST add_float_constant_to_dict .)
    LESS            reduce using rule 88 (constants -> FLOATCONST add_float_constant_to_dict .)
    LESS_EQUAL      reduce using rule 88 (constants -> FLOATCONST add_float_constant_to_dict .)
    DIFFERENT       reduce using rule 88 (constants -> FLOATCONST add_float_constant_to_dict .)
    AND             reduce using rule 88 (constants -> FLOATCONST add_float_constant_to_dict .)
    OR              reduce using rule 88 (constants -> FLOATCONST add_float_constant_to_dict .)
    C_PARENTHESIS   reduce using rule 88 (constants -> FLOATCONST add_float_constant_to_dict .)
    COMMA           reduce using rule 88 (constants -> FLOATCONST add_float_constant_to_dict .)
    C_S_BRACKET     reduce using rule 88 (constants -> FLOATCONST add_float_constant_to_dict .)
    SEMICOLON       reduce using rule 88 (constants -> FLOATCONST add_float_constant_to_dict .)


state 94

    (74) fact -> O_PARENTHESIS add_o_parenthesis . expression C_PARENTHESIS add_c_parenthesis
    (48) expression -> . expression2 expressionoptional
    (51) expression2 -> . exp expression2optional
    (62) exp -> . term exploop
    (67) term -> . fact termloop
    (73) fact -> . varconst
    (74) fact -> . O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis
    (81) varconst -> . varconstfunction
    (82) varconst -> . constants
    (83) varconstfunction -> . ID functionorlist
    (87) constants -> . INTCONST add_int_constant_to_dict
    (88) constants -> . FLOATCONST add_float_constant_to_dict
    (89) constants -> . STRINGCONST add_string_constant_to_dict
    (90) constants -> . booleanconst
    (91) booleanconst -> . TRUE add_bool_constant_to_dict
    (92) booleanconst -> . FALSE add_bool_constant_to_dict

    O_PARENTHESIS   shift and go to state 58
    ID              shift and go to state 64
    INTCONST        shift and go to state 62
    FLOATCONST      shift and go to state 57
    STRINGCONST     shift and go to state 60
    TRUE            shift and go to state 59
    FALSE           shift and go to state 67

    term                           shift and go to state 66
    booleanconst                   shift and go to state 70
    varconst                       shift and go to state 68
    constants                      shift and go to state 65
    exp                            shift and go to state 69
    varconstfunction               shift and go to state 61
    expression2                    shift and go to state 63
    expression                     shift and go to state 141
    fact                           shift and go to state 72

state 95

    (91) booleanconst -> TRUE add_bool_constant_to_dict .

    MULTIPLY        reduce using rule 91 (booleanconst -> TRUE add_bool_constant_to_dict .)
    DIVIDE          reduce using rule 91 (booleanconst -> TRUE add_bool_constant_to_dict .)
    MOD             reduce using rule 91 (booleanconst -> TRUE add_bool_constant_to_dict .)
    SUM             reduce using rule 91 (booleanconst -> TRUE add_bool_constant_to_dict .)
    MINUS           reduce using rule 91 (booleanconst -> TRUE add_bool_constant_to_dict .)
    EQUALITY        reduce using rule 91 (booleanconst -> TRUE add_bool_constant_to_dict .)
    GREATER         reduce using rule 91 (booleanconst -> TRUE add_bool_constant_to_dict .)
    GREATER_EQUAL   reduce using rule 91 (booleanconst -> TRUE add_bool_constant_to_dict .)
    LESS            reduce using rule 91 (booleanconst -> TRUE add_bool_constant_to_dict .)
    LESS_EQUAL      reduce using rule 91 (booleanconst -> TRUE add_bool_constant_to_dict .)
    DIFFERENT       reduce using rule 91 (booleanconst -> TRUE add_bool_constant_to_dict .)
    AND             reduce using rule 91 (booleanconst -> TRUE add_bool_constant_to_dict .)
    OR              reduce using rule 91 (booleanconst -> TRUE add_bool_constant_to_dict .)
    COMMA           reduce using rule 91 (booleanconst -> TRUE add_bool_constant_to_dict .)
    C_PARENTHESIS   reduce using rule 91 (booleanconst -> TRUE add_bool_constant_to_dict .)
    SEMICOLON       reduce using rule 91 (booleanconst -> TRUE add_bool_constant_to_dict .)
    C_S_BRACKET     reduce using rule 91 (booleanconst -> TRUE add_bool_constant_to_dict .)


state 96

    (89) constants -> STRINGCONST add_string_constant_to_dict .

    MULTIPLY        reduce using rule 89 (constants -> STRINGCONST add_string_constant_to_dict .)
    DIVIDE          reduce using rule 89 (constants -> STRINGCONST add_string_constant_to_dict .)
    MOD             reduce using rule 89 (constants -> STRINGCONST add_string_constant_to_dict .)
    SUM             reduce using rule 89 (constants -> STRINGCONST add_string_constant_to_dict .)
    MINUS           reduce using rule 89 (constants -> STRINGCONST add_string_constant_to_dict .)
    EQUALITY        reduce using rule 89 (constants -> STRINGCONST add_string_constant_to_dict .)
    GREATER         reduce using rule 89 (constants -> STRINGCONST add_string_constant_to_dict .)
    GREATER_EQUAL   reduce using rule 89 (constants -> STRINGCONST add_string_constant_to_dict .)
    LESS            reduce using rule 89 (constants -> STRINGCONST add_string_constant_to_dict .)
    LESS_EQUAL      reduce using rule 89 (constants -> STRINGCONST add_string_constant_to_dict .)
    DIFFERENT       reduce using rule 89 (constants -> STRINGCONST add_string_constant_to_dict .)
    AND             reduce using rule 89 (constants -> STRINGCONST add_string_constant_to_dict .)
    OR              reduce using rule 89 (constants -> STRINGCONST add_string_constant_to_dict .)
    C_PARENTHESIS   reduce using rule 89 (constants -> STRINGCONST add_string_constant_to_dict .)
    COMMA           reduce using rule 89 (constants -> STRINGCONST add_string_constant_to_dict .)
    C_S_BRACKET     reduce using rule 89 (constants -> STRINGCONST add_string_constant_to_dict .)
    SEMICOLON       reduce using rule 89 (constants -> STRINGCONST add_string_constant_to_dict .)


state 97

    (87) constants -> INTCONST add_int_constant_to_dict .

    MULTIPLY        reduce using rule 87 (constants -> INTCONST add_int_constant_to_dict .)
    DIVIDE          reduce using rule 87 (constants -> INTCONST add_int_constant_to_dict .)
    MOD             reduce using rule 87 (constants -> INTCONST add_int_constant_to_dict .)
    SUM             reduce using rule 87 (constants -> INTCONST add_int_constant_to_dict .)
    MINUS           reduce using rule 87 (constants -> INTCONST add_int_constant_to_dict .)
    EQUALITY        reduce using rule 87 (constants -> INTCONST add_int_constant_to_dict .)
    GREATER         reduce using rule 87 (constants -> INTCONST add_int_constant_to_dict .)
    GREATER_EQUAL   reduce using rule 87 (constants -> INTCONST add_int_constant_to_dict .)
    LESS            reduce using rule 87 (constants -> INTCONST add_int_constant_to_dict .)
    LESS_EQUAL      reduce using rule 87 (constants -> INTCONST add_int_constant_to_dict .)
    DIFFERENT       reduce using rule 87 (constants -> INTCONST add_int_constant_to_dict .)
    AND             reduce using rule 87 (constants -> INTCONST add_int_constant_to_dict .)
    OR              reduce using rule 87 (constants -> INTCONST add_int_constant_to_dict .)
    C_PARENTHESIS   reduce using rule 87 (constants -> INTCONST add_int_constant_to_dict .)
    COMMA           reduce using rule 87 (constants -> INTCONST add_int_constant_to_dict .)
    C_S_BRACKET     reduce using rule 87 (constants -> INTCONST add_int_constant_to_dict .)
    SEMICOLON       reduce using rule 87 (constants -> INTCONST add_int_constant_to_dict .)


state 98

    (54) logicop -> AND .

    O_PARENTHESIS   reduce using rule 54 (logicop -> AND .)
    ID              reduce using rule 54 (logicop -> AND .)
    INTCONST        reduce using rule 54 (logicop -> AND .)
    FLOATCONST      reduce using rule 54 (logicop -> AND .)
    STRINGCONST     reduce using rule 54 (logicop -> AND .)
    TRUE            reduce using rule 54 (logicop -> AND .)
    FALSE           reduce using rule 54 (logicop -> AND .)


state 99

    (49) expressionoptional -> logicop . expression2
    (51) expression2 -> . exp expression2optional
    (62) exp -> . term exploop
    (67) term -> . fact termloop
    (73) fact -> . varconst
    (74) fact -> . O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis
    (81) varconst -> . varconstfunction
    (82) varconst -> . constants
    (83) varconstfunction -> . ID functionorlist
    (87) constants -> . INTCONST add_int_constant_to_dict
    (88) constants -> . FLOATCONST add_float_constant_to_dict
    (89) constants -> . STRINGCONST add_string_constant_to_dict
    (90) constants -> . booleanconst
    (91) booleanconst -> . TRUE add_bool_constant_to_dict
    (92) booleanconst -> . FALSE add_bool_constant_to_dict

    O_PARENTHESIS   shift and go to state 58
    ID              shift and go to state 64
    INTCONST        shift and go to state 62
    FLOATCONST      shift and go to state 57
    STRINGCONST     shift and go to state 60
    TRUE            shift and go to state 59
    FALSE           shift and go to state 67

    term                           shift and go to state 66
    booleanconst                   shift and go to state 70
    varconst                       shift and go to state 68
    constants                      shift and go to state 65
    exp                            shift and go to state 69
    varconstfunction               shift and go to state 61
    expression2                    shift and go to state 142
    fact                           shift and go to state 72

state 100

    (48) expression -> expression2 expressionoptional .

    COMMA           reduce using rule 48 (expression -> expression2 expressionoptional .)
    C_PARENTHESIS   reduce using rule 48 (expression -> expression2 expressionoptional .)
    SEMICOLON       reduce using rule 48 (expression -> expression2 expressionoptional .)


state 101

    (55) logicop -> OR .

    O_PARENTHESIS   reduce using rule 55 (logicop -> OR .)
    ID              reduce using rule 55 (logicop -> OR .)
    INTCONST        reduce using rule 55 (logicop -> OR .)
    FLOATCONST      reduce using rule 55 (logicop -> OR .)
    STRINGCONST     reduce using rule 55 (logicop -> OR .)
    TRUE            reduce using rule 55 (logicop -> OR .)
    FALSE           reduce using rule 55 (logicop -> OR .)


state 102

    (84) functionorlist -> O_S_BRACKET . INTCONST C_S_BRACKET

    INTCONST        shift and go to state 143


state 103

    (83) varconstfunction -> ID functionorlist .

    MULTIPLY        reduce using rule 83 (varconstfunction -> ID functionorlist .)
    DIVIDE          reduce using rule 83 (varconstfunction -> ID functionorlist .)
    MOD             reduce using rule 83 (varconstfunction -> ID functionorlist .)
    SUM             reduce using rule 83 (varconstfunction -> ID functionorlist .)
    MINUS           reduce using rule 83 (varconstfunction -> ID functionorlist .)
    EQUALITY        reduce using rule 83 (varconstfunction -> ID functionorlist .)
    GREATER         reduce using rule 83 (varconstfunction -> ID functionorlist .)
    GREATER_EQUAL   reduce using rule 83 (varconstfunction -> ID functionorlist .)
    LESS            reduce using rule 83 (varconstfunction -> ID functionorlist .)
    LESS_EQUAL      reduce using rule 83 (varconstfunction -> ID functionorlist .)
    DIFFERENT       reduce using rule 83 (varconstfunction -> ID functionorlist .)
    AND             reduce using rule 83 (varconstfunction -> ID functionorlist .)
    OR              reduce using rule 83 (varconstfunction -> ID functionorlist .)
    SEMICOLON       reduce using rule 83 (varconstfunction -> ID functionorlist .)
    C_PARENTHESIS   reduce using rule 83 (varconstfunction -> ID functionorlist .)
    COMMA           reduce using rule 83 (varconstfunction -> ID functionorlist .)


state 104

    (85) functionorlist -> O_PARENTHESIS . parametersinput C_PARENTHESIS
    (102) parametersinput -> . expression parametersinputloop
    (103) parametersinput -> .
    (48) expression -> . expression2 expressionoptional
    (51) expression2 -> . exp expression2optional
    (62) exp -> . term exploop
    (67) term -> . fact termloop
    (73) fact -> . varconst
    (74) fact -> . O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis
    (81) varconst -> . varconstfunction
    (82) varconst -> . constants
    (83) varconstfunction -> . ID functionorlist
    (87) constants -> . INTCONST add_int_constant_to_dict
    (88) constants -> . FLOATCONST add_float_constant_to_dict
    (89) constants -> . STRINGCONST add_string_constant_to_dict
    (90) constants -> . booleanconst
    (91) booleanconst -> . TRUE add_bool_constant_to_dict
    (92) booleanconst -> . FALSE add_bool_constant_to_dict

    C_PARENTHESIS   reduce using rule 103 (parametersinput -> .)
    O_PARENTHESIS   shift and go to state 58
    ID              shift and go to state 64
    INTCONST        shift and go to state 62
    FLOATCONST      shift and go to state 57
    STRINGCONST     shift and go to state 60
    TRUE            shift and go to state 59
    FALSE           shift and go to state 67

    varconstfunction               shift and go to state 61
    parametersinput                shift and go to state 144
    expression2                    shift and go to state 63
    constants                      shift and go to state 65
    term                           shift and go to state 66
    varconst                       shift and go to state 68
    exp                            shift and go to state 69
    booleanconst                   shift and go to state 70
    expression                     shift and go to state 80
    fact                           shift and go to state 72

state 105

    (65) addsub -> SUM .

    O_PARENTHESIS   reduce using rule 65 (addsub -> SUM .)
    ID              reduce using rule 65 (addsub -> SUM .)
    INTCONST        reduce using rule 65 (addsub -> SUM .)
    FLOATCONST      reduce using rule 65 (addsub -> SUM .)
    STRINGCONST     reduce using rule 65 (addsub -> SUM .)
    TRUE            reduce using rule 65 (addsub -> SUM .)
    FALSE           reduce using rule 65 (addsub -> SUM .)


state 106

    (62) exp -> term exploop .

    EQUALITY        reduce using rule 62 (exp -> term exploop .)
    GREATER         reduce using rule 62 (exp -> term exploop .)
    GREATER_EQUAL   reduce using rule 62 (exp -> term exploop .)
    LESS            reduce using rule 62 (exp -> term exploop .)
    LESS_EQUAL      reduce using rule 62 (exp -> term exploop .)
    DIFFERENT       reduce using rule 62 (exp -> term exploop .)
    AND             reduce using rule 62 (exp -> term exploop .)
    OR              reduce using rule 62 (exp -> term exploop .)
    SEMICOLON       reduce using rule 62 (exp -> term exploop .)
    C_PARENTHESIS   reduce using rule 62 (exp -> term exploop .)
    COMMA           reduce using rule 62 (exp -> term exploop .)


state 107

    (63) exploop -> addsub . exp
    (62) exp -> . term exploop
    (67) term -> . fact termloop
    (73) fact -> . varconst
    (74) fact -> . O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis
    (81) varconst -> . varconstfunction
    (82) varconst -> . constants
    (83) varconstfunction -> . ID functionorlist
    (87) constants -> . INTCONST add_int_constant_to_dict
    (88) constants -> . FLOATCONST add_float_constant_to_dict
    (89) constants -> . STRINGCONST add_string_constant_to_dict
    (90) constants -> . booleanconst
    (91) booleanconst -> . TRUE add_bool_constant_to_dict
    (92) booleanconst -> . FALSE add_bool_constant_to_dict

    O_PARENTHESIS   shift and go to state 58
    ID              shift and go to state 64
    INTCONST        shift and go to state 62
    FLOATCONST      shift and go to state 57
    STRINGCONST     shift and go to state 60
    TRUE            shift and go to state 59
    FALSE           shift and go to state 67

    term                           shift and go to state 66
    varconst                       shift and go to state 68
    constants                      shift and go to state 65
    exp                            shift and go to state 145
    booleanconst                   shift and go to state 70
    varconstfunction               shift and go to state 61
    fact                           shift and go to state 72

state 108

    (66) addsub -> MINUS .

    O_PARENTHESIS   reduce using rule 66 (addsub -> MINUS .)
    ID              reduce using rule 66 (addsub -> MINUS .)
    INTCONST        reduce using rule 66 (addsub -> MINUS .)
    FLOATCONST      reduce using rule 66 (addsub -> MINUS .)
    STRINGCONST     reduce using rule 66 (addsub -> MINUS .)
    TRUE            reduce using rule 66 (addsub -> MINUS .)
    FALSE           reduce using rule 66 (addsub -> MINUS .)


state 109

    (92) booleanconst -> FALSE add_bool_constant_to_dict .

    MULTIPLY        reduce using rule 92 (booleanconst -> FALSE add_bool_constant_to_dict .)
    DIVIDE          reduce using rule 92 (booleanconst -> FALSE add_bool_constant_to_dict .)
    MOD             reduce using rule 92 (booleanconst -> FALSE add_bool_constant_to_dict .)
    SUM             reduce using rule 92 (booleanconst -> FALSE add_bool_constant_to_dict .)
    MINUS           reduce using rule 92 (booleanconst -> FALSE add_bool_constant_to_dict .)
    EQUALITY        reduce using rule 92 (booleanconst -> FALSE add_bool_constant_to_dict .)
    GREATER         reduce using rule 92 (booleanconst -> FALSE add_bool_constant_to_dict .)
    GREATER_EQUAL   reduce using rule 92 (booleanconst -> FALSE add_bool_constant_to_dict .)
    LESS            reduce using rule 92 (booleanconst -> FALSE add_bool_constant_to_dict .)
    LESS_EQUAL      reduce using rule 92 (booleanconst -> FALSE add_bool_constant_to_dict .)
    DIFFERENT       reduce using rule 92 (booleanconst -> FALSE add_bool_constant_to_dict .)
    AND             reduce using rule 92 (booleanconst -> FALSE add_bool_constant_to_dict .)
    OR              reduce using rule 92 (booleanconst -> FALSE add_bool_constant_to_dict .)
    COMMA           reduce using rule 92 (booleanconst -> FALSE add_bool_constant_to_dict .)
    C_PARENTHESIS   reduce using rule 92 (booleanconst -> FALSE add_bool_constant_to_dict .)
    SEMICOLON       reduce using rule 92 (booleanconst -> FALSE add_bool_constant_to_dict .)
    C_S_BRACKET     reduce using rule 92 (booleanconst -> FALSE add_bool_constant_to_dict .)


state 110

    (61) relop -> DIFFERENT .

    O_PARENTHESIS   reduce using rule 61 (relop -> DIFFERENT .)
    ID              reduce using rule 61 (relop -> DIFFERENT .)
    INTCONST        reduce using rule 61 (relop -> DIFFERENT .)
    FLOATCONST      reduce using rule 61 (relop -> DIFFERENT .)
    STRINGCONST     reduce using rule 61 (relop -> DIFFERENT .)
    TRUE            reduce using rule 61 (relop -> DIFFERENT .)
    FALSE           reduce using rule 61 (relop -> DIFFERENT .)


state 111

    (56) relop -> EQUALITY .

    O_PARENTHESIS   reduce using rule 56 (relop -> EQUALITY .)
    ID              reduce using rule 56 (relop -> EQUALITY .)
    INTCONST        reduce using rule 56 (relop -> EQUALITY .)
    FLOATCONST      reduce using rule 56 (relop -> EQUALITY .)
    STRINGCONST     reduce using rule 56 (relop -> EQUALITY .)
    TRUE            reduce using rule 56 (relop -> EQUALITY .)
    FALSE           reduce using rule 56 (relop -> EQUALITY .)


state 112

    (57) relop -> GREATER .

    O_PARENTHESIS   reduce using rule 57 (relop -> GREATER .)
    ID              reduce using rule 57 (relop -> GREATER .)
    INTCONST        reduce using rule 57 (relop -> GREATER .)
    FLOATCONST      reduce using rule 57 (relop -> GREATER .)
    STRINGCONST     reduce using rule 57 (relop -> GREATER .)
    TRUE            reduce using rule 57 (relop -> GREATER .)
    FALSE           reduce using rule 57 (relop -> GREATER .)


state 113

    (58) relop -> GREATER_EQUAL .

    O_PARENTHESIS   reduce using rule 58 (relop -> GREATER_EQUAL .)
    ID              reduce using rule 58 (relop -> GREATER_EQUAL .)
    INTCONST        reduce using rule 58 (relop -> GREATER_EQUAL .)
    FLOATCONST      reduce using rule 58 (relop -> GREATER_EQUAL .)
    STRINGCONST     reduce using rule 58 (relop -> GREATER_EQUAL .)
    TRUE            reduce using rule 58 (relop -> GREATER_EQUAL .)
    FALSE           reduce using rule 58 (relop -> GREATER_EQUAL .)


state 114

    (59) relop -> LESS .

    O_PARENTHESIS   reduce using rule 59 (relop -> LESS .)
    ID              reduce using rule 59 (relop -> LESS .)
    INTCONST        reduce using rule 59 (relop -> LESS .)
    FLOATCONST      reduce using rule 59 (relop -> LESS .)
    STRINGCONST     reduce using rule 59 (relop -> LESS .)
    TRUE            reduce using rule 59 (relop -> LESS .)
    FALSE           reduce using rule 59 (relop -> LESS .)


state 115

    (51) expression2 -> exp expression2optional .

    C_PARENTHESIS   reduce using rule 51 (expression2 -> exp expression2optional .)
    COMMA           reduce using rule 51 (expression2 -> exp expression2optional .)
    SEMICOLON       reduce using rule 51 (expression2 -> exp expression2optional .)
    AND             reduce using rule 51 (expression2 -> exp expression2optional .)
    OR              reduce using rule 51 (expression2 -> exp expression2optional .)


state 116

    (60) relop -> LESS_EQUAL .

    O_PARENTHESIS   reduce using rule 60 (relop -> LESS_EQUAL .)
    ID              reduce using rule 60 (relop -> LESS_EQUAL .)
    INTCONST        reduce using rule 60 (relop -> LESS_EQUAL .)
    FLOATCONST      reduce using rule 60 (relop -> LESS_EQUAL .)
    STRINGCONST     reduce using rule 60 (relop -> LESS_EQUAL .)
    TRUE            reduce using rule 60 (relop -> LESS_EQUAL .)
    FALSE           reduce using rule 60 (relop -> LESS_EQUAL .)


state 117

    (52) expression2optional -> relop . exp
    (62) exp -> . term exploop
    (67) term -> . fact termloop
    (73) fact -> . varconst
    (74) fact -> . O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis
    (81) varconst -> . varconstfunction
    (82) varconst -> . constants
    (83) varconstfunction -> . ID functionorlist
    (87) constants -> . INTCONST add_int_constant_to_dict
    (88) constants -> . FLOATCONST add_float_constant_to_dict
    (89) constants -> . STRINGCONST add_string_constant_to_dict
    (90) constants -> . booleanconst
    (91) booleanconst -> . TRUE add_bool_constant_to_dict
    (92) booleanconst -> . FALSE add_bool_constant_to_dict

    O_PARENTHESIS   shift and go to state 58
    ID              shift and go to state 64
    INTCONST        shift and go to state 62
    FLOATCONST      shift and go to state 57
    STRINGCONST     shift and go to state 60
    TRUE            shift and go to state 59
    FALSE           shift and go to state 67

    term                           shift and go to state 66
    varconst                       shift and go to state 68
    constants                      shift and go to state 65
    exp                            shift and go to state 146
    booleanconst                   shift and go to state 70
    varconstfunction               shift and go to state 61
    fact                           shift and go to state 72

state 118

    (99) whileloop -> WHILE O_PARENTHESIS expression C_PARENTHESIS . block
    (19) block -> . O_BRACKET statutesloop functionreturn C_BRACKET

    O_BRACKET       shift and go to state 7

    block                          shift and go to state 147

state 119

    (71) divmult -> DIVIDE .

    O_PARENTHESIS   reduce using rule 71 (divmult -> DIVIDE .)
    ID              reduce using rule 71 (divmult -> DIVIDE .)
    INTCONST        reduce using rule 71 (divmult -> DIVIDE .)
    FLOATCONST      reduce using rule 71 (divmult -> DIVIDE .)
    STRINGCONST     reduce using rule 71 (divmult -> DIVIDE .)
    TRUE            reduce using rule 71 (divmult -> DIVIDE .)
    FALSE           reduce using rule 71 (divmult -> DIVIDE .)


state 120

    (67) term -> fact termloop .

    SUM             reduce using rule 67 (term -> fact termloop .)
    MINUS           reduce using rule 67 (term -> fact termloop .)
    EQUALITY        reduce using rule 67 (term -> fact termloop .)
    GREATER         reduce using rule 67 (term -> fact termloop .)
    GREATER_EQUAL   reduce using rule 67 (term -> fact termloop .)
    LESS            reduce using rule 67 (term -> fact termloop .)
    LESS_EQUAL      reduce using rule 67 (term -> fact termloop .)
    DIFFERENT       reduce using rule 67 (term -> fact termloop .)
    AND             reduce using rule 67 (term -> fact termloop .)
    OR              reduce using rule 67 (term -> fact termloop .)
    C_PARENTHESIS   reduce using rule 67 (term -> fact termloop .)
    COMMA           reduce using rule 67 (term -> fact termloop .)
    SEMICOLON       reduce using rule 67 (term -> fact termloop .)


state 121

    (70) divmult -> MULTIPLY .

    O_PARENTHESIS   reduce using rule 70 (divmult -> MULTIPLY .)
    ID              reduce using rule 70 (divmult -> MULTIPLY .)
    INTCONST        reduce using rule 70 (divmult -> MULTIPLY .)
    FLOATCONST      reduce using rule 70 (divmult -> MULTIPLY .)
    STRINGCONST     reduce using rule 70 (divmult -> MULTIPLY .)
    TRUE            reduce using rule 70 (divmult -> MULTIPLY .)
    FALSE           reduce using rule 70 (divmult -> MULTIPLY .)


state 122

    (68) termloop -> divmult . term
    (67) term -> . fact termloop
    (73) fact -> . varconst
    (74) fact -> . O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis
    (81) varconst -> . varconstfunction
    (82) varconst -> . constants
    (83) varconstfunction -> . ID functionorlist
    (87) constants -> . INTCONST add_int_constant_to_dict
    (88) constants -> . FLOATCONST add_float_constant_to_dict
    (89) constants -> . STRINGCONST add_string_constant_to_dict
    (90) constants -> . booleanconst
    (91) booleanconst -> . TRUE add_bool_constant_to_dict
    (92) booleanconst -> . FALSE add_bool_constant_to_dict

    O_PARENTHESIS   shift and go to state 58
    ID              shift and go to state 64
    INTCONST        shift and go to state 62
    FLOATCONST      shift and go to state 57
    STRINGCONST     shift and go to state 60
    TRUE            shift and go to state 59
    FALSE           shift and go to state 67

    term                           shift and go to state 148
    varconstfunction               shift and go to state 61
    varconst                       shift and go to state 68
    constants                      shift and go to state 65
    booleanconst                   shift and go to state 70
    fact                           shift and go to state 72

state 123

    (72) divmult -> MOD .

    O_PARENTHESIS   reduce using rule 72 (divmult -> MOD .)
    ID              reduce using rule 72 (divmult -> MOD .)
    INTCONST        reduce using rule 72 (divmult -> MOD .)
    FLOATCONST      reduce using rule 72 (divmult -> MOD .)
    STRINGCONST     reduce using rule 72 (divmult -> MOD .)
    TRUE            reduce using rule 72 (divmult -> MOD .)
    FALSE           reduce using rule 72 (divmult -> MOD .)


state 124

    (31) writting -> PRINT O_PARENTHESIS writtingloop C_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 149


state 125

    (32) writtingloop -> expression optionalwritting .

    C_PARENTHESIS   reduce using rule 32 (writtingloop -> expression optionalwritting .)


state 126

    (33) optionalwritting -> COMMA . writtingloop
    (32) writtingloop -> . expression optionalwritting
    (48) expression -> . expression2 expressionoptional
    (51) expression2 -> . exp expression2optional
    (62) exp -> . term exploop
    (67) term -> . fact termloop
    (73) fact -> . varconst
    (74) fact -> . O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis
    (81) varconst -> . varconstfunction
    (82) varconst -> . constants
    (83) varconstfunction -> . ID functionorlist
    (87) constants -> . INTCONST add_int_constant_to_dict
    (88) constants -> . FLOATCONST add_float_constant_to_dict
    (89) constants -> . STRINGCONST add_string_constant_to_dict
    (90) constants -> . booleanconst
    (91) booleanconst -> . TRUE add_bool_constant_to_dict
    (92) booleanconst -> . FALSE add_bool_constant_to_dict

    O_PARENTHESIS   shift and go to state 58
    ID              shift and go to state 64
    INTCONST        shift and go to state 62
    FLOATCONST      shift and go to state 57
    STRINGCONST     shift and go to state 60
    TRUE            shift and go to state 59
    FALSE           shift and go to state 67

    varconstfunction               shift and go to state 61
    expression2                    shift and go to state 63
    constants                      shift and go to state 65
    term                           shift and go to state 66
    varconst                       shift and go to state 68
    exp                            shift and go to state 69
    booleanconst                   shift and go to state 70
    writtingloop                   shift and go to state 150
    expression                     shift and go to state 74
    fact                           shift and go to state 72

state 127

    (30) assignation -> var_assign EQUALS add_equals expression . SEMICOLON

    SEMICOLON       shift and go to state 151


state 128

    (37) normalinit -> type var EQUALS add_equals . expression SEMICOLON
    (48) expression -> . expression2 expressionoptional
    (51) expression2 -> . exp expression2optional
    (62) exp -> . term exploop
    (67) term -> . fact termloop
    (73) fact -> . varconst
    (74) fact -> . O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis
    (81) varconst -> . varconstfunction
    (82) varconst -> . constants
    (83) varconstfunction -> . ID functionorlist
    (87) constants -> . INTCONST add_int_constant_to_dict
    (88) constants -> . FLOATCONST add_float_constant_to_dict
    (89) constants -> . STRINGCONST add_string_constant_to_dict
    (90) constants -> . booleanconst
    (91) booleanconst -> . TRUE add_bool_constant_to_dict
    (92) booleanconst -> . FALSE add_bool_constant_to_dict

    O_PARENTHESIS   shift and go to state 58
    ID              shift and go to state 64
    INTCONST        shift and go to state 62
    FLOATCONST      shift and go to state 57
    STRINGCONST     shift and go to state 60
    TRUE            shift and go to state 59
    FALSE           shift and go to state 67

    varconstfunction               shift and go to state 61
    expression2                    shift and go to state 63
    constants                      shift and go to state 65
    term                           shift and go to state 66
    varconst                       shift and go to state 68
    booleanconst                   shift and go to state 70
    exp                            shift and go to state 69
    expression                     shift and go to state 152
    fact                           shift and go to state 72

state 129

    (79) listaccess -> O_S_BRACKET INTCONST C_S_BRACKET .

    EQUALS          reduce using rule 79 (listaccess -> O_S_BRACKET INTCONST C_S_BRACKET .)


state 130

    (101) functioncall -> ID O_PARENTHESIS parametersinput C_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 153


state 131

    (102) parametersinput -> expression parametersinputloop .

    C_PARENTHESIS   reduce using rule 102 (parametersinput -> expression parametersinputloop .)


state 132

    (104) parametersinputloop -> COMMA . expression parametersinputloop
    (48) expression -> . expression2 expressionoptional
    (51) expression2 -> . exp expression2optional
    (62) exp -> . term exploop
    (67) term -> . fact termloop
    (73) fact -> . varconst
    (74) fact -> . O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis
    (81) varconst -> . varconstfunction
    (82) varconst -> . constants
    (83) varconstfunction -> . ID functionorlist
    (87) constants -> . INTCONST add_int_constant_to_dict
    (88) constants -> . FLOATCONST add_float_constant_to_dict
    (89) constants -> . STRINGCONST add_string_constant_to_dict
    (90) constants -> . booleanconst
    (91) booleanconst -> . TRUE add_bool_constant_to_dict
    (92) booleanconst -> . FALSE add_bool_constant_to_dict

    O_PARENTHESIS   shift and go to state 58
    ID              shift and go to state 64
    INTCONST        shift and go to state 62
    FLOATCONST      shift and go to state 57
    STRINGCONST     shift and go to state 60
    TRUE            shift and go to state 59
    FALSE           shift and go to state 67

    term                           shift and go to state 66
    booleanconst                   shift and go to state 70
    varconst                       shift and go to state 68
    constants                      shift and go to state 65
    exp                            shift and go to state 69
    varconstfunction               shift and go to state 61
    expression2                    shift and go to state 63
    expression                     shift and go to state 154
    fact                           shift and go to state 72

state 133

    (45) condition -> IF O_PARENTHESIS expression C_PARENTHESIS . block else
    (19) block -> . O_BRACKET statutesloop functionreturn C_BRACKET

    O_BRACKET       shift and go to state 7

    block                          shift and go to state 155

state 134

    (20) functionreturn -> RETURN expression SEMICOLON .

    C_BRACKET       reduce using rule 20 (functionreturn -> RETURN expression SEMICOLON .)


state 135

    (39) listinit -> LIST type var EQUALS . add_equals list SEMICOLON
    (38) add_equals -> .

    O_S_BRACKET     reduce using rule 38 (add_equals -> .)

    add_equals                     shift and go to state 156

state 136

    (108) parameterinit -> parametertype ID .

    COMMA           reduce using rule 108 (parameterinit -> parametertype ID .)
    C_PARENTHESIS   reduce using rule 108 (parameterinit -> parametertype ID .)


state 137

    (5) function -> FUNCTION functiontype ID O_PARENTHESIS parameters C_PARENTHESIS . block
    (19) block -> . O_BRACKET statutesloop functionreturn C_BRACKET

    O_BRACKET       shift and go to state 7

    block                          shift and go to state 157

state 138

    (106) parameters -> parameterinit parametersloop .

    C_PARENTHESIS   reduce using rule 106 (parameters -> parameterinit parametersloop .)


state 139

    (109) parametersloop -> COMMA . parameterinit parametersloop
    (108) parameterinit -> . parametertype ID
    (15) parametertype -> . BOOL
    (16) parametertype -> . INT
    (17) parametertype -> . FLOAT
    (18) parametertype -> . STRING

    BOOL            shift and go to state 89
    INT             shift and go to state 87
    FLOAT           shift and go to state 88
    STRING          shift and go to state 91

    parametertype                  shift and go to state 85
    parameterinit                  shift and go to state 158

state 140

    (100) timesloop -> TIMES O_PARENTHESIS INTCONST C_PARENTHESIS block .

    IF              reduce using rule 100 (timesloop -> TIMES O_PARENTHESIS INTCONST C_PARENTHESIS block .)
    PRINT           reduce using rule 100 (timesloop -> TIMES O_PARENTHESIS INTCONST C_PARENTHESIS block .)
    ID              reduce using rule 100 (timesloop -> TIMES O_PARENTHESIS INTCONST C_PARENTHESIS block .)
    LIST            reduce using rule 100 (timesloop -> TIMES O_PARENTHESIS INTCONST C_PARENTHESIS block .)
    WHILE           reduce using rule 100 (timesloop -> TIMES O_PARENTHESIS INTCONST C_PARENTHESIS block .)
    TIMES           reduce using rule 100 (timesloop -> TIMES O_PARENTHESIS INTCONST C_PARENTHESIS block .)
    BOOL            reduce using rule 100 (timesloop -> TIMES O_PARENTHESIS INTCONST C_PARENTHESIS block .)
    INT             reduce using rule 100 (timesloop -> TIMES O_PARENTHESIS INTCONST C_PARENTHESIS block .)
    FLOAT           reduce using rule 100 (timesloop -> TIMES O_PARENTHESIS INTCONST C_PARENTHESIS block .)
    STRING          reduce using rule 100 (timesloop -> TIMES O_PARENTHESIS INTCONST C_PARENTHESIS block .)
    RETURN          reduce using rule 100 (timesloop -> TIMES O_PARENTHESIS INTCONST C_PARENTHESIS block .)
    C_BRACKET       reduce using rule 100 (timesloop -> TIMES O_PARENTHESIS INTCONST C_PARENTHESIS block .)


state 141

    (74) fact -> O_PARENTHESIS add_o_parenthesis expression . C_PARENTHESIS add_c_parenthesis

    C_PARENTHESIS   shift and go to state 159


state 142

    (49) expressionoptional -> logicop expression2 .

    C_PARENTHESIS   reduce using rule 49 (expressionoptional -> logicop expression2 .)
    COMMA           reduce using rule 49 (expressionoptional -> logicop expression2 .)
    SEMICOLON       reduce using rule 49 (expressionoptional -> logicop expression2 .)


state 143

    (84) functionorlist -> O_S_BRACKET INTCONST . C_S_BRACKET

    C_S_BRACKET     shift and go to state 160


state 144

    (85) functionorlist -> O_PARENTHESIS parametersinput . C_PARENTHESIS

    C_PARENTHESIS   shift and go to state 161


state 145

    (63) exploop -> addsub exp .

    EQUALITY        reduce using rule 63 (exploop -> addsub exp .)
    GREATER         reduce using rule 63 (exploop -> addsub exp .)
    GREATER_EQUAL   reduce using rule 63 (exploop -> addsub exp .)
    LESS            reduce using rule 63 (exploop -> addsub exp .)
    LESS_EQUAL      reduce using rule 63 (exploop -> addsub exp .)
    DIFFERENT       reduce using rule 63 (exploop -> addsub exp .)
    AND             reduce using rule 63 (exploop -> addsub exp .)
    OR              reduce using rule 63 (exploop -> addsub exp .)
    C_PARENTHESIS   reduce using rule 63 (exploop -> addsub exp .)
    COMMA           reduce using rule 63 (exploop -> addsub exp .)
    SEMICOLON       reduce using rule 63 (exploop -> addsub exp .)


state 146

    (52) expression2optional -> relop exp .

    AND             reduce using rule 52 (expression2optional -> relop exp .)
    OR              reduce using rule 52 (expression2optional -> relop exp .)
    C_PARENTHESIS   reduce using rule 52 (expression2optional -> relop exp .)
    COMMA           reduce using rule 52 (expression2optional -> relop exp .)
    SEMICOLON       reduce using rule 52 (expression2optional -> relop exp .)


state 147

    (99) whileloop -> WHILE O_PARENTHESIS expression C_PARENTHESIS block .

    IF              reduce using rule 99 (whileloop -> WHILE O_PARENTHESIS expression C_PARENTHESIS block .)
    PRINT           reduce using rule 99 (whileloop -> WHILE O_PARENTHESIS expression C_PARENTHESIS block .)
    ID              reduce using rule 99 (whileloop -> WHILE O_PARENTHESIS expression C_PARENTHESIS block .)
    LIST            reduce using rule 99 (whileloop -> WHILE O_PARENTHESIS expression C_PARENTHESIS block .)
    WHILE           reduce using rule 99 (whileloop -> WHILE O_PARENTHESIS expression C_PARENTHESIS block .)
    TIMES           reduce using rule 99 (whileloop -> WHILE O_PARENTHESIS expression C_PARENTHESIS block .)
    BOOL            reduce using rule 99 (whileloop -> WHILE O_PARENTHESIS expression C_PARENTHESIS block .)
    INT             reduce using rule 99 (whileloop -> WHILE O_PARENTHESIS expression C_PARENTHESIS block .)
    FLOAT           reduce using rule 99 (whileloop -> WHILE O_PARENTHESIS expression C_PARENTHESIS block .)
    STRING          reduce using rule 99 (whileloop -> WHILE O_PARENTHESIS expression C_PARENTHESIS block .)
    RETURN          reduce using rule 99 (whileloop -> WHILE O_PARENTHESIS expression C_PARENTHESIS block .)
    C_BRACKET       reduce using rule 99 (whileloop -> WHILE O_PARENTHESIS expression C_PARENTHESIS block .)


state 148

    (68) termloop -> divmult term .

    SUM             reduce using rule 68 (termloop -> divmult term .)
    MINUS           reduce using rule 68 (termloop -> divmult term .)
    EQUALITY        reduce using rule 68 (termloop -> divmult term .)
    GREATER         reduce using rule 68 (termloop -> divmult term .)
    GREATER_EQUAL   reduce using rule 68 (termloop -> divmult term .)
    LESS            reduce using rule 68 (termloop -> divmult term .)
    LESS_EQUAL      reduce using rule 68 (termloop -> divmult term .)
    DIFFERENT       reduce using rule 68 (termloop -> divmult term .)
    AND             reduce using rule 68 (termloop -> divmult term .)
    OR              reduce using rule 68 (termloop -> divmult term .)
    C_PARENTHESIS   reduce using rule 68 (termloop -> divmult term .)
    COMMA           reduce using rule 68 (termloop -> divmult term .)
    SEMICOLON       reduce using rule 68 (termloop -> divmult term .)


state 149

    (31) writting -> PRINT O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON .

    IF              reduce using rule 31 (writting -> PRINT O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON .)
    PRINT           reduce using rule 31 (writting -> PRINT O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON .)
    ID              reduce using rule 31 (writting -> PRINT O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON .)
    LIST            reduce using rule 31 (writting -> PRINT O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON .)
    WHILE           reduce using rule 31 (writting -> PRINT O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON .)
    TIMES           reduce using rule 31 (writting -> PRINT O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON .)
    BOOL            reduce using rule 31 (writting -> PRINT O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON .)
    INT             reduce using rule 31 (writting -> PRINT O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON .)
    FLOAT           reduce using rule 31 (writting -> PRINT O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON .)
    STRING          reduce using rule 31 (writting -> PRINT O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON .)
    RETURN          reduce using rule 31 (writting -> PRINT O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON .)
    C_BRACKET       reduce using rule 31 (writting -> PRINT O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON .)


state 150

    (33) optionalwritting -> COMMA writtingloop .

    C_PARENTHESIS   reduce using rule 33 (optionalwritting -> COMMA writtingloop .)


state 151

    (30) assignation -> var_assign EQUALS add_equals expression SEMICOLON .

    IF              reduce using rule 30 (assignation -> var_assign EQUALS add_equals expression SEMICOLON .)
    PRINT           reduce using rule 30 (assignation -> var_assign EQUALS add_equals expression SEMICOLON .)
    ID              reduce using rule 30 (assignation -> var_assign EQUALS add_equals expression SEMICOLON .)
    LIST            reduce using rule 30 (assignation -> var_assign EQUALS add_equals expression SEMICOLON .)
    WHILE           reduce using rule 30 (assignation -> var_assign EQUALS add_equals expression SEMICOLON .)
    TIMES           reduce using rule 30 (assignation -> var_assign EQUALS add_equals expression SEMICOLON .)
    BOOL            reduce using rule 30 (assignation -> var_assign EQUALS add_equals expression SEMICOLON .)
    INT             reduce using rule 30 (assignation -> var_assign EQUALS add_equals expression SEMICOLON .)
    FLOAT           reduce using rule 30 (assignation -> var_assign EQUALS add_equals expression SEMICOLON .)
    STRING          reduce using rule 30 (assignation -> var_assign EQUALS add_equals expression SEMICOLON .)
    RETURN          reduce using rule 30 (assignation -> var_assign EQUALS add_equals expression SEMICOLON .)
    C_BRACKET       reduce using rule 30 (assignation -> var_assign EQUALS add_equals expression SEMICOLON .)


state 152

    (37) normalinit -> type var EQUALS add_equals expression . SEMICOLON

    SEMICOLON       shift and go to state 162


state 153

    (101) functioncall -> ID O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON .

    IF              reduce using rule 101 (functioncall -> ID O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON .)
    PRINT           reduce using rule 101 (functioncall -> ID O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON .)
    ID              reduce using rule 101 (functioncall -> ID O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON .)
    LIST            reduce using rule 101 (functioncall -> ID O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON .)
    WHILE           reduce using rule 101 (functioncall -> ID O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON .)
    TIMES           reduce using rule 101 (functioncall -> ID O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON .)
    BOOL            reduce using rule 101 (functioncall -> ID O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON .)
    INT             reduce using rule 101 (functioncall -> ID O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON .)
    FLOAT           reduce using rule 101 (functioncall -> ID O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON .)
    STRING          reduce using rule 101 (functioncall -> ID O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON .)
    RETURN          reduce using rule 101 (functioncall -> ID O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON .)
    C_BRACKET       reduce using rule 101 (functioncall -> ID O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON .)


state 154

    (104) parametersinputloop -> COMMA expression . parametersinputloop
    (104) parametersinputloop -> . COMMA expression parametersinputloop
    (105) parametersinputloop -> .

    COMMA           shift and go to state 132
    C_PARENTHESIS   reduce using rule 105 (parametersinputloop -> .)

    parametersinputloop            shift and go to state 163

state 155

    (45) condition -> IF O_PARENTHESIS expression C_PARENTHESIS block . else
    (46) else -> . ELSE block
    (47) else -> .

    ELSE            shift and go to state 164
    IF              reduce using rule 47 (else -> .)
    PRINT           reduce using rule 47 (else -> .)
    ID              reduce using rule 47 (else -> .)
    LIST            reduce using rule 47 (else -> .)
    WHILE           reduce using rule 47 (else -> .)
    TIMES           reduce using rule 47 (else -> .)
    BOOL            reduce using rule 47 (else -> .)
    INT             reduce using rule 47 (else -> .)
    FLOAT           reduce using rule 47 (else -> .)
    STRING          reduce using rule 47 (else -> .)
    RETURN          reduce using rule 47 (else -> .)
    C_BRACKET       reduce using rule 47 (else -> .)

    else                           shift and go to state 165

state 156

    (39) listinit -> LIST type var EQUALS add_equals . list SEMICOLON
    (40) list -> . O_S_BRACKET listelements C_S_BRACKET

    O_S_BRACKET     shift and go to state 167

    list                           shift and go to state 166

state 157

    (5) function -> FUNCTION functiontype ID O_PARENTHESIS parameters C_PARENTHESIS block .

    FUNCTION        reduce using rule 5 (function -> FUNCTION functiontype ID O_PARENTHESIS parameters C_PARENTHESIS block .)
    $end            reduce using rule 5 (function -> FUNCTION functiontype ID O_PARENTHESIS parameters C_PARENTHESIS block .)


state 158

    (109) parametersloop -> COMMA parameterinit . parametersloop
    (109) parametersloop -> . COMMA parameterinit parametersloop
    (110) parametersloop -> .

    COMMA           shift and go to state 139
    C_PARENTHESIS   reduce using rule 110 (parametersloop -> .)

    parametersloop                 shift and go to state 168

state 159

    (74) fact -> O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS . add_c_parenthesis
    (76) add_c_parenthesis -> .

    MULTIPLY        reduce using rule 76 (add_c_parenthesis -> .)
    DIVIDE          reduce using rule 76 (add_c_parenthesis -> .)
    MOD             reduce using rule 76 (add_c_parenthesis -> .)
    SUM             reduce using rule 76 (add_c_parenthesis -> .)
    MINUS           reduce using rule 76 (add_c_parenthesis -> .)
    EQUALITY        reduce using rule 76 (add_c_parenthesis -> .)
    GREATER         reduce using rule 76 (add_c_parenthesis -> .)
    GREATER_EQUAL   reduce using rule 76 (add_c_parenthesis -> .)
    LESS            reduce using rule 76 (add_c_parenthesis -> .)
    LESS_EQUAL      reduce using rule 76 (add_c_parenthesis -> .)
    DIFFERENT       reduce using rule 76 (add_c_parenthesis -> .)
    AND             reduce using rule 76 (add_c_parenthesis -> .)
    OR              reduce using rule 76 (add_c_parenthesis -> .)
    C_PARENTHESIS   reduce using rule 76 (add_c_parenthesis -> .)
    COMMA           reduce using rule 76 (add_c_parenthesis -> .)
    SEMICOLON       reduce using rule 76 (add_c_parenthesis -> .)

    add_c_parenthesis              shift and go to state 169

state 160

    (84) functionorlist -> O_S_BRACKET INTCONST C_S_BRACKET .

    MULTIPLY        reduce using rule 84 (functionorlist -> O_S_BRACKET INTCONST C_S_BRACKET .)
    DIVIDE          reduce using rule 84 (functionorlist -> O_S_BRACKET INTCONST C_S_BRACKET .)
    MOD             reduce using rule 84 (functionorlist -> O_S_BRACKET INTCONST C_S_BRACKET .)
    SUM             reduce using rule 84 (functionorlist -> O_S_BRACKET INTCONST C_S_BRACKET .)
    MINUS           reduce using rule 84 (functionorlist -> O_S_BRACKET INTCONST C_S_BRACKET .)
    EQUALITY        reduce using rule 84 (functionorlist -> O_S_BRACKET INTCONST C_S_BRACKET .)
    GREATER         reduce using rule 84 (functionorlist -> O_S_BRACKET INTCONST C_S_BRACKET .)
    GREATER_EQUAL   reduce using rule 84 (functionorlist -> O_S_BRACKET INTCONST C_S_BRACKET .)
    LESS            reduce using rule 84 (functionorlist -> O_S_BRACKET INTCONST C_S_BRACKET .)
    LESS_EQUAL      reduce using rule 84 (functionorlist -> O_S_BRACKET INTCONST C_S_BRACKET .)
    DIFFERENT       reduce using rule 84 (functionorlist -> O_S_BRACKET INTCONST C_S_BRACKET .)
    AND             reduce using rule 84 (functionorlist -> O_S_BRACKET INTCONST C_S_BRACKET .)
    OR              reduce using rule 84 (functionorlist -> O_S_BRACKET INTCONST C_S_BRACKET .)
    C_PARENTHESIS   reduce using rule 84 (functionorlist -> O_S_BRACKET INTCONST C_S_BRACKET .)
    COMMA           reduce using rule 84 (functionorlist -> O_S_BRACKET INTCONST C_S_BRACKET .)
    SEMICOLON       reduce using rule 84 (functionorlist -> O_S_BRACKET INTCONST C_S_BRACKET .)


state 161

    (85) functionorlist -> O_PARENTHESIS parametersinput C_PARENTHESIS .

    MULTIPLY        reduce using rule 85 (functionorlist -> O_PARENTHESIS parametersinput C_PARENTHESIS .)
    DIVIDE          reduce using rule 85 (functionorlist -> O_PARENTHESIS parametersinput C_PARENTHESIS .)
    MOD             reduce using rule 85 (functionorlist -> O_PARENTHESIS parametersinput C_PARENTHESIS .)
    SUM             reduce using rule 85 (functionorlist -> O_PARENTHESIS parametersinput C_PARENTHESIS .)
    MINUS           reduce using rule 85 (functionorlist -> O_PARENTHESIS parametersinput C_PARENTHESIS .)
    EQUALITY        reduce using rule 85 (functionorlist -> O_PARENTHESIS parametersinput C_PARENTHESIS .)
    GREATER         reduce using rule 85 (functionorlist -> O_PARENTHESIS parametersinput C_PARENTHESIS .)
    GREATER_EQUAL   reduce using rule 85 (functionorlist -> O_PARENTHESIS parametersinput C_PARENTHESIS .)
    LESS            reduce using rule 85 (functionorlist -> O_PARENTHESIS parametersinput C_PARENTHESIS .)
    LESS_EQUAL      reduce using rule 85 (functionorlist -> O_PARENTHESIS parametersinput C_PARENTHESIS .)
    DIFFERENT       reduce using rule 85 (functionorlist -> O_PARENTHESIS parametersinput C_PARENTHESIS .)
    AND             reduce using rule 85 (functionorlist -> O_PARENTHESIS parametersinput C_PARENTHESIS .)
    OR              reduce using rule 85 (functionorlist -> O_PARENTHESIS parametersinput C_PARENTHESIS .)
    C_PARENTHESIS   reduce using rule 85 (functionorlist -> O_PARENTHESIS parametersinput C_PARENTHESIS .)
    COMMA           reduce using rule 85 (functionorlist -> O_PARENTHESIS parametersinput C_PARENTHESIS .)
    SEMICOLON       reduce using rule 85 (functionorlist -> O_PARENTHESIS parametersinput C_PARENTHESIS .)


state 162

    (37) normalinit -> type var EQUALS add_equals expression SEMICOLON .

    IF              reduce using rule 37 (normalinit -> type var EQUALS add_equals expression SEMICOLON .)
    PRINT           reduce using rule 37 (normalinit -> type var EQUALS add_equals expression SEMICOLON .)
    ID              reduce using rule 37 (normalinit -> type var EQUALS add_equals expression SEMICOLON .)
    LIST            reduce using rule 37 (normalinit -> type var EQUALS add_equals expression SEMICOLON .)
    WHILE           reduce using rule 37 (normalinit -> type var EQUALS add_equals expression SEMICOLON .)
    TIMES           reduce using rule 37 (normalinit -> type var EQUALS add_equals expression SEMICOLON .)
    BOOL            reduce using rule 37 (normalinit -> type var EQUALS add_equals expression SEMICOLON .)
    INT             reduce using rule 37 (normalinit -> type var EQUALS add_equals expression SEMICOLON .)
    FLOAT           reduce using rule 37 (normalinit -> type var EQUALS add_equals expression SEMICOLON .)
    STRING          reduce using rule 37 (normalinit -> type var EQUALS add_equals expression SEMICOLON .)
    RETURN          reduce using rule 37 (normalinit -> type var EQUALS add_equals expression SEMICOLON .)
    C_BRACKET       reduce using rule 37 (normalinit -> type var EQUALS add_equals expression SEMICOLON .)


state 163

    (104) parametersinputloop -> COMMA expression parametersinputloop .

    C_PARENTHESIS   reduce using rule 104 (parametersinputloop -> COMMA expression parametersinputloop .)


state 164

    (46) else -> ELSE . block
    (19) block -> . O_BRACKET statutesloop functionreturn C_BRACKET

    O_BRACKET       shift and go to state 7

    block                          shift and go to state 170

state 165

    (45) condition -> IF O_PARENTHESIS expression C_PARENTHESIS block else .

    IF              reduce using rule 45 (condition -> IF O_PARENTHESIS expression C_PARENTHESIS block else .)
    PRINT           reduce using rule 45 (condition -> IF O_PARENTHESIS expression C_PARENTHESIS block else .)
    ID              reduce using rule 45 (condition -> IF O_PARENTHESIS expression C_PARENTHESIS block else .)
    LIST            reduce using rule 45 (condition -> IF O_PARENTHESIS expression C_PARENTHESIS block else .)
    WHILE           reduce using rule 45 (condition -> IF O_PARENTHESIS expression C_PARENTHESIS block else .)
    TIMES           reduce using rule 45 (condition -> IF O_PARENTHESIS expression C_PARENTHESIS block else .)
    BOOL            reduce using rule 45 (condition -> IF O_PARENTHESIS expression C_PARENTHESIS block else .)
    INT             reduce using rule 45 (condition -> IF O_PARENTHESIS expression C_PARENTHESIS block else .)
    FLOAT           reduce using rule 45 (condition -> IF O_PARENTHESIS expression C_PARENTHESIS block else .)
    STRING          reduce using rule 45 (condition -> IF O_PARENTHESIS expression C_PARENTHESIS block else .)
    RETURN          reduce using rule 45 (condition -> IF O_PARENTHESIS expression C_PARENTHESIS block else .)
    C_BRACKET       reduce using rule 45 (condition -> IF O_PARENTHESIS expression C_PARENTHESIS block else .)


state 166

    (39) listinit -> LIST type var EQUALS add_equals list . SEMICOLON

    SEMICOLON       shift and go to state 171


state 167

    (40) list -> O_S_BRACKET . listelements C_S_BRACKET
    (41) listelements -> . constants optionalconstants
    (42) listelements -> .
    (87) constants -> . INTCONST add_int_constant_to_dict
    (88) constants -> . FLOATCONST add_float_constant_to_dict
    (89) constants -> . STRINGCONST add_string_constant_to_dict
    (90) constants -> . booleanconst
    (91) booleanconst -> . TRUE add_bool_constant_to_dict
    (92) booleanconst -> . FALSE add_bool_constant_to_dict

    C_S_BRACKET     reduce using rule 42 (listelements -> .)
    INTCONST        shift and go to state 62
    FLOATCONST      shift and go to state 57
    STRINGCONST     shift and go to state 60
    TRUE            shift and go to state 59
    FALSE           shift and go to state 67

    listelements                   shift and go to state 172
    booleanconst                   shift and go to state 70
    constants                      shift and go to state 173

state 168

    (109) parametersloop -> COMMA parameterinit parametersloop .

    C_PARENTHESIS   reduce using rule 109 (parametersloop -> COMMA parameterinit parametersloop .)


state 169

    (74) fact -> O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis .

    MULTIPLY        reduce using rule 74 (fact -> O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis .)
    DIVIDE          reduce using rule 74 (fact -> O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis .)
    MOD             reduce using rule 74 (fact -> O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis .)
    SUM             reduce using rule 74 (fact -> O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis .)
    MINUS           reduce using rule 74 (fact -> O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis .)
    EQUALITY        reduce using rule 74 (fact -> O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis .)
    GREATER         reduce using rule 74 (fact -> O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis .)
    GREATER_EQUAL   reduce using rule 74 (fact -> O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis .)
    LESS            reduce using rule 74 (fact -> O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis .)
    LESS_EQUAL      reduce using rule 74 (fact -> O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis .)
    DIFFERENT       reduce using rule 74 (fact -> O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis .)
    AND             reduce using rule 74 (fact -> O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis .)
    OR              reduce using rule 74 (fact -> O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis .)
    C_PARENTHESIS   reduce using rule 74 (fact -> O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis .)
    COMMA           reduce using rule 74 (fact -> O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis .)
    SEMICOLON       reduce using rule 74 (fact -> O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis .)


state 170

    (46) else -> ELSE block .

    IF              reduce using rule 46 (else -> ELSE block .)
    PRINT           reduce using rule 46 (else -> ELSE block .)
    ID              reduce using rule 46 (else -> ELSE block .)
    LIST            reduce using rule 46 (else -> ELSE block .)
    WHILE           reduce using rule 46 (else -> ELSE block .)
    TIMES           reduce using rule 46 (else -> ELSE block .)
    BOOL            reduce using rule 46 (else -> ELSE block .)
    INT             reduce using rule 46 (else -> ELSE block .)
    FLOAT           reduce using rule 46 (else -> ELSE block .)
    STRING          reduce using rule 46 (else -> ELSE block .)
    RETURN          reduce using rule 46 (else -> ELSE block .)
    C_BRACKET       reduce using rule 46 (else -> ELSE block .)


state 171

    (39) listinit -> LIST type var EQUALS add_equals list SEMICOLON .

    IF              reduce using rule 39 (listinit -> LIST type var EQUALS add_equals list SEMICOLON .)
    PRINT           reduce using rule 39 (listinit -> LIST type var EQUALS add_equals list SEMICOLON .)
    ID              reduce using rule 39 (listinit -> LIST type var EQUALS add_equals list SEMICOLON .)
    LIST            reduce using rule 39 (listinit -> LIST type var EQUALS add_equals list SEMICOLON .)
    WHILE           reduce using rule 39 (listinit -> LIST type var EQUALS add_equals list SEMICOLON .)
    TIMES           reduce using rule 39 (listinit -> LIST type var EQUALS add_equals list SEMICOLON .)
    BOOL            reduce using rule 39 (listinit -> LIST type var EQUALS add_equals list SEMICOLON .)
    INT             reduce using rule 39 (listinit -> LIST type var EQUALS add_equals list SEMICOLON .)
    FLOAT           reduce using rule 39 (listinit -> LIST type var EQUALS add_equals list SEMICOLON .)
    STRING          reduce using rule 39 (listinit -> LIST type var EQUALS add_equals list SEMICOLON .)
    RETURN          reduce using rule 39 (listinit -> LIST type var EQUALS add_equals list SEMICOLON .)
    C_BRACKET       reduce using rule 39 (listinit -> LIST type var EQUALS add_equals list SEMICOLON .)


state 172

    (40) list -> O_S_BRACKET listelements . C_S_BRACKET

    C_S_BRACKET     shift and go to state 174


state 173

    (41) listelements -> constants . optionalconstants
    (43) optionalconstants -> . COMMA constants optionalconstants
    (44) optionalconstants -> .

    COMMA           shift and go to state 176
    C_S_BRACKET     reduce using rule 44 (optionalconstants -> .)

    optionalconstants              shift and go to state 175

state 174

    (40) list -> O_S_BRACKET listelements C_S_BRACKET .

    SEMICOLON       reduce using rule 40 (list -> O_S_BRACKET listelements C_S_BRACKET .)


state 175

    (41) listelements -> constants optionalconstants .

    C_S_BRACKET     reduce using rule 41 (listelements -> constants optionalconstants .)


state 176

    (43) optionalconstants -> COMMA . constants optionalconstants
    (87) constants -> . INTCONST add_int_constant_to_dict
    (88) constants -> . FLOATCONST add_float_constant_to_dict
    (89) constants -> . STRINGCONST add_string_constant_to_dict
    (90) constants -> . booleanconst
    (91) booleanconst -> . TRUE add_bool_constant_to_dict
    (92) booleanconst -> . FALSE add_bool_constant_to_dict

    INTCONST        shift and go to state 62
    FLOATCONST      shift and go to state 57
    STRINGCONST     shift and go to state 60
    TRUE            shift and go to state 59
    FALSE           shift and go to state 67

    booleanconst                   shift and go to state 70
    constants                      shift and go to state 177

state 177

    (43) optionalconstants -> COMMA constants . optionalconstants
    (43) optionalconstants -> . COMMA constants optionalconstants
    (44) optionalconstants -> .

    COMMA           shift and go to state 176
    C_S_BRACKET     reduce using rule 44 (optionalconstants -> .)

    optionalconstants              shift and go to state 178

state 178

    (43) optionalconstants -> COMMA constants optionalconstants .

    C_S_BRACKET     reduce using rule 43 (optionalconstants -> COMMA constants optionalconstants .)

