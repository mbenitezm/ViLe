
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.2'

_lr_method = 'LALR'

_lr_signature = '\xb3\x8c,@\xca\xa3n\xce]\xdc$\x83Y\xed\xe9q'
    
_lr_action_items = {'RETURN':([7,19,20,24,26,27,28,30,32,33,34,38,39,51,83,133,143,149,151,153,155,170,171,176,177,],[-23,-102,-24,-36,-35,-26,-103,-25,-23,-28,52,-29,-27,-22,-19,-105,-104,-31,-30,-106,-48,-46,-40,-37,-47,]),'LESS':([57,59,60,61,62,63,65,66,67,68,69,70,72,93,95,96,105,111,113,114,116,141,145,160,163,164,165,166,175,],[-99,-101,-100,-86,101,-98,-91,-87,-66,-101,-78,-95,-72,-93,-96,-94,-92,-88,-68,-97,-74,-65,-71,-81,-89,-90,-67,-73,-79,]),'VOID':([5,],[12,]),'O_PARENTHESIS':([16,17,18,29,31,40,42,43,44,49,50,52,58,65,75,76,94,97,98,99,100,101,103,104,106,108,109,112,119,121,125,135,139,140,142,144,146,147,148,],[41,42,43,49,50,55,58,58,-39,58,58,58,-80,112,58,-39,58,-63,-58,-59,-60,-61,-62,-64,-55,58,-56,58,58,58,58,58,-69,-70,58,-76,-75,58,-77,]),'ELSE':([83,155,],[-19,169,]),'FLOATCONST':([42,43,44,49,50,52,58,75,76,94,97,98,99,100,101,103,104,106,108,109,112,119,121,125,135,139,140,142,144,146,147,148,157,180,],[57,57,-39,57,57,57,-80,57,-39,57,-63,-58,-59,-60,-61,-62,-64,-55,57,-56,57,57,57,57,57,-69,-70,57,-76,-75,57,-77,57,57,]),'WHILE':([7,19,20,24,26,27,28,30,32,33,38,39,83,133,143,149,151,153,155,170,171,176,177,],[17,-102,-24,-36,-35,-26,-103,-25,17,-28,-29,-27,-19,-105,-104,-31,-30,-106,-48,-46,-40,-37,-47,]),'GREATER':([57,59,60,61,62,63,65,66,67,68,69,70,72,93,95,96,105,111,113,114,116,141,145,160,163,164,165,166,175,],[-99,-101,-100,-86,99,-98,-91,-87,-66,-101,-78,-95,-72,-93,-96,-94,-92,-88,-68,-97,-74,-65,-71,-81,-89,-90,-67,-73,-79,]),'C_BRACKET':([7,19,20,24,26,27,28,30,32,33,34,38,39,51,53,83,127,133,143,149,151,153,155,170,171,176,177,],[-23,-102,-24,-36,-35,-26,-103,-25,-23,-28,-21,-29,-27,-22,83,-19,-20,-105,-104,-31,-30,-106,-48,-46,-40,-37,-47,]),'PRINT':([7,19,20,24,26,27,28,30,32,33,38,39,83,133,143,149,151,153,155,170,171,176,177,],[18,-102,-24,-36,-35,-26,-103,-25,18,-28,-29,-27,-19,-105,-104,-31,-30,-106,-48,-46,-40,-37,-47,]),'C_PARENTHESIS':([49,55,56,57,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,79,80,81,86,90,93,95,96,102,105,107,111,112,113,114,116,118,124,129,131,134,136,138,141,145,150,154,159,160,161,162,163,164,165,166,168,174,175,],[-108,-112,92,-99,-101,-100,-86,-54,-98,-51,-91,-87,-66,-101,-78,-95,115,-72,117,-34,123,-110,126,130,-115,-93,-96,-94,-52,-92,-49,-88,-108,-68,-97,-74,-32,-107,-113,-111,160,-57,164,-65,-71,-33,-110,-115,-81,-53,-50,-89,-90,-67,-73,-109,-114,-79,]),'TRUE':([42,43,44,49,50,52,58,75,76,94,97,98,99,100,101,103,104,106,108,109,112,119,121,125,135,139,140,142,144,146,147,148,157,180,],[59,59,-39,59,59,59,-80,59,-39,59,-63,-58,-59,-60,-61,-62,-64,-55,59,-56,59,59,59,59,59,-69,-70,59,-76,-75,59,-77,59,59,]),'MINUS':([57,59,60,61,63,65,66,67,68,69,70,72,93,95,96,105,111,113,114,116,145,160,163,164,166,175,],[-99,-101,-100,-86,-98,-91,-87,-66,-101,-78,-95,-72,-93,-96,-94,-92,-88,140,-97,-74,-71,-81,-89,-90,-73,-79,]),'DIVIDE':([57,59,60,61,63,65,66,68,69,70,72,93,95,96,105,111,114,116,160,163,164,175,],[-99,-101,-100,-86,-98,-91,-87,-101,-78,-95,-72,-93,-96,-94,-92,-88,-97,144,-81,-89,-90,-79,]),'O_BRACKET':([3,92,115,126,130,169,],[7,7,7,7,7,7,]),'EQUALITY':([57,59,60,61,62,63,65,66,67,68,69,70,72,93,95,96,105,111,113,114,116,141,145,160,163,164,165,166,175,],[-99,-101,-100,-86,98,-98,-91,-87,-66,-101,-78,-95,-72,-93,-96,-94,-92,-88,-68,-97,-74,-65,-71,-81,-89,-90,-67,-73,-79,]),'SEMICOLON':([57,59,60,61,62,63,64,65,66,67,68,69,70,72,82,93,95,96,102,105,107,111,113,114,116,117,120,123,136,141,145,152,156,160,161,162,163,164,165,166,167,175,178,],[-99,-101,-100,-86,-54,-98,-51,-91,-87,-66,-101,-78,-95,-72,127,-93,-96,-94,-52,-92,-49,-88,-68,-97,-74,149,151,153,-57,-65,-71,-38,171,-81,-53,-50,-89,-90,-67,-73,176,-79,-41,]),'STRINGCONST':([42,43,44,49,50,52,58,75,76,94,97,98,99,100,101,103,104,106,108,109,112,119,121,125,135,139,140,142,144,146,147,148,157,180,],[60,60,-39,60,60,60,-80,60,-39,60,-63,-58,-59,-60,-61,-62,-64,-55,60,-56,60,60,60,60,60,-69,-70,60,-76,-75,60,-77,60,60,]),'COMMA':([57,59,60,61,62,63,64,65,66,67,68,69,70,72,74,80,90,93,95,96,102,105,107,111,113,114,116,129,136,141,145,154,159,160,161,162,163,164,165,166,173,175,181,],[-99,-101,-100,-86,-54,-98,-51,-91,-87,-66,-101,-78,-95,-72,119,125,132,-93,-96,-94,-52,-92,-49,-88,-68,-97,-74,-113,-57,-65,-71,125,132,-81,-53,-50,-89,-90,-67,-73,180,-79,180,]),'SUM':([57,59,60,61,63,65,66,67,68,69,70,72,93,95,96,105,111,113,114,116,145,160,163,164,166,175,],[-99,-101,-100,-86,-98,-91,-87,-66,-101,-78,-95,-72,-93,-96,-94,-92,-88,139,-97,-74,-71,-81,-89,-90,-73,-79,]),'$end':([1,2,4,6,8,9,83,158,],[-4,0,-4,-1,-2,-3,-19,-5,]),'FUNCTION':([1,4,8,83,158,],[5,5,-2,-19,-5,]),'DIFFERENT':([57,59,60,61,62,63,65,66,67,68,69,70,72,93,95,96,105,111,113,114,116,141,145,160,163,164,165,166,175,],[-99,-101,-100,-86,97,-98,-91,-87,-66,-101,-78,-95,-72,-93,-96,-94,-92,-88,-68,-97,-74,-65,-71,-81,-89,-90,-67,-73,-79,]),'STRING':([5,7,19,20,24,26,27,28,30,32,33,37,38,39,55,83,132,133,143,149,151,153,155,170,171,176,177,],[10,25,-102,-24,-36,-35,-26,-103,-25,25,-28,25,-29,-27,91,-19,91,-105,-104,-31,-30,-106,-48,-46,-40,-37,-47,]),'EQUALS':([22,29,45,46,48,77,84,122,],[44,-85,76,-85,-82,-83,128,-84,]),'TIMES':([7,19,20,24,26,27,28,30,32,33,38,39,83,133,143,149,151,153,155,170,171,176,177,],[16,-102,-24,-36,-35,-26,-103,-25,16,-28,-29,-27,-19,-105,-104,-31,-30,-106,-48,-46,-40,-37,-47,]),'INTCONST':([41,42,43,44,47,49,50,52,58,75,76,94,97,98,99,100,101,103,104,106,108,109,110,112,119,121,125,135,139,140,142,144,146,147,148,157,180,],[56,63,63,-39,78,63,63,63,-80,63,-39,63,-63,-58,-59,-60,-61,-62,-64,-55,63,-56,137,63,63,63,63,63,-69,-70,63,-76,-75,63,-77,63,63,]),'O_S_BRACKET':([29,46,65,128,],[47,47,110,157,]),'ID':([7,10,11,12,13,14,15,19,20,21,23,24,25,26,27,28,30,32,33,35,36,38,39,42,43,44,49,50,52,54,58,75,76,83,85,87,88,89,91,94,97,98,99,100,101,103,104,106,108,109,112,119,121,125,133,135,139,140,142,143,144,146,147,148,149,151,153,155,170,171,176,177,],[29,-10,-8,-6,-9,-7,40,-102,-24,-11,46,-36,-14,-35,-26,-103,-25,29,-28,-12,-13,-29,-27,65,65,-39,65,65,65,46,-80,65,-39,-19,129,-16,-17,-15,-18,65,-63,-58,-59,-60,-61,-62,-64,-55,65,-56,65,65,65,65,-105,65,-69,-70,65,-104,-76,-75,65,-77,-31,-30,-106,-48,-46,-40,-37,-47,]),'IF':([7,19,20,24,26,27,28,30,32,33,38,39,83,133,143,149,151,153,155,170,171,176,177,],[31,-102,-24,-36,-35,-26,-103,-25,31,-28,-29,-27,-19,-105,-104,-31,-30,-106,-48,-46,-40,-37,-47,]),'AND':([57,59,60,61,62,63,64,65,66,67,68,69,70,72,93,95,96,102,105,111,113,114,116,141,145,160,161,163,164,165,166,175,],[-99,-101,-100,-86,-54,-98,106,-91,-87,-66,-101,-78,-95,-72,-93,-96,-94,-52,-92,-88,-68,-97,-74,-65,-71,-81,-53,-89,-90,-67,-73,-79,]),'FALSE':([42,43,44,49,50,52,58,75,76,94,97,98,99,100,101,103,104,106,108,109,112,119,121,125,135,139,140,142,144,146,147,148,157,180,],[68,68,-39,68,68,68,-80,68,-39,68,-63,-58,-59,-60,-61,-62,-64,-55,68,-56,68,68,68,68,68,-69,-70,68,-76,-75,68,-77,68,68,]),'GREATER_EQUAL':([57,59,60,61,62,63,65,66,67,68,69,70,72,93,95,96,105,111,113,114,116,141,145,160,163,164,165,166,175,],[-99,-101,-100,-86,100,-98,-91,-87,-66,-101,-78,-95,-72,-93,-96,-94,-92,-88,-68,-97,-74,-65,-71,-81,-89,-90,-67,-73,-79,]),'MULTIPLY':([57,59,60,61,63,65,66,68,69,70,72,93,95,96,105,111,114,116,160,163,164,175,],[-99,-101,-100,-86,-98,-91,-87,-101,-78,-95,-72,-93,-96,-94,-92,-88,-97,146,-81,-89,-90,-79,]),'INT':([5,7,19,20,24,26,27,28,30,32,33,37,38,39,55,83,132,133,143,149,151,153,155,170,171,176,177,],[11,35,-102,-24,-36,-35,-26,-103,-25,35,-28,35,-29,-27,87,-19,87,-105,-104,-31,-30,-106,-48,-46,-40,-37,-47,]),'FLOAT':([5,7,19,20,24,26,27,28,30,32,33,37,38,39,55,83,132,133,143,149,151,153,155,170,171,176,177,],[13,36,-102,-24,-36,-35,-26,-103,-25,36,-28,36,-29,-27,88,-19,88,-105,-104,-31,-30,-106,-48,-46,-40,-37,-47,]),'LIST':([7,19,20,24,26,27,28,30,32,33,38,39,83,133,143,149,151,153,155,170,171,176,177,],[37,-102,-24,-36,-35,-26,-103,-25,37,-28,-29,-27,-19,-105,-104,-31,-30,-106,-48,-46,-40,-37,-47,]),'C_S_BRACKET':([57,59,60,63,68,70,78,93,95,96,105,114,137,157,172,173,179,181,182,],[-99,-101,-100,-98,-101,-95,122,-93,-96,-94,-92,-97,163,-43,178,-45,-42,-45,-44,]),'BOOL':([5,7,19,20,24,26,27,28,30,32,33,37,38,39,55,83,132,133,143,149,151,153,155,170,171,176,177,],[14,21,-102,-24,-36,-35,-26,-103,-25,21,-28,21,-29,-27,89,-19,89,-105,-104,-31,-30,-106,-48,-46,-40,-37,-47,]),'LESS_EQUAL':([57,59,60,61,62,63,65,66,67,68,69,70,72,93,95,96,105,111,113,114,116,141,145,160,163,164,165,166,175,],[-99,-101,-100,-86,103,-98,-91,-87,-66,-101,-78,-95,-72,-93,-96,-94,-92,-88,-68,-97,-74,-65,-71,-81,-89,-90,-67,-73,-79,]),'MAIN':([0,],[3,]),'OR':([57,59,60,61,62,63,64,65,66,67,68,69,70,72,93,95,96,102,105,111,113,114,116,141,145,160,161,163,164,165,166,175,],[-99,-101,-100,-86,-54,-98,109,-91,-87,-66,-101,-78,-95,-72,-93,-96,-94,-52,-92,-88,-68,-97,-74,-65,-71,-81,-53,-89,-90,-67,-73,-79,]),'MOD':([57,59,60,61,63,65,66,68,69,70,72,93,95,96,105,111,114,116,160,163,164,175,],[-99,-101,-100,-86,-98,-91,-87,-101,-78,-95,-72,-93,-96,-94,-92,-88,-97,148,-81,-89,-90,-79,]),}

_lr_action = { }
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = { }
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'parametersloop':([90,159,],[131,174,]),'parametersinputloop':([80,154,],[124,168,]),'functionorlist':([65,],[111,]),'logic_op_quadruple':([136,],[162,]),'optionalconstants':([173,181,],[179,182,]),'add_int_constant_to_dict':([63,],[105,]),'expressionoptional':([64,],[107,]),'equals_quadruple':([152,],[167,]),'add_o_parenthesis':([58,],[94,]),'exploop':([113,],[141,]),'divmult':([116,],[147,]),'addsub':([113,],[142,]),'logicop':([64,],[108,]),'relop_quadruple':([104,],[135,]),'functionloop':([1,4,],[6,9,]),'whileloop':([7,32,],[19,19,]),'add_c_parenthesis':([160,],[175,]),'parameters':([55,],[86,]),'termloop':([116,],[145,]),'fact':([42,43,49,50,52,75,94,108,112,119,121,125,135,142,147,],[72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,]),'add_string_constant_to_dict':([60,],[96,]),'init':([7,32,],[20,20,]),'program':([0,],[2,]),'listaccess':([29,46,],[48,77,]),'constants':([42,43,49,50,52,75,94,108,112,119,121,125,135,142,147,157,180,],[66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,173,181,]),'parameterinit':([55,132,],[90,159,]),'expression2optional':([62,],[102,]),'var':([23,54,],[45,84,]),'var_assign':([7,32,],[22,22,]),'type':([7,32,37,],[23,23,54,]),'normalinit':([7,32,],[24,24,]),'function':([1,4,],[4,4,]),'term_quadruple':([72,],[116,]),'listinit':([7,32,],[26,26,]),'parametersinput':([49,112,],[79,138,]),'writting':([7,32,],[27,27,]),'else':([155,],[170,]),'varconstfunction':([42,43,49,50,52,75,94,108,112,119,121,125,135,142,147,],[61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,]),'functionreturn':([34,],[53,]),'timesloop':([7,32,],[28,28,]),'add_float_constant_to_dict':([57,],[93,]),'expression2':([42,43,49,50,52,75,94,108,112,119,121,125,],[64,64,64,64,64,64,64,136,64,64,64,64,]),'condition':([7,32,],[30,30,]),'add_equals':([44,76,],[75,121,]),'parametertype':([55,132,],[85,85,]),'statute':([7,32,],[32,32,]),'term':([42,43,49,50,52,75,94,108,112,119,121,125,135,142,147,],[67,67,67,67,67,67,67,67,67,67,67,67,67,67,166,]),'main':([0,],[1,]),'assignation':([7,32,],[33,33,]),'statutesloop':([7,32,],[34,51,]),'varconst':([42,43,49,50,52,75,94,108,112,119,121,125,135,142,147,],[69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,]),'booleanconst':([42,43,49,50,52,75,94,108,112,119,121,125,135,142,147,157,180,],[70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,]),'exp_quadruple':([67,],[113,]),'relop':([62,],[104,]),'list':([128,],[156,]),'expression':([42,43,49,50,52,75,94,112,119,121,125,],[71,74,80,81,82,120,134,80,74,152,154,]),'listelements':([157,],[172,]),'optionalwritting':([74,],[118,]),'functioncall':([7,32,],[38,38,]),'block':([3,92,115,126,130,169,],[8,133,143,155,158,177,]),'exp':([42,43,49,50,52,75,94,108,112,119,121,125,135,142,],[62,62,62,62,62,62,62,62,62,62,62,62,161,165,]),'add_bool_constant_to_dict':([59,68,],[95,114,]),'writtingloop':([43,119,],[73,150,]),'functiontype':([5,],[15,]),'loop':([7,32,],[39,39,]),}

_lr_goto = { }
for _k, _v in _lr_goto_items.items():
   for _x,_y in zip(_v[0],_v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = { }
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> main functionloop','program',2,'p_program','parser.py',13),
  ('main -> MAIN block','main',2,'p_main','parser.py',18),
  ('functionloop -> function functionloop','functionloop',2,'p_functionloop','parser.py',24),
  ('functionloop -> <empty>','functionloop',0,'p_functionloop','parser.py',25),
  ('function -> FUNCTION functiontype ID O_PARENTHESIS parameters C_PARENTHESIS block','function',7,'p_function','parser.py',29),
  ('functiontype -> VOID','functiontype',1,'p_functiontype','parser.py',40),
  ('functiontype -> BOOL','functiontype',1,'p_functiontype','parser.py',41),
  ('functiontype -> INT','functiontype',1,'p_functiontype','parser.py',42),
  ('functiontype -> FLOAT','functiontype',1,'p_functiontype','parser.py',43),
  ('functiontype -> STRING','functiontype',1,'p_functiontype','parser.py',44),
  ('type -> BOOL','type',1,'p_type','parser.py',50),
  ('type -> INT','type',1,'p_type','parser.py',51),
  ('type -> FLOAT','type',1,'p_type','parser.py',52),
  ('type -> STRING','type',1,'p_type','parser.py',53),
  ('parametertype -> BOOL','parametertype',1,'p_parametertype','parser.py',59),
  ('parametertype -> INT','parametertype',1,'p_parametertype','parser.py',60),
  ('parametertype -> FLOAT','parametertype',1,'p_parametertype','parser.py',61),
  ('parametertype -> STRING','parametertype',1,'p_parametertype','parser.py',62),
  ('block -> O_BRACKET statutesloop functionreturn C_BRACKET','block',4,'p_block','parser.py',68),
  ('functionreturn -> RETURN expression SEMICOLON','functionreturn',3,'p_functionreturn','parser.py',72),
  ('functionreturn -> <empty>','functionreturn',0,'p_functionreturn','parser.py',73),
  ('statutesloop -> statute statutesloop','statutesloop',2,'p_statutesloop','parser.py',78),
  ('statutesloop -> <empty>','statutesloop',0,'p_statutesloop','parser.py',79),
  ('statute -> init','statute',1,'p_statute','parser.py',83),
  ('statute -> condition','statute',1,'p_statute','parser.py',84),
  ('statute -> writting','statute',1,'p_statute','parser.py',85),
  ('statute -> loop','statute',1,'p_statute','parser.py',86),
  ('statute -> assignation','statute',1,'p_statute','parser.py',87),
  ('statute -> functioncall','statute',1,'p_statute','parser.py',88),
  ('assignation -> var_assign EQUALS add_equals expression SEMICOLON','assignation',5,'p_assignation','parser.py',92),
  ('writting -> PRINT O_PARENTHESIS writtingloop C_PARENTHESIS SEMICOLON','writting',5,'p_writting','parser.py',97),
  ('writtingloop -> expression optionalwritting','writtingloop',2,'p_writtingloop','parser.py',101),
  ('optionalwritting -> COMMA writtingloop','optionalwritting',2,'p_optionalwritting','parser.py',105),
  ('optionalwritting -> <empty>','optionalwritting',0,'p_optionalwritting','parser.py',106),
  ('init -> listinit','init',1,'p_init','parser.py',109),
  ('init -> normalinit','init',1,'p_init','parser.py',110),
  ('normalinit -> type var EQUALS add_equals expression equals_quadruple SEMICOLON','normalinit',7,'p_normalinit','parser.py',114),
  ('equals_quadruple -> <empty>','equals_quadruple',0,'p_equals_quadruple','parser.py',117),
  ('add_equals -> <empty>','add_equals',0,'p_add_equals','parser.py',126),
  ('listinit -> LIST type var EQUALS list SEMICOLON','listinit',6,'p_listinit','parser.py',131),
  ('list -> O_S_BRACKET listelements C_S_BRACKET','list',3,'p_list','parser.py',135),
  ('listelements -> constants optionalconstants','listelements',2,'p_listelements','parser.py',139),
  ('listelements -> <empty>','listelements',0,'p_listelements','parser.py',140),
  ('optionalconstants -> COMMA constants optionalconstants','optionalconstants',3,'p_optionalconstants','parser.py',143),
  ('optionalconstants -> <empty>','optionalconstants',0,'p_optionalconstants','parser.py',144),
  ('condition -> IF O_PARENTHESIS expression C_PARENTHESIS block else','condition',6,'p_condition','parser.py',148),
  ('else -> ELSE block','else',2,'p_else','parser.py',152),
  ('else -> <empty>','else',0,'p_else','parser.py',153),
  ('expression -> expression2 expressionoptional','expression',2,'p_expression','parser.py',157),
  ('expressionoptional -> logicop expression2 logic_op_quadruple','expressionoptional',3,'p_expressionoptional','parser.py',160),
  ('expressionoptional -> <empty>','expressionoptional',0,'p_expressionoptional','parser.py',161),
  ('expression2 -> exp expression2optional','expression2',2,'p_expression2','parser.py',164),
  ('expression2optional -> relop relop_quadruple exp','expression2optional',3,'p_expression2optional','parser.py',167),
  ('expression2optional -> <empty>','expression2optional',0,'p_expression2optional','parser.py',168),
  ('logicop -> AND','logicop',1,'p_logicop','parser.py',172),
  ('logicop -> OR','logicop',1,'p_logicop','parser.py',173),
  ('logic_op_quadruple -> <empty>','logic_op_quadruple',0,'p_logic_op_quadruple','parser.py',177),
  ('relop -> EQUALITY','relop',1,'p_relop','parser.py',184),
  ('relop -> GREATER','relop',1,'p_relop','parser.py',185),
  ('relop -> GREATER_EQUAL','relop',1,'p_relop','parser.py',186),
  ('relop -> LESS','relop',1,'p_relop','parser.py',187),
  ('relop -> LESS_EQUAL','relop',1,'p_relop','parser.py',188),
  ('relop -> DIFFERENT','relop',1,'p_relop','parser.py',189),
  ('relop_quadruple -> <empty>','relop_quadruple',0,'p_relop_quadruple','parser.py',193),
  ('exp -> term exp_quadruple exploop','exp',3,'p_exp','parser.py',200),
  ('exp_quadruple -> <empty>','exp_quadruple',0,'p_exp_quadruple','parser.py',203),
  ('exploop -> addsub exp','exploop',2,'p_exploop','parser.py',210),
  ('exploop -> <empty>','exploop',0,'p_exploop','parser.py',211),
  ('addsub -> SUM','addsub',1,'p_addsub','parser.py',214),
  ('addsub -> MINUS','addsub',1,'p_addsub','parser.py',215),
  ('term -> fact term_quadruple termloop','term',3,'p_term','parser.py',220),
  ('term_quadruple -> <empty>','term_quadruple',0,'p_term_quadruple','parser.py',223),
  ('termloop -> divmult term','termloop',2,'p_termloop','parser.py',230),
  ('termloop -> <empty>','termloop',0,'p_termloop','parser.py',231),
  ('divmult -> MULTIPLY','divmult',1,'p_divmult','parser.py',235),
  ('divmult -> DIVIDE','divmult',1,'p_divmult','parser.py',236),
  ('divmult -> MOD','divmult',1,'p_divmult','parser.py',237),
  ('fact -> varconst','fact',1,'p_fact','parser.py',242),
  ('fact -> O_PARENTHESIS add_o_parenthesis expression C_PARENTHESIS add_c_parenthesis','fact',5,'p_fact','parser.py',243),
  ('add_o_parenthesis -> <empty>','add_o_parenthesis',0,'p_add_o_parenthesis','parser.py',246),
  ('add_c_parenthesis -> <empty>','add_c_parenthesis',0,'p_add_c_parenthesis','parser.py',250),
  ('var_assign -> ID listaccess','var_assign',2,'p_var_assign','parser.py',254),
  ('var -> ID listaccess','var',2,'p_var','parser.py',264),
  ('listaccess -> O_S_BRACKET INTCONST C_S_BRACKET','listaccess',3,'p_listaccess','parser.py',280),
  ('listaccess -> <empty>','listaccess',0,'p_listaccess','parser.py',281),
  ('varconst -> varconstfunction','varconst',1,'p_varconst','parser.py',284),
  ('varconst -> constants','varconst',1,'p_varconst','parser.py',285),
  ('varconstfunction -> ID functionorlist','varconstfunction',2,'p_varconstfunction','parser.py',288),
  ('functionorlist -> O_S_BRACKET INTCONST C_S_BRACKET','functionorlist',3,'p_functionorlist','parser.py',291),
  ('functionorlist -> O_PARENTHESIS parametersinput C_PARENTHESIS','functionorlist',3,'p_functionorlist','parser.py',292),
  ('functionorlist -> <empty>','functionorlist',0,'p_functionorlist','parser.py',293),
  ('constants -> INTCONST add_int_constant_to_dict','constants',2,'p_constants','parser.py',297),
  ('constants -> FLOATCONST add_float_constant_to_dict','constants',2,'p_constants','parser.py',298),
  ('constants -> STRINGCONST add_string_constant_to_dict','constants',2,'p_constants','parser.py',299),
  ('constants -> booleanconst','constants',1,'p_constants','parser.py',300),
  ('booleanconst -> TRUE add_bool_constant_to_dict','booleanconst',2,'p_booleanconst','parser.py',304),
  ('booleanconst -> FALSE add_bool_constant_to_dict','booleanconst',2,'p_booleanconst','parser.py',305),
  ('add_int_constant_to_dict -> <empty>','add_int_constant_to_dict',0,'p_add_int_constant_to_dict','parser.py',308),
  ('add_float_constant_to_dict -> <empty>','add_float_constant_to_dict',0,'p_add_float_constant_to_dict','parser.py',312),
  ('add_string_constant_to_dict -> <empty>','add_string_constant_to_dict',0,'p_add_string_constant_to_dict','parser.py',316),
  ('add_bool_constant_to_dict -> <empty>','add_bool_constant_to_dict',0,'p_add_bool_constant_to_dict','parser.py',320),
  ('loop -> whileloop','loop',1,'p_loop','parser.py',325),
  ('loop -> timesloop','loop',1,'p_loop','parser.py',326),
  ('whileloop -> WHILE O_PARENTHESIS expression C_PARENTHESIS block','whileloop',5,'p_whileloop','parser.py',330),
  ('timesloop -> TIMES O_PARENTHESIS INTCONST C_PARENTHESIS block','timesloop',5,'p_timesloop','parser.py',334),
  ('functioncall -> ID O_PARENTHESIS parametersinput C_PARENTHESIS SEMICOLON','functioncall',5,'p_functioncall','parser.py',338),
  ('parametersinput -> expression parametersinputloop','parametersinput',2,'p_parametersinput','parser.py',342),
  ('parametersinput -> <empty>','parametersinput',0,'p_parametersinput','parser.py',343),
  ('parametersinputloop -> COMMA expression parametersinputloop','parametersinputloop',3,'p_parametersinputloop','parser.py',347),
  ('parametersinputloop -> <empty>','parametersinputloop',0,'p_parametersinputloop','parser.py',348),
  ('parameters -> parameterinit parametersloop','parameters',2,'p_parameters','parser.py',352),
  ('parameters -> <empty>','parameters',0,'p_parameters','parser.py',353),
  ('parameterinit -> parametertype ID','parameterinit',2,'p_parameterinit','parser.py',356),
  ('parametersloop -> COMMA parameterinit parametersloop','parametersloop',3,'p_parametersloop','parser.py',367),
  ('parametersloop -> <empty>','parametersloop',0,'p_parametersloop','parser.py',368),
]
